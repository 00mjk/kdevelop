#ifndef INC_PascalStoreWalkerTokenTypes_hpp_
#define INC_PascalStoreWalkerTokenTypes_hpp_

/* $ANTLR 2.7.2: "pascal.tree.g" -> "PascalStoreWalkerTokenTypes.hpp"$ */
struct PascalStoreWalkerTokenTypes {
	enum {
		EOF_ = 1,
		BLOCK = 4,
		IDLIST = 5,
		ELIST = 6,
		FUNC_CALL = 7,
		PROC_CALL = 8,
		SCALARTYPE = 9,
		TYPELIST = 10,
		VARIANT_TAG = 11,
		VARIANT_TAG_NO_ID = 12,
		VARIANT_CASE = 13,
		CONSTLIST = 14,
		FIELDLIST = 15,
		ARGDECLS = 16,
		VARDECL = 17,
		ARGDECL = 18,
		ARGLIST = 19,
		TYPEDECL = 20,
		FIELD = 21,
		DOT = 22,
		LIBRARY = 23,
		SEMI = 24,
		EXPORTS = 25,
		COMMA = 26,
		LITERAL_index = 27,
		LITERAL_name = 28,
		USES = 29,
		UNIT = 30,
		END = 31,
		INTERFACE = 32,
		IMPLEMENTATION = 33,
		BEGIN = 34,
		PROGRAM = 35,
		LPAREN = 36,
		RPAREN = 37,
		INITIALIZATION = 38,
		FINALIZATION = 39,
		LABEL = 40,
		CONST = 41,
		RESOURCESTRING = 42,
		EQUAL = 43,
		TYPE = 44,
		VAR = 45,
		COLON = 46,
		PROCEDURE = 47,
		FORWARD = 48,
		FUNCTION = 49,
		ARRAY = 50,
		OF = 51,
		EXTERNAL = 52,
		PUBLIC = 53,
		ALIAS = 54,
		INTERRUPT = 55,
		REGISTER = 56,
		PASCAL = 57,
		CDECL = 58,
		STDCALL = 59,
		POPSTACK = 60,
		SAVEREGISTERS = 61,
		INLINE = 62,
		SAFECALL = 63,
		NEAR = 64,
		FAR = 65,
		NUM_INT = 66,
		INTEGER = 67,
		SHORTINT = 68,
		SMALLINT = 69,
		LONGINT = 70,
		INT64 = 71,
		BYTE = 72,
		WORD = 73,
		CARDINAL = 74,
		QWORD = 75,
		BOOLEAN = 76,
		BYTEBOOL = 77,
		LONGBOOL = 78,
		CHAR = 79,
		DOTDOT = 80,
		ASSIGN = 81,
		REAL = 82,
		SINGLE = 83,
		DOUBLE = 84,
		EXTENDED = 85,
		COMP = 86,
		STRING = 87,
		LBRACK = 88,
		RBRACK = 89,
		PACKED = 90,
		RECORD = 91,
		CASE = 92,
		SET = 93,
		FILE = 94,
		POINTER = 95,
		OBJECT = 96,
		VIRTUAL = 97,
		ABSTRACT = 98,
		PRIVATE = 99,
		PROTECTED = 100,
		CONSTRUCTOR = 101,
		DESTRUCTOR = 102,
		CLASS = 103,
		OVERRIDE = 104,
		MESSAGE = 105,
		PUBLISHED = 106,
		PROPERTY = 107,
		LITERAL_read = 108,
		LITERAL_write = 109,
		DEFAULT = 110,
		LITERAL_nodefault = 111,
		LE = 112,
		GE = 113,
		LTH = 114,
		GT = 115,
		NOT_EQUAL = 116,
		IN = 117,
		IS = 118,
		PLUS = 119,
		MINUS = 120,
		OR = 121,
		XOR = 122,
		STAR = 123,
		SLASH = 124,
		DIV = 125,
		MOD = 126,
		AND = 127,
		SHL = 128,
		SHR = 129,
		NOT = 130,
		AT = 131,
		PLUSEQ = 132,
		MINUSEQ = 133,
		STAREQ = 134,
		SLASHQE = 135,
		GOTO = 136,
		IF = 137,
		THEN = 138,
		ELSE = 139,
		WHILE = 140,
		DO = 141,
		REPEAT = 142,
		UNTIL = 143,
		FOR = 144,
		TO = 145,
		DOWNTO = 146,
		WITH = 147,
		LBRACK2 = 148,
		RBRACK2 = 149,
		OPERATOR = 150,
		RAISE = 151,
		TRY = 152,
		EXCEPT = 153,
		FINALLY = 154,
		ON = 155,
		STRING_LITERAL = 156,
		CHR = 157,
		NIL = 158,
		NUM_REAL = 159,
		IDENT = 160,
		ABSOLUTE = 161,
		AS = 162,
		ASM = 163,
		ASSEMBLER = 164,
		BREAK = 165,
		CONTINUE = 166,
		DISPOSE = 167,
		EXPORT = 168,
		EXIT = 169,
		FALSE = 170,
		INHERITED = 171,
		NEW = 172,
		SELF = 173,
		TRUE = 174,
		METHOD = 175,
		ADDSUBOR = 176,
		ASSIGNEQUAL = 177,
		SIGN = 178,
		FUNC = 179,
		NODE_NOT_EMIT = 180,
		MYASTVAR = 181,
		LF = 182,
		LCURLY = 183,
		RCURLY = 184,
		WS = 185,
		COMMENT_1 = 186,
		COMMENT_2 = 187,
		EXPONENT = 188,
		NULL_TREE_LOOKAHEAD = 3
	};
};
#endif /*INC_PascalStoreWalkerTokenTypes_hpp_*/
