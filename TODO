High priority tasks!
====================

1. Fixing major/annoying bugs
-----------------------------

* konsole part:
  - cd's when selecting a file, but doesn't when selecting a dir
    desired: a menu option to "cd" to that directory

* automake part:
  - Should be able to DND files from other targets / file list / konq
    to add to targets.

* UI bugs:
  - editor options dialog missing when all views are closed
  - If you click an error in the output view, "Next Error"/"Previous Error"
    should then start from that point.
  - Messages in status bar would look nicer if they appeared with the same
    border as other items.
  - Browser tool bar should truncate long menu entries so it doesn't take so
    much space.
  - Open last open panel in the sidebars on startup, if possible (should be
    stored in project session file, not globally)
  - Tag file creation fails silently if ctags is not installed

* misc:
  - Project name should be able to contain spaces

* code completion:
  - remove the annoying conflict from automatic word completion(abbrevpart)
    and language specific code completion(like the one in cppsupport)

* c++ debugger
  - Fix "core file" handling
  - Fix "attach to" handling
  - breakpoints can disappear at odd times.
  - when the target program crashes, the debugger can't be started again. (intermittant?)
  - break on method() - could have multiple methods which require a choice. How to handle this?
  
2. KDevelop 2 compatibility
---------------------------

These are things that must be accomplished before we can say that
gideon >= kdevelop 2.x UI-wise and functionality-wise!

* general UI issues:
  - toplevel UI mode broken concerning to the accels
  - [Modified] missing in mainframe caption
  - captions missing for toolbar buttons

* doctreeview:
  - use kdoc to update Qt/KDE docs

* interoperability:
  - import/export 2.1-projects<-->Gideon-projects

* classview:
  - delete method/class menu items

Solve the regression bugs. These are the ones maked with priority
"HI" in the bug database (bugs.kde.org)

3. Missing UIs (other than 2)
-----------------------------

UIs that intuitively ought to be there

* automakemanager:
  - install, etc. targets besides "build" for subproject menus & toolbar

* IDEAl UI-mode:
   -> Extend KDevPlugin-API in order to have a preferred border for at least the selection parts
       (Automake Manager, Class Browser, File Groups, etc...)


Other Issues
============


4. New features
---------------

* short-term:

  - improve documentation browsing

* mid-term:

  - use mimetype to determine code files, not extension
  - version control: integration with Cervisia?

* long-term:

  - write a lot more plugins ;) ideas here for which ones
  - sourcenav database and navigation tools

* c++ debugger
  - variable widget
    . set variable by editing the value in the tree
    . cast value by editing the type in the tree
  - disassembly
    . add breakpoint display
    . set breakpoint by selecting a line as in the edit window.
    . allow scrolling of disassembled code about and below current limits.
    . add source to disassembled code as comments
    . basically just re-work the whole disassemble window :)
    
5. Code refactoring/improvements
--------------------------------

* architecture:
  - implement multiple-views per document

* modularity:
  - make sure all lib interfaces are available via DCOP

* improvement:
  - find a nicer way to remove dynamic menu entries from context menus
  - make all functions using filenames use KURLs instead

* optimization:

* Import existing directory: Should be named "Import existing project" and more intuitive (wizard-like)
  - Question from the wizard: "I have found C++ files in your project directory. Should C++ be the primary language
  of your project?" User: [Yes/No] => Next Step...
  - Something intuitive for the binary/-ies (for debugger and execution of program), libtool ([Yes/No] for the debugger), build tool
  (qmake, automake,...?), etc.., too.


6. Misc.
--------

* Update configure.in when sub projects are added and the
  project doesn't use am_edit

* Implement Add Plugin

* Show .po files in project management

* Distinguish vanilla c++ support from c++ + Qt extensions
  and show signals/slots in the class view only with Qt.

* Perhaps use konsole part for the application frontend

* Check if a man page exists before offering the context menu
  item 'Goto manpage'

* Show intro page on startup

