High priority tasks!
====================

1. Fixing major/annoying bugs
-----------------------------

* crashes
  - crashes when quit with 'close window' button

* konsole part:
  - cd's when selecting a file, but doesn't when selecting a dir
    desired: a menu option to "cd" to that directory
  - CTRL-C doesn't work

* UI bugs
  - GUI redraw blocked on Gideon startup for the time of project loading 
  - debugger toolview are visible when the debugger isn't active
  - in Tabbed Document Interface, sometimes new views will be opened in
    the Output ToolView!
  - new editor views are added always maximized, even in non-maximized
    UI Childframe mode, view-taskbar missing
  - docking state of all toolviews not restored after Gideon restart
  - editor options dialog missing when all views are closed
  - editor view must detect and warn about changes made outside gideon
  - messages view should hold place when scrolled but new output is
    being added
      
* misc
  - Printing files not supported
  - Trying Java projects results in mysterious error messages

2. KDevelop 2 compatibility
---------------------------

These are things that must be accomplished before we can say that
gideon >= kdevelop 2.x UI-wise and functionality-wise!

* general UI issues
  - new file: a File menu to create a new file 
  - no possibility of bringing back closed toolviews
  - no possibility of switching toolviews on and off
  - toplevel UI mode broken
  - Window menu allows switching files only; standard functionality missing
  - [Modified] missing in mainframe caption

* cppsupport:
  - new class dialog belongs in File menu

* doctreeview:
  - use kdoc to update Qt/KDE docs
  - navigation toolbar

* editing:
  - setting breakpoints in qeditor texteditor (the only one that is
    working here) impossible
  - RMB on qeditor doesn't have the 'Switch to declaration/definition'
    functionality

* build/configuration:
  - cross-compiling feature missing
    
* interoperability
  - import/export 2.1-projects<-->Gideon-projects
  - version control: integration with Cervisia??

3. Missing UIs (other than 2)
-----------------------------

UIs that intuitively ought to be there

automakemanager:
 * install, etc. targets besides "build" for subproject menus & toolbar

4. Small Annoyances
-------------------

* If you click an error in the output view, "Next Error"/"Previous Error"
  should then start from that point.
* Next/Previous error should ignore lines that aren't actual errors, like
  "(Each undeclared identifier is reported only once for each function it appears in.)"
* Messages in status bar would look nicer if they appeared with the same
  border as other items.
* Sometimes breakpoints don't get set properly until you pause the debugged app.
* Debug menu items not properly enabled/disabled.
* Browser tool bar should truncate long menu entries so it doesn't take so
  much space.
  
New features
============
  
Short-Term:

mhk: move function areas of kdevcore into separate classes
mhk: improve documentation browsing
mhk: find a nicer way to remove dynamic menu entries from context menus

Mid-Term:

mhk: make all functions using filenames use KURLs instead
mhk: implement multiple-views per document
mhk: make the KDevPart template work standalone
mhk: add doc comments to the lib files I changed ;)
mhk: load plugins dynamically
mhk: valgrind!
mhk: make sure all lib interfaces are available via DCOP
mhk: use mimetype to determine code files, not extension

Long-Term:

all: write a lot more plugins ;)


Unsorted:

* Update configure.in when sub projects are added and the
  project doesn't use am_edit

* Implement removing sub projects.

* Implement Add Plugin

* Show .po files in project management

* Distinguish vanilla c++ support from c++ + Qt extensions
  and show signals/slots in the class view only with Qt.

* Perhaps use konsole part for the application frontend

* Check if a man page exists before offering the context menu
  item 'Goto manpage'

* Show intro page on startup

