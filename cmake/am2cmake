#!/usr/bin/env ruby


NoTarget   = 0
Executable = 1
StaticLib  = 2
SharedLib  = 3
Part       = 4

class BuildTarget
   def initialize(name, type)
      @name=name
      @type=type
      @sources=Array.new
      @uis=Array.new
      @skels=Array.new
      @am=Array.new
   end

   def addSourceFiles(files)
      files.split.each do |currentSource|
         if currentSource =~ /^\S+\.ui$/
            @uis.push(currentSource)
         elsif currentSource =~ /^(\S+)\.skel$/
            @skels.push($1+".h")
         else
            @sources.push(currentSource)
         end
      end
   end

   attr_reader :name, :type, :sources, :uis, :skels

end

class CMakeFile
   def initialize(amFile)
      @amFile=amFile
      amFile =~ /(.*)Makefile.am/
      @path=$1
      @listsFile=@path+"CMakeLists.txt"

      @targets=Array.new

      @includeDirs=Array.new
      @subDirs=Array.new

      parseFile
   end

   def parseFile
      @lines=IO.readlines(@amFile)
      cummLine=""
      appendNextLine=false
      for line in @lines do
         appendNextLine=(line[line.length-2, 1]=='\\')

         if appendNextLine
            cummLine+=" "+line[0, line.length-2]
         else
            cummLine+=" "+line[0, line.length-1]
            if not cummLine.empty?
               evalLine(cummLine)
               cummLine=""
            end
         end
      end
   end

   def findTarget(line)
      type=SharedLib
      if line =~ /^\s*lib(\S+)_la_\S+\s*=\s*\S+.*$/
         targetName=$1
         type=SharedLib
      elsif line =~ /^\s*(\S+)_\S+\s*=\s*\S+.*$/
         targetName=$1
         type=Executable
      end

      @targets.each do |buildTarget|
         if (type==Executable)
            if (buildTarget.type==Executable) && (buildTarget.name==targetName)
               return buildTarget
            end
         else
            if (buildTarget.name==targetName)
               return buildTarget
            end
         end
      end

      return BuildTarget.new("Dummy", NoTarget)
   end

   def addTarget(line)
      type=NoTarget
      targets=""

      if line =~ /^\s*lib_LTLIBRARIES\s*=\s*(\S+.*)/
         targets=$1
         type=SharedLib
      elsif line =~ /^\s*noinst_LTLIBRARIES\s*=\s*(\S+.*)/
         targets=$1
         type=StaticLib
      elsif line =~ /^\s*kde_module_LTLIBRARIES\s*=\s*(\S+.*)/
         targets=$1
         type=Part
      elsif line =~ /^\s*bin_PROGRAMS\s*=\s*(\S+.*)$/
         targets=$1
         type=Executable
      else
         return false
      end

      if type==Executable
         targets.split.each{ |current| @targets.push(BuildTarget.new(current, type)) }
      else
         targets.split.each{ |current| @targets.push(BuildTarget.new($1, type)) if current =~ /lib(\S+)\.la/  }
      end
      return true
   end

   def addSourcesToTarget(line)
      buildTarget=findTarget(line)
      if buildTarget.type==NoTarget
         return
      end

      if buildTarget.type==Executable
         line =~ /^\s*\S+_SOURCES\s*=\s*(\S+.*)$/
      else
         line =~ /^\s*lib\S+_la_SOURCES\s*=\s*(\S+.*)$/
      end
      buildTarget.addSourceFiles($1)
   end

   def addIncludeDirectories(includeDirs)
      includeDirs.split.each do |dir|
         if dir =~ /^\s*-I\$\(top_srcdir\)(\S+)/
            @includeDirs.push("${CMAKE_SOURCE_DIR}"+$1)
         end
      end
   end

   def addInstallFiles(prefix, files)
      INSTALL
   end

   def evalLine(line)
      if line =~ /^\s*METASOURCES\s*=\s*AUTO\s*$/
         @automoc=true
         return
      end

      if addTarget(line)
         return
      end

      if line =~ /^\s*\S+_SOURCES\s*=/
         addSourcesToTarget(line)
         return
      end

      if line =~ /^\s*INCLUDES\s*=\s*(\S+.*)$/
         addIncludeDirectories($1)
         return
      end

      if line =~ /^\s*(\S+)_DATA\s*=\s*(\S+.*)$/
         addInstallFiles($1, $2)
         return
      end

      if line =~ /^\s*SUBDIRS\s*=\s*(\S+.*)$/
         ($1).split.each{|dir| @subDirs.push(dir) if dir!="."}
      end

   end

   def createListsFile
      prevLines=Array.new
#      if FileTest.exists?(@listsFile)
##         printf("file exists: %s\n", @listsFile)
#         prevLines=File.new(@listsFile, "r").readlines
#      end

      file=File.new(@listsFile, "w+");
      if not @subDirs.empty?
         @subDirs.each{ |dir| file.printf("ADD_SUBDIRECTORY( %s ) \n", dir)}
         file.printf(")\n")
      end
      if not @includeDirs.empty?
         file.printf("INCLUDE_DIRECTORIES( ")
         @includeDirs.each{ |dir| file.printf("%s ", dir) }
         file.printf(" ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR} )\n\n")
      end
      @targets.each do |buildTarget|
         if buildTarget.type==SharedLib
            srcsName=buildTarget.name+"_LIB_SRCS"
         elsif buildTarget.type==StaticLib
            srcsName=buildTarget.name+"_STAT_SRCS"
         elsif buildTarget.type==Part
            srcsName=buildTarget.name+"_PART_SRCS"
         else
            srcsName=buildTarget.name+"_SRCS"
         end
         uisName=buildTarget.name+"_UI"
         skelsName=buildTarget.name+"_DCOP_SRCS"

         if not buildTarget.sources.empty?
            file.printf("SET(%s\n", srcsName)
            buildTarget.sources.each{ |currentFile| file.printf("%s\n", currentFile)}
            file.printf(")\n\n")
            if @automoc
               file.printf("KDE_AUTOMOC(${%s})\n\n", srcsName)
            end
         end

         if not buildTarget.uis.empty?
            file.printf("SET( %s\n", uisName)
            buildTarget.uis.each{ |currentFile| file.printf("%s\n", currentFile)}
            file.printf(")\n\n")

            file.printf("KDE_ADD_UI_FILES(%s ${%s} )\n\n", srcsName, uisName)
         end

         if not buildTarget.skels.empty?
            file.printf("SET( %s\n", skelsName)
            buildTarget.skels.each{ |currentFile| file.printf("%s\n", currentFile)}
            file.printf(")\n\n")

            file.printf("KDE_ADD_DCOP_SKELS(%s ${%s})\n\n", srcsName, skelsName)
         end

         if buildTarget.type==SharedLib
            file.printf("ADD_LIBRARY(%s SHARED ${%s})\n\n", buildTarget.name, srcsName)
            file.printf("TARGET_LINK_LIBRARIES(%s ${QT_AND_KDECORE_LIBS})\n\n", buildTarget.name)
            file.printf("INSTALL_TARGETS(/lib %s )\n\n", buildTarget.name)
         elsif buildTarget.type==StaticLib
            file.printf("ADD_LIBRARY(%s STATIC ${%s})\n\n", buildTarget.name, srcsName)
         elsif buildTarget.type==Part
            file.printf("ADD_LIBRARY(%s MODULE ${%s})\n\n", buildTarget.name, srcsName)
            file.printf("KDE_CREATE_LIBTOOL_FILE (${%s})\n\n", buildTarget.name)
            file.printf("TARGET_LINK_LIBRARIES(%s ${QT_AND_KDECORE_LIBS})\n\n", buildTarget.name)
            file.printf("INSTALL_TARGETS(/lib/kde3 %s )\n\n", buildTarget.name)
#            file.printf("SET_TARGET_PROPERTIES(%s PROPERTIES PREFIX \"\"\n\n")
         else
            file.printf("ADD_EXECUTABLE(%s ${%s})\n\n", buildTarget.name, srcsName)
            file.printf("TARGET_LINK_LIBRARIES(%s ${QT_AND_KDECORE_LIBS})\n\n", buildTarget.name)
            file.printf("INSTALL_TARGETS(/bin %s )\n\n", buildTarget.name)

         end

      end
      file.printf("\n\n#original Makefile.am contents follow:\n\n")
      @lines.each{ |line| file.printf("#%s", line)}
      if !prevLines.empty?
         file.printf("\n#######################\n#previous CMakeLists.txt contents follow:\n\n")
         prevLines.each{ |line| file.printf("#%s", line)}
      end
   end
end

def convertAmFile(amFile)
   cmake=CMakeFile.new(amFile)
   cmake.createListsFile
end

Dir["**/Makefile.am"].each{ |currentFile| convertAmFile(currentFile)}


