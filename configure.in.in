#MIN_CONFIG(3.0.0)

AM_INIT_AUTOMAKE(kdevelop, 3.0.0a7)
KDE_NEED_FLEX

KDEV_CHECK_DOCBASE
KDEV_CHECK_SCRIPTING
#KDEV_CHECK_JAVA
KDEV_CHECK_SVN
KDEV_CHECK_QEDITOR
KDEV_CHECK_COMPAT
KDEV_CHECK_BDB
KDEV_CHECK_MDI
#KDEV_PATH_PYTHONDOCDIR
#KDEV_PATH_PHPDOCDIR
#KDEV_PATH_GNUSTEPDOCDIR
#KDEV_PATH_GTKDOCDIR
KDEV_PATH_QTDOC
KDEV_PATH_KDELIBSDOXY
KDEV_PATH_KDELIBSDOC


AC_ARG_ENABLE(ada, 		[  --enable-ada, 		enable ada language ], with_ada=$enableval, with_ada=yes)
AM_CONDITIONAL(include_ada, test -n "$with_ada")

AC_ARG_ENABLE(python, 		[  --enable-python, 		enable python language ], with_python=$enableval, with_python=yes)
AM_CONDITIONAL(include_python, test -n "$with_python")

AC_ARG_ENABLE(cpp, 		[  --enable-cpp, 		enable c++ language  ], with_cpp=$enableval, with_cpp=yes)
AM_CONDITIONAL(include_cpp, test -n "$with_cpp")

AC_ARG_ENABLE(perl, 		[  --enable-perl, 		enable perl language ], with_perl=$enableval, with_perl=yes)
AM_CONDITIONAL(include_perl, test -n "$with_perl")

AC_ARG_ENABLE(php, 		[  --enable-php, 		enable php language ], with_php=$enableval, with_php=yes)
AM_CONDITIONAL(include_php, test -n "$with_php")

AC_ARG_ENABLE(fortran, 		[  --enable-fortran, 		enable fortran language ], with_fortran=$enableval, with_fortran=yes)
AM_CONDITIONAL(include_fortran, test -n "$with_fortran")

AC_ARG_ENABLE(sql, 		[  --enable-sql, 		enable sql language ], with_sql=$enableval, with_sql=yes)
AM_CONDITIONAL(include_sql, test -n "$with_sql")

AC_ARG_ENABLE(java, 		[  --enable-java, 		enable java language ], with_java=$enableval, with_java=yes)
AM_CONDITIONAL(include_java, test -n "$with_java")

AC_ARG_ENABLE(ruby, 		[  --enable-ruby, 		enable ruby language ], with_ruby=$enableval, with_ruby=yes)
AM_CONDITIONAL(include_ruby, test -n "$with_ruby")

AC_ARG_ENABLE(bash, 		[  --enable-bash, 		enable bash language ], with_bash=$enableval, with_bash=yes)
AM_CONDITIONAL(include_bash, test -n "$with_bash")

AC_ARG_ENABLE(pascal, 		[  --enable-pascal, 		enable pascal language ], with_pascal=$enableval, with_pascal=yes)
AM_CONDITIONAL(include_pascal, test -n "$with_pascal")

AC_ARG_ENABLE(autoproject, 	[  --enable-autoproject, 	enable automake project manager ], with_autoproject=$enableval, with_autoproject=yes)
AM_CONDITIONAL(include_autoproject, test -n "$with_autoproject")

AC_ARG_ENABLE(scriptproject, 	[  --enable-scriptproject, 	enable script project manager ], with_scriptproject=$enableval, with_scriptproject=yes)
AM_CONDITIONAL(include_scriptproject, test -n "$with_scriptproject")

AC_ARG_ENABLE(trollproject, 	[  --enable-trollproject, 	enable troll project manager ], with_trollproject=$enableval, with_trollproject=yes)
AM_CONDITIONAL(include_trollproject, test -n "$with_trollproject")

AC_ARG_ENABLE(customproject, 	[  --enable-customproject, 	enable custom project manager ], with_customproject=$enableval, with_customproject=yes)
AM_CONDITIONAL(include_customproject, test -n "$with_customproject")

KDE_CHECK_HEADER(cvsservice_stub.h, [cvsservice_stub_h="found"], [cvsservice_stub_h="none"])
AM_CONDITIONAL(include_cvsservice, test "$cvsservice_stub_h" = "found")

AC_ARG_ENABLE(cvs, 		[  --enable-cvs, 		enable cvs support ], with_cvs=$enableval, with_cvs=yes)
AM_CONDITIONAL(include_cvs, test -n "$with_cvs")

AC_ARG_ENABLE(perforce, 	[  --enable-perforce, 		enable perforce support ], with_perforce=$enableval, with_perforce=yes)
AM_CONDITIONAL(include_perforce, test -n "$with_perforce")

AC_ARG_ENABLE(clearcase, 	[  --enable-clearcase, 		enable clearcase support ], with_clearcase=$enableval, with_clearcase=yes)
AM_CONDITIONAL(include_clearcase, test -n "$with_clearcase")

AC_ARG_ENABLE(vba, 		[  --enable-vba, 		enable visualboy advance support ], with_vba=$enableval, with_vba=yes)
AM_CONDITIONAL(include_vba, test -n "$with_vba")


AC_PATH_PROG(DOT_FOUND, dot, no)
AC_CHECK_PROG(gmake_prog, gmake, gmake, make)
AC_CHECK_PROGS(TAR, gnutar gtar tar, [AM_MISSING_PROG(tar)])
AC_DEFINE_UNQUOTED(MAKE_COMMAND, "$gmake_prog", [GNU make command])

CXXFLAGS="$CXXFLAGS $KDE_DEFAULT_CXXFLAGS"

KDE_INIT_DOXYGEN([KDevelop], [Version $VERSION])
