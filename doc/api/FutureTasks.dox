/** \file FutureTasks.dox
  * \brief Future tasks and ideas for the next release of KDevelop
  */
/** \page FutureTasks Future tasks and ideas for the next release of KDevelop

\section adymoIdeas Ideas for KDevelop > 3.0:
Create base classes for language support parts:
  - AntlrLanguageSupport
  - AntlrBackgroundParser
  - AntlrProblemReporter

Same for:
  - YaccLanguageSupport
  - YaccBackgroundParser
  - YaccProblemReporter

There is a possibility to create even something like
  - LanguageSupportBase

Look at java, pascal and ada support parts to get more inspiration.
There should be base classes for ada, java and pascal language supports - too many code duplication.


Another tasks:
  - DocTreeView
    - Implement plugin system for doctreeview.
    - improve documentation browsing
    .
  - use mimetype to determine code files, not extension
  - write a lot more plugins ;) ideas here for which ones
  - sourcenav database and navigation tools
  - c++ debugger
    - variable widget
      - set variable by editing the value in the tree
      - cast value by editing the type in the tree
      .
    - disassembly
      - add breakpoint display
      - set breakpoint by selecting a line as in the edit window
      - allow scrolling of disassembled code about and below current limits
      - add source to disassembled code as comments
      - basically just re-work the whole disassemble window :)
      .
    - Fix "core file" handling
    - Fix "attach to" handling
    - Breakpoints can disappear at odd times
    - When the target program crashes, the debugger can't be started again. (intermittant?)
    - Break on method() - could have multiple methods which require a choice. How to handle this?
    .
  - Implement language-dependant plugin system for classview:
    - namespaces/classes/functions are not always applicable to a language, we need a way to correctly
      fill a class view and combo boxes - only a language support can do that properly.
    .
  - Custom actions for groups, targets and files for project managers:
    - any menu item should be a KAction plugged into KPopupMenu, also we need to define shortcuts for any such action,
      also we should make sure those actions are properly executed from a shortcut.
    .

\section codereftodo Code refactoring/improvements
  - architecture:
    -implement multiple-views per document
    .
  - modularity:
    - make sure all lib interfaces are available via DCOP</li>
    .
  - improvement:
    - find a nicer way to remove dynamic menu entries from context menus
    - make all functions using filenames use KURLs instead
    .
  - optimization:
    - Import existing directory: Should be named "Import existing project"
      and more intuitive (wizard-like)
      - Question from the wizard: "I have found C++ files in your
        project directory. Should C++ be the primary language of your
        project?" User: [Yes/No] =&gt; Next Step...
      - Something intuitive for the binary/-ies (for debugger and
        execution of program), libtool ([Yes/No] for the debugger), build
        tool (qmake, automake,...?), etc.., too.
      .
    .


\section misctodo Misc.
  - Update configure.in when sub projects are added and the project
    doesn't use am_edit
  - Implement Add Plugin
  - Show .po files in project management
  - Distinguish vanilla c++ support from c++ + Qt extensions and show
    signals/slots in the class view only with Qt.
  - Check if a man page exists before offering the context menu item 'Goto manpage'
  - konsole part
    - Perhaps use konsole part for the application frontend
    - cd's when selecting a file, but doesn't when selecting a dir,
      desired: a menu option to "cd" to that directory
    .
  - automake part
    - Should be able to DND files from other targets / file list /
      konq to add to targets
    .
  - UI bugs
    - Editor options dialog missing when all views are closed
    - If you click an error in the output view, "Next Error"/"Previous
      Error" should then start from that point
    - Messages in status bar would look nicer if they appeared with
      the same border as other items
    - Browser tool bar should truncate long menu entries so it doesn't
      take so much space
    - Tag file creation fails silently if ctags is not installed
    .

*/
