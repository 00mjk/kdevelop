<chapter id="setup">

<chapterinfo>
  <authorgroup>
    <author><firstname>Bernd</firstname><surname>Pol</surname></author>
    <!-- ROLES_OF_TRANSLATORS -->
  </authorgroup>
</chapterinfo>

<title>Configuring &kdevelop;</title>

<para>
&kdevelop; is a very powerful and flexible IDE which offers many ways to tailor it to your needs. To start configuration select <menuchoice><guimenu>Settings</guimenu><guimenuitem>Configure KDevelop...</guimenuitem></menuchoice>. This will cause the configuration dialog to pop up consisting of a selection window to the left and the configuration dialog on the right hand side whose contents will vary upon the configuration item you selected.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-select.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Select a configuration item
    </para></caption>
  </mediaobject>
</screenshot>

<para>
We will discuss these configurations in a different order, split up into the main topics of <link linkend="setup-general">General Configuration</link>, <link linkend="setup-docu">Configuring the Documentation Tree</link>, and <link linkend="setup-advanced">Advanced Configuration</link> which makes for a more intuitive reading.
</para>
<para>
If you want directly look up a certain configuration item use one of the following links.
</para>
<simplelist>
  <member><link linkend="setup-main">General</link></member>
  <member><link linkend="setup-plugins">Plugins</link></member>
  <member><link linkend="setup-format">Source Formatter</link></member>
  <member><link linkend="setup-ui">User Interface</link></member>
  <member><link linkend="setup-editor">Editor</link></member>
  <member><link linkend="setup-abbrev">Abbreviations</link></member>
  <member><link linkend="setup-menu-standard">Tools Menu</link></member>
  <member><link linkend="setup-menu-external">External Tools</link></member>
  <member><link linkend="setup-snippets">Code Snippets</link></member>
  <member><link linkend="setup-fileselector">File Selector</link></member>
  <member><link linkend="setup-docu">Documentation Tree</link></member>
</simplelist>

<sect1 id="setup-general">
<title>General Configuration</title>

<para>
General configuration concerns the more common tasks of tailoring &kdevelop; as there are:
</para>
<itemizedlist>
  <listitem><para>
  <link linkend="setup-main">General Setup</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-ui">Selecting the User Interface</link>
  </para></listitem>
  <listitem>
    <para>
    Source Edit Tasks
    </para>
    <itemizedlist>
      <listitem><para>
      <link linkend="setup-editor">Selecting an Editor</link>
      </para></listitem>
      <listitem><para>
      <link linkend="setup-format">Selecting a Source Format Style</link>
      </para></listitem>
      <listitem><para>
      <link linkend="setup-snippets">Setting Up the Code Snippets Tool</link>
      </para></listitem>
    </itemizedlist>
  </listitem>
  <listitem><para>
  <link linkend="setup-fileselector">Configuring the File Selector</link>
  </para></listitem>
</itemizedlist>

<sect2 id="setup-main">
<title>General Setup</title>

<para>
The <guilabel>General</guilabel> configuration dialog allows you to define some basic &kdevelop; behaviour which seldom will change in everyday work. This concerns:
</para>
<itemizedlist>
  <listitem>
    <para>
    General project options as
    </para>
    <itemizedlist>
      <listitem><para>
      defining a <link linkend="setup-main-projects">default parent directory</link> &kdevelop; shall use for new projects.
      </para></listitem>
       <listitem><para>
      deciding whether you want &kdevelop; to <link linkend="setup-main-preload">automatically load</link> the project you last worked on.
      </para></listitem>
   </itemizedlist>
  </listitem>
  <listitem>
    <para>
    Selecting a font for the most commonly used output view windows, namely
    </para>
    <itemizedlist>
      <listitem><para>
      the <link linkend="setup-main-messages-font">Messages Output View</link> &kdevelop; uses to communicate &eg; compilation progresses, and
      </para></listitem>
      <listitem><para>
      the <link linkend="setup-main-applications-font">Application Output View</link> which will show error and state information concerning a running application.
      </para></listitem>
    </itemizedlist>
  </listitem>
  <listitem>
    <para>
    Some common behaviour concerning the displayed lines in the <guilabel>Messages Output View</guilabel> window, namely
    </para>
    <itemizedlist>
      <listitem><para>
      whether long lines will <link linkend="setup-main-wrap">wrap around</link>, and
      </para></listitem>
      <listitem><para>
      if <link linkend="setup-main-navigation">directory entry and exit messages</link> issued by <command>Make</command> will be shown.
      </para></listitem>
    </itemizedlist>
  </listitem>
  <listitem><para>
  The <link linkend="setup-main-compile">level of detail</link> of messages concerning the compilation process shown in the <guilabel>Messages Output View</guilabel> window.
  </para></listitem>
</itemizedlist>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-general.png" format="PNG"/>
    </imageobject>
    <caption><para>
    The general configuration dialog
    </para></caption>
  </mediaobject>
</screenshot>

<formalpara id="setup-main-preload">
<title>Load Last Project on Startup</title>

<para>
Mark this checkbox if you want to continue to work with the last project you worked on. This will cause &kdevelop; to automatically load this project on start-up. It will usually be shown in the state you left work so you can readily proceed.
</para>
</formalpara>

<formalpara id="setup-main-projects">
<title>Default Projects Directory</title>
<para>
By default, &kdevelop; uses a common parent directory for all new projects. Enter the absolute path of this common directory in the box or select it from your directory structure. &kdevelop; will place the any new project here as a subdirectory.
</para>
</formalpara>
<note><para>
You may of course change the directory path of a new project at the time you set it up in the <link linkend="applicationwizard">&appwizard;</link>.
</para></note>

<formalpara id="setup-main-messages-font">
<title>Messages Output View Window Font</title>
<para>
To select a font suitable for the <guilabel>Messages Output View</guilabel> window click the <guilabel>Window Font</guilabel> button showing the currently selected font (it says <quote>Luxi Sans</quote> in the above illustration). The &kde; standard <guilabel>Select Font</guilabel> dialog will pop up from which you may select the font to be used.
</para>
</formalpara>
<note><para>
On first start-up, &kdevelop; initializes this font setting to the standard font for which your &kde; user has been configured. <emphasis>This setting is fixed</emphasis>, so if you alter <menuchoice><guimenuitem>Preferences</guimenuitem><guimenuitem>Appearances &amp; Themes</guimenuitem><guimenuitem>Fonts</guimenuitem></menuchoice> in the <guilabel>Control Center</guilabel>, this will not effect this &kdevelop; font selection. You will have to explicitely reselect the <guilabel>Messages Output View</guilabel> window font.
</para></note>

<formalpara id="setup-main-wrap">
<title>Line Wrapping</title>
<para>
By default, &kdevelop; will wrap long lines around in the <guilabel>Messages Output View</guilabel> window so that valuable information will not be easily overlooked. In some cases this will clutter long message lists. Remove the checkbox mark if you do not want the lines wrap around.
</para>
</formalpara>
<tip><para>
There is an alternative way to switch the line wrapping. Just right click in the <guilabel>Messages Output View</guilabel> window and mark/unmark the <guimenuitem>Line Wrapping</guimenuitem> entry in the menu which will pop up.
</para></tip>

<formalpara id="setup-main-navigation">
<title>Directory Navigation Messages</title>
<para>
The <command>Make</command> tool usually will display messages like <quote>Entering directory</quote>, or <quote>Leaving directory</quote> when it switches the directories it currently works in. As this clutters the messages list in the <guilabel>Messages Output View</guilabel> window, &kdevelop; suppresses those messages by default. Mark the checkbox if you want to protocol which directories <command>Make</command> worked in.
</para>
</formalpara>
<note><para>
Changes in this setting effect the processing of new messages only. Old directory navigation messages will be kept visible when you switch this feature off.
</para></note>

<formalpara id="setup-main-compile">
<title>Compiler Output</title>
<para>
&kdevelop; preprocesses the messages the <guilabel>Messages Output View</guilabel> window receives during the build processes in order to filter superfluous information. You can control the level of detail &kdevelop; will display using the radio buttons in this field.
</para>
</formalpara>
<variablelist>
  <varlistentry>
    <term><guilabel>Very Short</guilabel></term>
    <listitem><para>
    Displays only warnings, errors, and the filenames which are compiled.
    </para></listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Short</guilabel></term>
    <listitem><para>
    Suppresses all compiler flags and formats the output to be more readable.
    </para></listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Full</guilabel></term>
    <listitem><para>
    Displays all output messages unmodified.
    </para></listitem>
  </varlistentry>
</variablelist>

<tip><para>
There is an alternative way to switch the compiler output detail. Just right click in the <guilabel>Messages Output View</guilabel> window and select the according detail level from the popup menu.
</para></tip>

<formalpara id="setup-main-applications-font">
<title>Application Output View Window Font</title>
<para>
The <guilabel>Application Output View</guilabel> window is used to display error and state information from applications which are run from inside &kdevelop;. These are informations the applications usually sends to the console when run stand-alone. So you do not need to leave the IDE when testing the application you currently work on.
</para>
</formalpara>
<para>
To select a font suitable for the <guilabel>Application Output View</guilabel> window click the <guilabel>Window Font</guilabel> button showing the currently selected font (it says <quote>Luxi Sans</quote> in the above illustration). The &kde; standard <guilabel>Select Font</guilabel> dialog will pop up from which you may select the font to be used.
</para>
<note><para>
On first start-up, &kdevelop; initializes this font setting to the standard font for which your &kde; user has been configured. <emphasis>This setting is fixed</emphasis>, so if you alter <menuchoice><guimenuitem>Preferences</guimenuitem><guimenuitem>Appearances &amp; Themes</guimenuitem><guimenuitem>Fonts</guimenuitem></menuchoice> in the <guilabel>Control Center</guilabel>, this will not effect this &kdevelop; font selection. You will have to explicitely reselect the <guilabel>Application Output View</guilabel> window font.
</para></note>

</sect2> <!-- setup-main -->

<sect2 id="setup-ui">
<title>Selecting the User Interface</title>

<indexterm zone="setup-ui">
  <primary>user interface</primary>
  <secondary>switch modes</secondary></indexterm>
<indexterm zone="setup-ui">
  <primary>switch UI modes</primary></indexterm>

<para>
As already said in the <link linkend="uimodes-survey">Available User Interface Modes</link> chapter there are four different ways the &kdevelop; work area may be set up, namely:
</para>
<itemizedlist>
  <listitem><para>
  <link linkend="ideal-desc">IDEAl Mode</link>
  </para></listitem>
  <listitem><para>
  <link linkend="mdi-desc">Child Frame Windows Mode</link>
  </para></listitem>
  <listitem><para>
  <link linkend="tabbed-desc">Tabbed Pages Mode</link>
  </para></listitem>
  <listitem><para>
  <link linkend="toplevel-desc">Toplevel Windows Mode</link>
  </para></listitem>
</itemizedlist>

<para>
To switch the user interface mode select <menuchoice> <guimenu>Settings</guimenu> <guimenuitem>Configure KDevelop...</guimenuitem> </menuchoice> from the menus. The <guilabel>Configure KDevelop</guilabel> dialog will pop up, where you have to select <guilabel>User Interface</guilabel> in the left hand tree. This will display the followig settings dialog to the right.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="select-user-interface-0.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Select a user interface mode
    </para></caption>
  </mediaobject>
</screenshot>

<para>
Select the radio button of the user interface mode you want to switch to, then click <guibutton>OK</guibutton>.
</para>

<note><para>
Do not forget to restart &kdevelop; in order to let any of these selections take effect.
</para></note>

<para>
When you selected either the <guilabel>IDEAl window mode</guilabel> or the <guilabel>Tabbed pages mode</guilabel> two more configuration sections will become available: <link linkend="setup-ui-tabs">Use Tabs</link> and <link linkend="setup-ui-hover">Use Close On Hover</link>. These allow to configure under which circumstances tabs will be shown on top of the document windows and whether you may close the document by a click on the tab icon.
</para>
<para>
In <guilabel>IDEAl window mode</guilabel> only yet another configuration section will be available, <link linkend="setup-ui-toolview">Toolview Tab Layout</link> which effectively allows to select between different sizes of the toolview tabs which surround the main working area in this mode.
</para>

<formalpara id="setup-ui-tabs">
<title>Configuring the Documents Tab Bar Display</title>

<para>
In the IDEAl and tabbed pages modes there will be named tabs on top of the document windows by default, so you can easily select different documents with a &LMB; click. If you prefer to provide more space for the document windows in the &kdevelop; main work area, you may change to another behaviour in the <guilabel>Use Tabs</guilabel> configuration section.
</para>
</formalpara>

<variablelist>
<varlistentry>
  <term><guilabel>Always</guilabel></term>
  <listitem><para>
  This is the default &mdash; show a tab comprising an icon and the document name on top of any document window in the &kdevelop; main area display.
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><guilabel>When more than one</guilabel></term>
  <listitem><para>
  Do not show a tab when only one document is displayed. If there is more than one document, however, &kdevelop; will display an according tab bar as in the <guilabel>Always</guilabel> selection above. You may want to select this mode if you work on a single document most of the time as this provides more vertical space.
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><guilabel>Never</guilabel></term>
  <listitem><para>
  Never show any document selection tab. You may prefer this mode if you seldom use the mouse to switch between documents. It provides more vertical space for all document windows. To select another the document window or to close any, use the &kdevelop; <guimenu>Window</guimenu> menu.
  </para></listitem>
</varlistentry>
</variablelist>

<formalpara id="setup-ui-hover">
<title>Setting Up to Close a Document by a Click On Its Tab</title>
<para>
When you configured &kdevelop; to display the documents tab bar, either always or when more than one document is displayed in the main work area, you may add more functionality to the tabs beyond their document selection capability. Use the <guilabel>Use Close On Hover</guilabel> configuration section for this.
</para>
</formalpara>
<variablelist>
<varlistentry>
  <term><guilabel>No</guilabel></term>
  <listitem><para>
  This is standard behaviour. No extra functionality is added to the tabs. They may be used only to select document windows on &LMB; clicks.
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><guilabel>Yes</guilabel></term>
  <listitem><para>
  When you selected this radio button, &kdevelop; will allow to close a document window by a &LMB; click. Use the mouse to point at the small icon on the on the left tab border. It will change to a close symbol. Now click with the &LMB; on this changed symbol and &kdevelop; will close the according document window.
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><guilabel>Yes, Delayed</guilabel></term>
  <listitem><para>
  After selecting this radio button, &kdevelop; will allow to close a document window as shown in the <guilabel>Yes</guilabel> case above. The icon will not change instantly, however, but there will be a short delay before the close icon shows up.
  </para></listitem>
</varlistentry>
</variablelist>

<formalpara id="setup-ui-toolview">
<title>Configuring the Toolview Tab Layout</title>

<para>
The <guilabel>Toolview Tab Layout</guilabel> configuration section will be available in IDEAl mode only. Use these radio buttons to set up the look of the toolview tabs which surround the main working area in this mode.
</para>
</formalpara>
<variablelist>
<varlistentry>
  <term><guilabel>Icons</guilabel></term>
  <listitem>
  <para>
  Each tab will show an icon only. If the associated toolview is displayed, the tab will open and a descriptive text for this toolview be shown. You may want to use this mode if you work on a monitor with limited resolution.
  </para>
  <para>
  The icons are not very descriptive, however. If you want to find out which toolview is assigned to a given tab, point at it with the mouse and wait a second. A short tooltip will then pop up with the toolview name.
  </para>
  </listitem>
</varlistentry>
<varlistentry>
  <term><guilabel>Text</guilabel></term>
  <listitem><para>
  This is the default toolview tab display mode. Each tab displays the name of its associated toolview.
  </para></listitem>
</varlistentry>
<varlistentry>
  <term><guilabel>Text and Icons</guilabel></term>
  <listitem><para>
  If the standard text toolview display looks too flat to you and you are working on a high-resolution monitor you may want to select this radio button. It will cause the name of the associated toolview be displayed on each tab plus an icon to the left of it, making the tabs easier to distinguish. See the <link linkend="folded-toolview-tabs">Folded Toolview Tabs</link> illustration below for an example.
  </para></listitem>
</varlistentry>
</variablelist>

<formalpara>
<title>Folded Toolview Tabs</title>
<para>
If you selected the IDEAl mode toolview tabs to display texts (with or without accompanying icons) you need not worry about them being hidden behind some toolview window. If one of the bottom toolview windows occupies more space than is available to display all (vertical) tabs, they will fold around as this illustration shows:
</para>
</formalpara>
<screenshot>
  <mediaobject id="folded-toolview-tabs">
    <imageobject>
      <imagedata fileref="folded-tabs.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Toolview tabs fold to not be hidden behind another view window
    </para></caption>
  </mediaobject>
</screenshot>

<note><para>
The active toolview window must be shown fixed (non-overlap mode), sharing the work area with the other windows, to force such tab folding. Press the small square in the window border to accomplish this as shown in the example.
</para></note>

</sect2> <!-- setup-ui -->

<sect2 id="setup-editor">
<title>Selecting an Editor</title>

<para>
&kdevelop; allows you to select your favorite text editor tool. Mark the <guilabel>Editor</guilabel> entry in the left hand side selections tree of the <guilabel>Configure KDevelop</guilabel> window. The following dialog will be displayed to the right.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-editor.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Select an editor
    </para></caption>
  </mediaobject>
</screenshot>

<para>
To select a new editor, click on the arrow on the drop down list field. Depending on the editor parts interfaces your &kde; version has compiled in you will be provided with a list of editors you may select from (see the <link linkend="setup-editor-kparts">Important</link> note below for this). Click on the editor of your liking and click <guilabel>OK</guilabel>. Currently there are tree possibilities:
</para>
<variablelist>
  <varlistentry>
  <term><guilabel>Embedded Advanced Text Editor</guilabel></term>
  <listitem><para>
  This is the &kde; standard <application>Kate</application> editor part.
  </para></listitem>
  </varlistentry>
  <varlistentry>
  <term><guilabel>Embedded Vim Component</guilabel></term>
  <listitem>
    <para>
    This provides the look and feel of the base Linux <application>vi</application> editor.
    </para>
    <note><itemizedlist>
      <listitem><para>
      You need to have a suitable <application>Vim</application> application installed. Have a look at the <ulink url="http://www.freehackers.org/kvim/">KVim</ulink> website for more information.
      </para></listitem>
      <listitem><para>
      Furthermore you need to configure the KParts Vim component in the <guilabel>&kde; Control Center</guilabel> (<menuchoice><guimenuitem>KDE Components</guimenuitem><guimenuitem>Vim Component Configuration</guimenuitem></menuchoice>) before you can use it.
      </para></listitem>
    </itemizedlist></note>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><guilabel>Qt Designer Based Text Editor</guilabel></term>
  <listitem><para>
  This is the editor Qt provides in its <application>Designer</application> component.
  </para></listitem>
  </varlistentry>
</variablelist>

<para>
These editor interfaces are fully integrated in the &kdevelop; IDE concept. Particularly the possibility to jump to the offending source code line by just clicking on an error message in the <guilabel>Messages Output View</guilabel> window has been provided.
</para>

<note><para>
Changing the editor will not affect already open files. There are two possibilities to proceed. Either close all open text windows and reopen them one by one or simply close the whole project and reopen it again. The windows will then automatically open under the new text editor interface.
</para></note>

<important id="setup-editor-kparts"><para>
&kdevelop; lets you use editor interfaces which have registered with &kde; and that provide a KatePart interface. If you miss one one of the selections shown above check your &kde; installation if the corresponding KPart was correctly installed.
</para></important>
</sect2> <!-- setup-editor -->

<sect2 id="setup-format">
<title>Selecting a Source Format Style</title>

<para>
&kdevelop; automatically formats a source text in a predefined style. This style is highly configurable.
</para>

<note><para>
The reformat source feature is currently available for C, C++, and &Java; only. Especially you cannot use it for scripting languages like &eg; PHP. This is because &kdevelop; uses the <ulink url="http://astyle.sourceforge.net/">astyle</ulink> application to implement this feature.
</para></note>

<para>
To set up a specific format style, select <menuchoice> <guimenu>Settings</guimenu> <guimenuitem>Configure KDevelop...</guimenuitem> </menuchoice> from the menubar. The <guilabel>Customize KDevelop</guilabel> dialog will pop up, where you have to select <guilabel>Source Formatter</guilabel> in the left hand tree. This will display a series of three settings dialog tabs to the right, namely a <link linkend="setup-format-general">General Formatting Setup</link>, a <link linkend="setup-format-indent">Indentation Style Setup</link>, and a <link linkend="setup-format-other">Other Formatting Setup</link>.
</para>

<tip><para>
Any style changes apply to newly entered text only. If you want to change the formatting style of an already existing source text you will have to explicitly use the <menuchoice><guimenu>Edit</guimenu><guimenuitem>Reformat Source</guimenuitem></menuchoice> command.
</para></tip>

<note><para>
The exact outcome of these style formatting definitions depends on the <link linkend="setup-editor">editor</link> you use. Currently, most settings are tailored to the Kate editor part (the <quote>Embedded Advanced Text Editor</quote>). Some other editors (&eg; the Qt editor) may rely on their own configuration settings. You will have to experiment in this case to find out the exact effects of the style settings provided here.
</para></note>

<warning><para>
There may be incompatibilities between the configuration style settings provided here and the editor you use up to the extent that in extreme cases it even might destroy your files. Make sure you have a backup of your source files before you try out these settings with a non-&kde;-standard editor.
</para></warning>

<sect3 id="setup-format-general">
<title>General Formatting Setup</title>

<para>
The <guilabel>General</guilabel> tab of the <guilabel>Source Formatter</guilabel> dialog allows you to select one out of five predefined source format styles.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="SF-general.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Source format style general setup
    </para></caption>
  </mediaobject>
</screenshot>

<para>
A formatted source example will be displayed in the field to the right. If none of the predefined styles is to your liking, you may click the top <guilabel>User defined</guilabel> radio button and define your own source formatting style preferences on the other two tabs which will become available then.
</para>

<note><para>
Currently only the predefined source formatting styles will be demonstrated by an example text. If you decide to define your own style, no example display will be available. You have to experiment on an actual source text to tailor the settings to your liking.
</para></note>

</sect3> <!-- setup-format-general -->

<sect3 id="setup-format-indent">
<title>Indentation Style Setup</title>

<para>
Proper indentation is the main means to enhance readability of a source text. If you selected the <guilabel>Indentation</guilabel> tab of the <guilabel>Source Formatter</guilabel> dialog you will be presented with a series of indentation formatting choices grouped into three boxes as following.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="SF-indent.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Source format indentation style setup
    </para></caption>
  </mediaobject>
</screenshot>

<formalpara>
<title>Default Settings</title>
<para>
The preset format choices will cause the source text to resemble the ANSI formatting style:
</para>
</formalpara>
<screen>
namespace foospace
{
  int Foo()
  {
    if (isBar)
    {
      bar();
      return 1;
    }
    else
      return 0;
  }
}
</screen>

<formalpara id="setup-format-indent-filling">
<title>Defining Indentation Width and Characters</title>
<para>
The radio buttons grouped in the <guilabel>Filling</guilabel> group define how indents in the source text will be drawn.
</para>
</formalpara>

<variablelist>
  <varlistentry>
    <term><guilabel>Use tabs</guilabel></term>
    <listitem>
    <para>
    This will cause the editor to insert a tab character for each indentation level. The tab width is predefined in the editor settings (8 or 4 character columns usually). Use <menuchoice><guimenu>Settings</guimenu><guimenuitem>Configure Editor...</guimenuitem></menuchoice> to redefine it.
    </para>
    <note><para>
    The actual tab width definition procedure depends on the editor you selected in the <link linkend="setup-editor">Selecting an Editor</link> configuration step. You will have to look up the corresponding editor help to find out.
    </para></note>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Use spaces</guilabel></term>
    <listitem><para>
    If you select this radio button, the editor will enter a number of spaces for each indentation level. Change the number from the default 2 to the indentation width you prefer.
    </para></listitem>
  </varlistentry>
</variablelist>

<formalpara>
<title>Indented Entities</title>
<para>
This defines which of the (C/C++) entities will be formatted with an extra indent beyond the current indentation level.
</para>
</formalpara>
<para>
By default only <guilabel>namespaces</guilabel> and <guilabel>labels</guilabel> will be extra indented. You may want to experiment with various settings to tailor those extra indents to your liking.
</para>

<formalpara>
<title>Continuation</title>
<para>
The settings grouped here apply to those cases where the source formatter automatically wraps around long source lines. It takes two special cases in account, namely that in deeply nested indents there should remain enough room for the source and that conditionals should get extra indent levels on continuation to make them stand out properly.
</para>
</formalpara>

<note><para>
This applies to <emphasis>static word wrap cases</emphasis> only where a fixed maximum line width is used in the source text. If you set up your editor to dynamically wrap around long lines in display only (which is possible in the Kate editor part) the effects of these settings usually will not show.
</para></note>

<variablelist>
  <varlistentry>
    <term><guilabel>Maximum in statement</guilabel></term>
    <listitem>
    <para>
    This setting limits the maximum possible indentation for the continuation lines so that enough space will remain to keep the text readable. No continuation line will ever be indented beyond the number of columns you selected in this field.
    </para>
    <para>
    The default is set to 40 character columns (half a standard 80 column page). You may want to increase this value to account for wider paper (e.g if you use landscape printing for your sources). Or decrease the value accordingly to take larger margin settings of your printouts into account.
    </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Minimum in conditional</guilabel></term>
    <listitem>
    <para>
    Conditionals or source following &eg; an assignment operator should usually get an extra indent on continuation lines in order to keep the text readable. The amount of this extra indent is defined here.
    </para>
    <para>
    The default is set to <quote>Twice current</quote> which means that continued conditionals will get an extra indent level of the standard indentation size you selected in the <link linkend="setup-format-indent-filling">Filling</link> group. You may change this extra indent to another fixed width (including zero) using the arrows or by entering the value directly.
    </para>
    </listitem>
  </varlistentry>
</variablelist>

</sect3> <!-- setup-format-indent -->

<sect3 id="setup-format-other">
<title>Other Formatting Setup</title>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="SF-other.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Other source format style settings
    </para></caption>
  </mediaobject>
</screenshot>

<formalpara>
<title>Controlling the Position of Braces</title>
<para>
The radio buttons the (somewhat misnamed) <guilabel>Brackets</guilabel> group control the position of block delimiting braces in a (C/C++) source text. There are three possibilities from which you can select.
</para>
</formalpara>
<variablelist>
  <varlistentry>
    <term><guilabel>Break</guilabel></term>
    <listitem>
    <para>This inserts a line break before each opening brace. Both delimiting braces of any block will be put at the same indentation level as the block head statement.</para>
    <screen>
namespace foospace
{
  int Foo()
  {
    if (isBar)
    {
      bar();
      return 1;
    }
    else
      return 0;
  }
}
    </screen>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Attach</guilabel></term>
    <listitem>
    <para>
    This will keep the opening brace of a block in line with the block head statement. Closing braces will be on the same indentation level as the block head statement. The <token>else</token> of an <token>if</token> statement will be kept in line with the closing brace of the preceding block.
    </para>
    <screen>
namespace foospace {
  int Foo() {
    if (isBar) {
      bar();
      return 1;
    } else
      return 0;
  }
}
    </screen>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Linux Style</guilabel></term>
    <listitem>
    <para>
    This is a compromise of the above listed styles. Functional block delimiting braces will be put on extra lines. Braces opening a block in a conditional or loop statement will be kept in line.
    </para>
    <screen>
namespace foospace
{
  int Foo()
  {
    if (isBar) {
      bar();
      return 1;
    } else
      return 0;
  }
}
    </screen>
    </listitem>
  </varlistentry>
</variablelist>

<formalpara>
<title>Controlling Extra Spaces</title>
<para>
By default &kdevelop; does minimize the use of spaces in source texts.
</para>
</formalpara>

<screen>
if (isBar(fooArg)==barValue)
</screen>

<para>
You may enhance readability if you force the source formatter to insert extra spaces in special positions.
</para>

<variablelist>
  <varlistentry>
    <term><guilabel>Add spaces around parentheses</guilabel></term>
    <listitem>
    <para>In fact what is meant is to add spaces around the text put in parentheses. This enhances the readabilitiy of function arguments and conditionals.</para>
    <screen>
if ( isBar( fooArg )==barValue )
    </screen>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Add spaces around operators</guilabel></term>
    <listitem>
    <para>This will put spaces around assignment and comparison operators to enhance the readability.</para>
    <screen>
if (isBar(fooArg) == barValue)
    </screen>
    </listitem>
  </varlistentry>
</variablelist>

<formalpara>
<title>Controlling the Formatting of One-Line Constructs</title>
<para>
There are a few cases where you don't want the source formatter to split a long line apart. For C/C++ code this can be controlled here.
</para>
</formalpara>

<variablelist>
  <varlistentry>
    <term><guilabel>Keep one-line statements</guilabel></term>
    <listitem><para>
    This keeps single line statements together in some situations even if they exceed a fixed maximum line length.
    </para></listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Keep one-line blocks</guilabel></term>
    <listitem><para>
    This keeps single line blocks together in some situations even if they exceed a fixed maximum line length.
    </para></listitem>
  </varlistentry>
</variablelist>

</sect3> <!-- setup-format-other -->

</sect2> <!-- setup-format -->

<sect2 id="setup-snippets">
<title>Setting Up the Code Snippets Tool</title>

<para>
When editing in &kdevelop; you can store often used parts of code as <link linkend="editing-snippets">Code Snippets</link>. To configure the capabilities of the code snippets part select <menuchoice> <guimenu>Settings</guimenu> <guimenuitem>Configure KDevelop...</guimenuitem> </menuchoice> from the menubar. The <guilabel>Customize KDevelop</guilabel> dialog will pop up, where you have to select <guilabel>Code Snippets</guilabel> in the left hand tree. This will show the following dialog in the right hand side.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-snippets.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Configuring the Code Snippets tool
    </para></caption>
  </mediaobject>
</screenshot>

<formalpara>
<title>Activate Snippet Preview</title>
<para>
Mark the <quote><guilabel>Show snippet's text in tooltip</guilabel></quote> checkbox if you want to view the stored text in a tooltip window whenever you keep the mouse cursor over the title of that snippet.
</para>
</formalpara>

<formalpara>
<title>Working With Snippet Variables</title>
<para>
The <guilabel>Code Snippets</guilabel> tool allows for a variable text in predefined places any time you insert a snippet into a file. To accomplish this  <guilabel>Code Snippets</guilabel> provides its own variables' mechanism. You can set up it's behaviour in the <guilabel>Variables</guilabel> group.
</para>
</formalpara>

<variablelist>
  <varlistentry>
    <term><guilabel>Delimiter</guilabel></term>
    <listitem><para>
    The <guilabel>Code Snippets</guilabel> tool distinguishes variables in the text by surrounding the variable name with special delimiter symbols. To use your own delimiter symbol, change the predefined <guilabel>$</guilabel> character in the <guilabel>Delimiter</guilabel> field.
    </para></listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Input method for variables</guilabel></term>
    <listitem><itemizedlist>
      <listitem><para>
      <guilabel>Single dialog for each variable within a snippet</guilabel> &ndash; will in turn pop up a separate dialog for each variable which the tool finds when inserting the selected code snippet.
      </para></listitem>
      <listitem><para>
      <guilabel>One dialog for all variables within a snippet</guilabel> &ndash; will pop up a common dialog where the user has to fill in the values of all variables before the snippet will be inserted
      </para></listitem>
    </itemizedlist></listitem>
  </varlistentry>
</variablelist>

</sect2> <!-- setup-snippets -->

<sect2 id="setup-fileselector">
<title>Configuring the File Selector</title>

<para>
&kdevelop; provides a <guilabel>File Selector</guilabel> plugin which, when loaded at start-up, allows to navigate to any file or directory in the system.
</para>

<screenshot id="setup-fileselector-image">
  <mediaobject>
    <imageobject>
      <imagedata fileref="file-selector.png" format="PNG"/>
    </imageobject>
    <caption><para>
    The file selector (IDEAl mode)
    </para></caption>
  </mediaobject>
</screenshot>

<para>
The behaviour of the <guilabel>File Selector</guilabel> can be highly configured. Select <menuchoice> <guimenu>Settings</guimenu> <guimenuitem>Configure KDevelop...</guimenuitem> </menuchoice> from the menubar. The <guilabel>Customize KDevelop</guilabel> dialog will pop up, where you have to select <guilabel>File Selector</guilabel> in the left hand tree. This will show the following dialog in the right hand side.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-file-selector.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Configuring the file selector
    </para></caption>
  </mediaobject>
</screenshot>

<formalpara>
<title>Configuring the Toolbar</title>
<para>
There is a toolbar on top of the <guilabel>File Selector</guilabel> which can be configured as usual in the <guilabel>Toolbar</guilabel> group.
</para>
</formalpara>

<procedure id="setup-fileselector-add-action">
  <title>Add an Action to the Toolbar</title>
  <step>
    <para>
    Select an item in the right hand <guilabel>Selected actions</guilabel> list after which the new action should be inserted.
    </para>
  </step>
  <step>
    <para>
    Select the action to be inserted in the left hand <guilabel>Available actions</guilabel> list.
    </para>
  </step>
  <step>
    <para>
    Click the right (upper) arrow between both lists.
    </para>
    <para>The action will be removed from the <guilabel>Available actions</guilabel> list and inserted into the <guilabel>Selected actions</guilabel> list below the selected item.
    </para>
  </step>
</procedure>

<procedure>
  <title>Remove an Action from the Toolbar</title>
  <step>
    <para>
    Select the item to be removed in the right hand <guilabel>Selected actions</guilabel> list.
    </para>
  </step>
  <step>
    <para>
    Click the left (lower) arrow between both lists.
    </para>
    <para>The selected item will be removed from the <guilabel>Selected actions</guilabel> list and put back into the <guilabel>Available actions</guilabel> list.
    </para>
  </step>
</procedure>

<procedure>
  <title>Reorder the Actions on the Toolbar</title>
  <step>
    <para>
    Select the action to be moved in the right hand <guilabel>Selected actions</guilabel> list.
    </para>
  </step>
  <step>
    <para>
    Click the up or down arrow to the right of this list.
    </para>
    <para>The selected item will be moved up or down the <guilabel>Selected actions</guilabel> list.
    </para>
  </step>
</procedure>

<formalpara id="setup-fileselector-autosync">
<title>Defining When the Contents Should Change</title>
<para>
Updating the contents in the <guilabel>File Selector</guilabel> window takes time and resources, esp. when changing to another directory. Therefore  <guilabel>File Selector</guilabel> is set up by default in such a way that its contents change only on demand, &ie; when you select another directory or when you explicitly want to refresh its contents.
</para>
</formalpara>

<note><para>
Click the <guilabel>Reload</guilabel> button in the toolbar to update the contents of the <guilabel>File Selector</guilabel>. This toolbar button is not available by default, however. You must <link linkend="setup-fileselector-add-action">insert it there</link> first.
</para></note>

<para>
You can configure the <guilabel>File Selector</guilabel> to immediately reflect certain changes in your work. The settings in the <guilabel>Auto Synchronization</guilabel> group of the configuration dialog are responsible for this.
</para>

<variablelist>
  <varlistentry>
    <term><guilabel>When a document becomes active</guilabel></term>
    <listitem><para>
    If you select this checkbox, the contents in the <guilabel>File Selector</guilabel> window will be updated whenever you go to another already open document, &eg; when you click on the tab of the according edit window in IDEAl mode. If necessary the <guilabel>File Selector</guilabel> will switch to the directory this file belongs to and update the display to show the actual contents in there.
    </para></listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>When a document is opened</guilabel></term>
    <listitem><para>
    If you select this checkbox, the contents in the <guilabel>File Selector</guilabel> window will be updated whenever a document will be opened, &eg; by the <menuchoice><guimenu>File</guimenu><guimenuitem>Open</guimenuitem></menuchoice> menu. If necessary the <guilabel>File Selector</guilabel> will switch to the directory this file belongs to and update the display to show the actual contents in there.
    </para></listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>When the file selector becomes visible</guilabel></term>
    <listitem><para>
    If you select this checkbox, the contents in the <guilabel>File Selector</guilabel> window will be updated whenever it gets visible again. If necessary it will switch to the directory the actual document belongs to and update the display to show the actual contents in there.
    </para></listitem>
  </varlistentry>
</variablelist>

<para>
You may freely combine these settings to tailor the actualization behaviour of the <guilabel>File Selector</guilabel> to your liking.
</para>

<formalpara>
<title>Controlling the History in the Comboboxes</title>
<para>
There are two comboboxes on top and bottom of the <guilabel>File Selector</guilabel> contents window which control the directory to be displayed (top combobox) and the filters to be applied to the file display (bottom combobox). A history of the most recent settings is kept in the selection field of each combobox. You can configure the number of history entries as follows.
</para>
</formalpara>

<variablelist>
  <varlistentry>
    <term><guilabel>Remember locations</guilabel></term>
    <listitem><para>
    Enter here the maximum number of directory selections the upper combobox shall remember.
    </para></listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Remember filters</guilabel></term>
    <listitem><para>
    Enter here the maximum number of filter definitions the lower combobox shall remember.
    </para></listitem>
  </varlistentry>
</variablelist>

<formalpara>
<title>Controlling What Should be Remembered Between Sessions</title>
<para>
By default the <guilabel>File Selector</guilabel> is set up so that it shows the display of the most recent session again at the next &kdevelop; start-up. You may change this behaviour in the <guilabel>Session</guilabel> configuration group.
</para>
</formalpara>

<note><para>
If &kdevelop; was automatically restarted by the &kde; session manager the changes in these settings will have no effect. In this case location and filter settings of the most recent &kde; session will always be restored.
</para></note>

<variablelist>
  <varlistentry>
    <term><guilabel>Restore location</guilabel></term>
    <listitem>
    <para>
    Remove the checkbox mark here if you don't want the displayed location be remembered between sessions.
    </para>
    <note><para>
    If you selected one of the <link linkend="setup-fileselector-autosync">automatic update</link> settings the displayed location might automatically change regardless what has been remembered from the recent session.
    </para></note>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Restore filters</guilabel></term>
    <listitem>
    <para>
    Remove the checkbox mark here if you don't want the filters applied to the display be remembered between sessions.
    </para>
    </listitem>
  </varlistentry>
</variablelist>

</sect2> <!-- setup-fileselector -->

</sect1> <!-- setup-general -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="setup-docu">
<title>Configuring the Documentation</title>

<para>
&kdevelop; contains a very powerful documentation facility which provides access to several kinds of extensive documentation. In &eg; IDEAl mode you find a <guilabel>Documentation</guilabel> tab at the right border of the work area.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="doctree.png" format="PNG"/>
    </imageobject>
    <caption><para>
    The &kdevelop; documentation tree (IDEAl mode)
    </para></caption>
  </mediaobject>
</screenshot>

<para>
You may set up the contents of this documentation tree if you select <menuchoice> <guimenu>Settings</guimenu> <guimenuitem>Configure KDevelop...</guimenuitem> </menuchoice> from the menubar. The <guilabel>Customize KDevelop</guilabel> dialog will pop up, where you have to select <guilabel>Documentation Tree</guilabel> in the left hand tree.
</para>

<note><para>
&kdevelop; must have loaded the <guilabel>Documentation</guilabel> plugin in order to view the documentation tree. See the <link linkend="setup-plugins">Plugin Tools</link> section for more info.
</para></note>

<formalpara>
<title>Alternative Method to Call Up the Configuration Page</title>
<para>
There is a shortcut way to call up this configuration. Open the documentation tree (&eg; by clicking on the <guilabel>Documentation</guilabel> tab in IDEAl mode), then right-click into the list. From the popup dialog select <guilabel>Properties</guilabel> which in turn will display a <guilabel>Customize Documentation Tree</guilabel> window.
</para>
</formalpara>

<para>
The thus displayed <link linkend="configure-doctree-general">configuration page</link> shows a series of tabbed configuration dialog pages, namely:
</para>

<simplelist>
  <member><link linkend="setup-docu-general">General</link></member>
  <member><link linkend="setup-docu-textsearch">Full Text Search</link></member>
  <member><link linkend="setup-docu-bookmark">Bookmarks</link></member>
  <member><link linkend="setup-docu-TOC">KDevelopTOC Documentation</link></member>
  <member><link linkend="setup-docu-DevHelp">DevHelp Documentation</link></member>
</simplelist>
<para>
Additionally you have the option to select what the documentation tree should display as
</para>
<simplelist>
  <member><link linkend="setup-docu-project">Project Documentation</link></member>
</simplelist>
<para>
on a per project basis.
</para>

<para>
For a more intuitive reading we will discuss these configuration dialogs in slightly different order. Use one of the links above if you want to directly look at the help for one of the tabbed configure dialog sections.
</para>

<tip><para>
You should at least configure the <link linkend="setup-docu-textsearch">Full Text Search</link> section. It is mandatory to immediately access the &Qt; and &kde; Libraries API help from within a source text.
</para></tip>

<sect2 id="setup-docu-buttons">
<title>Changing Documentation Entries</title>

<para>
Most of these tabbed configuration dialogs provide a set of <link linkend="setup-docu-button-add">Add</link>, <link linkend="setup-docu-button-edit">Edit</link>, and <link linkend="setup-docu-button-remove">Remove</link> buttons to the right of some list field. Use these to change the listed entries or add your own.
</para>
<para>
If you click one of the <guibutton>Add</guibutton> or <guibutton>Edit</guibutton> buttons you will be shown an <guilabel>Add Documentation Entry</guilabel> dialog like this (deliberately filled in by an example):
</para>

<screenshot id="configure-add-dialog">
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-adddialog.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Adding or changing a documentation entry
    </para></caption>
  </mediaobject>
</screenshot>

<formalpara>
<title>Local and Remote Documentation</title>
<para>
The &kdevelop; documentation tree may access <emphasis>local</emphasis> (system internal) documentation files as well as <emphasis>remote</emphasis> (external, mostly accessible via the web) ones. You only need to enter the proper &URL; addresses in the <guilabel>Location</guilabel> field. (In fact, most predefined entries in the documentation tree at initial &kdevelop; start-up consist of links to external documention.)
</para>
</formalpara>
<para>
You may at any time change from remote to local documentation (if you &eg; downloaded the files into your system) and vice versa. Just alter the &URL; accordingly as shown below.
</para>

<note><para>
Don't forget to provide working net access before you select one of the external documentation entries in the &kdevelop; documentation tree.
</para></note>

<variablelist>
  <title>Documentation List Change Buttons</title>
  <varlistentry id="setup-docu-button-add">
    <term><guibutton>Add</guibutton></term>
    <listitem>
    <para>
    When you click this button you will be presented with an empty <guilabel>Add Documentation Entry</guilabel> dialog.
    </para>
    <para>
    Enter a suitable <guilabel>Title</guilabel> text and the &URL; address where the documentation will be found in the <guilabel>Location</guilabel> field.
    </para>
    <para>
    If you don't know the exact address (or rather want not type) click the folder-labeled button to the right of the <guilabel>Location</guilabel> field. The usual file selection dialog will then pop up where you can navigate to the file you want to be added.
    </para>
    </listitem>
  </varlistentry>
  <varlistentry id="setup-docu-button-edit">
    <term><guibutton>Edit</guibutton></term>
    <listitem>
    <para>
    First select the entry you want to change in the list field, then click the <guibutton>Edit</guibutton> button. The <guilabel>Add Documentation Entry</guilabel> dialog will then pop up with its fields preset with informations from the selected list item (see the <link linkend="configure-add-dialog">example</link> above where the fields are filled in for the &kde; Libraries documentation).
    </para>
    <para>
    Enter a more suitable <guilabel>Title</guilabel> text and/or change the &URL; address in the <guilabel>Location</guilabel> field to the location where this documentation will be found in your system.
    </para>
    <para>
    If you don't know the exact address (or rather want not type) click the folder-labeled button to the right of the <guilabel>Location</guilabel> field. The usual file selection dialog will then pop up where you can navigate to the file you want to be added.
    </para>
    </listitem>
  </varlistentry>
  <varlistentry id="setup-docu-button-remove">
    <term><guibutton>Remove</guibutton></term>
    <listitem>
      <para>
      First select the entry you want to remove in the list field, then click the <guibutton>Remove</guibutton> button. This will delete the selected documentation from the stored entries.
      </para>

      <warning>
        <para>
        <emphasis>Think twice before you remove a documentation form the list!</emphasis>
        </para>
        <para>
        There is usually no easy way to undo this operation. In most cases you will have to add the documentation manually again. So, if you are unsure, try to backup the configuration files (if known) or at least note &URL; and title of the selected documentation before you click <guibutton>Remove</guibutton>.
        </para>
      </warning>
    </listitem>
  </varlistentry>
</variablelist>

<formalpara>
<title>Predefined File Selections</title>
<para>
In some cases when you called the file selection dialog from <guilabel>Add Documentation Entry</guilabel> you may find the display of available files limited by a preset <guilabel>Filter</guilabel> field (located at the dialog bottom). This may &eg; read <quote>*.xml *.dcf</quote> in the case of changing the &Qt; documentation files. If you are unsure about the files you need, best stick to such predefined selections.
</para>
</formalpara>

</sect2> <!-- setup-docu-buttons -->

<sect2 id="setup-docu-general">
<title>Basic &Qt; and &kde; Documentation</title>

<para>
The <guilabel>General</guilabel> tab of the <guilabel>Documentation Tree</guilabel> configuration page contains information to access the basic documentation sets needed for &kde; programming. Accordingly there are three dialog groups:
</para>
<simplelist>
  <member><link linkend="setup-docu-general-qt">Qt documentation collections</link></member>
  <member><link linkend="setup-docu-general-dox">Documentation generated by Doxygen</link></member>
  <member><link linkend="setup-docu-general-kdoc">Documentation generated by KDoc</link></member>
</simplelist>

<para id="configure-doctree-general"><screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-doctree-general.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Setting up &kde; basic documentation sets
    </para></caption>
  </mediaobject>
</screenshot></para>

<sect3 id="setup-docu-general-qt">
<title>Qt Documentation Collections</title>
<para>
Normally &kdevelop; will fill this in on its first start-up. It looks for standard documentation files in the &Qt; installation directory. The table to the left lists the files &kdevelop; found by their standard title and &URL; address.
</para>

<para>
If you have a non-standard installation, either there will be no information listed at all or the addresses will possibly point to improper locations (&eg; to another &Qt; installation available in your system). You may adjust the entries using the <link linkend="setup-docu-buttons">buttons</link> to the right of the list field.
</para>

<note>
  <para>
  Pressing the <guibutton>Add</guibutton> or <guibutton>Edit</guibutton> to change a &Qt; list entry will pop up a slightly different dialog:
  </para>
  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="configure-adddialog-qt.png" format="PNG"/>
      </imageobject>
      <caption><para>
      Adding or changing a &Qt; documentation entry
      </para></caption>
    </mediaobject>
  </screenshot>
  <para>
  Normally &kdevelop; will use the titles already provided by the installed &Qt; documentation. Hence the <guilabel>Title</guilabel> field will be grayed and inaccessible when this <guilabel>Add Documentation Entry</guilabel> dialog starts up. If you want to use your own title text in the documentation tree of &kdevelop; you must first check the <guilabel>Custom title</guilabel> field. This will provide access to the <guilabel>Title</guilabel> field contents where you then may fill in any text you like.
  </para>
</note>
</sect3> <!-- setup-docu-general-qt -->

<sect3 id="setup-docu-general-kde">
<title>&kde; API Documentations</title>

<para>
The other two lists on the <guilabel>General</guilabel> documentation tree configuration page concern API documentations provided by the &kde; system.
</para>
<para>
In short, such an API documents the interface to certain library functions. There are two common ways to produce an API documentation from the sources, namely the older one using the &kde; <ulink url="http://sirtaj.net/projects/kdoc/">KDoc</ulink> application and the far more versatile using the externally provided <ulink url="http://www.doxygen.org">&doxygen;</ulink> tool.
</para>

<formalpara id="setup-docu-general-dox">
<title>Documentation Generated by Doxygen</title>
<para>
&kdevelop; will have filled in a link to the current &kde; Libraries API, provided it found one at installation time. There are two basic ways for &kdevelop; to find out:
</para>
</formalpara>
<itemizedlist>
  <listitem><para>
  Either you provided the <command>configure</command> command with the <option>--with-kdelibsdoxy-dir</option> option when you compiled &kdevelop; (see the <link linkend="make-api">How to Obtain a KDevelop API Documentation</link> chapter).
  </para></listitem>
  <listitem><para>
  Or the <command>configure</command> command did automatically find a &doxygen; generated &kde; Libraries API in one of several standard locations it knows of.
  </para></listitem>
</itemizedlist>

<para>
If &kdevelop; did not find a valid &doxygen; generated &kde; Libraries API at its first start-up the <guilabel>Documentation Generated by Doxygen</guilabel> list will be empty.
</para>

<para>
You may change the entries in the <guilabel>Documentation Generated by Doxygen</guilabel> list using the <link linkend="setup-docu-buttons">buttons</link> to the right.
</para>

<note><para>
After you first started up &kdevelop; after a new installation you should in any case check whether the &kde; Libraries API had been correctly set up in the documentation tree. It is advisable to have this API documentation at hand because it is basic to all &kde; programming.
</para></note>

<tip>
  <para>
  The &kde; system provides more API documentation than the &kde; Libraries API only. You will need additional interfaces information if you want to &eg; include the &kate; part into you programs. For this &kate; part API for example you should compile and install the &kde; Base Libraries API from the <ulink url="http://developer.kde.org/source/index.html">sources</ulink> (using the <command>make apidox</command> and <command>make install</command> commands on the <filename class="directory">kdebase</filename> sources) and then add an entry to the <guilabel>Documentation Generated by Doxygen</guilabel> list like this:
  </para>
  <screenshot>
    <mediaobject>
      <imageobject>
        <imagedata fileref="configure-adddialog-baselibs.png" format="PNG"/>
      </imageobject>
      <caption><para>
      Adding a &kde; Base API to the list
      </para></caption>
    </mediaobject>
  </screenshot>
  <para>
  (Of course you should replace the <filename class="directory">/opt/kde-cvs/</filename> directory in the <guilabel>Location</guilabel> field example with the path to your &kde; installation.)
  </para>
</tip>

<formalpara id="setup-docu-general-kdoc">
<title>Documentation Generated by KDoc</title>
<para>
There is not much <ulink url="http://sirtaj.net/projects/kdoc/">KDoc</ulink> based API documentation around these days. Hence this list will be empty after the first &kdevelop; start-up. If you want to add some <application>KDoc</application> based API documentation use the <link linkend="setup-docu-buttons">buttons</link> to the right of this list.
</para>
</formalpara>
</sect3> <!-- setup-docu-general-kde -->
</sect2> <!-- setup-docu-general -->

<sect2 id="setup-docu-TOC">
<title>Handling Structured Documentation (KDevelopTOC Files)</title>

<para>
The main bulk of &kdevelop;'s documentation tree provides immediate access to structured documentation, local as well as remote ones. You can configure this on the <guilabel>KDevelopTOC Documentation</guilabel> tab of the <guilabel>Documentation Tree</guilabel> configuration page.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-doctree-TOC.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Providing standard documentations listed in &kdevelop;
    </para></caption>
  </mediaobject>
</screenshot>

<para>
There is a special feature associated with this. To illustrate, follow these steps: In the documentation tree find an entry shortly below the &Qt;/&kde; documentation (&eg; <quote>KDE2 Development Book (kde.org)</quote>). Click on the plus sign next to it. A tree will open where you can quickly navigate to subsequent chapters nested several levels deep, all offline. But if you finally select one of the chapters, &kdevelop; will in many cases try to access a <emphasis>remote</emphasis> documentation file.
</para>

<para>
The rationale behind this is not only to locally navigate remote documentation without wasting net access ressources, but to provide the developer with easy, structured access to the documentation he/she needs. With the tools provided here one can access almost any local or remote documentation in a structured fashion even if the original is laid out flat or structured in another way. All that is needed is access to files and/or parts of files which are displayable by the Konqueror.
</para>

<note><para>
There is already an overwhelming lot of such <guilabel>KDevelopTOC Documentation</guilabel> available. To keep things maintainable you can limit the display to the documentation you really need on a per-project basis. See the <link  linkend="setup-docu-project">Displaying Selected Documentation in a Project</link> section how to accomplish this.
</para></note>

<sect3 id="setup-docu-TOC-files">
<title>&kdevelop; TOC Files</title>

<para>
Such structured access is made possible through the use of special <quote>table of content</quote> files, which are denoted by <filename>.toc</filename> filename extensions. Any such &kdevelop; TOC file contains an &XML; structured description of the document to be accessed.
</para>

<formalpara>
<title>Standard Directory of &kdevelop; TOC Files</title>
<para>
When &kdevelop; was installed usually a series of predefined <filename>.toc</filename> files has been put into the <filename class="directory">$KDEDIR/share/apps/kdevdoctreeview/tocs</filename> directory. These are fairly simple, structured text files. You may look at them using a text editor or other text display facility.
</para>
</formalpara>

<variablelist id="toc-file-structure">
  <title>Basic Structure of &kdevelop; TOC Files</title>
  <varlistentry>
    <term>header</term>
    <listitem>
      <simplelist>
        <member>
          <computeroutput>&lt;!DOCTYPE kdeveloptoc&gt;</computeroutput>
        </member>
        <member>
          <computeroutput>&lt;kdeveloptoc&gt;</computeroutput>
        </member>
        <member>
          <emphasis>(title)</emphasis>
        </member>
        <member>
          <emphasis>(base address)</emphasis>
        </member>
        <member>
          <emphasis>(content structure)</emphasis>
        </member>
        <member>
          <computeroutput>&lt;/kdeveloptoc&gt;</computeroutput>
        </member>
      </simplelist>
      <para>
      This &XML; structure will be parsed by the &kdevelop; <guilabel>Documentation</guilabel> plugin to set up the documentation tree contents and to guide the user in navigating the documentation. It contains all information necessary to display titles and access the documentation file contents.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>title</term>
    <listitem>
      <simplelist>
        <member>
          <computeroutput>&lt;title&gt;</computeroutput>
          <emphasis>(some title string)</emphasis>
          <computeroutput>&lt;/title&gt;</computeroutput>
        </member>
      </simplelist>
      <para>
      This is the title &kdevelop; will display at the basic levels in the documentation tree.
      </para>
      <note><para>
      This displayed title currently cannot be changed by the user. If you want another text be displayed, you must manually change the <computeroutput>&lt;title&gt;</computeroutput> entry in the <filename>.toc</filename> file.
      </para></note>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>base address</term>
    <listitem>
      <simplelist>
        <member>
          <computeroutput>&lt;base href="</computeroutput>
          <emphasis>(base document &URL;)</emphasis>
          <computeroutput>"/&gt;</computeroutput>
        </member>
      </simplelist>
      <para>
      This &URL; points to the location where all files of this documentation are located. It will be prepended before each section &URL; in the following content structure list. So, if you &eg; downloaded a documentation from a remote server, all you need to display the files from this new location is to change its <computeroutput>&lt;base&gt;</computeroutput> &URL;.
      </para>
      <para>
      You need not change the <filename>.toc</filename> file, however. Better use the <guibutton>Edit</guibutton> button on the <guilabel>KDevelopTOC Documentation</guilabel> tab of the documentation customization page as <link linkend="setup-docu-TOC-edit">shown below</link>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>content structure</term>
    <listitem>
      <simplelist>
        <member>
          <computeroutput>&lt;tocsect1 name="</computeroutput>
          <emphasis>(section title)</emphasis>
          <computeroutput>" url="</computeroutput>
          <emphasis>(section &URL;)</emphasis>
          <computeroutput>"&gt;</computeroutput>
        </member>
        <member>...</member>
        <member>
          <computeroutput>&lt;tocsectn name="</computeroutput>
          <emphasis>(section title)</emphasis>
          <computeroutput>" url="</computeroutput>
          <emphasis>(section &URL;)</emphasis>
          <computeroutput>"/&gt;</computeroutput>
        </member>
        <member>...</member>
        <member>
          <computeroutput>&lt;/tocsect1&gt;</computeroutput>
        </member>
      </simplelist>
      <para>
      All remaining navigation and access information is stored in a series of nested <computeroutput>&lt;tocsecti&gt;</computeroutput> ... <computeroutput>&lt;/tocsecti&gt;</computeroutput> pairs. Each <emphasis>i</emphasis> denotes a consecutive nesting level down to number <emphasis>n</emphasis> which will correspond to the finally displayed documentation section.
      </para>
      <para>
      Any <computeroutput>&lt;tocsecti&gt;</computeroutput> entry must have a <computeroutput>name=""</computeroutput> attribute associated with it. This will be displayed as level title in the documentation tree. It should correspond to an actual documentation section.
      </para>
      <para>
      There may be an <computeroutput>url=""</computeroutput> attribute associated with any <emphasis>i</emphasis> nesting level. When the user clicks on a section title in the documentation tree &kdevelop; will try to access the file at the location pointed to by the combined base and section &URL;.
      </para>
      <para>
      The <computeroutput>&lt;tocsectn/&gt;</computeroutput> entry must have an <computeroutput>url=""</computeroutput> attribute whatsoever.
      This final nested <computeroutput>&lt;tocsectn/&gt;</computeroutput> does not come in pairs but will immediately be closed by a <computeroutput>/</computeroutput> before the <computeroutput>&gt;</computeroutput> bracket.
      </para>
      <note><para>
      Any address combined of base and section &URL; must point to some displayable text file. Usually this will be an HTML-structured file. It is possible to link to anchor marks within such an HTML file using the standard # notation of the format: <filename>/base-url/section-url#anchor-mark</filename>.
      </para></note>
    </listitem>
  </varlistentry>
</variablelist>

</sect3> <!-- setup-docu-TOC-files  -->

<sect3 id="setup-docu-TOC-list">
<title>Altering the &kdevelop; TOC Documentation</title>

<para>
There are two ways to alter the &kdevelop; TOC Documentation. You may change the documentation tree list, &ie; add to or remove entries from the <guilabel>KDevelopTOC Documentation</guilabel> tab of the <guilabel>Documentation Tree</guilabel> configuration page. Additionally you may point an existing documentation to another base location.
</para>

<formalpara>
<title>Adding &kdevelop; TOC Files</title>
<para>
Adding an entry to the <guilabel>KDevelopTOC Documentation</guilabel> tab is fairly straightforward. At first you need a <filename>.toc</filename> file to some structured documentation following the <link linkend="toc-file-structure">structure</link> shown above. This is easily constructed using any standard text editor. Then add this file using the <link linkend="setup-docu-button-add"><guibutton>Add</guibutton> button</link> on the configuration page.
</para>
</formalpara>

<formalpara>
<title>Removing a &kdevelop; TOC Entry</title>
<para>
To remove an entry from the <guilabel>KDevelopTOC Documentation</guilabel> tab first select it in the list, then click on the <link linkend="setup-docu-button-remove"><guibutton>Remove</guibutton> button</link> on the configuration page.
</para>
</formalpara>

<warning>
<para>
<emphasis>Think twice before you click on the <guibutton>Remove</guibutton> button!</emphasis>
</para>
<para>
&kdevelop; will not only remove the list entry but also delete the <filename>.toc</filename> file from the directory. You may want to keep a backup copy if the documentation was valuable.
</para>
</warning>

<para>
If the <filename>.toc</filename> file cannot be removed (&ie; if you have no write access), the entry will remain in the <guilabel>KDevelopTOC Documentation</guilabel> list.
</para>

<formalpara id="setup-docu-TOC-edit">
<title>Changing the Base Address of a &kdevelop; TOC Entry</title>
<para>
If the documentation in an already listed <filename>.toc</filename> file should be read from another location, tell &kdevelop; to alter the documentation base address. Select the file in the <guilabel>KDevelopTOC Documentation</guilabel> list, then click on the <guibutton>Edit</guibutton> button.
</para>
</formalpara>

<!-- ### This is preliminary. Change the following when there will be another edit dialog. -->

<para>
For historical reasons clicking the <guibutton>Edit</guibutton> button will pop up a different dialog which stems from an older approach to structured library documentation:
</para>

<screenshot>
  <mediaobject id="edit-doctree-TOC-entry">
    <imageobject>
      <imagedata fileref="edit-doctree-TOC-entry.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Changing the base address of a &kdevelop; TOC entry
    </para></caption>
  </mediaobject>
</screenshot>

<para>
The <guilabel>Library name</guilabel> field shows the name of the <filename>.toc</filename> file which was selected in the list.
As this is for information only, the field remains inaccessible.
</para>

<para>
The <guilabel>Documentation path</guilabel> field contains the base address which &kdevelop; currently uses to access this documentation. Change it to point to the new documentation origin &kdevelop; shall subsequently use. Then press <guibutton>OK</guibutton> to alter the access.
</para>


<para>
The remaining <guilabel>Library source path</guilabel> dialog field is of no importance. Just ignore it.
</para>

<formalpara>
<title>Reverting to the Default Base Address</title>
<para>
&kdevelop; will not change the <filename>.toc</filename> file contents. Instead it keeps the current base address in an internal list.
</para>
</formalpara>

<para>
If you want to get the original documentation base address back, use the <guibutton>Default</guibutton> button in this <guilabel>Library Documentation</guilabel> dialog. &kdevelop; will replace its internal documentation base pointer by the contents of the <computeroutput>&lt;base&gt;</computeroutput> field in the corresponding <filename>.toc</filename> file.
</para>

</sect3> <!-- setup-docu-TOC-list -->

</sect2> <!-- setup-docu-TOC -->

<sect2 id="setup-docu-DevHelp">
<title>DevHelp Documentation</title>

<para>
DevHelp documentation is another means of structured documentation access. It uses structured table of content files denoted by a <filename>.devhelp</filename> extension similar to <link linkend="setup-docu-TOC-files">&kdevelop; TOC files</link> to access documentation for the GNOME 2 desktop.
</para>
<para>
Usually you will need the GNOME <application>gtk-doc</application> application for access, but &kdevelop; has the ability to access documentation structured by DevHelp files built in. You can control which DevHelp files should be accessible on the <guilabel>DevHelp Documentation</guilabel> tab of the <guilabel>Documentation Tree</guilabel> configuration page.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-doctree-DevHelp.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Providing DevHelp documentation
    </para></caption>
  </mediaobject>
</screenshot>

<formalpara>
<title>How to aquire DevHelp documentation</title>
<para>
DevHelp files originally were accessible on the <ulink url="http://lidn.sourceforge.net/">LiDN</ulink> website, but this seems to be not maintained for some time now. More recent DevHelp documentation is available at the <ulink url="http://htmlhelp.berlios.de/books/devhelp.php">DevHelp Books Download</ulink> web page.
</para>
</formalpara>

<formalpara>
<title>Find DevHelp Files</title>
<para>
When &kdevelop; is installed it will attempt to find all <filename>.devhelp</filename> files in the system. The files it found are listed on the <guilabel>DevHelp Documentation</guilabel> configuration page. If you want to update this display, press the <guibutton>Scan</guibutton> button to the right of the list field.
</para>
</formalpara>

<formalpara>
<title>The Default DevHelp Directory</title>
<para>
&kdevelop; usually keeps a list of the <filename>.devhelp</filename> file copies it found in the <filename class="directory">$KDEHOME/share/apps/kdevdoctreeview/devhelp/</filename> directory of the current user.
</para>
</formalpara>

<formalpara>
<title>Adding a DevHelp File</title>
<para>
To add <filename>.devhelp</filename> files to the list use the <link linkend="setup-docu-button-add">Add</link> button on the right of the <guilabel>DevHelp Documentation</guilabel> configuration page. &kdevelop; will copy the <filename>.devhelp</filename> file you provided to the default DevHelp directory.
</para>
</formalpara>
<note><para>
Usually &kdevelop; will not readily be able to access a thus newly added DevHelp documention. You will have to edit this entry to provide a base access address to this documentation.
</para></note>

<formalpara>
<title>Providing a Base Address &mdash; Edit</title>
<para>
To alter the base address to access a given DevHelp documentation, select the entry in the list of the <guilabel>DevHelp Documentation</guilabel> configuration page, then press the <guibutton>Edit</guibutton> button on the right.
</para>
</formalpara>

<para>
A <guilabel>Library Documentation</guilabel> dialog will pop up, similar to the one used for <link linkend="edit-doctree-TOC-entry">KDevelop TOC</link> files. The <guilabel>Library Name</guilabel> field shows the title of the documentation, which &kdevelop; read from the <filename>.devhelp</filename> file you selected. You cannot change this name.
</para>

<para>
To enable the documentation access, enter the base address of the directory where the actual documentation files are located in the <guilabel>Documentation Path</guilabel> field and press OK. If you don't know the exact address (or rather want not type) click the folder-labeled button to the right of the Location field. The usual file selection dialog will then pop up where you can navigate to the file you want to be added.
</para>

<para>
The remaining <guilabel>Library source path</guilabel> dialog field is of no importance. Just ignore it.
</para>

<formalpara>
<title>Removing a DevHelp Entry</title>
<para>
To remove an entry from the <guilabel>DevHelp Documentation</guilabel> tab first select it in the list, then click on the <link linkend="setup-docu-button-remove"><guibutton>Remove</guibutton> button</link> on the configuration page.
</para>
</formalpara>

<warning>
<para>
<emphasis>Think twice before you click on the <guibutton>Remove</guibutton> button!</emphasis>
</para>
<para>
&kdevelop; will not only remove the list entry but also delete the <filename>.devhelp</filename> file from the directory.
</para>
</warning>

</sect2> <!-- setup-docu-DevHelp -->

<sect2 id="setup-docu-project">
<title>Displaying Selected Documentation in a Project</title>

<para>
When working on a project one usually does not need all of the documentation &kdevelop; provides. Thus for any project you may configure the documentation tree to display only those documents you really want to work with.
</para>
<para>
You need to have your project loaded already. Then select <menuchoice> <guimenu>Project</guimenu> <guimenuitem>Project Options...</guimenuitem></menuchoice>. This will display the <guilabel>Project Options</guilabel> dialog, structured similar to the standard &kdevelop; configuration dialog. Select <guilabel>Project Documentation</guilabel> from the tree at the left hand side to display this <guilabel>Project Documentation</guilabel> configuration dialog page:
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-project-doc.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Configuring the project documentation
    </para></caption>
  </mediaobject>
</screenshot>

<para>
In the <guilabel>Displayed documents in the documentation browser</guilabel> list mark those documents you want to refer to when working on your project. Remove the tick marks from all other check boxes.
</para>
<para>
&kdevelop; will save these settings together with the other project options when you pressed the <guibutton>OK</guibutton> button. From then on the documentation tree will present your reduced list only any time this project was loaded as the following example shows.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="doctree-reduced.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Displaying selected documentation only in a given project
    </para></caption>
  </mediaobject>
</screenshot>

</sect2> <!-- setup-docu-project -->

<sect2 id="setup-docu-bookmark">
<title>Bookmarked Documentation</title>

<para>
(... to be written ...)
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-doctree-bookmark.png" format="PNG"/>
    </imageobject>
    <caption><para>
  Explicitelyly adding documentation to the bookmarks
    </para></caption>
  </mediaobject>
</screenshot>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="doctree-add-bookmark.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Adding existing documentation to the bookmarks
    </para></caption>
  </mediaobject>
</screenshot>

</sect2> <!-- setup-docu-bookmark -->

<sect2 id="setup-docu-textsearch">
<title>Setting Up Text Search Indexes</title>

<para>
(... to be written ...)
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-doctree-textsearch.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Setting up text search indexes
    </para></caption>
  </mediaobject>
</screenshot>

</sect2> <!-- setup-docu-textsearch -->

</sect1> <!-- setup-docu -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="setup-advanced">
<title>Advanced Configuration</title>

<para>
(... to be written ...)
</para>

<sect2 id="setup-plugins">
<title>Plugin Tools</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- setup-plugins -->

<sect2 id="setup-abbrev">
<title>Abbreviations for the Word Completion</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- setup-abbrev -->

<sect2 id="setup-menu-standard">
<title>Adding &kde; Standard Applications to the Tools Menu</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- setup-menu-standard -->


<sect2 id="setup-menu-external">
<title>Adding External Applications to Menus</title>

<para>
(... to be written ...)
</para>

<sect3 id="setup-menu-external-tools">
<title>Adding to the Tools Menu</title>

<para>
(... to be written ...)
</para>
</sect3> <!-- setup-menu-external-tools -->

<sect3 id="setup-menu-external-filecontext">
<title>Adding to the File Context Menu</title>

<para>
(... to be written ...)
</para>
</sect3> <!-- setup-menu-external-filecontext -->

<sect3 id="setup-menu-external-dircontext">
<title>Adding to the Directory Context Menu</title>

<para>
(... to be written ...)
</para>
</sect3> <!-- setup-menu-external-dircontext -->

</sect2> <!-- setup-menu-external -->

</sect1> <!-- setup-advanced -->

</chapter> <!-- setup -->
