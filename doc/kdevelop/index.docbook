<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.1.2-Based Variant V1.1//EN" "dtd/kdex.dtd" [
  <!ENTITY kdevelop "<application>KDevelop</application>">
  <!ENTITY grep "<command>grep</command>">
  <!ENTITY egrep "<command>egrep</command>">
  <!ENTITY ctags "<command>ctags</command>">
  <!ENTITY automake "<command>automake</command>">
  <!ENTITY autoconf "<command>autoconf</command>">
  <!ENTITY libtool "<command>libtool</command>">
  <!ENTITY doxygen "<application>doxygen</application>">
  <!ENTITY doxywizard "<application>doxywizard</application>">
  <!ENTITY CVS "<application>CVS</application>">
  <!ENTITY cvs "<application>cvs</application>">
  <!ENTITY ssh "<application>ssh</application>">
  <!ENTITY python "<application>Python</application>">
  <!ENTITY perl "<application>Perl</application>">
  <!ENTITY php "<application>PHP</application>">
  <!ENTITY apache "<application>Apache</application>">
  <!ENTITY kappname "&kdevelop;">
  <!ENTITY % addindex "INCLUDE">
  <!ENTITY % English "INCLUDE" > <!-- change language only here -->
]>

<book lang="&language;">

<bookinfo>
<title>&kdevelop; Documentation</title>

<date>2002-11-25</date>
<releaseinfo>3.0</releaseinfo>

<authorgroup>
<author>
<firstname>Bernd</firstname>
<surname>Gehrmann</surname>
<affiliation><address><email>bernd@kdevelop.org</email></address></affiliation>
</author>
<author>
<firstname>Caleb</firstname>
<surname>Tennis</surname>
<affiliation><address><email>caleb@aei-tech.com</email></address></affiliation>
</author>
</authorgroup>

<copyright>
<year>2002</year>
<holder>Bernd Gehrmann</holder>
</copyright>
<copyright>
<year>2002</year>
<holder>Caleb Tennis</holder>
</copyright>

<legalnotice>&FDLNotice;</legalnotice>

<abstract>
<para>This documentation describes the &kdevelop; Integrated
Development Environment (Gideon)</para>
</abstract>

<keywordset>
<keyword>KDE</keyword>
<keyword>KDevelop</keyword>
<keyword>IDE</keyword>
<keyword>development</keyword>
<keyword>programming</keyword>
</keywordset>

</bookinfo>

<chapter id="overview">
<title>Overview: Development on UNIX</title>

<para>
From the beginning, UNIX has maintained two very different development
paradigms. One is the world of system programming languages, where the source 
code is compiled to machine code by a <emphasis>compiler</emphasis>. The 
programming language C is an example for this. UNIX was the first operating 
system kernel to be written in a high level language instead of assembler
which was common before that time. The other paradigm is the world of
scripting languages which began with the shell which was at the same time the 
user's interface to the operating system and a very high level programming 
language. Elementary building blocks in a shell script are small utility
programs like <command>grep</command>, <command>sed</command>
and <command>find</command> which do some tightly defined job and 
which are connected to each other via pipes.
</para>

<para>
As time has gone by, both worlds have evolved. While C is still used mainly as
a system programming language, C++ as a variant of C enriched by 
object-oriented and genericity extensions has found its place for the 
development of complex applications in the 1990's. FORTRAN77 and Ada still
have their stronghold in numerical applications. 
</para>

<para>
In the scripting area, there has been a shift away from the shell, which suffers
from portability concerns, to languages which unify all commonly needed
functionality in their standard libraries, while still being able to interface
to the outside through pipes when necessary. &perl; has become popular as a
text processing and system administration language. In the beginning of the 
World Wide Web, CGI scripts written in &perl; were a widely used method to
create dynamic web pages from databases. Today, this method has been mostly
replaced mostly by the <command>mod_perl</command> plugin for the
&apache; web server. Among &perl;'s strengths are its built-in support for 
advanced regular expression expression matching and its rich archive of
freely distributed modules <ulink url="http://cpan.org">CPAN</ulink>.
</para>

<para>
&python; shines by the elegance of its class system and the ease and
flexibility with which external libraries can be wrapped, in a way that they
appear like standard &python; classes and functions. In contrast to &perl;,
&python; has a clear and concise embedding API, which makes it the language
of choice for making C and C++ programs scriptable. &php; was invented as a
language directly embeddable into HTML pages and consequently has its main
uses in delivering dynamic content in the web.
</para>

<para>
All these scripting languages have in common that they are widely portable
between UNIX variants, &Microsoft; &Windows;, &Mac; OS or even VMS. Also,
they all have implementations that are freely distributable.
</para>

<para>

</para>


<simplesect id="overview-buildsystems">
<title>Build systems</title>

<para>
With a compiled language, the basic tools you need are the compiler (which 
turns source code into object files) and the linker (which binds several
object files and libraries together into one executable). When you have a
large project consisting of possibly hundreds of source code files, the
process of compiling may become quite laborsome. You do not want to recompile
all files each time you have changed only some of them. Instead, you only want
to compile those files which are affected by the changes. In general, it is
not obvious which these are. When you change a function prototype in a 
header file, you need to compile all files which include this header file.
</para>

<para>
A tool which takes care of recompilations is <command>make</command>.
It takes as input a so-called <filename>Makefile</filename>, which declares
some <emphasis>targets</emphasis>, the commands which are to be executed
to "make" the target, and a set of <emphasis>dependencies</emphasis>. We
cannot go into the details here. However, we recommend that you make yourself
accustomed to the syntax of <command>make</command>. Even if you
normally do not use it directly, an understanding of the fundamentals of
the build system can be useful. See the <ulink url="info://make/Top">
<citetitle>GNU Make Manual</citetitle></ulink>.
</para>

</simplesect>


<simplesect id="overview-guidevelopment">
<title>GUI Development</title>

<para>
Application developers become even more encumbered by having to not only create
program libraries and logic, but also provide a easy to use custom built user
interface that is both intuitive and functional.  Most programmers receive little
to no training in GUI development, and as a result user interfaces are 
<ulink url="http://www.rha.com/ui_hall_of_shame.htm">poorly designed</ulink>.
</para>

</simplesect>

</chapter>


<chapter id="kdevelopoverview">
<title>&kdevelop; Overview</title>

<sect1 id="howto">
<title>How to obtain KDevelop</title>
<para>
&kdevelop; can be found via the project home page at <ulink url="http://www.kdevelop.org">
http://www.kdevelop.org</ulink> or via the <ulink url="http://download.kde.org">KDE ftp site</ulink>
&kdevelop; is also available from many different Linux distributions.
</para>

<para>
Anonymous CVS repository snapshots are also available.  The module name is <emphasis>kdevelop</emphasis>. 
See the instructions on the <ulink url="http://developer.kde.org/source/anoncvs.html">KDE website</ulink> 
for details on how to obtain the &kdevelop; source code.
</para> 

</sect1>


<sect1 id="requirements">
<title>&kdevelop; Requirements</title>
<para>
In order to successfully compile and use &kdevelop;, you need the following programs and libraries which
are available on most platforms as distribution packages and thereby can be installed easily.
</para>

<itemizedlist>
<title>Required:</title>
<listitem><para>gcc/g++ 2.95, 3.1, 3.2 (or compatible)</para></listitem>
<listitem><para>GNU make (or compatible)</para></listitem>
<listitem><para>perl 5.004</para></listitem>
<listitem><para>autoconf 2.54 or greater</para></listitem>
<listitem><para>automake 1.6.2 or greater</para></listitem>
<listitem><para>flex 2.5.4</para></listitem>
<listitem><para>Qt 3.0.3 or greater</para></listitem>
<listitem><para>KDE 3.0.4 or greater</para></listitem>
</itemizedlist>

<itemizedlist>
<title>Optional:</title>
<listitem><para>dot, from <ulink url="http://www.graphviz.org">www.graphviz.org</ulink></para></listitem>
</itemizedlist>

</sect1>

<sect1 id="compileandinstall">
<title>&kdevelop; Compilation and Installation</title>
<para>
In order to compile and install &kdevelop; on your system, type the following in the base directory
of the &kdevelop; distribution:
</para>

</sect1>

</chapter>


<chapter id="userinterface">
<title>Overview: &kdevelop;'s Features</title>

<sect1 id="uimodes">
<title>User Interface Modes</title>

<para>
&kdevelop; 3.0 offers developers four separate interface modes: <link linkend="mdi-desc">Multiple Document</link>,
<link linkend="tabbed-desc">Tabbed Document</link>, <link linkend="toplevel-desc">Toplevel Window</link>
, and <link linkend="ideal-desc">IDEAl</link>.
</para>

<sect2 id="mdi-desc">
<title>Multiple Document Interface (MDI)</title>

<para>
</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="gideon-mdi-mode.png" format="PNG"/>
</imageobject>
<textobject><phrase>Screenshot</phrase></textobject>
</mediaobject></screenshot>

</sect2>


<sect2 id="tabbed-desc">
<title>Tabbed Document Mode</title>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="gideon-tabbed-mode.png" format="PNG"/>
</imageobject>
<textobject><phrase>Screenshot</phrase></textobject>
</mediaobject></screenshot>

<para>
</para>

</sect2>

<sect2 id="toplevel-desc">
<title>Toplevel Window Mode</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="gideon-toplevel-mode.png" format="PNG"/>
</imageobject>
<textobject><phrase>Screenshot</phrase></textobject>
</mediaobject></screenshot>

<para>
</para>

</sect2>

<sect2 id="ideal-desc">
<title>IDEAl Window Mode</title>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="gideon-ideal-mode.png" format="PNG"/>
</imageobject>
<textobject><phrase>Screenshot</phrase></textobject>
</mediaobject></screenshot>

</sect2>

</sect1>

<sect1 id="parts">
<title>Plugin Parts</title>
<para>KDevelop 3.0 offers extensible modules, or parts, to be loaded at runtime and on demand.  This
allows developers to only turn on features that they need or want for their development.
</para>

<para>
Some of the parts are considered global - that is, they effect the entire operation of &kdevelop;.
For example, the uimode part allows a developer to select which user interface they wish to use.
</para>

<para>
Other parts are project specfic, and are only utilized when a project of that type is loaded.  The
Automake Manager, for example, only needs to be active when an Automake based project is currently
loaded.  Otherwise, this part will not be active.
</para>

<para>
Active parts can have many effects on &kdevelop;.  Depending on their function, they may add extra menus,
extra menu items, extra tool buttons, etc.
</para>

<para>
Globally, a project will rely on some form of project management system.  &kdevelop; offers four
<link linkend="makesystems">project management systems</link>:
</para>

<table>
<title>Project Management Parts in &kdevelop;</title>
<tgroup cols="2"><tbody>
<row><entry>antproject</entry><entry>ANT Project Manager</entry></row>
<row><entry>autoproject</entry><entry>Automake Project Manager</entry></row>
<row><entry>customproject</entry><entry>Custom Project Manager</entry></row>
<row><entry>trollproject</entry><entry>QMake based Project Manager</entry></row>
</tbody></tgroup>
</table>

<table>
<title>Global Parts in &kdevelop;</title>
<tgroup cols="2"><tbody>
<row><entry>Part Name</entry><entry>Description</entry></row>
<row><entry>appwizard</entry><entry>New Project Wizard</entry></row>
<row><entry>history</entry><entry></entry></row>
<row><entry>konsole</entry><entry>Embedded Konsole</entry></row>
<row><entry>editor-chooser</entry><entry>Chooses an internal text editor</entry></row>
<row><entry>doctreeview</entry><entry>Documentation Viewer</entry></row>
<row><entry>openwith</entry><entry></entry></row>
<row><entry>fileselector</entry><entry>A file selection widget</entry></row>
<row><entry>uimode</entry><entry>Customize the UI mode</entry></row>
<row><entry>texttools</entry><entry>Additional text tools</entry></row>
<row><entry>tipofday</entry><entry>A tip of the day</entry></row>
<row><entry>grepview</entry><entry>A graphical grep utility</entry></row>
<row><entry>cvs</entry><entry>CVS Support</entry></row>
<row><entry>tools</entry><entry></entry></row>
<row><entry>regexptest</entry><entry>A regular expression tester</entry></row>
<row><entry>abbrev</entry><entry>Abbreviation Expansion</entry></row>
<row><entry>filter</entry><entry></entry></row>
<row><entry>valgrind</entry><entry>A graphical valgrind frontend</entry></row>
</tbody></tgroup>
</table>

<table>
<title>Language Support Parts in &kdevelop;</title>
<tgroup cols="2">
<tbody>
<row><entry>cppsupport</entry><entry>Support for C/C++</entry></row>
<row><entry>fortransupport</entry><entry>Support for Fortran</entry></row>
<row><entry>javasupport</entry><entry>Support for Java</entry></row>
<row><entry>perlsupport</entry><entry>Support for Perl</entry></row>
<row><entry>phpsupport</entry><entry>Support for PHP</entry></row>
<row><entry>pythonsupport</entry><entry>Support for Python</entry></row>
</tbody></tgroup>
</table>

<table>
<title>Project Specific Parts in &kdevelop;</title>
<tgroup cols="2"><tbody>
<row><entry>astyle</entry><entry></entry></row>
<row><entry>buglist</entry><entry></entry></row>
<row><entry>classview</entry><entry>Classview Manager</entry></row>
<row><entry>ctags</entry><entry></entry></row>
<row><entry>debugger</entry><entry>GNU Debugger Manager</entry></row>
<row><entry>diff</entry><entry></entry></row>
<row><entry>distpart</entry><entry></entry></row>
<row><entry>doxygen</entry><entry></entry></row>
<row><entry>fileview</entry><entry></entry></row>
<row><entry>javadebugger</entry><entry></entry></row>
<row><entry>manager</entry><entry></entry></row>
<row><entry>nedit</entry><entry></entry></row>
<row><entry>outputviews</entry><entry></entry></row>
<row><entry>perforce</entry><entry></entry></row>
<row><entry>qeditor</entry><entry></entry></row>
<row><entry>scripting</entry><entry></entry></row>
<row><entry>scriptproject</entry><entry></entry></row>
<row><entry>sourcenav</entry><entry></entry></row>
<row><entry>svn</entry><entry></entry></row>
<row><entry>visualboyadvance</entry><entry></entry></row>
<row><entry>windowmenu</entry><entry></entry></row>
</tbody></tgroup>
</table>


</sect1>

<sect1 id="makesystems">
<title>Project Management Systems</title>

<sect2>
<title>Automake Project</title>

<para>
Projects created with &kdevelop;'s Automake Project Manager make it very easy for developers 
to use the GNU standard development tools. In opposition to the self-creation of Makefiles, 
which have to be written anyway because of the project's complexity, those provide not only a better 
way of Makefile generation but also a good and safe way to provide a fast adaption towards different 
systems by autoconf-generated configure scripts. 
</para>
<para>
The distribution of your applications does not require the end-user to have anything different installed
other than a C++ compiler and the appropriate development libraries, which is most often the case; but
ou can as well distribut binary packages of your application.  In either way, the end-user of your product
does not have to have &kdevelop; installed.  For giving away your sources, we advise to include the 
project file of &kdevelop; as well, as this makes it very easy for other developerss to work with your
sources if they use KDevelop as well.  For projects where several developers, maybe working on different
places, are involved, this should be the case anyway to ensure consistency of the Makefiles so you don't
run into trouble.  Especially on multi language applications, translators won't actually work with the
source code, except in cases that require correction for enabling translation support.
</para>

</sect2>

<sect2>
<title>QMake Project</title>
<para>
For developers who enjoy the flexibility and feel of Qt's qmake system, &kdevelop; offers the ability to
handle qmake based projects (.pro files) within the GUI.
</para>
</sect2>

</sect1>

</chapter>


<chapter id="appwizard">
<title>Getting Started: The Application Wizard</title>

<sect1 id="newprojects">
<title>New projects</title>

<para>
To create a new project in &kdevelop; 3.0, select <guimenuitem>New Project</guimenuitem> from the 
<guimenu>Project</guimenu> menu.  You should see the New Project Wizard, as seen below:
</para>

<figure id="screenshot-newprojectwizard" float="1">
<title>A screenshot of the Create New Project Wizard</title>
<mediaobject>
<imageobject><imagedata fileref="createnewproject.png"/></imageobject>
</mediaobject>
</figure>

<para>
Fill out the appropriate information, and select <guibutton>Next</guibutton>
</para>

</sect1>


<sect1 id="importing">
<title>Importing existing projects</title>

<para>
To import an existing directory in &kdevelop; 3.0, select <guimenuitem>Import Existing Directory</guimenuitem>
from the <guimenu>Project</guimenu> menu.  You should see the Import Directory Wizard, as seen below:
</para>

<figure id="screenshot-importdirectory" float="1">
<title>The Import Directory Dialog</title>
<mediaobject>
<imageobject><imagedata fileref="importdirectory.png"/></imageobject>
</mediaobject>
</figure>



</sect1>


<sect1 id="convertingold">
<title>Converting old &kdevelop; project files</title>

<para>
&kdevelop; 3.0 ships with a utility called <filename>kdevprj2kdevelop</filename>.
This utility can be used to convert older &kdevelop; project files to 3.0 files.
</para>

</sect1>

</chapter>



<chapter id="editing">
<title>Editing</title>

<sect1 id="keyboardmapping">
<title>Keyboard mapping</title>
<indexterm zone="keyboardmapping"><primary>keybindings</primary></indexterm>

<para>
In the following, we will list the default keybindings of the
default editor. You can configure them as you like (how?)
</para>

<informaltable>
<tgroup cols="2">
<tbody>

<row><entry><para><keycap>
  Left
</keycap></para></entry>
<entry><para>
  Moves one character left
</para></entry></row>

<row><entry><para><keycap>
  Right       
</keycap></para></entry>
<entry><para>
  Moves one character right
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  Left   
</keycap></keycombo></para></entry>
<entry><para>
  Moves one word left
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  Right  
</keycap></keycombo></para></entry>
<entry><para>
  Moves one word right
</para></entry></row>

<row><entry><para><keycap>
  Up          
</keycap></para></entry>
<entry><para>
  Moves up one line
</para></entry></row>

<row><entry><para><keycap>
  Down        
</keycap></para></entry>
<entry><para>
  Moves down one line
</para></entry></row>

<row><entry><para><keycap>
  PgUp        
</keycap></para></entry>
<entry><para>
  Moves up one page
</para></entry></row>

<row><entry><para><keycap>
    PgDn        
</keycap></para></entry>
<entry><para>
  Moves down one page
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  PgUp   
</keycap></keycombo></para></entry>
<entry><para>
  Moves to the beginning of the file
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  PgDn   
</keycap></keycombo></para></entry>
<entry><para>
  Moves to the end of the file
</para></entry></row>

<row><entry><para><keycap>
    Home        
</keycap></para></entry>
<entry><para>
  Moves to the beginning of the line
</para></entry></row>

<row><entry><para><keycap>
    End         
</keycap></para></entry>
<entry><para>
  Moves to the end of the line
</para></entry></row>

</tbody>
</tgroup>
</informaltable>

<para>
For all the keys above, the Shift can be pressed additionally,
to mark from the current cursor position to the one afterwards.
</para>

<informaltable>
<tgroup cols="2">
<tbody>

<row><entry><para><keycap>
  Backspace   
</keycap></para></entry>
<entry><para>
  Deletes one character left
</para></entry></row>

<row><entry><para><keycap>
  Delete      
</keycap></para></entry>
<entry><para>
  Deletes the character under the cursor
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  C
</keycap></keycombo></para></entry>
<entry><para>
  Copies the selected text to the clipboard
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  V
</keycap></keycombo></para></entry>
<entry><para>
  Pastes the selected text from the clipboard
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  X      
</keycap></keycombo></para></entry>
<entry><para>
  Deletes the selected text and puts it into the clipboard
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  Z        
</keycap></keycombo></para></entry>
<entry><para>
  Undo
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Shift
</keycap><keycap>
  Ctrl
</keycap><keycap>
  Z  
</keycap></keycombo></para></entry>
<entry><para>
Redo
</para></entry></row>

</tbody>
</tgroup>
</informaltable>

</sect1>


<sect1 id="searchinggrepping">
<title>Searching and grepping</title>
<indexterm zone="searchinggrepping"><primary>searching</primary></indexterm>
<indexterm zone="searchinggrepping"><primary>finding</primary></indexterm>

<simplesect id="searching">
<title>Searching for text</title>

<para>
<keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo>- Find 
<keycombo><keycap>Ctrl</keycap><keycap>R</keycap></keycombo>- Replace
</para>

</simplesect>
 

<simplesect id="isearch">
<title>ISearch</title>
<indexterm zone="isearch"><primary>isearch</primary></indexterm>
<indexterm zone="isearch"><primary>incremental search</primary></indexterm>
<indexterm zone="isearch"><primary>search</primary><secondary>incremental</secondary></indexterm>

<para>
The conventional search with <menuchoice><guimenu>Edit</guimenu>
<guimenuitem>Find</guimenuitem></menuchoice> requires you to specify the full 
search term before starting. Most of the time, it is much faster to search 
incrementally. If you click into the edit field labeled 
<guilabel>ISearch</guilabel> in the toolbar, the search is performed as you 
type. You will find that often the desired term is already found after typing
in 3 or 4 letters.
</para>

</simplesect>


<simplesect id="grep">
<title>Grep</title>
<indexterm zone="grep"><primary>search</primary><secondary>in files</secondary></indexterm>

<para>
Both search mechanisms described above are restricted to searching within one
source file. An additional tool which allows you to search through a (possibly
large) number of files is available through the
<guimenuitem>Search in Files...</guimenuitem> item in the 
<guimenu>Edit</guimenu> menu. It is basically a frontend for the 
&grep;(1) program.
</para>

<para>
In the dialog, you can specify which files are searched. There is a number of 
wildcard patterns available in a combo box. In this way, you can easily
restrict the find mechanism to header files. Furthermore, you specify a 
directory where the search is started. If you check the 
<guibutton>Recursive</guibutton> box, the search iterates through all 
directories in the hierarchy below this one.
</para>

<para>
The search term is in general a regular expression following POSIX syntax. 
For example, you can use the term <literal>"\&lt;K.*"</literal> if you want to
find all words which begin with the letter K. The following characters
are interpreted in a special way:
</para>

<informaltable>
<tgroup cols="2">
<tbody>

<row><entry>
  <literal>.</literal>
</entry><entry>
  Matches any character 
</entry></row>
<row><entry>
  <literal>^</literal>
</entry><entry>
Matches the beginning of a line
</entry></row>
<row><entry>
  <literal>$</literal>
</entry><entry>
  Matches the end of a line 
</entry></row>
<row><entry>
  <literal>\&lt;</literal>
</entry><entry>
  Matches the beginning of a word 
</entry></row>
<row><entry>
  <literal>\&gt;</literal>
</entry><entry>
  Matches the end of a word
</entry></row>
<row><entry>
  <literal>?</literal>
</entry><entry>
  The preceding item matches less than once 
</entry></row>
<row><entry>
  <literal>*</literal>
</entry><entry>
  The preceding item is matched zero or more times 
</entry></row>
<row><entry>
  <literal>+</literal>
</entry><entry>
  The preceding item is matched once or more times 
</entry></row>
<row><entry>
  <literal>{n}</literal>
</entry><entry>
  The preceding item is matched exactly n times 
</entry></row>
<row><entry>
  <literal>{n,}</literal>
</entry><entry>
  The preceding item is matched n or more times 
</entry></row>
<row><entry>
  <literal>{,n}</literal>
</entry><entry>
  The preceding item matches less than n times
</entry></row>
<row><entry>
  <literal>{n,m}</literal>
</entry><entry>
  The preceding item matches at least <literal>n</literal> times but less 
than <literal>m</literal> times
</entry></row>

</tbody>
</tgroup>
</informaltable>

<para>
Backreferences to bracketed subexpressions are also available by the notation
<literal>\n</literal>.
</para>

<para>
For C++ programmers, as special bonus there are some search templates
available for typical patterns. These allow you to search for example
all calls of member functions of a certain object.
</para>

<para>
Once you start the search by clicking on the <guibutton>Search</guibutton>
button, it will be performed by an external, asynchronous process. All found 
items will appear in the view called <guilabel>Grep</guilabel>. You can then
jump to the found items by clicking on them. Note that grep scans the files
as they stored in the file system. If you have modified versions of them in 
your editor, you may get some mismatches in the line number, or some found
items will be invalid. You can avoid this by saving all files beforehand.
</para>

</simplesect>

</sect1>
  

<sect1 id="newfiles">
<title>Creating new files and classes</title>

<para>
</para>

</sect1>

</chapter>



<chapter id="filebrowsers">
<title>The file browsers</title>

<para>
On the left side of the main window, &kdevelop; can display various kinds of
lists and trees for the selection of files:
</para>

<itemizedlist>
<listitem>
<formalpara>
<title>File Tree</title>
<para>
This shows a tree view of the file hierarchy below the project directory. If 
you click on a file, it is loaded into the editor. For files which do not
contain text, KDevelop starts an application that can handle the respective
MIME type. 
</para>
</formalpara>

<para>
The file tree is regularly updated whenever something changes in the file 
system. For example, if you create new files or directories (even outside 
&kdevelop;), this is immediately reflected in the file list. On Linux,
this feature makes use of the FAM library. On other operating systems or over 
NFS, the directories shown are polled in small intervalls.
</para>

<para>
The file tree hides files which are usually not interesting, like object 
files. In the <guimenuitem>Project options</guimenuitem> under 
<guibutton>File views</guibutton>, you can configure (as a comma separated 
list of wildcards) which patterns are used to filter out irrelevant files. 
</para>

<para>
Furthermore, you can decide to restrict the file tree to show only files which
belong to the currently loaded project. This can be toggled by clicking with 
the right mouse button on the root item of the tree.
</para>

<figure id="screenshot-filetree" float="1">
<title>A screenshot of the file tree</title>
<mediaobject>
<imageobject><imagedata fileref="filetree.png"/></imageobject>
</mediaobject>
</figure>

</listitem>

<listitem>
<formalpara>
<title>File Groups</title>
<para>
This shows the files belonging to the project, grouped by their file name 
extension. As in the file tree, you can edit a file by clicking on it
with the left mouse button.
</para>
</formalpara>

<para>
The groups shown in this view can be configured under
<guibutton>File views</guibutton> in the 
<guimenuitem>Project options</guimenuitem> dialog. In order to customize the
view to your needs, it is helpful to understand how files are distributed on 
the groups. For each file, &kdevelop; goes through all groups from top to 
bottom. In each group, it looks whether the file name matches one of the 
patterns. If there is a match, the file is shown in this group and the 
iteration is aborted. This makes it clear that more general patterns should
be put below more specific ones. For example, an asterisk for the 
<guilabel>Other</guilabel> group should  be the last pattern.
</para>

</listitem>

</itemizedlist>

</chapter>



<chapter id="classbrowser">
<title>The class browser</title>
<indexterm zone="classbrowser"><primary>class browser</primary></indexterm>

<para>
When working on a project in an object-oriented language, your emphasis when
working on a project is not on the source files and their names, but on the 
classes and their relationships. In order to help you navigating in the space
of defined classes and symbols, &kdevelop; includes various class browsers 
that visualize the class structure in different ways.
</para>

<sect1 id="classview">
<title>Class view</title>

<para>
This view is shown on the left side of the main window and contains a linear
list of all classes, variables and functions in your project. It is designed
as a tree view. If you open a class node by clicking on bit, a list with all 
methods and attributes of the respective class is shown.
</para>

<figure id="screenshot-classview" float="1">
<title>A screenshot of the class view</title>
<mediaobject>
<imageobject><imagedata fileref="classview.png"/></imageobject>
</mediaobject>
</figure>

<para>
The class view works in two different modes. By default, all symbols are 
grouped into "Classes", "Structs", "Functions", "Variables" and "Namespaces". 
In the context menu of the view, you can choose 
<guimenuitem>List by Namespaces</guimenuitem>. In this mode, the namespace
hierarchy is shown and the symbols grouped into the respective namespace where
they are defined. This may be more useful in projects which make heavy use of
(nested) namespaces. It is less useful in projects without namespaces.
</para>

<para>
You can also change the way in which class names are displayed. Normally, the
names of the classes are shown, without the namespace in which they are defined.
This means, you cannot immediately distinguish classes with the same name in 
different namespaces. If you rest for a while with the mouse over an item, the
full scoped name is shown as a tooltip though. You can decide to always
display the fully scoped class name by choosing
<guimenuitem>Full Identifier scopes</guimenuitem> from the context menu.
</para>

<para>
Clicking on a class or method in the class view brings you to its definition.
You can also jump to the declaration of a method by choosing 
<guimenuitem>Go to declaration</guimenuitem> from the context menu. In the 
context menu for classes are also the items
<guimenuitem>Add method..</guimenuitem> and 
<guimenuitem>Add attribute...</guimenuitem>. This opens dialogs where you can 
generate new method and variable declaration in the respective class, together
with an empty implementation.
</para>

</sect1>


<sect1 id="classtools">
<title>Class tools</title>

<para>
The class tool dialog is activated by right clicking on a class in the class
view and choosing <guimenuitem>Class tool...</guimenuitem>.
</para>

</sect1>


<sect1 id="classhierarchy">
<title>Class hierarchy</title>

<para>
</para>

</sect1>

</chapter>



<chapter id="docbrowser">
<title>The documentation browser</title>


<figure id="screenshot-doctreeview" float="1">
<title>A screenshot of the documentation tree</title>
<mediaobject>
<imageobject><imagedata fileref="doctreeview.png"/></imageobject>
</mediaobject>
</figure>

</chapter>



<chapter id="projectmanagement">
<title>Building and Project management</title>

<para>
This chapter deals only with compiled projects, such as C++, Java or
Fortran projects. Projects for scripting languages like Python and
PHP work very differently.
</para>

<para>
In <xref linkend="overview-buildsystems"/> we have given a rough overview of
the build systems commonly in use on UNIX systems. We now give a detailed
introduction into the project management modules supported by &kdevelop;
The most important one is the <command>autoproject</command> plugin which
serves as a frontend to the collection of scripts sometimes referred to as
GNU autotools (&automake;, &autoconf;, &libtool;). Almost all application
templates use this project management.
</para>

<para>
In addition, &kdevelop; contains the <command>customproject</command> plugin,
which can be used for projects for which you maintain your own 
<filename>Makefiles</filename>, but also for projects that use the tool
<command>ant</command> which is very common in the Java world, or projects
using <command>qmake</command>.
</para>


<sect1 id="autoproject">
<title>Automake projects</title>
<indexterm zone="autoproject"><primary><command>autoproject</command></primary></indexterm>
<indexterm zone="autoproject"><primary>&automake;</primary></indexterm>
<indexterm zone="autoproject"><primary>&autoconf;</primary></indexterm>
<indexterm zone="autoproject"><primary>&libtool;</primary></indexterm>

<para>
</para>


<simplesect id="autoconf">
<title>Autoconf</title>
<indexterm zone="autoconf"><primary><filename>configure</filename> script</primary></indexterm>
<indexterm zone="autoconf"><primary><filename>config.status</filename> script</primary></indexterm>
<indexterm zone="autoconf"><primary><filename>Makefile.in</filename></primary></indexterm>
<indexterm zone="autoconf"><primary><filename>config.h.in</filename></primary></indexterm>

<figure id="flow-configure" float="1">
<title>Effect of the configure script</title>
<mediaobject>
<imageobject><imagedata fileref="configure.png"/></imageobject>
</mediaobject>
</figure>

<para>
<filename>Makefile.in</filename> into <filename>Makefile</filename>
</para>

<programlisting>
prefix = @prefix@
INSTALL = @INSTALL@
build_triplet = @build@
CXX = @CXX@
</programlisting>

<programlisting>
prefix = /home/bernd/kde3
INSTALL = /usr/bin/ginstall -c -p
build_triplet = i686-pc-linux-gnu
CXX = g++
</programlisting>

<para>
<filename>config.h.in</filename> into <filename>config.h</filename>
</para>

<programlisting>
/* Define if you have libz */
#undef HAVE_LIBZ
/* The size of a `int', as computed by sizeof. */
#undef SIZEOF_INT
</programlisting>

<programlisting>
/* Define if you have libz */
#define HAVE_LIBZ 1
/* The size of a `int', as computed by sizeof. */
#define SIZEOF_INT 4
</programlisting>

</simplesect>


<simplesect id="automake">
<title>Automake</title>

<para>
</para>

</simplesect>


<simplesect id="automakemanager">
<title>KDevelop's automake manager</title>

<figure id="screenshot-automakemanager" float="1">
<title>A screenshot of the Automake manager</title>
<mediaobject>
<imageobject><imagedata fileref="automakemanager.png"/></imageobject>
</mediaobject>
</figure>

</simplesect>


<simplesect id="automakelibrary">
<title>Building and installing libraries</title>

<para>
<itemizedlist>
<listitem><para>
  -rpath
</para></listitem>
<listitem><para>
  PIC
</para></listitem>
<listitem><para>
  static
</para></listitem>
<listitem><para>
  plugins: no-undefined
</para></listitem>
</itemizedlist>
</para>

</simplesect>

</sect1>



<sect1 id="customproject">
<title>Custom Makefiles and build scripts</title>
<indexterm zone="customproject"><primary><filename>Makefile</filename></primary></indexterm>
<indexterm zone="customproject"><primary><filename>build.xml</filename></primary></indexterm>

<para>
</para>

</sect1>

<sect1 id="compileroptions">
<title>Compiler options</title>

<para>
</para>

</sect1>

<sect1 id="makeoptions">
<title>Make options</title>

<para>
</para>

</sect1>

</chapter>



<chapter id="advancedautoproject">
<title>Advanced autoproject usage</title>
<indexterm zone="advancedautoproject"><primary>&automake;</primary></indexterm>

<sect1 id="buildconfigurations">
<title>Multiple build configurations</title>
<indexterm zone="buildconfigurations"><primary>build configurations</primary><secondary>multiple</secondary></indexterm>

<para>

</para>

</sect1>


<sect1 id="crosscompiling">
<title>Cross-compiling</title>
<indexterm zone="crosscompiling"><primary>cross compiling</primary></indexterm>
<indexterm zone="crosscompiling"><primary>compiling</primary><secondary>cross</secondary></indexterm>
<indexterm zone="crosscompiling"><primary><option>--host</option></primary></indexterm>

<para>
When you have suitable cross compilers available, you can cross compile your
programs for processors and operating systems different from the system where
&kdevelop; and the compiler is running. The GNU compiler collection GCC can
be configured and compiled as a cross compiler if you compile it yourself.
Consult the <ulink url="info://gcc/Cross-Compiler">GCC info pages</ulink> for
more information. Some Linux distributions also provide binary packages.
</para>

<para>
An automake based package can easily be cross-compiled by specifying the
<option>--host</option> option to the configure script and setting the
<envar>CC</envar> and <envar>CXX</envar> environment variables to the
respective cross compiler binaries. Often you want to switch between a
the cross-compiled version of your application and one compiled for your
development system. For this, it is advantageous to use &kdevelop; capability
of creating multiple build configurations, as explained in 
<xref linkend="buildconfigurations"/>. Once you have created a new build
configuration for cross-compiling in the 
<menuchoice><guimenu>Project</guimenu>
<guimenuitem>Project Options...</guimenuitem></menuchoice> dialog, add
the option
</para>

<para><screen>
<option>--host=</option><replaceable>platform</replaceable>
</screen></para>

<para>
to the configure options. The <replaceable>platform</replaceable> name
is a tuple of the form
</para>

<programlisting>cpu-vendor-os</programlisting>
<para>or</para>
<programlisting>cpu-vendor-kernel-os</programlisting>

<para>
For many combinations, you can use a short form, for instance
<wordasword>i386-linux</wordasword> or <wordasword>arm-elf</wordasword>.
</para>

</sect1>


<sect1 id="qtembedded">
<title>Qt/Embedded</title>
<indexterm zone="qtembedded"><primary>embedded</primary><secondary>Qt</secondary></indexterm>
<indexterm zone="qtembedded"><primary>Qt/Embedded</primary></indexterm>
<indexterm zone="qtembedded"><primary>Qtopia</primary></indexterm>
<indexterm zone="qtembedded"><primary>framebuffer</primary></indexterm>

<para>
Qt/Embedded is a version of the Qt library that does not use the X window
system, but draws directly to the framebuffer on Linux systems. It is
therefore interesting for embedded systems which have tight restrictions
on the memory usage of the whole system. Its API is fully compatible with
the one of the X11 version.
</para>

<para>
Developing an application for Qt/Embedded with &kdevelop; is not very different
from developing a program for the X11 version of Qt. In fact, you can use the
same codebase for both versions. If you use the autoproject project
management, you switch to the embedded version by passing the argument
<option>--enable-embedded</option> to the configure script. You can set
this in the <menuchoice><guimenu>Project</guimenu>
<guimenuitem>Project Options...</guimenuitem></menuchoice> dialog under
<guilabel>Configure Options</guilabel>. With the option
<option>--with-qt-dir=DIR</option> you set the directory in which Qt/Embedded
is installed.
</para>

<para>
After configuring and compiling your application with these options, it will
link with the <filename>libqpe.so</filename> library. This version of your
application will not normally run when you use X11. In order to test it, 
run it under the control of the program <application>qvfb</application> 
(Qt Virtual Frame Buffer). This is done by starting 
<application>qvfb</application> and then starting your application with
</para>

<para><screen><command>
app <option>-qws</option> <option>-display QVFb:0</option>
</command></screen></para>

<para>
Naturally, when you have a working version of your application, you 
will want to use it on the target processor. For this, it will probably
be convenient to create multiple build configurations, as explained above,
so that you can quickly switch between the version running on your development
system and the version running on the target system.
</para>

<para>
Applications for Qt/Embedded normally run as single applications on the
device they are designed for. Trolltech also supports Qtopia, which is a 
collection of applications for PIM, web browsing and various other areas that
work together in a consistent manner. It is the standard environment for
instance on the Sharp Zaurus. You can write applications that integrate into
this environment by using the Qtopia SDK. This implies making your application
class a subclass of <classname>QPEApplication</classname> and linking to the
library <filename>libqpe.so</filename>. If you develop your application with
the autoproject project management, you have to add
<option>--enable-qtopia</option> to the configure options.
</para>

</sect1>

</chapter>



<chapter id="debugger">
<title>The debugger</title>
<indexterm zone="debugger"><primary>debugger</primary></indexterm>

<para>
For C and C++, &kdevelop; contains an internal debugger that is directly
integrated with the editor. Technically, it is implemented as a frontend 
that uses the portable GNU debugger <application>gdb</application> through 
a pipe. The debugger can be started in several ways:
</para>

<itemizedlist>
<listitem>
<para>
With <menuchoice><guimenu>Debug</guimenu><guimenuitem>Start</guimenuitem></menuchoice>,
the main program of your project is loaded into the debugger.
</para>
</listitem>

<listitem>
<para>
Using <menuchoice><guimenu>Debug</guimenu>
<guimenuitem>Start (other)</guimenuitem>
<guimenuitem>Examine core file</guimenuitem></menuchoice> you load a core file
into memory, which is generated by the operating system kernel when the
program has crashed (The generation of core files may be switched off on your
system, see <application>ulimit(1)</application>). This is useful for a
post-mortem analysis of a program.
</para>
</listitem>

<listitem>
<para>
With <menuchoice><guimenu>Debug</guimenu>
<guimenuitem>Start (other)</guimenuitem>
<guimenuitem>Attach to process</guimenuitem></menuchoice> you invoke the
debugger on an already running program. You will be shown a
process list where you can select the process which the debugger
should take over.
</para>
</listitem>

<listitem>
<para>
Note that debugging is only possible if your project has been compiled with
debugging information enabled. It can be activated in the 
<guibutton>Compiler options</guibutton> dialog. When this option is switched
on, the compiler generates additional data which allows the debugger to 
associate file names and line numbers with addresses in the executable.
</para>
</listitem>
</itemizedlist>

<para>
The debugger frontend offers several views "into" the process:
</para>

<itemizedlist>
<listitem>
<formalpara>
<title>Variables</title>
<indexterm zone="debugger"><primary>watch variables</primary></indexterm>
<para>
This window lists the values of all local variables at the current execution
point of the program. It covers the variables in the complete call stack,
i.e.  the function where the process was interrupted, the function that called
this function, and so on up to <function>main()</function> function.
</para>
</formalpara>

<para>
Another branch in the variables contains watch variables. You can configure
yourself which variables are shown here. Both local and global variables can 
be watched. You can add variables either by clicking on the 
<guibutton>Add</guibutton> button or pressing <keycap>RETURN</keycap> while 
the <guilabel>Watch</guilabel> item is selected. They can be removed again 
via the context menu.
</para>
</listitem>

<listitem>
<formalpara>
<title>Breakpoints</title>
<indexterm zone="debugger"><primary>breakpoints</primary></indexterm>
<para>
</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title>Frame stack</title>
<indexterm zone="debugger"><primary>frame stack</primary></indexterm>
<para>
</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title>Disassemble</title>
<indexterm zone="debugger"><primary>disassemble</primary></indexterm>
<para>
</para>
</formalpara>
</listitem>

</itemizedlist>


<sect1 id="settingbreakpoints">
<title>Setting breakpoints</title>

<para>
</para>

</sect1>


<sect1 id ="debuggeroptions">
<title>Options</title>

<formalpara>
<title>Display mangled names</title>
<indexterm zone="debugger"><primary>name mangling</primary></indexterm>
<indexterm zone="debugger"><primary>mangling</primary><secondary>name</secondary></indexterm>

<para>
In C++, function names in the executable are "mangled", i.e. the function
names include information about the argument types. This is necessary in 
order to support overloading of functions. The mangling algorithm is not 
standardized and differs even between different versions of the 
GNU C++ compiler.
</para>
</formalpara>

<para>
In the disassembling window, normally unmangled names are displayed, so
function signatures appear in the similar way as in the source code, so
they are easily readable. Alternatively, you can decide to see mangled names.
</para>

<formalpara>
<title>Try setting BPs on lib load</title>
<indexterm zone="debugger"><primary>lazy breakpoints</primary></indexterm>
<indexterm zone="debugger"><primary>breakpoints</primary><secondary>lazy</secondary></indexterm>

<para>
The debugger backend <application>gdb</application> does not allow to set
breakpoints within code that is not currently loaded. In a highly modular
application, where often code is only loaded on demand as a plugin (using
the libc function <function>dlopen(3)</function>), this can be incovenient. 
Therefore, &kdevelop; rolls it own support for breakpoints in shared 
libraries. If you set this option, it allows you to set breakpoints in 
libraries which are not loaded. Then, whenever <application>gdb</application>
notifies that a library is loaded, &kdevelop; tries to set the pending 
breakpoints.
</para>
</formalpara>

<formalpara>
<title>Enable floating toolbar</title>
<indexterm zone="debugger"><primary>debugger toolbar</primary></indexterm>
<indexterm zone="debugger"><primary>toolbar</primary><secondary>debugger</secondary></indexterm>

<para>
</para>
</formalpara>

</sect1>

</chapter> 
  

<chapter id="python">
<title>Python</title>

<para>
</para>

</chapter>



<chapter id="php">
<title>PHP</title>

<para>
</para>
</chapter>



<chapter id="cvs">
<title>Using CVS</title>
<indexterm zone="cvs"><primary>CVS</primary></indexterm>
<indexterm zone="cvs"><primary>revision control</primary></indexterm>

<para>
&CVS; is the revision control system which many open source projects -
including KDE - are using. It stores all sources codes in a central place,
called the <emphasis>repository</emphasis>.  From the repository, developers 
can check out a current version of the project or snapshots of it at arbitrary
points of time. In contrast to some other revision control systems, it is not 
necessary to <emphasis>lock</emphasis> files one wants to work on. So 
development can be highly parallelized.
</para>

<para>
Whenever a developer has finished a task, he <emphasis>commits</emphasis> his
code (accompanied by a log message). &CVS; takes the job to merge the changes
made by several developers. It can of course happen that developers work on 
the same piece of code, resulting in a conflicting set of changes (in practice
this occurs seldom, and is often a sign of a lack of communication). In this
case &CVS; rejects a commit; only after all conflicts are resolved, a file can
be commited.
</para>

<para>
So far, this has been a description of the basic features of &CVS; one usually
has to cope with. But &CVS; can provide a lot more: One can  maintain several
branches of a project (e. g. KDE 1.1.2 and KDE 2 were branches in KDE's 
development tree), merge changes from one branch to another, ask for
differences between revisions, the revision history of files etc.
</para>

<para>
&CVS; is implemented as a client-server system. As a user, all communication
with the repository goes through the command line program &cvs;. A higher
level user interface is available through frontends like 
<application>Cervisia</application> (<ulink url="http://cervisia.sf.net"/>)
or <application>TkCVS</application> (<ulink url="http://tkcvs.sf.net"/>).
In &kdevelop;, only a small part of the &cvs; functionality which is
important for your daily work can be used directly.
</para>

<para>
Basic knowledge of &CVS; usage is assumed. In particular, you should know 
how to checkout a given project from the repository. We recommend the
book "Open Source Development With CVS" by Karl Fogel which is freely
distributed (except for the non-technical chapters). See
<ulink url="http://cvsbook.red-bean.com/cvsbook.html"/>.
</para>

<para>
In the file views, the following context menu items are available:
</para>

<itemizedlist>

<listitem>
<formalpara><title>Add to Repository</title>
<para>Prepares the marked file for addition to the repository. The file
is transferred to the repository when you commit it (or the containing
directory) the next time.
</para>
</formalpara>
</listitem>

<listitem>
<formalpara><title>Remove from Repository</title>
<para>
Prepares a file for removal from the repository. This also deletes
the file on the local file system, so use this feature with care!
</para>
</formalpara>
</listitem>

<listitem>
<formalpara><title>Update</title>
<para>
Runs <command>cvs update</command> to merge any changes from other
users into your working directory. When you use this menu item over
a directory, the update normally happens recursively, except if you
have disable this in the configuration file <filename>.cvsrc</filename>.
</para>
</formalpara>
</listitem>

<listitem>
<formalpara><title>Commit</title>
<para>
Runs <command>cvs commit</command> to upload any locally made changes
to the repository. Note that you should update before doing this.
Otherwise, when another user has committed his own changes before,
&CVS; may give you an error message.
</para>
</formalpara>
</listitem>

</itemizedlist>

<para>
All these commands are invoked as subprocesses by &kdevelop; without any
further command line options or environment variables. This may be a
problem when the connection with the &CVS; server goes through a
&ssh; connection and requires that you enter your password each time 
you commit or update. This is for instance necessary when your project is
hosted on <filename>sourceforge.net</filename>. Workarounds for this
problem are described on the CVS/SSH FAQ which you can find in the
SourceForge documentation.
</para>

</chapter>



<chapter id="externalprogs">
<title>Leveraging external programs</title>
<indexterm zone="externalprogs"><primary>programs</primary><secondary>external</secondary></indexterm>

<para>
Although &kdevelop; is a so-called "Integrated" development environment, it
will never contain all features that you may want to use, and the 
capabilities of its editor will never suffice to perform often-used text
processing tasks. As a genuine UNIX program, &kdevelop; contains several 
possibilities to start external programs, plugin external programs to work
on files, or use external filters to process the content of the editor.
</para>

<para>
The most general and simple feature of this kind is the tool menu, which you
can freely configure. This is done in the <menuchoice><guimenu>Settings</guimenu>
<guimenuitem>Configure KDevelop...</guimenuitem></menuchoice>.
dialog under <guibutton>External tools</guibutton>.
</para>

<para>
Other tools will be discussed in the chapter <xref linkend="plugintools"/>.
</para>

</chapter>



<chapter id="plugintools">
<title>Plugin Tools</title>
<indexterm zone="plugintools"><primary>plugins</primary></indexterm>

<para>
&kdevelop; contains a large number of little tools that help you to perform
certain task. Most of them are realized as plugins. This means, if you do not
like one of them, you can simply  disable it in the 
<guimenuitem>Project options</guimenuitem> dialog under
<guibutton>Plugins</guibutton> (for project-wide plugins) or under 
<menuchoice><guimenu>Settings</guimenu>
<guimenuitem>Configure KDevelop...</guimenuitem></menuchoice>. 
Plugins which are switched off do not clutter your menus and are not loaded
into memory.
</para>

<itemizedlist>
<listitem>
<formalpara>
<title>The abbrev plugin</title>
<indexterm zone="plugintools"><primary><command>abbrev</command></primary></indexterm>

<para>
This plugin expands abbreviations into frequently used code snippets. It is
activated by pressing <keycombo><keycap>Ctrl</keycap>
<keycap>Space</keycap></keycombo>. For example, when you enter 
<literal>"ife"</literal> into a C++ in the editor and press 
<keycombo><keycap>Ctrl</keycap><keycap>Space</keycap></keycombo>, you obtain
an <literal>if-else</literal> code template and save some key strokes. The set
of supported abbreviations depends on the programming language of the edited 
file. For example, for PHP you will obviously be interested in other code 
templates than for Java.
</para>
</formalpara>

<para>
The set of code templates is configurable. You can see
which ones are available in the <menuchoice><guimenu>Settings</guimenu>
<guimenuitem>Configure KDevelop...</guimenuitem></menuchoice>
dialog under <guibutton>Abbreviations</guibutton>
</para>
</listitem>

<listitem>
<formalpara>
<title>The filter plugin</title>
<indexterm zone="plugintools"><primary><command>filter</command></primary></indexterm>

<para>
This offers two features. If you select <menuchoice><guimenu>Tools</guimenu>
<guimenuitem>Execute command</guimenuitem></menuchoice>, you can enter a shell
command. The output of this command is inserted into the editor buffer when
you hit the <guibutton>Start</guibutton> button.
</para>
</formalpara>

<para>
A related feature is available under
<menuchoice><guimenu>Tools</guimenu><guimenuitem>Filter selection through
command...</guimenuitem></menuchoice>.  In order to use this, you must 
select a text area in the editor. If you now enter a shell command and hit 
the <guibutton>Start</guibutton> button, the command is started and the 
selection used as the standard input for it. The standard output of the 
command is then inserted into the editor. 
</para>
</listitem>

<listitem>
<formalpara>
<title>The doxygen plugin</title>
<indexterm zone="plugintools"><primary>&doxygen;</primary></indexterm>
<indexterm zone="plugintools"><primary>documentation tool</primary></indexterm>
<indexterm zone="plugintools"><primary>API documentation</primary></indexterm>

<para>
This one helps you to use the &doxygen; API documentation tool 
(<ulink url="http://www.doxygen.org"/>). You can select 
<menuchoice><guimenu>Project</guimenu>
<guimenuitem>Run Doxygen</guimenuitem></menuchoice> to generate API 
documentation for your current project, based on the configuration given by 
the file <filename>Doxyfile</filename> in your project directory.
</para>
</formalpara>

<para>
Furthermore, you can configure &doxygen; in the
<menuchoice><guimenu>Project</guimenu>
<guimenuitem>Project options...</guimenuitem></menuchoice> dialog. This dialog
is very similar to the &doxywizard; tool.
</para>
</listitem>

<listitem>
<formalpara>
<title>The ctags plugin</title>
<indexterm zone="plugintools"><primary>&ctags;</primary></indexterm>

<para>
Although the class browser gives you extensive insight into the symbols and
classes of your project, you may also want to use the ctags tool. In particular,
this one supports a lot more language than the class browser.
</para>
</formalpara>

<para>
You activate this plugin under <menuchoice><guimenu>Tools</guimenu>
<guimenuitem>CTags...</guimenuitem></menuchoice>. When you start it the first
time, you will be asked to generate a search database first. When you accept 
this, the &ctags; program will be started and will create a file named 
<filename>tags</filename> in your project directory. This is a text file containing
all symbols of your source files.
</para>

<para>
You can search in the symbol database in two ways: when the 
<guilabel>Regular expression match</guilabel> box is checked, the text you 
enter will be interpreted as a regular expression (POSIX flavor) and matched 
with the existing symbols. For example, the text <literal>".*Widget"</literal>
will search for all symbols ending with <literal>"Widget"</literal>. If the 
box is not checked, the search will be verbatim.
</para>

<para>
When searching, you will get a list of the matched symbols, accompanied with
the line numbers where they are defined. You jump to the respective point by
clicking on the list.
</para>

<para>
For some languages, &ctags; distinguishes different kinds of symbols. For
example, Python has classes and functions. You can selectively search only
for classes by checking the respecting kinds in the dialog.
</para>

<para>
The symbol database is normally not updated when your sources change.
Consequently, after a while the line numbers will not be correct anymore
and newly added classes and functions will be missing. Therefore you should
update the <filename>tags</filename> file in regular intervals by pressing
the button <guibutton>Regenerate</guibutton>.
</para>
</listitem>

<listitem>
<formalpara>
<title>The astyle plugin</title>
<indexterm zone="plugintools"><primary><command>astyle</command></primary></indexterm>
<indexterm zone="plugintools"><primary><application>Artistic Style</application></primary></indexterm>
<indexterm zone="plugintools"><primary>indentation</primary></indexterm>

<para>
</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title>The regexptest plugin</title>
<indexterm zone="plugintools"><primary><command>regexptest</command></primary></indexterm>
<indexterm zone="plugintools"><primary>debugging</primary><secondary>regular expressions</secondary></indexterm>
<indexterm zone="plugintools"><primary>regular expressions</primary><secondary>debugging</secondary></indexterm>

<para>
Designing with regular expressions can be hard work. Often the first try at an
expression matches too many strings. In particular, when working with a
compiled language, the turnaround times when debugging a regular expression
can be awkward. The regexptest plugin allows you to directly explore the
changes in a regular expression. It is activated by choosing 
<menuchoice><guimenu>Tools</guimenu>
<guimenuitem>Debug Regular Expression...</guimenuitem></menuchoice>.
</para>
</formalpara>

<para>
In the flavor group box, you can choose the flavor of the regular expression
engine used. Currently supported is the flavor defined in the POSIX standard,
which is used by the &grep; program, and the extended POSIX syntax used by the
program &egrep;.
</para>

<para>
When you enter an expression, you get immediate feedback about any syntax
errors in it. By entering a text under <guilabel>Test string</guilabel>,
you can see whether the expression matches this string. In particular, if
your regular expression includes groups, such as <literal>"([a-z])"</literal>,
the content of the matched subgroups will be shown in a list box.
</para>
</listitem>
  
<listitem>
<formalpara>
<title>The konsole plugin</title>
<indexterm zone="plugintools"><primary><command>konsole</command></primary></indexterm>
<indexterm zone="plugintools"><primary>terminal</primary><secondary>embedded</secondary></indexterm>

<para>
</para>
</formalpara>
</listitem>

</itemizedlist>

</chapter>



<appendix id="bibliography">
<title>Bibliography</title>

<bibliography>

<biblioentry>
<title><ulink url="info://make/Top">GNU Make Manual</ulink></title>
<authorgroup>
<author><firstname>Richard M.</firstname><surname>Stallman</surname></author>
<author><firstname>Roland</firstname><surname>McGrath</surname></author>
</authorgroup>
</biblioentry>

<biblioentry>
<title><ulink url="info://automake/Top">GNU Automake</ulink></title>
<authorgroup>
<author><firstname>David</firstname><surname>MacKenzie</surname></author>
<author><firstname>Tom</firstname><surname>Tromey</surname></author>
</authorgroup>
</biblioentry>

<biblioentry>
<title><ulink url="info://autoconf/Top">GNU Autoconf</ulink></title>
<authorgroup>
<author><firstname>David</firstname><surname>MacKenzie</surname></author>
<author><firstname>Ben</firstname><surname>Elliston</surname></author>
</authorgroup>
</biblioentry>

<biblioentry>
<title><ulink url="info://gcc/Top">Using the GNU Compiler Collection</ulink></title>
<author><firstname>Richard M.</firstname><surname>Stallman</surname></author>
</biblioentry>

<biblioentry>
<title><ulink url="info://libtool/Top">GNU Libtool</ulink></title>
<authorgroup>
<author><firstname>Gordon</firstname><surname>Matzigkeit</surname></author>
<author><firstname>Alexandre</firstname><surname>Oliva</surname></author>
<author><firstname>Thomas</firstname><surname>Tanner</surname></author>
<author><firstname>Gary V.</firstname><surname>Vaughan</surname></author>
</authorgroup>
</biblioentry>

<biblioentry>
<title>GNU Autoconf, Automake, and Libtool</title>
<edition>1st edition</edition>
<pubdate>October 2000</pubdate>
<authorgroup>
<author><firstname>Gary V.</firstname><surname>Vaughan</surname></author>
<author><firstname>Ben</firstname><surname>Elliston</surname></author>
<author><firstname>Tom</firstname><surname>Tromey</surname></author>
<author><firstname>Ian Lance</firstname><surname>Taylor</surname></author>
</authorgroup>
<publisher><publishername>New Riders Publishing</publishername></publisher>
<isbn>ISBN 1578701902</isbn>
</biblioentry>


<biblioentry>
<title>Advanced Programming in the UNIX(R) Environment</title>
<edition>1st edition</edition>
<pubdate>June 1992</pubdate>
<author><firstname>W. Richard</firstname><surname>Stevens</surname></author>
<publisher><publishername>Addison-Wesley Pub Co</publishername></publisher>
<isbn>ISBN 0201563177</isbn>
</biblioentry>

<biblioentry>
<title>Thinking in C++, Volume 1: Introduction to Standard C++</title>
<edition>2nd Edition</edition>
<pubdate>April 15, 2000</pubdate>
<author><firstname>Bruce</firstname><surname>Eckel</surname></author>
<publisher><publishername>Prentice Hall</publishername></publisher>
<isbn>ISBN 0139798099</isbn>
</biblioentry>

<biblioentry>
<title>Open Source Development with CVS</title>
<edition>2nd Edition</edition>
<pubdate>October 12, 2001</pubdate>
<authorgroup>
<author><firstname>Karl</firstname><surname>Fogel</surname></author>
<author><firstname>Moshe</firstname><surname>Bar</surname></author>
</authorgroup>
<publisher><publishername>The Coriolis Group</publishername></publisher>
<isbn>ISBN 158880173X</isbn>
</biblioentry>

<biblioentry>
<title>Programming PHP</title>
<edition>1st edition</edition>
<pubdate>March 2002</pubdate>
<authorgroup>
<author><firstname>Rasmus</firstname><surname>Lerdorf</surname></author>
<author><firstname>Kevin</firstname><surname>Tatroe</surname></author>
</authorgroup>
<publisher><publishername>O'Reilly &amp; Associates</publishername></publisher>
<isbn>ISBN 1565926102</isbn>
</biblioentry>

<biblioentry>
<title>Programming Python</title>
<edition>2nd Edition</edition>
<pubdate>March 2001</pubdate>
<author><firstname>Mark</firstname><surname>Lutz</surname></author>
<publisher><publishername>O'Reilly &amp; Associates</publishername></publisher>
<isbn>ISBN 0596000855</isbn>
</biblioentry>

<biblioentry>
<title>Gui Programming With Python : Using the Qt Toolkit</title>
<edition>Bk&amp;Cd-r edition</edition>
<pubdate>January 2002</pubdate>
<author><firstname>Boudewijn</firstname><surname>Rempt</surname></author>
<publisher><publishername>Opendocs Llc</publishername></publisher>
<isbn>ISBN 0970033044</isbn>
</biblioentry>

<biblioentry>
<title>Programming Perl</title>
<subtitle>The Camel book</subtitle>
<edition>3rd Edition</edition>
<pubdate>July 2000</pubdate>
<authorgroup>
<author><firstname>Larry</firstname><surname>Wall</surname></author>
<author><firstname>Tom</firstname><surname>Christiansen</surname></author>
<author><firstname>Jon</firstname><surname>Orwant</surname></author>
</authorgroup>
<publisher><publishername>O'Reilly &amp; Associates</publishername></publisher>
<isbn>ISBN 0596000278</isbn>
</biblioentry>

<biblioentry>
<title>Learning Perl</title>
<subtitle>The Lama book</subtitle>
<edition>3rd Edition</edition>
<pubdate>July 15, 2001</pubdate>
<authorgroup>
<author><firstname>Randal L.</firstname><surname>Schwartz</surname></author>
<author><firstname>Tom</firstname><surname>Phoenix</surname></author>
</authorgroup>
<publisher><publishername>O'Reilly &amp; Associates</publishername></publisher>
<isbn>ISBN 0596001320</isbn>
</biblioentry>

</bibliography>

<para>
</para>

</appendix>



<appendix id="misc">
<title>Further information</title>
<sect1 id="gettinginformation">
<title>Getting information</title>
<para>
</para>
</sect1>

<sect1 id="reportingbugs">
<title>Reporting bugs</title>
<para>
</para>
</sect1>

<sect1 id="licensing">
<title>Licensing</title>
&underFDL;
&underGPL;
</sect1>
</appendix>

<appendix id="changelog">
<title>Changes</title>
<sect1 id="changes">
<title>Changes to this document</title>
<para>
<itemizedlist>
<listitem><para>
2003-01-03 - Started this Changelog
</para></listitem>
</itemizedlist>
</para>
</sect1>
</appendix>

<index id="indexchapter"/>
</book>
