<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.1.2-Based Variant V1.1//EN" "dtd/kdex.dtd" [
  <!ENTITY kdevelop "<application>KDevelop</application>">
  <!ENTITY kdevrelease "3.0.1">
  <!ENTITY apache "<application>Apache</application>">
  <!ENTITY appwizard "Application Wizard">
  <!ENTITY autoconf "<command>autoconf</command>">
  <!ENTITY automake "<command>automake</command>">
  <!ENTITY automanag "Automake Manager">
  <!ENTITY ctags "<command>ctags</command>">
  <!ENTITY CVS "<application>CVS</application>">
  <!ENTITY cvs "CVS">
  <!ENTITY doxygen "<application>doxygen</application>">
  <!ENTITY doxywizard "<application>doxywizard</application>">
  <!ENTITY egrep "<command>egrep</command>">
  <!ENTITY gnu "GNU">
  <!ENTITY grep "<command>grep</command>">
  <!ENTITY libtool "<command>libtool</command>">
  <!ENTITY Mac "<application>Mac</application>">
  <!ENTITY Microsoft "<application>Microsoft</application>">
  <!ENTITY python "<application>Python</application>">
  <!ENTITY perl "<application>Perl</application>">
  <!ENTITY php "<application>PHP</application>">
  <!ENTITY promanag "Project Manager">
  <!ENTITY qt "Qt">
  <!ENTITY qte "<application>Qt/embedded</application>">
  <!ENTITY ssh "<application>ssh</application>">
  <!ENTITY Windows "<application>Windows</application>">
  <!ENTITY kappname "&kdevelop;">
  <!ENTITY % addindex "INCLUDE">
  <!ENTITY % English "INCLUDE" > <!-- change language only here -->
]>

<!--
NOTE:
Entries which require special treatment are marked with comments starting with '###'. They should be visited on a regular basis.
-->

<book lang="&language;">

<bookinfo>
  <title>&kdevelop; User Manual</title>

  <date>2004-02-13</date>
  <releaseinfo>3.0.1</releaseinfo>

  <authorgroup>
    <author>
      <firstname>Bernd</firstname>
      <surname>Gehrmann</surname>
      <affiliation>
        <address><email>bernd@kdevelop.org</email></address>
      </affiliation>
    </author>

    <author>
      <firstname>Caleb</firstname>
      <surname>Tennis</surname>
      <affiliation>
        <address><email>caleb@aei-tech.com</email></address>
      </affiliation>
    </author>

    <author>
      <firstname>Bernd</firstname>
      <surname>Pol</surname>
      <affiliation>
        <address><email>bernd.pol@online.de</email></address>
      </affiliation>
    </author>
  </authorgroup>

  <copyright>
    <year>2002</year>
    <holder>Bernd Gehrmann</holder>
  </copyright>
  <copyright>
    <year>2002</year>
    <holder>Caleb Tennis</holder>
  </copyright>
  <copyright>
    <year>2004</year>
    <holder>Bernd Pol</holder>
  </copyright>

  <legalnotice>&FDLNotice;</legalnotice>

  <abstract>
    <para>&kdevelop; is an Integrated Development Environment to be used for a wide variety of programming tasks.</para>
  </abstract>

  <keywordset>
    <keyword>KDE</keyword>
    <keyword>KDevelop</keyword>
    <keyword>IDE</keyword>
    <keyword>development</keyword>
    <keyword>programming</keyword>
  </keywordset>

</bookinfo>

<!-- ====================================================================== -->

<chapter id="survey-manual">
<title>About this Manual</title>

<para>
This user manual is intended to describe the contents and use of the &kdevelop; &kdevrelease; Integrated Development Environment (IDE) from a user's point of view. It is no programming manual nor does it describe the development process in detail. It's only aim is to guide you in the handling of the IDE.
</para>
<para>
You will here find information on the following topics:
</para>
<itemizedlist>
  <listitem><para>
  <link linkend="nutshell">In a nutshell</link>&mdash;a quick reference of the most used commands and actions.
  </para></listitem>
  <listitem><para>
  <link linkend="unixdev">Development on UNIX</link>&mdash;a historical survey of UNIX program development, the main tools necessary and why you need an IDE.
  </para></listitem>
  <listitem><para>
  <link linkend="kdevelop-install">Installing &kdevelop;</link>&mdash;tells you where to obtain &kdevelop; and how to get it up and running.
  </para></listitem>
  <listitem><para>
  <link linkend="kdevelop-survey">Survey of the Features of &kdevelop;</link>&mdash;is some kind of a warm-up, giving a short overall view of what is built-in into &kdevelop; and makes you acquainted with the look and feel of this IDE.
  </para></listitem>
  <listitem><para>
  <link linkend="app-menus">Menus and Toolbars Survey</link>&mdash;(in the appendix) provides you with a short overall view of the menu and toolbar selections available.
  </para></listitem>
  <listitem><para>
  <link linkend="app-shortcuts">Shortcut Keys</link>&mdash;(in the appendix) lists the key sequences you may use to quickly access some specific &kdevelop; operation.
  </para></listitem>
  <listitem><para>
  <link linkend="setup">Configuring &kdevelop;</link>&mdash;shows how you can taylor the IDE to suit your needs.
  </para></listitem>
  <listitem><para>
  <link linkend="appwizard">Getting started: the &appwizard;</link>&mdash;describes the basics on how to set up a new project in &kdevelop; using the built-in &appwizard;.
  </para></listitem>
  <listitem><para>
  <link linkend="projects-advanced">Advanced Project Management</link>&mdash;shows how to load existing projects, convert projects from older &kdevelop; versions, and import other existing projects. Furthermore the configuration of a project's options to suit your needs is discussed.
  </para></listitem>
  <listitem><para>
  <link linkend="editing">Editing tools</link>&mdash;all you need to write your source files: using the editor, searching for text both locally and project-wide, up to integrating new files and classes into the project.
  </para></listitem>
  <listitem><para>
  <link linkend="file-browsers">The File Browsers</link>&mdash;demonstrates various tools to look at the structure of your project and how to access the files you want to work with.
  </para></listitem>
  <listitem><para>
  <link linkend="class-browsers">The Class Browsers</link>&mdash;describes one of the most powerful tools of &kdevelop; which lets you navigate through class dependencies and allows to easily create and access the classes and methods you need.
  </para></listitem>
  <listitem><para>
  <link linkend="documentation">Documentation</link>&mdash;shows how to access the rich built-in documentation &kdevelop; provides and tells you how to create documentation of your project, concise and powerful API documentation providing you an overall view of all your project sources as well as docbook-based user documentation.
  </para></listitem>
  <listitem><para>
  <link linkend="project-management">Building and Project Management</link>&mdash;deals with the creating and management of your project, describing the basics of autoconf and automake as well as how to set up custom make files and how to use compiler or make options to taylor your application to suit your needs.
  </para></listitem>
  <listitem><para>
  <link linkend="adv-project-management">Advanced Project Management</link>&mdash;looks at ways to keep multiple build configurations, to cross-compile for diverse platforms, or to make an embedded system using the <application>Qt/embedded</application> library.
  </para></listitem>
  <listitem><para>
  <link linkend="debugger">The Debugger Interface</link>&mdash;describes how to use the integrated <application>gdb</application> debugger interface so you can hunt down bugs without leaving &kdevelop;.
  </para></listitem>
<!-- ### Currently disabled. Probably too specialized. Check later again.
  <listitem><para>
  <link linkend="python">Python</link>&mdash;a survey of how to create Python-based applications in &kdevelop;.
  </para></listitem>
  <listitem><para>
  <link linkend="php">PHP</link>&mdash; a survey of how to create PHP-based HTML applications in &kdevelop;.
  </para></listitem>//-->
  <listitem><para>
  <link linkend="cvs">Using CVS</link>&mdash;tells you how you can maintain your project using the CVS versioning system, a must especially if many developers work at the same project.
  </para></listitem>
  <listitem><para>
  <link linkend="external-progs">Leveraging External Programs</link>&mdash;shows how to access external programs and tools from within &kdevelop; thus greatly extending its capabilities.
  </para></listitem>
  <listitem><para>
  <link linkend="plugin-tools">Plugin tools</link>&mdash;provides you a survey of the parts which make up &kdevelop; and how you can taylor it to suit your needs by loading the necessary parts only, both IDE and project-wide.
  </para></listitem>
</itemizedlist>
</chapter>

<!-- ====================================================================== -->

<chapter id="nutshell">
<title>In a Nutshell</title>

<!-- ### Traditionally, most of this stuff will have been put into a FAQ section. It  is more useful, however, to put it at the very start of a manual, as this is the place the (inexperienced) user first looks for. -->

<para>
The information in this chapter is meant as a quick reference for a head start or if you (momentarily) forgot about some basic concept. If you want more information on a topic just follow the link in the title starting that advice.
</para>

<itemizedlist>
  <title>Look and Feel</title>

  <listitem>
    <formalpara id="nutshell-full-screen">
    <title><link linkend="maximize-workspace">Full Screen Mode</link></title>
    <para>
      Select <menuchoice> <guimenu>View</guimenu> <guimenuitem>Full-Screen Mode</guimenuitem> </menuchoice> from the menus or press <keycombo> <keycap>Ctrl</keycap> <keycap>Shift</keycap> <keycap>F</keycap> </keycombo>.
    </para>
    </formalpara>
  </listitem>

  <listitem>
    <formalpara id="nutshell-hide-menu">
    <title><link linkend="maximize-workspace">Hide/Unhide the Menubar</link></title>
    <para>
      To hide the menu bar select <menuchoice> <guimenu>Settings</guimenu> <guimenuitem>Show Menubar</guimenuitem> </menuchoice> from the menus or press <keycombo> <keycap>Ctrl</keycap> <keycap>M</keycap> </keycombo>. To redisplay the menu bar only <keycombo> <keycap>Ctrl</keycap> <keycap>M</keycap> </keycombo> is available.
    </para>
    </formalpara>
  </listitem>

</itemizedlist>

<itemizedlist>
<title>Projects</title>

  <listitem>
    <formalpara id="nutshell-new-project">
    <title><link linkend="new-projects">Create New Project</link></title>
    <para>
    <menuchoice><guimenu>Project</guimenu> <guimenuitem>New Project...</guimenuitem></menuchoice> will start the <link linkend="appwizard">&appwizard;</link>.
    </para>
    </formalpara>
  </listitem>

  <listitem>
    <formalpara id="nutshell-project-options">
    <title><link linkend="project-options">Use Project Options Early</link></title>
    <para>
    Whenever you start a new project do not forget to set the <menuchoice><guimenu>Project</guimenu> <guimenuitem>Project Options...</guimenuitem></menuchoice> to your needs.
    </para>
    </formalpara>
  </listitem>
</itemizedlist>

<itemizedlist>
<title>Compilation</title>
  <listitem>
    <formalpara id="nutshell-compilemsg-detail">
    <title><link linkend="setup-main-compile">Missing detail in compilation messages</link></title>
    <para>
    If during compilations you miss some valuable information in the <guilabel>Messages Output View</guilabel> window, you may have selected a too low level of messages detail. Right click in the window and select another detail level from the menu which will pop up.
    </para>
    </formalpara>
  </listitem>
</itemizedlist>

<itemizedlist>
<title><link linkend="automake-manager">&automanag;</link></title>

    <listitem>
      <formalpara id="nutshell-new-project-file">
      <title>Create New Files in a Project</title>
      <para>
      Select the subproject in the upper half of the &automanag;, then right click in the lower half on the groups title you want to have the files added and select <guimenuitem>Create New File...</guimenuitem>.
      </para>
      </formalpara>
    </listitem>

    <listitem>
      <formalpara id="nutshell-add-project-file">
      <title>Add Existing Files to a Project</title>

      <para>
      Select the subproject in the upper half of the &automanag;, then right click in the lower half on the groups title you want to have the files added and select <guimenuitem>Add Existing Files...</guimenuitem>.
      </para>
      </formalpara>
    </listitem>

    <listitem>
      <formalpara id="nutshell-del-project-file">
      <title>Remove a File from a Project</title>

      <para>
      Select the subproject in the upper half of the &automanag;, then in the lower half open the groups list you want to have the file removed from, right click on the file in this list and select <guimenuitem>Remove</guimenuitem>.
      </para>
      </formalpara>
    </listitem>
  </itemizedlist>

<itemizedlist>
  <title>Compile/Make Problems</title>

  <listitem>
    <formalpara id="nutshell-autoconf-problem">
    <title><quote>Wrong <command>autoconf</command> version</quote> etc. Error</title>

    <para>
    There are several error messages concerning too old versions of <application>autoconf</application> etc. prohibiting <command>configure</command> to work properly. Run <command>autoreconf</command> in the directory tree where the <filename>configure.in</filename> files in question are. This command will try to update the information in the &GNU; Build System files. See <command>man autoreconf</command> for more information.
    </para>
    </formalpara>
  </listitem>
</itemizedlist>

</chapter> <!-- nutshell -->

<!-- ====================================================================== -->

<chapter id="unixdev">
<title>Development on UNIX</title>

<indexterm zone="unixdev"><primary>development</primary></indexterm>
<indexterm zone="unixdev">
  <primary>UNIX</primary>
  <secondary>development</secondary></indexterm>

<sect1 id="history">
<title>Some Historical Remarks</title>

<indexterm zone="history"><primary>history</primary></indexterm>
<indexterm zone="history"><primary>scripting languages</primary></indexterm>
<indexterm zone="history">
  <primary>UNIX</primary>
  <secondary>history</secondary></indexterm>
<indexterm zone="history">
  <primary>UNIX</primary>
  <secondary>pipe</secondary></indexterm>
<indexterm zone="history">
  <primary>UNIX</primary>
  <secondary>shell</secondary></indexterm>
<indexterm zone="history">
  <primary>shell</primary>
  <secondary>UNIX</secondary></indexterm>

<para>
From the beginning, UNIX has maintained two very different development paradigms. One is the world of <emphasis>system and application programming languages</emphasis>, where some source code is translated to machine code by a translation program, usually a <emphasis>compiler</emphasis> or an <emphasis>interpreter</emphasis>. The programming language C is an example. UNIX was the first operating system kernel to be written in such a high level language instead of tightly machine-oriented assembler which was common before that time. (In fact, the C language once even was invented to write the UNIX kernel and associated programs on a DEC PDP-11 computer.)
</para>
<para>
The other paradigm is the world of <emphasis>scripting languages</emphasis>. This world evolved with the invention of the UNIX shell which was the user's interface to the operating system&mdash;and at the same time a very high level programming language. A shell script is built from a set of small utility programs like e.g. <command>grep</command>, <command>sed</command>, or <command>find</command>. Each such utility is designed for some tightly defined job. The trick is that any such utility can be connected to another one via a simple transport mechanism, called a <emphasis>pipe</emphasis>, which directs the output of the foregoing utility into the input of the next processed one. This makes up for a very powerful and highly flexible programming tool.
</para>
<para>
As time has gone by, both worlds have evolved. While C is still used mainly as a system programming language, C++ as a variant of C enriched by object-oriented and generic extensions has found its place for the development of complex applications in the 1990's. There are numerous other programming languages, even older ones keep their place&mdash;FORTRAN77 and Ada e.g. still have their stronghold in numerical applications.
</para>
</sect1> <!-- history -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="unixdev-scripting-languages">
<title>Contemporary Scripting Languages</title>
<para>
In the scripting area, there has been a shift away from the shell, which suffers from portability concerns, to languages which unify all commonly needed functionality in their standard libraries, while still being able to interface to the outside through pipes when necessary.
</para>
<para>
All these scripting languages have in common that they are widely portable between UNIX variants, &Microsoft; &Windows;, &Mac; OS or even VMS. Also, they all have implementations that are freely distributable.
</para>

<sect2 id="unixdev-SL-Perl">
<title>&perl;</title>

<indexterm zone="unixdev-SL-Perl"><primary>Perl</primary></indexterm>
<indexterm zone="unixdev-SL-Perl">
  <primary>scripting languages</primary>
  <secondary>Perl</secondary></indexterm>

<para>
<ulink url="http://www.perl.com">&perl;</ulink> has become popular as a text processing and system administration language. In the beginning of the World Wide Web, CGI scripts written in &perl; were a widely used method to create dynamic web pages from databases. Today, this method has been replaced mostly by the <command>mod_perl</command> plugin for the &apache; web server. Among &perl;'s strengths are its built-in support for advanced regular expression matching and its rich archive of freely distributed modules.
</para>
<para>
For more information see the <ulink url="http://cpan.org">Comprehensive Perl Archive Network (CPAN)</ulink> website.
</para>
</sect2> <!-- unixdev-SL-Perl -->

<sect2 id="unixdev-SL-Python">
<title>Python</title>

<indexterm zone="unixdev-SL-Python"><primary>Python</primary></indexterm>
<indexterm zone="unixdev-SL-Python">
  <primary>scripting languages</primary>
  <secondary>Python</secondary></indexterm>

<para>
<ulink url="http://www.python.org">&python;</ulink> shines by the elegance of its class system and the ease and flexibility with which external libraries can be wrapped in a way that they appear like standard &python; classes and functions. In contrast to &perl;, &python; has a clear and concise embedding API, which makes it the language of choice for making C and C++ programs scriptable.
</para>
</sect2> <!-- unixdev-SL-Python -->

<sect2 id="unixdev-SL-PHP">
<title>PHP</title>

<indexterm zone="unixdev-SL-PHP"><primary>PHP</primary></indexterm>
<indexterm zone="unixdev-SL-PHP">
  <primary>scripting languages</primary>
  <secondary>PHP</secondary></indexterm>

<para>
<ulink url="http://www.php.net">&php;</ulink> was invented as a language directly embeddable into HTML pages and consequently has its main uses in delivering dynamic content in the web.
</para>
</sect2> <!-- unixdev-SL-PHP -->
</sect1> <!-- unixdev-scripting-languages -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<sect1 id="unixdev-hl-script">
<title>Higher-level Scripting</title>

<para>
Higher-level UNIX applications usually miss the speed and flexibility of the traditional character-oriented shell scripting mechanisms. This is especially true in the world of graphical user interfaces (GUI) as e.g. &kde;.
</para>
<para>
There have been attempts to provide similar mechanisms which will work on a higher application level, most notably <link linkend="unixdev-corba">CORBA</link> and, in the &kde; environment, <link linkend="unixdev-dcop">DCOP</link>.
</para>

<sect2 id="unixdev-corba">
<title>The CORBA Protocol</title>

<indexterm zone="unixdev-corba"><primary>CORBA</primary></indexterm>
<indexterm zone="unixdev-corba">
  <primary>scripting languages</primary>
  <secondary>CORBA</secondary></indexterm>
<indexterm zone="unixdev-corba">
  <primary>communication</primary>
  <secondary>CORBA</secondary></indexterm>

<para>
<ulink url="http://www.omg.org/gettingstarted/corbafaq.htm">CORBA</ulink> (<emphasis>Common Object Request Broker Architecture</emphasis>) is an attempt to let computer applications work together over networks. It was devised by the private, vendor independent <ulink url="http://www.omg.org">OMG</ulink> (Object Management Group) standards comittee.
</para>
<para>
CORBA-based programs use the IIOP standard protocol to communicate. Implementations based on IIOP are available on a wide variety of operating systems, programming languages, and networks and are thus highly portable.
</para>
<para>
The main drawback of CORBA is its rather low speed. While this may be tolerable in networks, it is a real hindrance for inter-application communications in a non-networked environment such as &kde; running on a single computer.
</para>

</sect2> <!-- unixdev-corba -->

<sect2 id="unixdev-dcop">
<title>The DCOP Interface</title>

<indexterm zone="unixdev-dcop"><primary>DCOP</primary></indexterm>
<indexterm zone="unixdev-dcop">
  <primary>scripting languages</primary>
  <secondary>DCOP</secondary></indexterm>
<indexterm zone="unixdev-dcop">
  <primary>communication</primary>
  <secondary>DCOP</secondary></indexterm>

<para>
Another evolution on UNIX-like scripting is the <ulink url="http://developer.kde.org/documentation/library/kdeqt/dcop.html"><emphasis>DCOP</emphasis></ulink> protocol which was devised for communication between &kde; applications to overcome the limitations of CORBA.
</para>
<para>
DCOP stands for <emphasis>Desktop Communication Protocol</emphasis> and is implemented as a simple IPC/RPC mechanism built to operate over sockets. In effect this provides facilities similar to the traditional UNIX pipe mechanism.
</para>
<para>
Traditional shell scripting is based on fairly small tool programs which were designed to work on a strictly textual basis. DCOP allows elaborate graphical programs to communicate with each other in a quite similar way. This enables e.g. a &kde; program to send messages to another &kde; program, or receive data from it for its own purposes.
</para>
<para>
There are drawbacks, however. To use DCOP a program must be designed to contain a special DCOP interface. And the DCOP communication process runs somewhat slowly (although a lot faster than CORBA). But it returns much of the power and flexibility of UNIX scripting to high-level programs which are based on a graphical user interface.
</para>
<para>
For more information, see the <ulink url="http://developer.kde.org/documentation/library/kdeqt/dcop.html">DCOP: Desktop COmmunications Protocol</ulink> paper or <ulink url="developer.kde.org/documentation/library/cvs-api/dcop/html/index.html">The DCOP Desktop Communication Protocol library</ulink> API reference of the &kde; dcop library.
</para>
</sect2> <!--  unixdev-dcop -->

</sect1> <!--  unixdev-hl-script -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="unixdev-buildsystems">
<title>Build Systems</title>

<para>
Except in very simple cases a programming project will consist of a lot of building blocks of source code each put into a separate file for easier maintenance. To make this running one has to effectively translate all this stuff into a few machine language units in a suiting format which allows the operating system to load and execute the program.
</para>
<para>
To accomplish this, the basic tools needed are
<itemizedlist>
  <listitem><para>
  a <emphasis>text editor</emphasis> to write the source code files,
  </para></listitem>
  <listitem><para>
  a translating program, usually a <emphasis>compiler</emphasis> to turn the source code into object files,
  </para></listitem>
  <listitem><para>
  a <emphasis>librarian</emphasis> which collects object files into libraries to reuse them easily without the need to recompile,
  </para></listitem>
  <listitem><para>
  a <emphasis>linker</emphasis> which binds several object files and libraries together into one executable,
  </para></listitem>
  <listitem><para>
  a <emphasis>make system</emphasis> which provides some means to manage all this stuff and&mdash;not to forget
  </para></listitem>
  <listitem><para>
  a <emphasis>debugger</emphasis> to (hopefully) find all errors in the program and possibly some other diagnosis tools to get everything running smoothly.
  </para></listitem>
</itemizedlist>
</para>

<para>
When you have a large project consisting of possibly hundreds of source code files, the process of compiling may become quite laborsome. You do not want to recompile all files each time you have changed only some of them. Instead, you only want to compile those files which are affected by the changes. In general, it is not always easily obvious which of the files have to be recompiled.
</para>
<para>
When you e.g. change a function prototype in a header file, you need to compile every file which includes this header file. If your project contains many such files you may easily miss one or two of them if you have to do the job manually. Thus some means of automization is necessary.
</para>

<sect2 id="unixdev-buildsystems-make">
<title>The Make Process</title>

<indexterm zone="unixdev-buildsystems-make">
  <primary>make</primary></indexterm>
<indexterm zone="unixdev-buildsystems-make">
  <primary>Makefile</primary></indexterm>
<indexterm zone="unixdev-buildsystems-make">
  <primary>rule</primary></indexterm>
<indexterm zone="unixdev-buildsystems-make">
  <primary>recompilations</primary></indexterm>
<indexterm zone="unixdev-buildsystems-make">
  <primary>target</primary></indexterm>
<indexterm zone="unixdev-buildsystems-make">
  <primary>dependencies</primary></indexterm>
<indexterm zone="unixdev-buildsystems-make">
  <primary>commands</primary></indexterm>

<para>
A tool which takes care of recompilations is <command>make</command>. It keeps track of all work using a set of <emphasis>rules</emphasis> which describe what to do in case some piece of information (usually a source or object code file) was changed. All rules belonging to a certain project are stored in a so-called <filename>Makefile</filename> which is processed by <command>make</command> any time you want to update your work.
</para>
<para>
Each rule consists of several building blocks, namely
<itemizedlist>
  <listitem><para>
  a <emphasis>target</emphasis>, i.e. the file to be built
  </para></listitem>
  <listitem><para>
  a set of <emphasis>dependencies</emphasis>, basically the names of those files the target depends on (e.g. the name of a source file, where then the target will be the name of the object file to be built) and
  </para></listitem>
  <listitem><para>
  the <emphasis>commands</emphasis> which are to be executed to <quote>make</quote> the target (i.e. to compile it or to link other object files together to build an executable progam file).
  </para></listitem>
</itemizedlist>
</para>
<para>
Basically the <command>make</command> command will read the rules one after another, check each file in the dependency list of a given target and make this target anew if any one of these files has changed, using the commands listed in that rule.
</para>
<para>
There are several additional possibilities to control such a make process, and a <filename>Makefile</filename> can thus grow very complex. We cannot go into the details here. However, we recommend that you make yourself accustomed to the syntax of <command>make</command>. Even if you do not normally use it directly, an understanding of the fundamentals of the build system can be useful. See the <ulink url="info://make/Top"> <quote>GNU Make Manual</quote></ulink> for more information. </para>
<para>
For more &kdevelop; specific detail see the <link  linkend="project-management">Building and Project Management</link> chapter of this manual.
</para>
<para>
There are several tutorials available, see the <link linkend="automake-references">references</link> in the Building and project management chapter.
</para>
</sect2> <!-- unixdev-buildsystems-make -->

</sect1> <!-- unixdev-buildsystems -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="unixdev-guidevelopment">
<title>GUI Development</title>

<indexterm zone="unixdev-guidevelopment">
  <primary>GUI</primary></indexterm>
<indexterm zone="unixdev-guidevelopment">
  <primary>graphical user interface</primary></indexterm>
<indexterm zone="unixdev-guidevelopment">
  <primary>user interface</primary>
  <secondary>GUI</secondary></indexterm>

<para>
Application developers become even more encumbered by having not only to create program libraries and logic, but also to provide an easy to use custom built user interface that is both intuitive and functional.  Most programmers receive little to no training in GUI development, and as a result user interfaces often are poorly designed.
</para>
<para>
During the years some common design principles have evolved. It is strongly advised to adhere to them. This way your user interfaces will retain a common look and feel that the users of your application will gratefully appreciate.
</para>
<para>
For &kde; GUI development there is a style guide available. It is found in the <ulink url="http://developer.kde.org/documentation/standards/kde/style/basics/index.html">&kde; User Interface Guidelines</ulink> on the &kde; Developer's Corner page.
</para>
<para>
A short introduction to common GUI design principles can be found <ulink url="http://axp16.iie.org.mx/Monitor/v01n03/ar_ihc2.htm">here</ulink>.
</para>

</sect1> <!-- unixdev-guidevelopment -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="unixdev-ide">
<title>Integrating Concepts and Tools &ndash; the IDE</title>

<indexterm zone="unixdev-ide">
  <primary>IDE</primary></indexterm>
<indexterm zone="unixdev-ide">
  <primary>integrated development environment</primary></indexterm>
<indexterm zone="unixdev-ide">
  <primary>development</primary>
  <secondary>IDE</secondary></indexterm>
<indexterm zone="unixdev-ide">
  <primary>environment</primary>
  <secondary>IDE</secondary></indexterm>

<para>
There are separate tools available for almost any step in the programming process&mdash;planning, editing, managing files and compilation processes, debugging, documentation and the like. But once the projects grow the programming processes will most likely become quite cumbersome.
</para>
<para>
Much repetitive work has to be done when designing, compiling, and debugging a program. A lot of such work can be saved through the use of templates and scripts. And another lot by keeping these tools easily available and able to communicate with each other under a common GUI.
</para>
<para>
For example&mdash;would it not be convenient if a debugger were able to open the source file in question in an editor and place the cursor directly at the position of that bug just found?
</para>
<para>
To more easily accomplish such a scheme, <emphasis>Integrated Development Environments</emphasis> (IDEs) were devised. Such an IDE integrates all templates, tools, and scripts which are commonly needed in the development process into one single environment.
</para>
<para>
For the &kde; platform &kdevelop; is such an IDE. It provides a wide range of tools which ease program development and maintenance, even for different programming languages and across platforms.
</para>

<sect2 id="unixdev-ide-kdevelop">
<title>Basic Features of &kdevelop; &kdevrelease;</title>

<indexterm zone="unixdev-ide-kdevelop">
  <primary>&kdevelop;</primary>
  <secondary>features</secondary></indexterm>
<indexterm zone="unixdev-ide-kdevelop">
  <primary>features</primary></indexterm>

<!-- ### copied from web page, needs to be updated -->

<itemizedlist>
  <listitem>
  <para>Manages all <emphasis>development tools</emphasis> needed for C++ programming, such as compiler, linker, debugger and build system.</para>
  </listitem>
  <listitem>
  <para>Provides an <emphasis>&appwizard;</emphasis> which generates complete, ready-to-go sample applications.</para>
  </listitem>
  <listitem>
  <para>Allows the user to select an <emphasis>integrated editor</emphasis> based on the &kde; programmer's editor KWrite, Trolltec's QEditor, or others.</para>
  </listitem>
  <listitem>
  <para>A <emphasis>class generator</emphasis>, for creating new classes and integrating them into the current project.</para>
  </listitem>
  <listitem>
  <para><emphasis>File managemen</emphasis>t for sources, headers, documentation etc. to be included in the project.</para>
  </listitem>
  <listitem>
  <para>Assistance in <emphasis>creating application user manuals</emphasis> written with KDE tools.</para>
  </listitem>
  <listitem>
  <para>Automatic HTML-based <emphasis>API-documentation</emphasis> for a project's classes with cross-references to the used libraries.</para>
  </listitem>
  <listitem>
  <para><emphasis>Internationalization support</emphasis>, allowing translators to add their target language to a project easily, including support of KBabel.</para>
  </listitem>
  <listitem>
  <para>Support for managing a project via one of several <emphasis>versioning systems</emphasis> (e.g. CVS) by providing an easy-to-use frontend for the most needed functions.</para>
  </listitem>
  <listitem>
  <para>An integrated <emphasis>debugger</emphasis> frontend.</para>
  </listitem>
  <listitem>
  <para>An integrated <emphasis>shell console</emphasis> emulator.</para>
  </listitem>
  <listitem>
  <para><emphasis>Syntax highlighting</emphasis> in source texts.</para>
  </listitem>
  <listitem>
  <para>An <emphasis>auto-code completion</emphasis> facility for class variables, class methods, function arguments and more.</para>
  </listitem>
  <listitem>
  <para><emphasis>Templates for creating various projects</emphasis> (KControl modules, Kicker (panel) applets, KIOSlaves, Konqueror plugins and desktop styles).</para>
  </listitem>
  <listitem>
  <para>Four <emphasis>navigation tree views</emphasis> for easily switching between source files, header files, classes and documentation, obviating the need for an external file manager.</para>
  </listitem>
  <listitem>
  <para><emphasis>Cross-compiling support</emphasis>, with the ability to specify different compilers, compiler flags, target architecture, etc.</para>
  </listitem>
  <listitem>
  <para>Support for <emphasis>Qt/Embedded projects</emphasis> (such as the Zaurus and iPAQ).</para>
  </listitem>
  <listitem>
  <para><emphasis>Inclusion of any other program</emphasis> you need for development by adding it to the <guimenuitem>Tools</guimenuitem> menu according to your individual needs.</para>
  </listitem>
</itemizedlist>

</sect2> <!-- unixdev-ide-kdevelop -->

</sect1> <!-- unixdev-ide -->

</chapter> <!-- unixdev -->

<!-- ====================================================================== -->

<chapter id="kdevelop-install">
<title>Installing &kdevelop;</title>

<indexterm zone="kdevelop-install">
  <primary>installation</primary></indexterm>

<para>
In this chapter we will discuss the steps necessary to compile and install the &kdevelop; IDE:

<itemizedlist>
  <listitem><para>
  <link linkend="kdevelop-install-howto">How to obtain &kdevelop;</link> mainly concentrates on downloading the most recent &kdevelop; sources from CVS.
  </para></listitem>
  <listitem><para>
  <link linkend="requirements">&kdevelop; requirements</link> lists the programs and libraries which you need installed to successfully compile the IDE.
  </para></listitem>
  <listitem><para>
  <link linkend="compile-and-install">&kdevelop; compilation and installation</link> leads you trough all steps of compilation and installing the application.
  </para></listitem>
  <listitem><para>
  <link linkend="make-api">How to obtain a &kdevelop; API documentation</link> tells what an API is and how you get such a useful tool for navigating the &kdevelop; sources.
  </para></listitem>
</itemizedlist>
</para>

<sect1 id="kdevelop-install-howto">
<title>How to Obtain &kdevelop;</title>

<indexterm zone="kdevelop-install-howto">
  <primary>obtain &kdevelop;</primary></indexterm>
<indexterm zone="kdevelop-install-howto">
  <primary>&kdevelop;</primary>
  <secondary>obtain</secondary></indexterm>

<para>
&kdevelop; is available in binary form from many different &Linux; distributions such as <!--&SuSE;, &RedHat;//--> SuSE, RedHat and others. These binaries are packed in some convenient format, mostly RPM, for easy installation. To install, follow the standard instructions given in your distribution.
</para>
<para>
You may as well obtain the &kdevelop; sources, compile and install them by yourself. These sources can be found via the project home page at <ulink url="http://www.kdevelop.org"> http://www.kdevelop.org</ulink> or via the <ulink url="http://download.kde.org">&kde; ftp site</ulink>.
</para>

<sect2 id="howto-cvs">
<title>Get Daily &kdevelop; Snapshots from &CVS;</title>

<indexterm zone="howto-cvs">
  <primary>CVS</primary></indexterm>

<para>If you want be in front of current development, anonymous &CVS; repository snapshots are available.  The module name is <emphasis>kdevelop</emphasis> at <filename class="directory">:pserver:anonymous@anoncvs.kde.org:/home/kde</filename>.
</para>

<sect3 id="howto-cvs-co">
<title>Initial &CVS; Checkout</title>

<indexterm zone="howto-cvs-co">
  <primary>checkout</primary></indexterm>
<indexterm zone="howto-cvs-co">
  <primary>&kdevelop;</primary>
  <secondary>CVS</secondary>
  <tertiary>checkout</tertiary></indexterm>

<para>
To obtain an initial version of &kdevelop; you must download it from anonymous &CVS;.  For this so-called <emphasis>checkout</emphasis> operation follow these steps.
</para>

<note><para>
We assume you want to put your &kdevelop; copy into the <filename class="directory">kde3src</filename> subdirectory of your home directory (<filename class="directory">~</filename>).
</para></note>

<informalexample><simplelist>
  <member>
  # Create the destination directory, if necessary:
  </member>
  <member>
    <prompt>~&gt; </prompt>
    <userinput>mkdir kde3src</userinput>
  </member>
  <member>
    <prompt>~&gt; </prompt>
    <userinput>cd kde3src</userinput>
  </member>
  <member>
    <prompt>~/kde3src&gt; </prompt>
    <userinput>cvs -z3 -d :pserver:anonymous@anoncvs.kde.org:/home/kde co kdevelop</userinput>
  </member>
  <member>
    <prompt>~/kde3src&gt; </prompt>
    <userinput>cd kdevelop</userinput>
  </member>
</simplelist></informalexample>

<note><para>
  Once you have successfully checked out your &kdevelop; version, you may keep up with the changes using the update procedure shown in the next section.
</para></note>

<important><para>
  Keep the server load low. <emphasis>Please do not checkout every time you want to keep your &kdevelop; up to date!</emphasis> Use CVS update for this purpose.
</para></important>

<para>
Now you may compile your &kdevelop; version as shown in the <link linkend="compile-and-install">&kdevelop; Compilation and Installation</link> section.
</para>

</sect3> <!-- howto-cvs-co -->

<sect3 id="howto-cvs-up">
<title>Keeping Your &CVS; Copy Actual</title>

<indexterm zone="howto-cvs-up">
  <primary>update</primary></indexterm>
<indexterm zone="howto-cvs-up">
  <primary>&kdevelop;</primary>
  <secondary>CVS</secondary>
  <tertiary>update</tertiary></indexterm>

<para>
After you checked out (and successfully compiled) &kdevelop; from CVS as shown above, you'll want to keep it up to date in order to get all the patches. Follow these steps. (We again assume you have put your &kdevelop; copy into the <filename class="directory">kde3src</filename> directory.)
</para>
<para>
Note the <command>up</command> (= <emphasis>update</emphasis>) command instead of the <command>co</command> (which stands for <emphasis>checkout</emphasis>).
</para>

<informalexample><simplelist>
  <member>
    <prompt>~&gt; </prompt>
    <userinput>cd kde3src</userinput>
  </member>
  <member>
    <prompt>~/kde3src&gt; </prompt>
    <userinput>cvs -z3 -d :pserver:anonymous@anoncvs.kde.org:/home/kde up kdevelop</userinput>
  </member>
  <member>
    <prompt>~/kde3src&gt; </prompt>
    <userinput>cd kdevelop</userinput>
  </member>
</simplelist></informalexample>

<note><para>
Keep an eye on the messages &CVS; produces during the update sequence. The exact steps in the compilation sequence depend on this.
</para></note>

<para>
Now you can compile a new &kdevelop; version as shown in the <link linkend="compile-and-install-make-cvs">Special &CVS; compilation considerations</link> chapter.
</para>
</sect3> <!-- howto-cvs-up -->

</sect2> <!-- howto-cvs -->

</sect1> <!-- howto -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="requirements">
<title>&kdevelop; Requirements</title>

<indexterm zone="requirements">
  <primary>requirements</primary></indexterm>
<indexterm zone="requirements">
  <primary>&kdevelop;</primary>
  <secondary>requirements</secondary></indexterm>
<indexterm zone="requirements">
  <primary>GNU</primary>
  <secondary>requirements</secondary></indexterm>

<para>
In order to successfully compile and use &kdevelop;, you need the following programs and libraries. They are available on most platforms as distribution packages and thereby can be installed easily.
</para>

<itemizedlist>
<title>Required:</title>
  <listitem>
  <para>
    <application>gcc/g++</application> &ge; 2.95.3 (or compatible)
    <indexterm>
      <primary>gcc</primary>
      <secondary>requirements</secondary></indexterm>
    <indexterm>
      <primary>g++</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="gcc.gnu.org">gcc.gnu.org</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    <application>&gnu; make</application> (or compatible)
    <indexterm>
      <primary>make</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.gnu.org/software/make">www.gnu.org/software/make</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    &perl; 5.004
    <indexterm>
      <primary>Perl</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.perl.com">www.perl.com</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    <application>autoconf</application> &ge; 2.52
    <indexterm>
      <primary>autoconf</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.gnu.org/software/autoconf">www.gnu.org/software/autoconf</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    <application>automake</application> &ge; 1.6
    <indexterm>
      <primary>automake</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.gnu.org/software/automake">www.gnu.org/software/automake</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    <application>flex</application> 2.5.4
    <indexterm>
      <primary>flex</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.gnu.org/software/flex">www.gnu.org/software/flex</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    <application>Qt</application> &ge; 3.0.3
    <indexterm>
      <primary>Qt</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.trolltech.com/products/qt">www.trolltech.com/products/qt</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    <application>KDE</application> &ge; 3.0.2
    <indexterm>
      <primary>KDE</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.kde.org">www.kde.org</ulink>
  </para>
  </listitem>
</itemizedlist>

<itemizedlist>
<title>Optional:</title>
  <listitem><para>
    The <emphasis><application>ctags</application></emphasis> source navigation tool, from <ulink url="http://ctags.sourceforge.net">http://ctags.sourceforge.net</ulink>, which enables you fast access to declarations and definitions by a few simple clicks on a name in the editor.
    <indexterm><primary>ctags</primary></indexterm>
  </para></listitem>
  <listitem><para>
    <emphasis><application>dot</application></emphasis>, a graphics language compiler, from <ulink url="http://www.graphviz.org">http:/www.graphviz.org</ulink>. This
  <!-- ### temporarily disabled until the graphical class browser works again
  allows you to navigate in a graphical view of your classes' dependencies. Likewise the <application>dot</application> //-->
  tool is needed in conjunction with &doxygen; below if you want to have class relationships graphically displayed (which is highly recommended).
    <indexterm><primary>dot</primary></indexterm>
  </para></listitem>
  <listitem><para>
    The <emphasis>&doxygen;</emphasis> documentation tool, from <ulink url="http://www.doxygen.org">http://www.doxygen.org</ulink> if you want to generate concise and powerful API documentation from your projects.
    <indexterm><primary>doxygen</primary></indexterm>
  </para></listitem>
  <listitem><para>
    <emphasis><application>valgrind</application></emphasis> from <ulink url="http://developer.kde.org/~sewardj/">http://developer.kde.org/~sewardj/</ulink> helps you to find memory management problems in your applications.
    <indexterm><primary>valgrind</primary></indexterm>
  </para></listitem>
  <listitem><para>
    <emphasis><application>CVS</application></emphasis> from <ulink url="http://www.cvshome.org">http://www.cvshome.org</ulink> if you want to use the &CVS; versioning system.
    <indexterm>
      <primary>CVS</primary>
      <secondary>requirements</secondary></indexterm>
  </para></listitem>
  <listitem><para>
  Any other compiler and/or tool in case you want to develop for another language/platform than C++/&kde; or use some special facility.
  </para></listitem>
</itemizedlist>

<note>
<orderedlist>
  <listitem>
    <para>
    You can to a certain extent circumvent the need for &autoconf; &ge; 2.52 and &automake; &ge; 1.6. Just remove the <filename class="directory">admin</filename> directory in your &kdevelop; installation directory and type
    <indexterm>
      <primary>autoconf</primary>
      <secondary>circumvent version need</secondary></indexterm>
    <indexterm>
      <primary>automake</primary>
      <secondary>circumvent version need</secondary></indexterm>
    <indexterm>
      <primary>version need</primary>
      <secondary>circumvent for autoconf/automake</secondary></indexterm>
    </para>
    <informalexample><simplelist>
      <member><prompt>(your-kdevelop-directory)&gt; </prompt>
      <userinput>ln -s $KDEDIR/share/apps/kdelibs/admin admin</userinput></member>
    </simplelist></informalexample>
    <para>
    at the console. This causes &kdevelop; to use the standard settings in the &kde; <filename class="directory">admin</filename> directory instead.
    </para>
  </listitem>
  <listitem>
    <para>
    Be careful <emphasis>not to mix &qt; versions</emphasis>. Always link &kdevelop; to the same &qt; version your &kde; library was compiled. Otherwise you will most likely experience <emphasis>very strange</emphasis> behaviours.
    </para>
  </listitem>
</orderedlist>
</note>

</sect1> <!-- requirements -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="compile-and-install">
<title>&kdevelop; Compilation and Installation</title>

<indexterm zone="compile-and-install">
  <primary>&kdevelop;</primary>
  <secondary>compilation</secondary></indexterm>
<indexterm zone="compile-and-install">
  <primary>&kdevelop;</primary>
  <secondary>installation</secondary></indexterm>

<para>
Once all requirements are met, you are ready to compile and install &kdevelop;. This chapter will discuss the necessary steps to do so.
</para>
<itemizedlist>
  <listitem><para>
  <link linkend="compile-and-install-preliminaries">Preliminary Steps</link> tells you about setting up a proper environment.
  </para></listitem>
  <listitem><para>
  <link linkend="compile-and-install-make">Compile &kdevelop;</link> deals with obtaining the &kdevelop; sources from &cvs;, how to prepare them for the installation process, and finally shows the steps necessary to compile and install &kdevelop;.
  </para></listitem>
  <listitem><para>
  <link linkend="compile-and-install-bsd">How to Compile on FreeBSD</link> discusses special considerations about the Berkeley Database systems in order to compile and install &kdevelop;.
  </para></listitem>
  <listitem><para>
  <link linkend="compile-and-install-options">Some Notes on configure Options</link> tells you how to run &kdevelop; if it has been installed in another location than the &kde; directory.
  </para></listitem>
</itemizedlist>

<sect2 id="compile-and-install-preliminaries">
<title>Preliminary Steps</title>

<indexterm zone="compile-and-install-preliminaries">
  <primary>preliminaries</primary>
  <secondary>&kdevelop; installation</secondary></indexterm>
<indexterm zone="compile-and-install-preliminaries">
  <primary>KDEDIR</primary></indexterm>
<indexterm zone="compile-and-install-preliminaries">
  <primary>QTDIR</primary></indexterm>
<indexterm zone="compile-and-install-preliminaries">
  <primary>LD_LIBRARY_PATH</primary></indexterm>
<indexterm zone="compile-and-install-preliminaries">
  <primary>LIBRARY_PATH</primary></indexterm>
<indexterm zone="compile-and-install-preliminaries">
  <primary>PATH</primary></indexterm>

<para>
Before entering the compile sequence you must make sure all libraries and tools are available to the make system. To accomplish this some environment variables need to be properly set. The actual steps to be performed depend on the console shell you use.
</para>

<note><para>
To avoid typing in all the statements that set the necessary environment variables every time you want to compile, you should put them into your <filename>.bashrc</filename> or <filename>.cshrc</filename> file. This way the environment variables will be properly set every time you start the shell.
</para></note>

<sect3 id="compile-and-install-preliminaries-bash">
<title>Setting the Environment for the bash Shell</title>

<para>
If you use the bash shell add the following lines:
</para>

<informalexample><simplelist>
  <member><userinput>export KDEDIR=</userinput>(path to your KDE installation)</member>
  <member><userinput>export QTDIR=</userinput>(path to your Qt library)</member>
  <member><userinput>export LD_LIBRARY_PATH=$QTDIR/lib:$KDEDIR/lib:$LD_LIBRARY_PATH</userinput></member>
  <member><userinput>export LIBRARY_PATH=$QTDIR/lib:$KDEDIR/lib:$LIBRARY_PATH</userinput></member>
  <member><userinput>export PATH=$QTDIR/bin:$KDEDIR/bin:$PATH</userinput></member>
</simplelist></informalexample>
<para></para>

</sect3> <!-- compile-and-install-preliminaries-bash -->

<sect3 id="compile-and-install-preliminaries-tcsh">
<title>Setting the Environment for the tcsh Shell</title>

<para>
If you use the tcsh shell add the following lines:
</para>
<para>
<informalexample><simplelist>
  <member><userinput>setenv KDEDIR </userinput>(path to your KDE installation)</member>
  <member><userinput>setenv QTDIR </userinput>(path to your Qt library)</member>
  <member><userinput>setenv LD_LIBRARY_PATH=$QTDIR/lib:$KDEDIR/lib:$LD_LIBRARY_PATH</userinput></member>
  <member><userinput>setenv LIBRARY_PATH $QTDIR/lib:$KDEDIR/lib:$LIBRARY_PATH</userinput></member>
  <member><userinput>setenv PATH $QTDIR/bin:$KDEDIR/bin:$PATH</userinput></member>
</simplelist></informalexample>
</para>

</sect3> <!-- compile-and-install-preliminaries-tcs -->

</sect2> <!-- compile-and-install-preliminaries -->

<sect2 id="compile-and-install-make">
<title>Compile &kdevelop;</title>

<indexterm zone="compile-and-install-make">
  <primary>make</primary>
  <secondary>&kdevelop; installation</secondary></indexterm>
<indexterm zone="compile-and-install-make">
  <primary>compiling</primary>
  <secondary>&kdevelop;</secondary></indexterm>

<note><para>
In the following discussion we assume that you have put your &kdevelop; sources in the <filename class="directory">~/kde3src/kdevelop</filename> directory.
</para></note>

<sect3 id="compile-and-install-make-cvs">
<title>Special &CVS; Compilation Considerations</title>

<para>
In case you use a &kdevelop; snapshot from &CVS; the initial compilation steps depend on whether you just did a complete checkout or only updated the source.
</para>

<formalpara id="compile-and-install-make-cvs-co">
<title>After a CVS Checkout</title>

<para>
You must <emphasis>initialize the make system</emphasis> after a fresh checkout. The same is true every time you need to start over from scratch. Type:
</para>
</formalpara>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make -f admin/Makefile.common cvs-clean</userinput>
</member></simplelist></informalexample>
<para>
and then <emphasis>all of the following steps</emphasis>.
</para>
<note><para>
You might need access to the &CVS; repository for the clean-up if any corrupted or missing files must be reconstructed.
</para></note>
<important><para>
The <command>cvs-clean</command> command will <emphasis>remove every file</emphasis> not in &CVS; from the directory! Make sure to back up any valuable information before you issue this clean-up command.
</para></important>

<formalpara id="compile-and-install-make-cvs-up">
<title>After a CVS Update</title>
<para>
The next step depends on the output of the &CVS; update sequence. If you got something like (there may be a U or a P marker in the leftmost column, both denoting the file has been changed):
</para>
</formalpara>
<screen>
U /some_directory_path/Makefile.am
</screen>
<para>
or if you just did a full checkout, you must enter:
</para>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make -f Makefile.cvs</userinput>
</member></simplelist></informalexample>
<para>
before you proceed with <emphasis>all of the following steps</emphasis>.
</para>

</sect3> <!-- compile-and-install-make-cvs -->

<sect3 id="compile-and-install-make-basic">
<title>Basic <command>make</command> Command Sequence</title>

<para>
Once the basic make system is set up you must decide which type of the &kdevelop; system you want to use. This is done in the following configure step which builds the actual <filename>Makefile</filename>s the <command>make</command> command will use.
</para>

<note><para>
You may drop the <option>--prefix</option> option in the following <command>configure</command> command lines if you want &kdevelop; be installed in the default &kde; directory. See the <link linkend="compile-and-install-options">Some notes on configure options</link> chapter for this.
</para></note>

<formalpara>
<title>A Debug-Compiled Version</title>
<para>
If you want to keep track of what your &kdevelop; application does at run-time you may build a debug-compiled version. Just command <command>configure</command> to do so:
</para>
</formalpara>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>./configure --enable-debug=full --prefix=</userinput>(where-your-kde3-is)
</member></simplelist></informalexample>

<formalpara>
<title>A Release-Compiled Version</title>
<para>
If you only want to use &kdevelop; as-is a (smaller and faster running) release version suffices. <command>configure</command> defaults to this.
</para>
</formalpara>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>./configure --prefix=</userinput>(where-your-kde3-is)
</member></simplelist></informalexample>

<note>
<para>
If you want to build your own <link linkend="make-api">API documentation</link> for &kdevelop; you must include yet another option in the <command>configure</command> command:
</para>
<informalexample><simplelist>
  <member><prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>./configure --</userinput>(options-as-above) <userinput>\</userinput></member> <member><userinput>--with-kdelibsdoxy-dir=$KDEDIR/share/doc/HTML/en/kdelibs-apidocs</userinput></member>
</simplelist></informalexample>
</note>

<formalpara>
<title>Make and Install &kdevelop;</title>
<para>
<command>configure</command> will check the system and build some <filename>Makefile</filename>s according to what it found. The <command>make</command> command will use the main <filename>Makefile</filename> by default. Thus
</para>
</formalpara>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make</userinput>
</member></simplelist></informalexample>
<para>
suffices. If necessary, now gain root user rights using the command
</para>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>su</userinput>
</member></simplelist></informalexample>
<para>
and entering the root password. Then install the application:
</para>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make install</userinput>
</member></simplelist></informalexample>
<para>
That's all. If you installed &kdevelop; in the default &kde; directory you may now run the IDE. Otherwise some additional steps will be necessary as shown in the <link linkend="compile-and-install-options-dir">Non-default installation directory</link> section below.
</para>

</sect3> <!-- compile-and-install-make-basic -->
</sect2> <!-- compile-and-install-make -->

<sect2 id="compile-and-install-bsd">
<title>How to Compile on FreeBSD</title>

<indexterm zone="compile-and-install-bsd">
  <primary>compiling</primary>
  <secondary>&kdevelop;</secondary>
  <tertiary>BSD</tertiary></indexterm>
<indexterm zone="compile-and-install-bsd">
  <primary>&kdevelop;</primary>
  <secondary>compilation</secondary>
  <tertiary>BSD</tertiary></indexterm>
<indexterm zone="compile-and-install-bsd">
  <primary>BSD</primary></indexterm>

<para>
If you want compile and install &kdevelop; on a FreeBSD system follow the normal instructions but after
</para>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make -f Makefile.cvs</userinput>
</member></simplelist></informalexample>
<para> you must make the Berkeley specific include files and libraries available to the compiler. This is done through the <envar>CXXFLAGS</envar> environment variable:
</para>
<informalexample><simplelist>
  <member><prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>export CXXFLAGS="-L/usr/X11R6/lib -I/usr/local/include/db41 \</userinput></member>
  <member><userinput>-I/usr/local/include -L/usr/local/lib -I/usr/X11R6/include"</userinput></member>
</simplelist></informalexample>

<note><para>
You need the <emphasis>berkeley db 4.1</emphasis> database version installed, if you have another version, you must adjust the path.
</para></note>

<sect3 id="check-berkeley-db">
<title>Check the Berkeley Database Version</title>
<para>
To find out which berkeley database version you have installed, run:
</para>
<informalexample><simplelist><member>
  <prompt>~&gt; </prompt>
  <userinput>pkg_info | grep db41</userinput>
</member></simplelist></informalexample>
<para>
This should return something like:
<screen>
db41-4.1.25_1       The Berkeley DB package, revision 4.1
</screen>
</para>
</sect3> <!-- check-berkeley-db -->

<sect3 id="more-changes">
<title>More Changes</title>

<para>
Change the line
</para>
<para>
<option>ac_cv_bdb=no</option>
</para>
<para>
to
</para>
<para>
<option>ac_cv_bdb=yes</option>
</para>
<para>
in the <filename>configure</filename> file because otherwise configure can't find the db libraries.
</para>

<note><para>
As <command>make -f Makefile.cvs</command> rebuilds the <filename>configure</filename> file you have to change this <option>ac_cv_bdb</option> entry <emphasis>every time</emphasis> after you issued this command.
</para></note>

<para>
As the FreeBSD guys renamed <filename>libdb.so</filename> to <filename>libdbxx.so</filename> you must replace
</para>
<para>
<option>libkdevcatalog_la_LIBADD = -ldb</option>
</para>
<para>
by
</para>
<para>
<option>libkdevcatalog_la_LIBADD = -ldb41</option>
</para>
<para>
in the <filename>lib/catalog/Makefile.am</filename> file.
</para>
<para>
Now continue with the usual <command>configure</command> and <command>make</command> steps as shown above.
</para>

</sect3> <!--  more-changes -->
</sect2> <!-- compile-and-install-bsd -->

<sect2 id="compile-and-install-options">
<title>Some Notes on <command>configure</command> Options</title>

<sect3 id="compile-and-install-options-dir">
<title>Non-default Installation Directory</title>

<indexterm zone="compile-and-install-options-dir">
  <primary>&kdevelop;</primary>
  <secondary>installation</secondary>
  <tertiary>non-default directory</tertiary></indexterm>
<indexterm zone="compile-and-install-options-dir">
  <primary>non-default directory</primary></indexterm>
<indexterm zone="compile-and-install-options-dir">
  <primary>KDEDIRS</primary></indexterm>
<indexterm zone="compile-and-install-options-dir">
  <primary>kbuildsycoca</primary></indexterm>

<para>
By default <command>configure</command> prepares the IDE to be installed in the default &kde; directory. This is necessary because &kdevelop; assumes direct access to some tools and parts which reside there. If want to use your own installation directory, you must tell <command>configure</command> this by the <option>--prefix</option> option:
</para>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>./configure --prefix=</userinput>(where-your-kde3-is)
</member></simplelist></informalexample>
<para>
There is a caveat if you do so. You must provide a means for &kdevelop; to access the needed tools and parts in the &kde; directory when running. (You can still use the IDE without doing so, but with very restrained capabilities.)
</para>
<para>
Call up a shell and have the following commands executed before you start &kdevelop; at the shell prompt.
</para>

<note><para>
  <emphasis>Take care to use the plural:</emphasis> It is <quote><envar>KDEDIRS</envar></quote>, not just <quote><envar>KDEDIR</envar></quote>)
</para></note>

<informalexample><simplelist>
  <member>
    <prompt>~&gt; </prompt>
    <userinput>export KDEDIRS=/usr/local/kde:/opt/kde3</userinput>
  </member>
  <member>
    <prompt>~&gt; </prompt>
    <userinput>kbuildsycoca</userinput>
  </member>
  <member>
  (Now start &kdevelop;:)
  </member>
  <member>
    <prompt>~&gt; </prompt>
    <userinput>kdevelop</userinput>
  </member>
</simplelist></informalexample>

<note><simplelist>
  <member>The <envar>KDEDIRS</envar> environment variable must be set to the <emphasis>list of active &kde; directories</emphasis> in your system. We use</member>
  <member><filename class="directory">/usr/local/kde</filename>:<filename class="directory">/opt/kde3</filename></member>
  <member>as an example only.</member>
  <member>The <filename class="directory">/usr/local/kde</filename> directory may for instance contain an incomplete &kde; version you compiled for debug purposes, and the <filename class="directory">/opt/kde3</filename> directory may in addition contain the standard &kde; version from your distribution that is used for everyday work.</member>
</simplelist></note>

<para>
In a tcsh shell you must set the environment variables using:
</para>
<informalexample><simplelist><member>
    <prompt>~&gt; </prompt>
    <userinput>setenv KDEDIRS /usr/local/kde:/opt/kde3</userinput>
</member></simplelist></informalexample>
<para>
The <command>kbuildsycoca</command> command (<quote>build system control cache</quote>) looks around for libraries and caches their location and version, so that &kdevelop; can find them. The caveat is that it takes noticeable time&mdash;and it has to be run any time you call up the shell to start &kdevelop; from a non-default directory. You may want to put the above commands into a shell script to reduce the typing effort.
</para>
<para>
(You could as well put the lines in your <filename>.bashrc</filename> or <filename>.cshrc</filename> file, but this is not advisable as <command>kbuildsycoca</command> will then be run any time you call up the shell.)
</para>

<note><para>
The <command>kbuildsycoca</command> command does not run from within the root. You must call it from a non-root user. (But is <emphasis>not a very good idea</emphasis> after all to do software development from within the root!)
</para></note>
</sect3> <!-- compile-and-install-options-dir -->

<!-- ### put a sect3 with other configuration options here -->

</sect2> <!-- compile-and-install-options -->

</sect1> <!-- compile-and-install -->

<sect1 id="make-api">
<title>How to Obtain a &kdevelop; API Documentation</title>

<indexterm zone="make-api">
  <primary>API</primary>
  <secondary>&kdevelop;</secondary></indexterm>
<indexterm zone="make-api">
  <primary>&kdevelop;</primary>
  <secondary>API</secondary></indexterm>
<indexterm zone="make-api">
  <primary>compiling</primary>
  <secondary>&kdevelop;</secondary>
  <tertiary>API</tertiary></indexterm>
<indexterm zone="make-api">
  <primary>configure</primary>
  <secondary>&kdevelop; API</secondary></indexterm>

<para>
API is the short form of <quote>Application Program Interface</quote>. Actually such an API cotains a series of descriptions (i.e. calling conventions) by which an application program can access the operating system and other services. In our context, however, a broader definition was adopted. The API of a &kde; or &Qt; application is an abstract of the classes and methods interfaces, a synopsis to be used like a dictionary to navigate the sources.
</para>
<para>
There is a version of the most current API available at the <ulink url="http://developer.kde.org/documentation/library/cvs-api/kdevelop/html/index.html">KDevelop-Home website</ulink>. It will be automatically updated every 24 hours so you can keep up.
</para>
<para>
Alas, this version is best used read-only over the internet. If you do not allways have net access you may as well build your own API documentation from the &kdevelop; sources. To do so, you must tell the automake system where to find the KDELIBS API in your system. This is accomplished by the special option <option>--with-kdelibsdoxy-dir</option> in the <command>configure</command> command when you prepare to compile the &kdevelop; sources:
</para>

<informalexample><simplelist>
  <member>
    <prompt>~/kde3src/kdevelop&gt; </prompt>
    <userinput>./configure --</userinput>(options-as-usual)<userinput> \</userinput>
  </member>
  <member>
    <userinput>--with-kdelibsdoxy-dir=$KDEDIR/share/doc/HTML/en/kdelibs-apidocs</userinput>
  </member>
</simplelist></informalexample>

<para>
(<command>make</command> will replace the global <varname>$KDEDIR</varname> variable with the actual &kde; directory setting recorded therein.) Then issue a <command>make</command> command <link linkend="compile-and-install-make-basic">as usual</link>. After the &kdevelop; IDE has been built you have the option to build the API as well. For this you must issue
</para>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make apidocs</userinput>
</member></simplelist></informalexample>

<para>
This will build a <filename>Doxyfile</filename> in your &kdevelop; base directory which in turn will be processed by the <application>Doxygen</application> application to build quite a lot of <filename>.html</filename> API files. When this rather lengthy API building process (may last more than an hour on a slow system) finally comes to an end, you must install the API just like you have to install the &kdevelop; IDE itself. If necessary obtain superuser rights by
</para>

<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>su</userinput>
</member></simplelist></informalexample>

<para>
and entering the root password. Then install the API files:
</para>

<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make install-apidox</userinput>
</member></simplelist></informalexample>

<para>
Once this is done, <command>make</command> will inform you about the directory where you can finally look at the API documentation's contents. Note this address, you can use it from the &konqueror; as well as from inside &kdevelop;, in case you have set up the &kdevelop; sources themselves as a project to work on.
</para>

<note><para>
You will most probably see a lot of warning and/or error messages during the API build run by <application>Doxygen</application>. Best ignore them, they are of interest to the &kdevelop; developers only. If the API generation ever comes to a successful end, the <filename>.html</filename> API files will be useable.
</para></note>

</sect1> <!-- make-api -->

</chapter> <!-- kdevelop-install -->

<!-- ====================================================================== -->

<chapter id="kdevelop-survey">
<title>Survey of &kdevelop; Features</title>

<indexterm zone="kdevelop-survey">
  <primary>&kdevelop;</primary>
  <secondary>survey</secondary></indexterm>
<indexterm zone="kdevelop-survey">
  <primary>overall view</primary></indexterm>
<indexterm zone="kdevelop-survey">
  <primary>survey</primary></indexterm>

<para>
&kdevelop; integrates a lot of tools, scripts, and templates in a common user interface. Basically it consists of

<itemizedlist>
  <listitem><para>
  several <link  linkend="uimodes-survey">user interface modes</link> from which you can select the look and feel of the workspace,
  </para></listitem>
  <listitem><para>
  an <link linkend="appwizard">&appwizard;</link> which aids you in setting up a new project,
  </para></listitem>
  <listitem><para>
  several <link linkend="makesystems">project management systems</link> which aid in building and managing your project,
  </para></listitem>
  <listitem><para>
  some <link linkend="editing">editing tools</link> to easily work on your program texts
  </para></listitem>
  <listitem><para>
  various <link linkend="file-browsers">file browsers</link> providing you different views on your file system,
  </para></listitem>
  <listitem><para>
  various <link linkend="class-browsers">class browsers</link> to aid you in maintaining the classes and their relationships of your object-oriented programming project,
  </para></listitem>
  <listitem><para>
  a <link linkend="debugger">debugger interface</link> to find and remove program errors from within &kdevelop;, and
  </para></listitem>
  <listitem><para>
  several <link linkend="plugin-tools">plugin tools</link>, extensible modules which can be loaded at runtime and on demand.  This allows you to only turn on those features you really need.
  </para></listitem>
  <listitem><para>
  a set of other diagnosis, documentation, and optimization helper tools.
  </para></listitem>
</itemizedlist>
</para>

<sect1 id="uimodes-survey">
<title>Available User Interface Modes</title>

<indexterm zone="uimodes-survey">
  <primary>&kdevelop;</primary>
  <secondary>user interface modes</secondary></indexterm>
<indexterm zone="uimodes-survey">
  <primary>user interface</primary>
  <secondary>&kdevelop; modes</secondary></indexterm>
<indexterm zone="uimodes-survey">
  <primary>UI modes</primary></indexterm>
<indexterm zone="uimodes-survey">
  <primary>Child Frame Windows</primary></indexterm>
<indexterm zone="uimodes-survey">
  <primary>Tabbed Pages</primary></indexterm>
<indexterm zone="uimodes-survey">
  <primary>Toplevel Windows</primary></indexterm>
<indexterm zone="uimodes-survey">
  <primary>IDEAl</primary></indexterm>

<para>
&kdevelop; offers developers four separate user interface modes (click on the mode name to view an example):
<itemizedlist>
  <listitem><para><link linkend="ideal-desc">IDEAl</link></para>
  <para>
  This is a novel user interface approach optimizing both work space and intuitive handling of the tools.
  </para>
  <itemizedlist>
    <listitem><para>
    All tool views are docked in a tabbar fashion around the mainframe area. They are grouped left, bottom, and right according to the services provided.
    </para></listitem>
    <listitem><para>
    Editor and browser views will be stacked in a big sized tabbed window inmidst the mainframe area.
    </para></listitem>
  </itemizedlist>
  </listitem>

  <listitem>
  <para><link linkend="mdi-desc">Child Frame Windows</link></para>
  <itemizedlist>
    <listitem><para>All tool views are initially docked to the mainframe.</para></listitem>
    <listitem><para>Editor and browser views will live like toplevel windows within a view area of the mainframe.</para></listitem>
  </itemizedlist>
  </listitem>

  <listitem>
  <para><link linkend="tabbed-desc">Tabbed Pages</link></para>
  <itemizedlist>
    <listitem><para>
    All tool views are initially docked to the mainframe.
    </para></listitem>
    <listitem><para>
    Editor and browser views will be stacked in a tabbed window.
    </para></listitem>
  </itemizedlist>
  </listitem>

  <listitem>
  <para><link linkend="toplevel-desc">Toplevel Windows</link></para>
  <itemizedlist>
    <listitem><para>
    All editor, browser, and tool views will be toplevel windows directly on the desktop.
    </para></listitem>
    <listitem><para>
    The main widget only contains the menu, toolbars, and statusbar.
    </para></listitem>
  </itemizedlist>
  </listitem>

</itemizedlist>
</para>

<sect2 id="uimodes-switch">
<title>How to Switch User Interface Modes</title>

<indexterm zone="uimodes-switch">
  <primary>user interface</primary>
  <secondary>switch modes</secondary></indexterm>
<indexterm zone="uimodes-switch">
  <primary>switch UI modes</primary></indexterm>

<para>
To switch the user interface mode select <menuchoice> <guimenu>Settings</guimenu> <guimenuitem>Configure KDevelop...</guimenuitem> </menuchoice> from the menus. The <guilabel>Customize KDevelop</guilabel> dialog will pop up, where you have to select <guilabel>User Interface</guilabel> in the left hand tree. This will display the settings page shown below.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="select-user-interface.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Select a user interface mode
    </para></caption>
  </mediaobject>
</screenshot>

<para>
Select the radio button of the user interface mode you want to switch to, then press <guibutton>OK</guibutton>.
</para>

</sect2> <!-- uimodes-switch -->

<sect2 id="maximize-workspace">
<title>How to Maximize the Work Space Area</title>

<indexterm zone="maximize-workspace">
  <primary>&kdevelop;</primary>
  <secondary>work space</secondary></indexterm>
<indexterm zone="maximize-workspace">
  <primary>&kdevelop;</primary>
  <secondary>maximize work space</secondary></indexterm>
<indexterm zone="maximize-workspace">
  <primary>user interface</primary>
  <secondary>work space</secondary></indexterm>
<indexterm zone="maximize-workspace">
  <primary>user interface</primary>
  <secondary>menubar</secondary></indexterm>
<indexterm zone="maximize-workspace">
  <primary>user interface</primary>
  <secondary>full screen mode</secondary></indexterm>
<indexterm zone="maximize-workspace">
  <primary>full screen mode</primary></indexterm>
<indexterm zone="maximize-workspace">
  <primary>menubar</primary>
  <secondary>hide/unhide</secondary></indexterm>
<indexterm zone="maximize-workspace">
  <primary>hide menubar</primary></indexterm>
<indexterm zone="maximize-workspace">
  <primary>unhide menubar</primary></indexterm>

<para>
To maximize space, there is a full-screen window mode available which expands the mainframe area to the screen borders. Additional space can be reclaimed by hiding the menubar. And you can of course hide any toolbar as usual in <application>KDE</application> applications.
</para>

<formalpara>
<title>Full Screen Mode</title>
<para>
To switch to or from full screen mode select <menuchoice> <guimenu>View</guimenu> <guimenuitem>Full-Screen Mode</guimenuitem> </menuchoice> from the menus or press <keycombo> <keycap>Ctrl</keycap> <keycap>Shift</keycap> <keycap>F</keycap> </keycombo>. There is also a <guiicon>Full-Screen Mode</guiicon> icon in the <guilabel>Browse Toolbar</guilabel> available.
</para>
</formalpara>

<formalpara>
<title>Hide/Unhide the Menubar</title>
<para>
To <emphasis>hide</emphasis> the menu bar select <menuchoice> <guimenu>Settings</guimenu> <guimenuitem>Show Menubar</guimenuitem> </menuchoice> from the menus or press <keycombo> <keycap>Ctrl</keycap> <keycap>M</keycap> </keycombo>. You may also include a <guiicon>Show Menubar</guiicon> icon in a suiting toolbar, e.g. the <guilabel>Browse Toolbar</guilabel> for that purpose. To <emphasis>unhide</emphasis> the menubar you must press <keycombo> <keycap>Ctrl</keycap> <keycap>M</keycap> </keycombo> or use the <guiicon>Show Menubar</guiicon> icon if available.
</para>
</formalpara>

</sect2> <!-- maximize-workspace -->

</sect1> <!-- uimodes-survey -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="ui-elements">
<title>Elements of the User Interface</title>

<para>
(... to be written ...)
</para>

<sect2 id="ui-elements-workarea">
<title>The Workarea</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- ui-elements-workarea -->

<sect2 id="ui-elements-titlebar">
<title>The &kdevelop; Title Bar</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- ui-elements-titlebar -->

<sect2 id="ui-elements-statusbar">
<title>The &kdevelop; Status Bar</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- ui-elements-statusbar -->

<sect2 id="ui-elements-menubar">
<title>The Menu Bar</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- ui-elements-menubar -->

<sect2 id="ui-elements-toolbars">
<title>The Tool Bars</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- ui-elements-toolbars -->

<sect2 id="ui-elements-treetoolviews">
<title>The Tree Tool Views</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- ui-elements-treetoolviews -->

<sect2 id="ui-elements-outputtoolviews">
<title>The Output Tool Views</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- ui-elements-outputtoolviews -->

</sect1> <!-- ui-elements -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="makesystems">
<title>Project Management Systems</title>

<indexterm zone="makesystems">
  <primary>project management</primary></indexterm>

<para>
Globally, a project will rely on some form of project management system.  &kdevelop; offers four <emphasis>project management systems</emphasis> the programmer can select from when creating a new project.

<itemizedlist>
  <listitem><para>
  <link linkend="automake-project">Automake projects</link> use the &gnu; standard development tools.
  </para></listitem>
  <listitem><para>
  <link linkend="qmake-project">QMake projects</link> use the trolltech QMake project manager.
  </para></listitem>
  <listitem><para>
  <link linkend="ant-project">ANT projects</link> use the Apache ANT project manager for Java development.
  </para></listitem>
  <listitem><para>
  <link linkend="custom-project">Custom projects</link> require you to maintain your own <filename>Makefiles</filename>.
  </para></listitem>
</itemizedlist>
</para>

<sect2 id="automake-project">
<title>Automake Projects</title>

<indexterm zone="automake-project">
  <primary>projects</primary>
  <secondary>automake</secondary></indexterm>
<indexterm zone="automake-project">
  <primary>automake</primary>
  <secondary>projects</secondary></indexterm>

<para>
Projects created with &kdevelop;'s &automanag; make it very easy for developers to use the &GNU; standard development tools. They provide
<itemizedlist>
  <listitem><para>
  a better way of <filename>Makefile</filename> generation and
  </para></listitem>
  <listitem><para>
  a good and safe way for fast adaption towards different systems by autoconf-generated <filename>configure</filename> scripts.
  </para></listitem>
</itemizedlist>
</para>
</sect2> <!-- automake-project -->

<sect2 id="qmake-project">
<title>QMake Projects</title>

<indexterm zone="qmake-project">
  <primary>projects</primary>
  <secondary>qmake</secondary></indexterm>
<indexterm zone="qmake-project">
  <primary>qmake</primary>
  <secondary>projects</secondary></indexterm>

<para>
For developers who enjoy the flexibility and feel of &qt;'s qmake system, &kdevelop; offers the ability to handle qmake based projects (.pro files) within the GUI.
</para>
<para>
For more information on the QMake project manager see the <quote>qmake User Guide</quote> which should be included in your distribution or have a look at the <ulink url="http://doc.trolltech.com/">TROLLTECH Documentation</ulink> home page where you may find the QMake documentation of your <quote>Qt C++ GUI Application Development Toolkit</quote> version.
</para>
</sect2> <!-- qmake-project -->

<sect2 id="ant-project">
<title>ANT Projects (Java Projects)</title>

<indexterm zone="ant-project">
  <primary>projects</primary>
  <secondary>ant</secondary></indexterm>
<indexterm zone="ant-project">
  <primary>ant</primary>
  <secondary>projects</secondary></indexterm>
<indexterm zone="ant-project">
  <primary>projects</primary>
  <secondary>Java</secondary></indexterm>
<indexterm zone="ant-project">
  <primary>Java</primary>
  <secondary>projects</secondary></indexterm>
<indexterm zone="ant-project">
  <primary>development</primary>
  <secondary>Java</secondary></indexterm>

<para>
Java developers may want to use the Apache ANT project manager for their projects. To set up a new Ant project in &kdevelop; select <menuchoice><guimenu>Project</guimenu>
<guimenuitem>New Project...</guimenuitem>
<guimenuitem>Java</guimenuitem>
<guimenuitem>Ant Project</guimenuitem>
<guimenuitem>Application</guimenuitem></menuchoice>.
</para>
<para>
For more information see <ulink url="http://ant.apache.org/">The Apache Ant Project</ulink> home page.
</para>
</sect2> <!-- ant-project -->

<sect2 id="custom-project">
<title>Custom Projects</title>

<indexterm zone="custom-project">
  <primary>projects</primary>
  <secondary>custom</secondary></indexterm>
<indexterm zone="custom-project">
  <primary>custom projects</primary></indexterm>
<indexterm zone="custom-project">
  <primary>Makefile</primary>
  <secondary>custom projects</secondary></indexterm>

<para>
If you prefer to maintain your own <filename>Makefiles</filename> for your project you may use the custom project option of &kdevelop;. This may be feasible in unusually structured projects or if you want to retain full control over the <command>make</command> process.
</para>
<para>
Yet, if you do not <emphasis>really need</emphasis> the extra flexibility and control of the custom project manager you should consider &automanag; or one of the other project managers, because they considerably ease the program building and distribution processes.
</para>
</sect2> <!-- custom-project -->

<sect2 id="makesystems-distribution">
<title>How to Distribute Your Application</title>

<indexterm zone="makesystems-distribution">
  <primary>distribution</primary></indexterm>
<indexterm zone="makesystems-distribution">
  <primary>application</primary>
  <secondary>distribution</secondary></indexterm>
<indexterm zone="makesystems-distribution">
  <primary>binary packages</primary></indexterm>

<para>
The distribution of your applications does not require the end-user to have anything different installed other than
<itemizedlist>
  <listitem><para>an appropriate compiler,</para></listitem>
  <listitem><para>a linker, and</para></listitem>
  <listitem><para>the appropriate development libraries,</para></listitem>
</itemizedlist>
</para>
<para>
which at least for C++ applications is most often the case. But you can as well distribute <emphasis>binary packages</emphasis> of your application.
<!-- ### more detail on binary construction needed somewhere -->
In either way, the end-user of your product does not need &kdevelop; installed.
</para>
<para>
For giving away your sources, we advise to include the <emphasis>project file</emphasis> of &kdevelop; as well. This makes it very easy for other developers&mdash;if they use &kdevelop;&mdash;to work with your sources.
</para>
<para>
For projects where <emphasis>several developers</emphasis>, maybe working on different places, are involved, this should be the case anyway. So you can ensure consistency of the <filename>Makefiles</filename> to not run into trouble.
</para>
<para>
Especially on multi language applications, <emphasis>translators</emphasis> won't actually work with the source code, except in cases that require correction for enabling translation support.
</para>

</sect2> <!-- makesystems-distribution -->

</sect1> <!-- makesystems -->

</chapter> <!-- kdevelop-survey -->

<!-- ====================================================================== -->

<chapter id="setup">
<title>Configuring &kdevelop;</title>

<para>
&kdevelop; is a very powerful and flexible IDE which offers many ways to taylor it to your needs. To start configuration select <menuchoice><guimenu>Settings</guimenu><guimenuitem>Configure KDevelop...</guimenuitem></menuchoice>. This will cause the configuration dialog to pop up consisting of a selection window to the left and the configuration dialog on the right hand side whose contents will vary upon the configuration item you did select.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-select.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Select a configuration item
    </para></caption>
  </mediaobject>
</screenshot>

<para>
We will discuss these configurations in a different order, split up into the main topics of <link linkend="setup-general">General Configuration</link>, <link linkend="setup-docu">Configuring the Documentation Tree</link>, and <link linkend="setup-advanced">Advanced Configuration</link> which will provide for a more intuitive reading. You may as well directly jump to a certain configuration selection through one of the following links.
</para>

<itemizedlist>
  <listitem><para>
  <link linkend="setup-main">General</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-plugins">Plugins</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-format">Source Formatter</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-ui">User Interface</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-editor">Editor</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-abbrev">Abbreviations</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-menu-standard">Tools Menu</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-menu-external">External Tools</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-snippets">Code Snippets</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-fileselector">File Selector</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-docu">Documentation Tree</link>
  </para></listitem>
</itemizedlist>

<sect1 id="setup-general">
<title>General Configuration</title>

<para>
General configuration concerns more common tasks of tayloring &kdevelop; as there are:
</para>
<itemizedlist>
  <listitem><para>
  <link linkend="setup-main">General Setup</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-ui">Selecting the User Interface</link>
  </para></listitem>
  <listitem>
    <para>
    Source Edit Tasks
    </para>
    <itemizedlist>
      <listitem><para>
      <link linkend="setup-editor">Selecting an Editor</link>
      </para></listitem>
      <listitem><para>
      <link linkend="setup-format">Selecting a Source Format Style</link>
      </para></listitem>
      <listitem><para>
      <link linkend="setup-snippets">Setting Up the Code Snippets Tool</link>
      </para></listitem>
    </itemizedlist>
  </listitem>
  <listitem><para>
  <link linkend="setup-fileselector">Configuring the File Selector</link>
  </para></listitem>
</itemizedlist>

<sect2 id="setup-main">
<title>General Setup</title>

<para>
The <guilabel>General</guilabel> configuration dialog page allows you to define some basic &kdevelop; behaviour which seldom will change in your everyday work. This concerns:
</para>
<itemizedlist>
  <listitem>
    <para>
    General project options as
    </para>
    <itemizedlist>
      <listitem><para>
      defining a <link linkend="setup-main-projects">default parent directory</link> &kdevelop; shall use for new projects.
      </para></listitem>
       <listitem><para>
      deciding whether you want &kdevelop; to <link linkend="setup-main-preload">automatically load</link> the project you last worked on.
      </para></listitem>
   </itemizedlist>
  </listitem>
  <listitem>
    <para>
    Selecting a font for the most commonly used output view windows, namely
    </para>
    <itemizedlist>
      <listitem><para>
      the <link linkend="setup-main-messages-font">Messages Output View</link> &kdevelop; uses to communicate e.g. compilation progresses, and
      </para></listitem>
      <listitem><para>
      the <link linkend="setup-main-applications-font">Application Output View</link> which will show error and state information concerning a running application.
      </para></listitem>
    </itemizedlist>
  </listitem>
  <listitem>
    <para>
    Some common behaviour concerning the displayed lines in the <guilabel>Messages Output View</guilabel> window, namely
    </para>
    <itemizedlist>
      <listitem><para>
      whether long lines will <link linkend="setup-main-wrap">wrap around</link>, and
      </para></listitem>
      <listitem><para>
      if <link linkend="setup-main-navigation">directory entry and exit messages</link> issued by <command>Make</command> will be shown.
      </para></listitem>
    </itemizedlist>
  </listitem>
  <listitem><para>
  The <link linkend="setup-main-compile">level of detail</link> of messages concerning the compilation process shown in the <guilabel>Messages Output View</guilabel> window.
  </para></listitem>
</itemizedlist>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-general.png" format="PNG"/>
    </imageobject>
    <caption><para>
    The general configuration dialog
    </para></caption>
  </mediaobject>
</screenshot>

<formalpara id="setup-main-preload">
<title>Load last project on startup</title>

<para>
Mark this checkbox if you want to continue to work with the last project you worked on. This will cause &kdevelop; to automatically load this project on startup. It will usually be shown in the state you left work so you can readily proceed.
</para>
</formalpara>

<formalpara id="setup-main-projects">
<title>Default projects directory</title>

<para>
By default, &kdevelop; uses a common parent directory for all new projects. Enter the absolute path of this common directory in the box or select it from your directory structure. &kdevelop; will place the any new project here as a subdirectory.
</para>
</formalpara>
<note><para>
You may of course change the directory path of a new project at the time you set it up in the <link linkend="appwizard">&appwizard;</link>.
</para></note>

<formalpara id="setup-main-messages-font">
<title><guilabel>Messages Output View</guilabel> window font</title>

<para>
</para>
</formalpara>

<formalpara id="setup-main-wrap">
<title>Line wrapping</title>

<para>
</para>
</formalpara>

<formalpara id="setup-main-navigation">
<title>Directory navigation messages</title>

<para>
</para>
</formalpara>

<formalpara id="setup-main-compile">
<title>Compiler output</title>

<para>
</para>
</formalpara>

<formalpara id="setup-main-applications-font">
<title><guilabel>Application Output View</guilabel> window font</title>

<para>
</para>
</formalpara>

</sect2> <!-- setup-main -->

<sect2 id="setup-ui">
<title>Selecting the User Interface</title>

<para>
Java developers may want to use the Apache ANT project manager for their projects. To set up a new Ant project in &kdevelop; select <menuchoice><guimenu>Project</guimenu>
<guimenuitem>New Project...</guimenuitem>
<guimenuitem>Java</guimenuitem>
<guimenuitem>Ant Project</guimenuitem>
<guimenuitem>Application</guimenuitem></menuchoice>.
</para>
<para>
For more information see <ulink url="http://ant.apache.org/">The Apache Ant Project</ulink> home page.
</para>
</sect2> <!-- ant-project -->

<sect2 id="custom-project">
<title>Custom Projects</title>

<indexterm zone="custom-project">
  <primary>projects</primary>
  <secondary>custom</secondary></indexterm>
<indexterm zone="custom-project">
  <primary>custom projects</primary></indexterm>
<indexterm zone="custom-project">
  <primary>Makefile</primary>
  <secondary>custom projects</secondary></indexterm>

<para>
If you prefer to maintain your own <filename>Makefiles</filename> for your project you may use the custom project option of &kdevelop;. This may be feasible in unusually structured projects or if you want to retain full control over the <command>make</command> process.
</para>
<para>
Yet, if you do not <emphasis>really need</emphasis> the extra flexibility and control of the custom project manager you should consider &automanag; or one of the other project managers, because they considerably ease the program building and distribution processes.
</para>
</sect2> <!-- custom-project -->

<sect2 id="makesystems-distribution">
<title>How to Distribute Your Application</title>

<indexterm zone="makesystems-distribution">
  <primary>distribution</primary></indexterm>
<indexterm zone="makesystems-distribution">
  <primary>application</primary>
  <secondary>distribution</secondary></indexterm>
<indexterm zone="makesystems-distribution">
  <primary>binary packages</primary></indexterm>

<para>
The distribution of your applications does not require the end-user to have anything different installed other than
<itemizedlist>
  <listitem><para>an appropriate compiler,</para></listitem>
  <listitem><para>a linker, and</para></listitem>
  <listitem><para>the appropriate development libraries,</para></listitem>
</itemizedlist>
</para>
<para>
which at least for C++ applications is most often the case. But you can as well distribute <emphasis>binary packages</emphasis> of your application.
<!-- ### more detail on binary construction needed somewhere -->
In either way, the end-user of your product does not need &kdevelop; installed.
</para>
<para>
For giving away your sources, we advise to include the <emphasis>project file</emphasis> of &kdevelop; as well. This makes it very easy for other developers&mdash;if they use &kdevelop;&mdash;to work with your sources.
</para>
<para>
For projects where <emphasis>several developers</emphasis>, maybe working on different places, are involved, this should be the case anyway. So you can ensure consistency of the <filename>Makefiles</filename> to not run into trouble.
</para>
<para>
Especially on multi language applications, <emphasis>translators</emphasis> won't actually work with the source code, except in cases that require correction for enabling translation support.
</para>

</sect2> <!-- makesystems-distribution -->

</sect1> <!-- makesystems -->

</chapter> <!-- kdevelop-survey -->

<!-- ====================================================================== -->

<chapter id="setup">
<title>Configuring &kdevelop;</title>

<para>
&kdevelop; is a very powerful and flexible IDE which offers many ways to taylor it to your needs. To start configuration select <menuchoice><guimenu>Settings</guimenu><guimenuitem>Configure KDevelop...</guimenuitem></menuchoice>. This will cause the configuration dialog to pop up consisting of a selection window to the left and the configuration dialog on the right hand side whose contents will vary upon the configuration item you did select.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-select.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Select a configuration item
    </para></caption>
  </mediaobject>
</screenshot>

<para>
We will discuss these configurations in a different order, split up into the main topics of <link linkend="setup-general">General Configuration</link>, <link linkend="setup-docu">Configuring the Documentation Tree</link>, and <link linkend="setup-advanced">Advanced Configuration</link> which makes for a more intuitive reading.
</para>
<para>
If you want directly look up a certain configuration item use one of the following links.
</para>
<simplelist>
  <member><link linkend="setup-main">General</link></member>
  <member><link linkend="setup-plugins">Plugins</link></member>
  <member><link linkend="setup-format">Source Formatter</link></member>
  <member><link linkend="setup-ui">User Interface</link></member>
  <member><link linkend="setup-editor">Editor</link></member>
  <member><link linkend="setup-abbrev">Abbreviations</link></member>
  <member><link linkend="setup-menu-standard">Tools Menu</link></member>
  <member><link linkend="setup-menu-external">External Tools</link></member>
  <member><link linkend="setup-snippets">Code Snippets</link></member>
  <member><link linkend="setup-fileselector">File Selector</link></member>
  <member><link linkend="setup-docu">Documentation Tree</link></member>
</simplelist>

<sect1 id="setup-general">
<title>General Configuration</title>

<para>
General configuration concerns the more common tasks of tayloring &kdevelop; as there are:
</para>
<itemizedlist>
  <listitem><para>
  <link linkend="setup-main">General Setup</link>
  </para></listitem>
  <listitem><para>
  <link linkend="setup-ui">Selecting the User Interface</link>
  </para></listitem>
  <listitem>
    <para>
    Source Edit Tasks
    </para>
    <itemizedlist>
      <listitem><para>
      <link linkend="setup-editor">Selecting an Editor</link>
      </para></listitem>
      <listitem><para>
      <link linkend="setup-format">Selecting a Source Format Style</link>
      </para></listitem>
      <listitem><para>
      <link linkend="setup-snippets">Setting Up the Code Snippets Tool</link>
      </para></listitem>
    </itemizedlist>
  </listitem>
  <listitem><para>
  <link linkend="setup-fileselector">Configuring the File Selector</link>
  </para></listitem>
</itemizedlist>

<sect2 id="setup-main">
<title>General Setup</title>

<para>
The <guilabel>General</guilabel> configuration dialog allows you to define some basic &kdevelop; behaviour which seldom will change in everyday work. This concerns:
</para>
<itemizedlist>
  <listitem>
    <para>
    General project options as
    </para>
    <itemizedlist>
      <listitem><para>
      defining a <link linkend="setup-main-projects">default parent directory</link> &kdevelop; shall use for new projects.
      </para></listitem>
       <listitem><para>
      deciding whether you want &kdevelop; to <link linkend="setup-main-preload">automatically load</link> the project you last worked on.
      </para></listitem>
   </itemizedlist>
  </listitem>
  <listitem>
    <para>
    Selecting a font for the most commonly used output view windows, namely
    </para>
    <itemizedlist>
      <listitem><para>
      the <link linkend="setup-main-messages-font">Messages Output View</link> &kdevelop; uses to communicate e.g. compilation progresses, and
      </para></listitem>
      <listitem><para>
      the <link linkend="setup-main-applications-font">Application Output View</link> which will show error and state information concerning a running application.
      </para></listitem>
    </itemizedlist>
  </listitem>
  <listitem>
    <para>
    Some common behaviour concerning the displayed lines in the <guilabel>Messages Output View</guilabel> window, namely
    </para>
    <itemizedlist>
      <listitem><para>
      whether long lines will <link linkend="setup-main-wrap">wrap around</link>, and
      </para></listitem>
      <listitem><para>
      if <link linkend="setup-main-navigation">directory entry and exit messages</link> issued by <command>Make</command> will be shown.
      </para></listitem>
    </itemizedlist>
  </listitem>
  <listitem><para>
  The <link linkend="setup-main-compile">level of detail</link> of messages concerning the compilation process shown in the <guilabel>Messages Output View</guilabel> window.
  </para></listitem>
</itemizedlist>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-general.png" format="PNG"/>
    </imageobject>
    <caption><para>
    The general configuration dialog
    </para></caption>
  </mediaobject>
</screenshot>

<formalpara id="setup-main-preload">
<title>Load last project on startup</title>

<para>
Mark this checkbox if you want to continue to work with the last project you worked on. This will cause &kdevelop; to automatically load this project on startup. It will usually be shown in the state you left work so you can readily proceed.
</para>
</formalpara>

<formalpara id="setup-main-projects">
<title>Default projects directory</title>
<para>
By default, &kdevelop; uses a common parent directory for all new projects. Enter the absolute path of this common directory in the box or select it from your directory structure. &kdevelop; will place the any new project here as a subdirectory.
</para>
</formalpara>
<note><para>
You may of course change the directory path of a new project at the time you set it up in the <link linkend="appwizard">&appwizard;</link>.
</para></note>

<formalpara id="setup-main-messages-font">
<title>Messages Output View window font</title>
<para>
To select a font suitable for the <guilabel>Messages Output View</guilabel> window press the <guilabel>Window Font</guilabel> button showing the currently selected font (it says <quote>Luxi Sans</quote> in the above illustration). The &kde; standard <guilabel>Select Font</guilabel> dialog will pop up from which you may select the font to be used.
</para>
</formalpara>
<note><para>
On first startup, &kdevelop; initializes this font setting to the standard font for which your &kde; user has been configured. <emphasis>This setting is fixed</emphasis>, so if you alter <menuchoice><guimenuitem>Preferences</guimenuitem><guimenuitem>Appearances &amp; Themes</guimenuitem><guimenuitem>Fonts</guimenuitem></menuchoice> in the <guilabel>Control Center</guilabel>, this will not effect this &kdevelop; font selection. You will have to explicitely reselect the <guilabel>Messages Output View</guilabel> window font.
</para></note>

<formalpara id="setup-main-wrap">
<title>Line wrapping</title>
<para>
By default, &kdevelop; will wrap long lines around in the <guilabel>Messages Output View</guilabel> window so that valuable information will not be easily overlooked. In some cases this will clutter long message lists. Remove the checkbox mark if you do not want the lines wrap around.
</para>
</formalpara>
<tip><para>
There is an alternative way to switch the line wrapping. Just right click in the <guilabel>Messages Output View</guilabel> window and mark/unmark the <guimenuitem>Line Wrapping</guimenuitem> entry in the menu which will pop up.
</para></tip>

<formalpara id="setup-main-navigation">
<title>Directory navigation messages</title>
<para>
The <command>Make</command> tool usually will display messages like <quote>Entering directory</quote>, or <quote>Leaving directory</quote> when it switches the directories it currently works in. As this clutters the messages list in the <guilabel>Messages Output View</guilabel> window, &kdevelop; suppresses those messages by default. Mark the checkbox if you want to protocol which directories <command>Make</command> worked in.
</para>
</formalpara>
<note><para>
Changes in this setting effect the processing of new messages only. Old directory navigation messages will be kept visible when you switch this feature off.
</para></note>

<formalpara id="setup-main-compile">
<title>Compiler output</title>
<para>
&kdevelop; preprocesses the messages the <guilabel>Messages Output View</guilabel> window receives during the build processes in order to filter superfluous information. You can control the level of detail &kdevelop; will display using the radio buttons in this field.
</para>
</formalpara>
<variablelist>
  <varlistentry>
    <term><guilabel>Very Short</guilabel></term>
    <listitem><para>
    Displays only warnings, errors, and the filenames which are compiled.
    </para></listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Short</guilabel></term>
    <listitem><para>
    Suppresses all compiler flags and formats the output to be more readable.
    </para></listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Full</guilabel></term>
    <listitem><para>
    Displays all output messages unmodified.
    </para></listitem>
  </varlistentry>
</variablelist>

<tip><para>
There is an alternative way to switch the compiler output detail. Just right click in the <guilabel>Messages Output View</guilabel> window and select the according detail level from the popup menu.
</para></tip>

<formalpara id="setup-main-applications-font">
<title>Application Output View window font</title>
<para>
The <guilabel>Application Output View</guilabel> window is used to display error and state information from applications which are run from inside &kdevelop;. These are informations the applications usually sends to the console when run stand-alone. So you do not need to leave the IDE when testing the application you currently work on.
</para>
</formalpara>
<para>
To select a font suitable for the <guilabel>Application Output View</guilabel> window press the <guilabel>Window Font</guilabel> button showing the currently selected font (it says <quote>Luxi Sans</quote> in the above illustration). The &kde; standard <guilabel>Select Font</guilabel> dialog will pop up from which you may select the font to be used.
</para>
<note><para>
On first startup, &kdevelop; initializes this font setting to the standard font for which your &kde; user has been configured. <emphasis>This setting is fixed</emphasis>, so if you alter <menuchoice><guimenuitem>Preferences</guimenuitem><guimenuitem>Appearances &amp; Themes</guimenuitem><guimenuitem>Fonts</guimenuitem></menuchoice> in the <guilabel>Control Center</guilabel>, this will not effect this &kdevelop; font selection. You will have to explicitely reselect the <guilabel>Application Output View</guilabel> window font.
</para></note>

</sect2> <!-- setup-main -->

<sect2 id="setup-ui">
<title>Selecting the User Interface</title>

<indexterm zone="setup-ui">
  <primary>user interface</primary>
  <secondary>switch modes</secondary></indexterm>
<indexterm zone="setup-ui">
  <primary>switch UI modes</primary></indexterm>

<para>
As already said in the <link linkend="uimodes-survey">Available User Interface Modes</link> chapter there are four different ways the &kdevelop; work area may be set up, namely:
</para>
<itemizedlist>
  <listitem><para>
  <link linkend="ideal-desc">IDEAl Mode</link>
  </para></listitem>
  <listitem><para>
  <link linkend="mdi-desc">Child Frame Windows Mode</link>
  </para></listitem>
  <listitem><para>
  <link linkend="tabbed-desc">Tabbed Pages Mode</link>
  </para></listitem>
  <listitem><para>
  <link linkend="toplevel-desc">Toplevel Windows Mode</link>
  </para></listitem>
</itemizedlist>

<para>
To switch the user interface mode select <menuchoice> <guimenu>Settings</guimenu> <guimenuitem>Configure KDevelop...</guimenuitem> </menuchoice> from the menus. The <guilabel>Customize KDevelop</guilabel> dialog will pop up, where you have to select <guilabel>User Interface</guilabel> in the left hand tree. This will display the followig settings dialog to the right.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="select-user-interface-0.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Select a user interface mode
    </para></caption>
  </mediaobject>
</screenshot>

<para>
Select the radio button of the user interface mode you want to switch to, then press <guibutton>OK</guibutton>.
</para>

</sect2> <!-- setup-ui -->

<sect2 id="setup-editor">
<title>Selecting an Editor</title>

<para>
&kdevelop; allows you to select your favorite text editor tool. Mark the <guilabel>Editor</guilabel> entry in the left hand side selections tree of the <guilabel>Configure KDevelop</guilabel> window. The following dialog will be displayed to the right.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure-editor.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Select an editor
    </para></caption>
  </mediaobject>
</screenshot>

<para>
To select a new editor, click on the arrow on the drop down list field. Depending on the editor parts interfaces your &kde; version has compiled in you will be provided with a list of editors you may select from (see the <link linkend="setup-editor-kparts">Important</link> note below for this). Click on the editor of your liking and press <guilabel>OK</guilabel>. Currently there are tree possibilities:
</para>
<variablelist>
  <varlistentry>
  <term><guilabel>Embedded Advanced Text Editor</guilabel></term>
  <listitem><para>
  This is the &kde; standard <application>Kate</application> editor part.
  </para></listitem>
  </varlistentry>
  <varlistentry>
  <term><guilabel>Embedded Vim Component</guilabel></term>
  <listitem>
    <para>
    This provides the look and feel of the base Linux <application>vi</application> editor.
    </para>
    <note><itemizedlist>
      <listitem><para>
      You need to have a suitable <application>Vim</application> application installed. Have a look at the <ulink url="http://www.freehackers.org/kvim/">KVim</ulink> website for more information.
      </para></listitem>
      <listitem><para>
      Furthermore you need to configure the KParts Vim component in the <guilabel>&kde; Control Center</guilabel> (<menuchoice><guimenuitem>KDE Components</guimenuitem><guimenuitem>Vim Component Configuration</guimenuitem></menuchoice>) before you can use it.
      </para></listitem>
    </itemizedlist></note>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><guilabel>Qt Designer Based Text Editor</guilabel></term>
  <listitem><para>
  This is the editor Qt provides in its <application>Designer</application> component.
  </para></listitem>
  </varlistentry>
</variablelist>

<para>
These editor interfaces are fully integrated in the &kdevelop; IDE concept. Particularly the possibility to jump to the offending source code line by just clicking on an error message in the <guilabel>Messages Output View</guilabel> window has been provided.
</para>

<note><para>
Changing the editor will not effect already open files. There are two possibilities to proceed. Either close all open text windows and reopen them one by one. Or simply close the whole project and reopen it again. The windows will then automatically open under the new text editor interface.
</para></note>

<important id="setup-editor-kparts"><para>
KDevelop lets you use editor interfaces which have registered with &kde; and that provide a KatePart interface. If you miss one one of the selections shown above check your &kde; installation if the corresponding KPart was correctly installed.
</para></important>
</sect2> <!-- setup-editor -->

<sect2 id="setup-format">
<title>Selecting a Source Format Style</title>

<para>
&kdevelop; automatically formats a source text in a predefined style. This style is highly configurable. Select <menuchoice> <guimenu>Settings</guimenu> <guimenuitem>Configure KDevelop...</guimenuitem> </menuchoice> from the menu bar. The <guilabel>Customize KDevelop</guilabel> dialog will pop up, where you have to select <guilabel>Source Formatter</guilabel> in the left hand tree. This will display a series of three settings dialog tabs to the right, namely a <link linkend="setup-format-general">General Formatting Setup</link>, a <link linkend="setup-format-indent">Indentation Style Setup</link>, and a <link linkend="setup-format-other">Other Formatting Setup</link>.
</para>

<note><para>
Any style changes apply to newly entered text only. If you want to change the formatting style of an already existing source text you will have to explicitely use the <menuchoice><guimenu>Edit</guimenu><guimenuitem>Reformat Source</guimenuitem></menuchoice> command.
</para></note>

<sect3 id="setup-format-general">
<title>General Formatting Setup</title>

<para>
The <guilabel>General</guilabel> tab of the <guilabel>Source Formatter</guilabel> dialog allows you to select one of five predefined source format styles.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="SF-general.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Source format style general setup
    </para></caption>
  </mediaobject>
</screenshot>

<para>
A formatted source example will be displayed in the field to the right. If none of the predefined styles is to your liking, you may press the top <guilabel>User defined</guilabel> radio button and define your own source formatting style style preferences on the other two tabs which will become available then.
</para>

<note><para>
Currently only the predefined source formatting styles will be demonstrated by an example text. If you decide to define your own style, no example display will be available. You have to experiment on an actual source text to taylor the settings to your liking.
</para></note>

</sect3> <!-- setup-format-general -->

<sect3 id="setup-format-indent">
<title>Indentation Style Setup</title>

<para>
Proper indentation is the main means to enhance readability of a source text. I you selected the <guilabel>Indentation</guilabel> tab of the <guilabel>Source Formatter</guilabel> dialog you will be presented with a series of indentation formatting choices grouped into three boxes as following.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="SF-indent.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Source format indentation style setup
    </para></caption>
  </mediaobject>
</screenshot>

<formalpara>
<title>Default Settings</title>
<para>
The preset format choices will cause the source text to resemble the ANSI formatting style:
</para>
</formalpara>
<screen>
namespace foospace
{
  int Foo()
  {
    if (isBar)
    {
      bar();
      return 1;
    }
    else
      return 0;
  }
}
</screen>

<formalpara>
<title>Defining Indentation Width and Characters</title>
<para>
The radio buttons grouped in the <guilabel>Filling</guilabel> box define how indentations in the source text will be drawn.
</para>
</formalpara>

<variablelist>
  <varlistentry>
    <term><guilabel>Use tabs</guilabel></term>
    <listitem>
    <para>
    This will cause the editor to insert a tab character for every indentation level. The indentation width is predefined in the editor settings. Use <menuchoice><guimenu>Settings</guimenu><guimenuitem>Configure Editor...</guimenuitem></menuchoice> to define the tabulator width.
    </para>
    <note><para>
    The actual tab width definition procedure depends on the editor you selected in the <link linkend="setup-editor">Selecting an Editor</link> configuration step. You will have to look up the corresponding editor help to find out.
    </para></note>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><guilabel>Use spaces</guilabel></term>
    <listitem><para>
    If you select this radio button, the editor will enter a number of spaces for each indentation level. Change the number from the default 2 to the indentation width you prefer.
    </para></listitem>
  </varlistentry>
</variablelist>

<formalpara>
<title>Indented Entities</title>
<para>
This defines which of the (C/C++) entities the source formatter will extra indent beyond the current indentation level.
</para>
</formalpara>
<para>
By default only <guilabel>namespaces</guilabel> and <guilabel>labels</guilabel> will be extra indented. You may want to experiment with various settings to taylor those extra indents to your liking.
</para>

<formalpara>
<title>Continuation</title>
<para>
(... to be written ...)
</para>
</formalpara>

</sect3> <!-- setup-format-inden -->

<sect3 id="setup-format-other">
<title>Other Formatting Setup</title>

<para>
(... to be written ...)
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="SF-other.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Other source format style settings
    </para></caption>
  </mediaobject>
</screenshot>

</sect3> <!-- setup-format-other -->

</sect2> <!-- setup-format -->

<sect2 id="setup-snippets">
<title>Setting Up the Code Snippets Tool</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- setup-snippets -->

<sect2 id="setup-fileselector">
<title>Configuring the File Selector</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- setup-fileselector -->

</sect1> <!-- setup-general -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="setup-docu">
<title>Configuring the Documentation Tree</title>

<para>
(... to be written ...)
</para>
</sect1> <!-- setup-docu -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="setup-advanced">
<title>Advanced Configuration</title>

<para>
(... to be written ...)
</para>

<sect2 id="setup-plugins">
<title>Plugin Tools</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- setup-plugins -->

<sect2 id="setup-abbrev">
<title>Abbreviations for the Word Completion</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- setup-abbrev -->

<sect2 id="setup-menu-standard">
<title>Adding &kde; Standard Applications to the Tools Menu</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- setup-menu-standard -->


<sect2 id="setup-menu-external">
<title>Adding External Applications to Menus</title>

<para>
(... to be written ...)
</para>

<sect3 id="setup-menu-external-tools">
<title>Adding to the Tools Menu</title>

<para>
(... to be written ...)
</para>
</sect3> <!-- setup-menu-external-tools -->

<sect3 id="setup-menu-external-filecontext">
<title>Adding to the File Context Menu</title>

<para>
(... to be written ...)
</para>
</sect3> <!-- setup-menu-external-filecontext -->

<sect3 id="setup-menu-external-dircontext">
<title>Adding to the Directory Context Menu</title>

<para>
(... to be written ...)
</para>
</sect3> <!-- setup-menu-external-dircontext -->

</sect2> <!-- setup-menu-external -->

</sect1> <!-- setup-advanced -->

</chapter> <!-- setup -->

<!-- ====================================================================== -->

<chapter id="appwizard">
<title>Getting Started&mdash;the &appwizard;</title>

<indexterm zone="appwizard">
  <primary>&appwizard;</primary></indexterm>

<para>
In &kdevelop; software development work is organized in <emphasis>projects</emphasis>. Such a project keeps everything together which belongs to a complete programming task: source files, additional data files, any actually needed management facilities as the make system as well as access to all components and any additional tools needed to get the application up and running.
</para>
<para>
Organizing all development work in projects allows you to easily switch between the global tasks at hand. This is quite handy if you e.g. work on several applications at the same time as is often the case. Tell &kdevelop; to open the project you want to work at and you may proceed in the environment just where you left.
</para>

<sect1 id="new-projects">
<title>New Projects</title>

<indexterm zone="new-projects">
  <primary>project</primary>
  <secondary>new</secondary></indexterm>

<para>
Whenever you want to initiate a new programming project quite a lot of formal setup procedures need to be done. An initial directory structure has to be set up, initial header and source files must be provided, the make system has to be initialized, etc.
</para>
<para>
&kdevelop; provides an easy way to initiate a new programming project&mdash;the <emphasis>&appwizard;</emphasis>. You will find the &appwizard; at menu entry <menuchoice><guimenu>Project</guimenu> <guimenuitem>New Project</guimenuitem></menuchoice>.
</para>
<para>
Only a short series of steps is necessary to start a new programming project, using the &appwizard;:
</para>
<orderedlist>
  <listitem><para>
  <link linkend="new-projects-start-type">Select the programming language</link> you want to use and the type of the application you want to build from a set of predefined templates.
  </para></listitem>
  <listitem><para>
  <link linkend="new-projects-start-general">Supply some general information</link> as application name, directory where the application shall be built, etc.
  </para></listitem>
  <listitem><para>
  Decide whether you want to use a <link linkend="new-projects-start-cvs">version control system</link>, like e.g. CVS, and supply the necessary data if needed.
  </para></listitem>
  <listitem><para>
  Set up some templates for <link linkend="new-projects-start-templates">initial header and source files</link> (if applicable).
  </para></listitem>
  <listitem><para>
  Finally tell &appwizard; to <link linkend="new-projects-start-build">set up all initial stuff</link>, directory structure, starting header/source file templates, and management tools, like e.g. an initial make skeleton, etc.
  </para></listitem>
</orderedlist>
<para>
Voil&agrave;&mdash;that's all. &appwizard; will have provided you with a primary functional set of programming files, where you can readily start working.
</para>
<para>
Let's look at all this in more detail now ...
</para>

<sect2 id="new-projects-start">
<title>Initial Steps</title>

<indexterm zone="new-projects-start">
  <primary>dialog</primary>
  <secondary>create new project</secondary></indexterm>
<indexterm zone="new-projects-start">
  <primary>project</primary>
  <secondary>create new project</secondary>
  <tertiary>dialog</tertiary></indexterm>
<indexterm zone="new-projects-start">
  <primary>project</primary>
  <secondary>templates</secondary></indexterm>
<indexterm zone="new-projects-start">
  <primary>templates</primary>
  <secondary>project</secondary></indexterm>

<para>
To create a new project in &kdevelop;, select <guimenuitem>New Project</guimenuitem> from the <guimenu>Project</guimenu> menu.  The <guilabel>Create New Project</guilabel> dialog will pop up showing an initial <guilabel>General</guilabel> page:
</para>

<screenshot id="screenshot-newprojectwizard">
  <mediaobject>
    <imageobject>
      <imagedata fileref="createnewproject.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Initial dialog to set up a new project
    </para></caption>
  </mediaobject>
</screenshot>

<para>
As you see, this dialog is divided into an upper and a lower part. In the upper part you can decide on the programming language and application type, the lower part holds some general information.
</para>

<sect3 id="new-projects-start-type">
<title>Select Programming Language and Application Type</title>

<indexterm zone="new-projects-start-type">
  <primary>project</primary>
  <secondary>application type</secondary></indexterm>
<indexterm zone="new-projects-start-type">
  <primary>project</primary>
  <secondary>programming language</secondary></indexterm>
<indexterm zone="new-projects-start-type">
  <primary>project</primary>
  <secondary>language</secondary></indexterm>
<indexterm zone="new-projects-start-type">
  <primary>language</primary></indexterm>
<indexterm zone="new-projects-start-type">
  <primary>programming language</primary></indexterm>
<indexterm zone="new-projects-start-type">
  <primary>application</primary>
  <secondary>type</secondary></indexterm>

<para>
The left hand side of the upper part in this dialog is where you do the selection work. When it shows up, you'll find there a list of folders each labeled with a programming language, as there are:
</para>

<itemizedlist>
  <listitem><para>
    Ada
    <indexterm>
      <primary>Ada</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
  <listitem><para>
    C
    <indexterm>
      <primary>C</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
  <listitem><para>
    C++
    <indexterm>
      <primary>C++</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
  <listitem><para>
    Database (SQL Projects)
    <indexterm>
      <primary>SQL</primary>
      <secondary>new project</secondary></indexterm>
    <indexterm>
      <primary>Database</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
  <listitem><para>
    Fortran
    <indexterm>
      <primary>Fortran</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
  <listitem><para>
    Haskell
    <indexterm>
      <primary>Haskell</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
  <listitem><para>
    Java
    <indexterm>
      <primary>Java</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
  <listitem><para>
    PHP
    <indexterm>
      <primary>PHP</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
  <listitem><para>
    Pascal
    <indexterm>
      <primary>Pascal</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
  <listitem><para>
    Perl
    <indexterm>
      <primary>Perl</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
  <listitem><para>
    Python
    <indexterm>
      <primary>Python</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
  <listitem><para>
    Ruby
    <indexterm>
      <primary>Ruby</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
  <listitem><para>
    Shell (Scripts for the Bash Shell)
    <indexterm>
      <primary>Bash</primary>
      <secondary>new project</secondary></indexterm>
    <indexterm>
      <primary>shell</primary>
      <secondary>new project</secondary></indexterm>
  </para></listitem>
</itemizedlist>

<para>
To be precise, these folders do not contain real programming tools actually. They do lead to pre-defined <emphasis>templates</emphasis> you can use as a starting point for development in that language. To get an idea of what is provided, just open the folders one after the other. There will be a series of subfolders on some, one or more simple entries only on others. The subfolders you see organize the available templates according to some tasks, the simple entries name the templates you may select.
</para>
<para>
We cannot go into detail here on which tasks each template provides, but it's easy to find out. Whenever you select a template entry some information is displayed in the fields to the right. In the lower field you will find a <emphasis>short description</emphasis> on what the template is supposed to do. In the field above that a picture will be shown, if available, about the outcome of the application this template produces if you compile and run it unmodified. Usually this is a <emphasis>screenshot</emphasis> of the main window the application will display.
</para>
<para>
Select the template which best fits your application's goals as a starting point. Then enter the general properties information in the lower field as shown in the next chapter.
</para>

<formalpara>
<title>Selecting a Project Management System</title>
<para>
Each template is bound to a specific <link linkend="makesystems">Project Management System</link>. Currently there is no direct means to freely select such a Project Management System. You have to find a template which suits your needs or alter your project accordingly after creation.
</para>
</formalpara>

</sect3> <!-- new-projects-start-type -->

<sect3 id="new-projects-start-general">
<title>Provide General Information</title>

<indexterm zone="new-projects-start-general">
  <primary>project</primary>
  <secondary>properties</secondary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>properties</primary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>application</primary>
  <secondary>name</secondary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>name</primary>
  <secondary>application</secondary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>project</primary>
  <secondary>directory</secondary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>directory</primary>
  <secondary>project</secondary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>path</primary>
  <secondary>new project</secondary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>project</primary>
  <secondary>author</secondary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>project</primary>
  <secondary>email</secondary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>author</primary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>email</primary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>project</primary>
  <secondary>main.cpp</secondary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>main.cpp</primary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>project</primary>
  <secondary>license</secondary></indexterm>
<indexterm zone="new-projects-start-general">
  <primary>license</primary></indexterm>

<para>
The lower part of the <guilabel>Create New Project</guilabel> dialog <guilabel>General</guilabel> page is a framed field labeled <guilabel>Properties</guilabel>. You must provide some general information about your project here so that the &appwizard; knows how to build the initial structure.
</para>
<formalpara>
<title>Application Name</title>
<para>
Your application needs a name of course. Enter this in the uppermost <guilabel>Properties</guilabel> field, called <guilabel>Application Name</guilabel>. We use <quote>MyApp</quote> as an example.
</para>
</formalpara>
<para>
When you do so, you will notice that the &appwizard; refuses to accept special characters of any kind. The only characters accepted are:
<itemizedlist>
  <listitem><para>upper and lower case characters</para></listitem>
  <listitem><para>numbers</para></listitem>
  <listitem><para>the underline character</para></listitem>
</itemizedlist>
</para>
<para>
One prominent cause of this restriction is that the &appwizard; will use this application name as the <emphasis>basis of some class names</emphasis> it will construct when it sets up an initial project. Thus the name of the application must stick to the rules of the programming language you use.
</para>
<formalpara>
<title>The Project Directory</title>
<para>
The other prominent cause of this restriction you can see at the bottom line of the <guilabel>Properties</guilabel> area. It is labeled <guilabel>Final location</guilabel> and shows the directory where the &appwizard;  will create the application.
</para>
</formalpara>
<para>
As you type the application name you will notice that the &appwizard; repeats your input at the end of the <guilabel>Final location</guilabel> line, using lower case only characters.
</para>
<para>
Thus you must select the name of your new application with care.  If you end up with an already used directory the &appwizard; will not allow you to continue to the next step, keeping the <guibutton>Next &gt;</guibutton> button deactivated (grayed). Yet, it will <emphasis>warn</emphasis> you in this case by appending <quote>(dir/file already exist)</quote> to the <guilabel>Final location</guilabel> line.
</para>

<formalpara>
<title>The Starting Path</title>
<para>
There are two ways to select another path for your new application. One is to select another name. Yet, this is not always feasible (you might e.g. set up for another version of an already existing application). As an alternative you may select another path to the application directory.
</para>
</formalpara>
<para>
This is done in the second row input field of the <guilabel>Properties</guilabel>, named <guilabel>Location</guilabel>. What you enter here is the <emphasis>starting path</emphasis> of the new application development directory. The &appwizard; appends the application name to this path when it initializes the new project. The result is shown in the <guilabel>Final location</guilabel> line to give you better control on what is going on.
</para>
<para>
&appwizard; will copy an <emphasis>initial value</emphasis> to the <guilabel>Location</guilabel> field on start-up. This is taken from what you have chosen in the <guilabel>Default projects directory</guilabel> field during the <link linkend="setup-general">general configuration steps</link>. In our case we have &kdevelop; set up to use <filename class="directory">/home/devel/projects/</filename> as initial path for new projects.
</para>
<para>
Alter the <guilabel>Location</guilabel> field contents so that the application development directory shown in the <guilabel>Final location</guilabel> line will be unique.
</para>

<note><para>
Take care that the path you enter in the <guilabel>Location</guilabel> field already exists. Otherwise you will not be able to continue to the next step. The &appwizard; will <emphasis>warn</emphasis> you about non-existing paths by appending <quote>(invalid)</quote> to the <guilabel>Final location</guilabel> line.
</para></note>

<formalpara>
<title>Personal Information</title>
<para>
The fields following this are not so critical. Just supply your name (i.e. the name of the person who is responsible for the application) in the <guilabel>Author</guilabel> field, and a valid e-mail address in the <guilabel>Email</guilabel> field, so that users can give you feedback on the application.
</para>
</formalpara>

<note>
<orderedlist>
  <listitem><para>
  The &appwizard; fills these fields with some default values, taken from the Email presets in the KDE control center. If these defaults in the <guilabel>Create New Project</guilabel> <guilabel>Author</guilabel> and <guilabel>Email</guilabel> fields do not suit, you may want to have a look at your mail configuration in the KDE control center.
  </para></listitem>
  <listitem><para>
  The &appwizard; will integrate this information into the starting program templates if applicable. In KDE C++ programs for instance you will find it near the beginning of the <filename>main.cpp</filename> source file.
  </para></listitem>
  <listitem><para>
  Of all fields, the <guilabel>Email</guilabel> is <emphasis>optional</emphasis>, reflecting the fact that not every developer may have access to the internet. You may keep this field empty if you wish and proceed nevertheless.
  </para></listitem>
</orderedlist>
</note>

<formalpara>
<title>Version and License Info</title>
<para>
Finally enter a starting version number for your new application in the <guilabel>Version</guilabel> field, and select the license under which you want your application be put from the <guilabel>License</guilabel> tab.
</para>
</formalpara>

<para>
If you select an application type for which the &appwizard; provides common source template texts (e.g. C/C++), you may view the license notification text on the third page of this <guilabel>Create New Project</guilabel> dialog (see the <link linkend="new-projects-start-templates">Supply header/source templates</link> chapter below).
</para>
<para>
If you selected <quote>Custom</quote> from the <guilabel>License</guilabel> tab you must provide a license text on your own.
</para>

<note><para>
Both version and license information will as well be integrated into the starting templates in a suiting format the application type you selected does provide.
</para></note>

<para>
Once you have correctly entered all this information stuff, press the <guibutton>Next &gt;</guibutton> button to proceed as shown in the following chapters.
</para>
</sect3> <!-- new-projects-start-general -->

</sect2> <!-- new-projects-start -->

<sect2 id="new-projects-start-cvs">
<title>Supply Version System Information</title>

<indexterm zone="new-projects-start-cvs">
  <primary>CVS</primary>
  <secondary>new project</secondary></indexterm>
<indexterm zone="new-projects-start-cvs">
  <primary>project</primary>
  <secondary>CVS</secondary></indexterm>
<indexterm zone="new-projects-start-cvs">
  <primary>database</primary>
  <secondary>CVS</secondary></indexterm>
<indexterm zone="new-projects-start-cvs">
  <primary>version</primary>
  <secondary>database</secondary></indexterm>
<indexterm zone="new-projects-start-cvs">
  <primary>version</primary>
  <secondary>CVS</secondary></indexterm>

<para>
In a second step the &appwizard; will lead you to the <guilabel>Version Control System</guilabel> page where you can decide which version control system you want to use.
</para>

<note><para>
This discussion concentrates on the needs for project creation only. For more information on CVS see the <link linkend="cvs">Using CVS</link> chapter below.
</para></note>

<formalpara>
<title>No Version Control System Wanted</title>
<para>
Initially there is <quote>None</quote> selected in the <guilabel>Version control system</guilabel> tab, and the page will be empty otherwise. If you don't want to use a version control system, just click the <guibutton>Next ></guibutton> button and go on.
</para>
</formalpara>

<formalpara>
<title>Using CVS</title>
<para>
Otherwise you must reselect the version control system you want to use from the <guilabel>Version control system</guilabel> tab. We use <quote>&cvs;</quote> for our example. If you select this, the &appwizard; will redisplay the page, now showing a series of fields you must fill in.
</para>
</formalpara>

<screenshot id="screenshot-newproject-cvs">
  <mediaobject>
    <imageobject>
      <imagedata fileref="create-new-project-cvs.png" format="PNG"/>
    </imageobject>
    <caption><para>
    Set new project up for CVS
    </para></caption>
  </mediaobject>
</screenshot>

<para>
A version control system such as &CVS; (which means <quote>Concurrent Versions System</quote>) stores copies of selected project files in some sort of a database. If you use &CVS; you can amongst others upload (<quote>commit</quote>) those files or load them back into your project directory (<quote>checkout</quote>, or <quote>update</quote>). The special thing about this is that the files in the versioning database are stored in a structured way which allows you to always revert to an earlier development state if you need so. And &CVS; allows multiple designers to fairly easily collaborate on a big project (such as &kdevelop;) without disturbing each others work.
</para>

<indexterm zone="new-projects-start-cvs-root">
  <primary>CVS</primary>
  <secondary>root</secondary></indexterm>
<indexterm zone="new-projects-start-cvs-root">
  <primary>root</primary>
  <secondary>CVS</secondary></indexterm>
<indexterm zone="new-projects-start-cvs-root">
  <primary>CVS</primary>
  <secondary>local</secondary></indexterm>
<indexterm zone="new-projects-start-cvs-root">
  <primary>CVS</primary>
  <secondary>remote</secondary></indexterm>
<indexterm zone="new-projects-start-cvs-root">
  <primary>local CVS</primary></indexterm>
<indexterm zone="new-projects-start-cvs-root">
  <primary>:local:</primary></indexterm>
<indexterm zone="new-projects-start-cvs-root">
  <primary>CVS</primary>
  <secondary>:local:</secondary></indexterm>

<formalpara id="new-projects-start-cvs-root">
<title>CVS Root</title>
<para>
&cvs; needs to <emphasis>manage</emphasis> the versioning database it keeps from your project files. To accomplish this it keeps some special database information in an own directory, called the <emphasis>&cvs; root</emphasis>. The first step on setting up &cvs; for your new project thus is to tell &kdevelop; where this root is located.
</para>
</formalpara>

<para>
<emphasis>Local &cvs; root.</emphasis> There are two basic possibilities. Either you want to use a <emphasis>local</emphasis> CVS database or you use a database which is held on a <emphasis>remote server</emphasis>. If you develop for your own, you may want use the &cvs; database as some sort of a backup system on your own computer. Usually this is set up in your home directory root and given the name <filename>cvsroot</filename>. This may look as follows:
</para>
<para><userinput><filename class="directory">/home/devel/cvsroot</filename></userinput> (where <filename>devel</filename> simply denotes the <quote>developing</quote> user, just for example)
</para>

<note><para>
In fact, this is a short form. Exactly, the local &cvs; root should be addressed using the <computeroutput>:local:</computeroutput> prefix. The short form is only allowed in cases where the filename starts with a slash (<computeroutput>/</computeroutput>). The full name for our example local &cvs; root would exactly look like: <filename class="directory">:local:/home/devel/cvsroot</filename>
</para></note>

<para>
Enter the name of the &cvs; root directory your system has been set up for in the <guilabel>CVS root</guilabel> field. In principle you can select any name, even use multiple &cvs; databases, but it is advisable that you stick to the &cvs; root once set up.
</para>
<para>
<emphasis>Initialize a new &cvs; root.</emphasis> If there does not exist a &cvs; root yet, &kdevelop; can command the &CVS; system to create one for you in the given directory. Just check the <guilabel>Init root</guilabel> checkbox below the <guilabel>CVS root</guilabel> field.
</para>
<note><para>
As said, &kdevelop; only <emphasis>commands</emphasis> the &CVS; system to initialize a new &cvs; root. It does nothing by itself to this directory. Fortunately &cvs; is clever enough to check whether the &cvs; root directory already exists. Hence it does no harm if you should have inadvertently checked <guilabel>Init root</guilabel> on an already existing &cvs; root directory.
</para></note>

<para>
<emphasis>Remote &cvs; root.</emphasis> There are occasions where the &cvs; database is to be kept on a remote server, especially when several developers work at the same project. Then you must enter the &cvs; root URL of this server in the <guilabel>CVS root</guilabel> field. For example, if you want access to the &kde; &cvs; server:
</para>
<para>
<userinput><filename class="directory">:pserver:mylogin@cvs.kde.org:/home/kde</filename></userinput> (where <filename>mylogin</filename> denotes the login name set up in your &kde; &cvs; account)
</para>

<indexterm zone="new-projects-start-cvs-remote">
  <primary>remote CVS</primary></indexterm>
<indexterm zone="new-projects-start-cvs-remote">
  <primary>:pserver:</primary></indexterm>
<indexterm zone="new-projects-start-cvs-remote">
  <primary>:ext:</primary></indexterm>
<indexterm zone="new-projects-start-cvs-remote">
  <primary>CVS</primary>
  <secondary>:local:</secondary></indexterm>
<indexterm zone="new-projects-start-cvs-remote">
  <primary>CVS</primary>
  <secondary>:pserver:</secondary></indexterm>
<indexterm zone="new-projects-start-cvs-remote">
  <primary>CVS</primary>
  <secondary>:ext:</secondary></indexterm>

<formalpara id="new-projects-start-cvs-remote">
<title>Remote &cvs; Server Types</title>
<para>
Basically there are two widely used remote &cvs; server types, the <emphasis>pserver</emphasis> which uses a password-secured non-encrypted protocol, and the <emphasis>ext</emphasis> server which uses an rsh or ssh encrypted data transfer. They are distinguished by the URL prefix they use:
</para>
</formalpara>
<para>
<filename>:pserver:</filename>
</para>
<para>
for the <quote>password protected server</quote> non-encrypted type, and
</para>
<para>
<filename>:ext:</filename>
</para>
<para>
for an rsh or ssh encrypted server type. For example
</para>
<para>
<userinput><filename class="directory">:ext:mylogin@cvs.cervisia.sourceforge.net:/cvsroot/cervisia</filename></userinput>
</para>
<para>
accesses the &cvs; root of the widely used <application>Cervisia</application> &cvs; management tool on the SourceForge server.
</para>
<para>
If you want to use an rsh or ssh encrypted server for &cvs; access you must tell &kdevelop; the encryption protocol to be used. Just enter <userinput>rsh</userinput> or <userinput>ssh</userinput> in the <guilabel>CVS_RSH</guilabel> field of the <guilabel>Create New Project</guilabel> <guilabel>Version Control System</guilabel> page.
</para>

<note><para>
There is a caveat if you use an encrypted server for &cvs; from within &kdevelop;. See the <link linkend="cvs">Using CVS</link> chapter for details.
</para></note>

<indexterm zone="new-projects-start-cvs-repository">
  <primary>CVS</primary>
  <secondary>repository</secondary></indexterm>
<indexterm zone="new-projects-start-cvs-repository">
  <primary>repository</primary>
  <secondary>CVS</secondary></indexterm>

<formalpara id="new-projects-start-cvs-repository">
<title>The &cvs; Repository</title>
<para>
So far you have told &kdevelop; where the &cvs; root resides which manages the versioning database and how to access it. Now you need to tell &kdevelop; under which name you want &CVS; save your project files in that database. Such a place your project files will be held in &cvs; is called a <emphasis>repository</emphasis>.
</para>
</formalpara>
<para>
In principle you can use any name for the &cvs; repository of your project files as long as it adheres to the specifications of naming a file. Yet, most developers simply use the name of the application itself. &CVS; will build a directory with this name in the &cvs; root, hence it is more easily found if you keep the application name for it.
</para>
<para>
Just enter the repository name you want to use in the <guilabel>CVS repository</guilabel> field of the <guilabel>Create New Project</guilabel> <guilabel>Version Control System</guilabel> page. In our example this is: <userinput>MyApp</userinput>
</para>

<warning><para>
<emphasis>Take care not to use a repository which already exists!</emphasis> The &CVS; system does not warn about duplicate files but will shovel everything in which does not produce a formal conflict. You will mess up everything!
</para></warning>

<formalpara>
<title>The Remaining Fields</title>
<para>
There is not much work left to do. &appwizard; has already set up the remaining fields for you. In detail:
</para>
</formalpara>
<para>
The <guilabel>Vendor</guilabel> field is used for compatibility reasons only. You can stick to the <quote>vendor</quote> default the &appwizard; puts in here.
</para>
<para>
The <guilabel>Message</guilabel> field allows you to comment the initial &cvs; contents. Use any text you like or just stick to the <quote>new project</quote> default the &appwizard; did put in.
</para>
<para>
The <guilabel>Release tag</guilabel> holds the name which tags the initial state of your project. Such a <emphasis>tag</emphasis> names a certain point within the &CVS; repository by which you can later access this state of your development. (See more in  the <link linkend="cvs">Using CVS</link> chapter.)
</para>
<para>
The &appwizard; has put a default <quote>start</quote> tag in here which is a worthy proposal. Just stick to it.
</para>

<note>
<para>
When any information of all these is wrong &kdevelop; usually will not know about until project construction time. It is the &CVS; system which will figure out those errors when it tries to build the repository. Hence you must keep an eye to the <guilabel>Messages</guilabel> window of &kdevelop; when the project is created in the final setup step. If anything was in error with &CVS; you will in most cases see an error message like this:
</para>

<screen><computeroutput><literal>
* cd '/home/devel/test' &amp;&amp; cvs -d '/home/devel/mycvsroot' \
  import -m 'new project' '' 'vendor' 'start' &amp;&amp;\
  sh /opt/kde3/share/apps/kdevcvs/buildcvs.sh . '' \
  '/home/devel/mycvsroot'
* cvs [import aborted]: /home/devel/mycvsroot/CVSROOT: No such file or
  directory
* *** Exited with status: 1 ***
</literal></computeroutput></screen>

<para>
If this happens you will have to either manually set up &cvs; (&kdevelop; should have successfully initialized your project files at this time) or delete the project directory and start over again with <guimenuitem>New Project</guimenuitem> from the <guimenu>Project</guimenu> menu.
</para>
</note>

<para>
After you have entered all &CVS; related information, click the <guibutton>Next &gt;</guibutton> to go on.
</para>

<note><para>
If you want to correct an error on the previous <guilabel>Create New Project</guilabel> page, just press the <guibutton>&lt; Back</guibutton> button. The &appwizard; will remember your settings on the current page, so you can easily proceed when you come back.
</para></note>

</sect2> <!-- new-projects-start-cvs -->

<sect2 id="new-projects-start-templates">
<title>Supply Header/Source Templates</title>

<para>
The next step brings you to a series of pages where you can set up common information you want to include in your source and header files, if the task at hand allows.
</para>
<para>
Both header and source templates are provided for C and C++ applications, each on its own page. For other languages there may be source templates only. And in some cases you will even find this template page empty.
</para>
<para>
If the page is used, &appwizard; will fill in some common header comment which for a C++ based application might look like:
</para>

<screen><computeroutput><literal>
/***************************************************************************
 *   Copyright (C) 2003 by Your Name                                       *
 *   you@you.com                                                           *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
</literal></computeroutput></screen>

<para>
Other templates will provide similar information in a format according to the definitions of the programming language you want to use.
</para>
<para>
As you might have noticed, the applications manager did readily fill in some information you provided on the first <guilabel>General</guilabel> page of the <guilabel>Create New Project</guilabel> dialog, namely the contents of the <guilabel>Author</guilabel> and <guilabel>Email</guilabel> fields. Also proper license information will have been inserted according to your selection in the <guilabel>License</guilabel> tab.
</para>

<sect3 id="new-projects-start-templates-edit">
<title>How to Edit the Templates</title>

<indexterm zone="new-projects-start-templates-edit">
  <primary>templates</primary>
  <secondary>project</secondary>
  <tertiary>edit</tertiary></indexterm>
<indexterm zone="new-projects-start-templates-edit">
  <primary>project</primary>
  <secondary>templates</secondary>
  <tertiary>edit</tertiary></indexterm>

<para>
The templates you set up in the <guilabel>Create New Project</guilabel> dialog will later be processed whenever you command &kdevelop; to set up a new source and/or header file. The information you provided here will be included at top as a documentation header, before the code parts begin.
</para>
<para>
You are not restricted to plain text however. &kdevelop; knows of several variables which allow you to include actual information in the file. The &appwizard; did in fact use some such variables to insert the <guilabel>Author</guilabel>, <guilabel>Email</guilabel>, and <guilabel>License</guilabel> informations into the initial template text.
</para>

<formalpara>
<title>Include &doxygen; File Information</title>
<para>
If, for example, you want the &doxygen;-built API documentation to display some further information about the file's contents in its filenames list, you may include the following lines in the source file template:
</para>
</formalpara><screen><computeroutput><literal>
/**
 * \file $MODULE$.cpp
 * \brief (put some short descripion here).
 **/
</literal></computeroutput></screen>
<para>
Whenever you create a new source file, &kdevelop; will replace the <computeroutput>$MODULE$</computeroutput> variable by the name body of the newly created file. For example, if you created a new C++ class named <classname>ASimpleTest</classname> you will see the following lines in the <filename>asimpletest.cpp</filename> file:
</para>
<screen><computeroutput><literal>
/**
 * \file asimpletest.cpp
 * \brief (put some short descripion here).
 **/
</literal></computeroutput></screen>
<para>
You will still have to provide the short description after the <quote>\brief</quote> keyword, but part of the job is automatically done for you.
</para>
<formalpara>
<title>The License Text File</title>
<para>
As another example you could include an explicit hint to the license text you want to use into the template. Use the <computeroutput>$LICENSEFILE$</computeroutput> variable for this and add for example this line:
</para>
</formalpara>
<screen><computeroutput><literal>
//   See $LICENSEFILE$ for the full license text.
</literal></computeroutput></screen>
<para>
The &appwizard; will replace the <computeroutput>$LICENSEFILE$</computeroutput> with the name of the file where the full license text is to be found, namely:
</para>
<screen><computeroutput><literal>
//   See COPYING for the full license text.
</literal></computeroutput></screen>
<para>
for the GPL license, or
</para>
<screen><computeroutput><literal>
//   See LICENSE.BSD for the full license text.
</literal></computeroutput></screen>
<para>
if you decided to put your application under the BSD license.
</para>
<para>
Thee are of course more variables &kdevelop; knows of. See the <link linkend="newfiles-edittemplates">Editing the templates</link> section in the <link linkend="editing">Editing tools</link> chapter for what is possible.
</para>

<note><para>
The templates you define here will come in effect only after the &appwizard; has created the new project. You will find this information on top of the files you created yourself in the development process. When creating the initial files the &appwizard; will use some predefined standard templates. You will have to manually adapt those initial files to your needs.
</para></note>

</sect3> <!-- new-projects-start-templates-edit -->
</sect2> <!-- new-projects-start-templates -->

<sect2 id="new-projects-start-build">
<title>Build the Initial Project Files</title>

<indexterm zone="new-projects-start-build">
  <primary>project</primary>
  <secondary>new</secondary>
  <tertiary>build</tertiary></indexterm>
<indexterm zone="new-projects-start-build">
  <primary>project</primary>
  <secondary>initial build</secondary></indexterm>

<para>
Almost everything is done now. On the last templates page the <guibutton>Next &gt;</guibutton> button will have changed to read <guibutton>Finish</guibutton> now.
</para>
<para>
<emphasis>Think twice before you click on it!</emphasis> You still have the option to revise everything by repeatedly using the <guibutton>&lt; Back</guibutton> button. As the &appwizard; remembers all information you did input so far, it may be advisable for you to take the time and look back once again. In case you use local CVS, do not forget to double-check the <emphasis>CVS repository</emphasis> name (there should be no subdirectory with that name in the CVS root directory already&mdash;if it does, try another repository name).
</para>
<para>
If ever you don't want the new project be built, abort the <guilabel>Create New Project</guilabel> dialog by the <guibutton>Cancel</guibutton> button. Otherwise click <guibutton>Finish</guibutton> and watch in the <guilabel>Messages</guilabel> window how the &appwizard; initiates the project.
</para>
<para>
If you want to use a versioning system (&CVS;) there will be two runs actually. &appwizard; will first build the project directories and files and then call up the &CVS; program which restarts the <guilabel>Messages</guilabel> window with its own contents. If any error occurs in either of these runs, the process will stop showing you an according error message in the window.
</para>

<para>
Do not forget to initially check what the &appwizard; has provided. For example you may want to change the initial heading informations according to your own templates. Usually you will find these in a <filename class="directory">templates</filename> subdirectory in your project directory. Some simple copy operations will mostly suffice.
</para>
<para>
Then it is adviceable that you <emphasis>compile the initial project</emphasis> before you attempt to change any code. In most cases this initial compilation should be possible. Thus you can make up whether the project really was set up according to your needs. If it was not, simply remove the project directory (in your local &CVS; root as well if you use one) and start over again.
</para>

<warning id="defaultbuild-warning"> <!-- ### remove this when "default" works again -->

  <indexterm zone="defaultbuild-warning">
    <primary>default build configuration</primary>
    <secondary>warning</secondary></indexterm>
  <indexterm zone="defaultbuild-warning">
    <primary>build configurations</primary>
    <secondary>default build warning</secondary></indexterm>
  <indexterm zone="defaultbuild-warning">
    <primary>warning</primary>
    <secondary>default build configuration</secondary></indexterm>

  <para>
  Before you compile your new project the first time, have a look at <menuchoice><guimenu>Project</guimenu> <guimenuitem>Build Configuration</guimenuitem></menuchoice>. If there are three selections displayed: <guimenuitem>default</guimenuitem>, <guimenuitem>optimized</guimenuitem>, and <guimenuitem>debug</guimenuitem>, with <guimenuitem>debug</guimenuitem> selected, by all means stick to this, or use <guimenuitem>optimized</guimenuitem> instead.
  </para>
  <para>
  Due to some limitations in the current autoconf/automake setup you should <emphasis>by no means</emphasis> build in the <guimenuitem>default</guimenuitem> configuration. This will corrupt some internal directory settings, thus making <command>configure</command> complain when you try to use it in the <guimenuitem>optimized</guimenuitem>, or <guimenuitem>debug</guimenuitem> build configuration afterwards.
  </para>
  <para>
  (This applies to these multiselection capabilities only. If the application type you selected provides a <guimenuitem>default</guimenuitem> build configuration only, you should of course use this one.)
  </para>
</warning>

</sect2> <!-- new-projects-start-build -->

</sect1> <!-- new-projects -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="appwizard-behind">
<title>Behind the Scenes</title>

<indexterm zone="appwizard-behind">
  <primary>project</primary>
  <secondary>new</secondary>
  <tertiary>build</tertiary></indexterm>
<indexterm zone="appwizard-behind">
  <primary>CVS</primary>
  <secondary>new project</secondary>
  <tertiary>build</tertiary></indexterm>

<para>
It is always advisable to look at the messages output and try to understand what had happened. At least in principle you should know what was be done when the &appwizard; initiated your new project. We cannot go into the details but will have a survey of those messages to get an idea of what was going on behind the scenes.
</para>

<tip>
<para>
If your project was set up for local &CVS; you will have got two series of messages of which the first set most probably was gone before you could thoroughly read, as &CVS; used the <guilabel>Messages</guilabel> window for its own purposes. So we caught both series in separate runs&mdash;set up the application twice, one time without &CVS;, then removed the directory and started over, this time setting the application up with &CVS;.
</para>
<para>
You may want to follow this same procedure if anything weird happened and you just could not catch the messages of the first setup step.
</para>
</tip>
<para>
We will have look at the <guilabel>Messages</guilabel> outputs of both steps:
<itemizedlist>
  <listitem><para>
    <link linkend="appwizard-behind-app">Setting up the application</link> as well as
  </para></listitem>
  <listitem><para>
    <link linkend="appwizard-behind-cvs">Setting up &CVS;</link>.
  </para></listitem>
</itemizedlist>
</para>

<sect2 id="appwizard-behind-app">
<title>Setting Up the Application</title>

<indexterm zone="appwizard-behind-app">
  <primary>Perl</primary>
  <secondary>new project</secondary></indexterm>
<indexterm zone="appwizard-behind-app">
  <primary>Perl</primary>
  <secondary>kdevelop.pm</secondary></indexterm>
<indexterm zone="appwizard-behind-app">
  <primary>kdevelop.pm</primary></indexterm>
<indexterm zone="appwizard-behind-app">
  <primary>project</primary>
  <secondary>kdevelop.pm</secondary></indexterm>

<para>
If you set up <quote>MyApp</quote> as in our previous example the &appwizard; should have printed the following messages (we re-arranged the output a bit for readability and you may click on a line to directly jump to its description):
</para>
<screen><computeroutput>
* <link linkend="appwizard-behind-app-perl">perl</link> /opt/kde3/share/apps/kdevappwizard/template-kapp/script \
  --author='Your Name' \
  --email='you@you.com' \
  --version='0.1' \
  --appname='MyApp' \
  --dest='/home/devel/projects/myapp' \
  --source='/opt/kde3/share/apps/kdevappwizard' \
  --license='GPL' \
  --licensefile='COPYING' \
  --filetemplates='h,/tmp/kde-devel/kdevelopcDE5Ja.tmp,\
                   cpp,/tmp/kde-devel/kdevelopsRrLab.tmp'
* <link linkend="appwizard-behind-app-base">Making destination directory</link>
* <link linkend="appwizard-behind-app-templates">Installing file templates</link>
* <link linkend="appwizard-behind-app-license">Installing license file</link>
* <link linkend="appwizard-behind-app-admin">Installing admin directory</link>
* <link linkend="appwizard-behind-app-gnu">Installing GNU coding standard files</link>
* <link linkend="appwizard-behind-app-doc">Installing Docbook template</link>
* <link linkend="appwizard-behind-app-project">Installing project file</link>
* <link linkend="appwizard-behind-app-framework">Installing application framework</link>
* <link linkend="appwizard-behind-app-sources">Installing application sources</link>
* Finished
* *** Success ***
</computeroutput></screen>
<formalpara id="appwizard-behind-app-perl">
<title>A &perl; Script Called</title>
<para>
As you see from the first line, the &appwizard; did construct a &perl; program call from the settings you made in the <guilabel>Create New Project</guilabel> dialog. The called <filename>script</filename> resides in a directory which was determined from the application type template you selected in the upper part of the <guilabel>Create New Project</guilabel> dialog <guilabel>General</guilabel> page.
</para>
</formalpara>
<para>
In our case this <filename>script</filename> is located in the <filename class="directory">/opt/kde3/share/apps/kdevappwizard/template-kapp/</filename> directory. Just replace <filename class="directory">/opt/kde3/</filename> by the &kde; directory on your system.
</para>
<para>
This &perl; <filename>script</filename> is called with a series of parameters, all marked by <quote><computeroutput>--</computeroutput></quote> prefixes, wherein the &appwizard; put information from the other selections you made in the <guilabel>Create New Project</guilabel> dialog.
</para>
<para>
The exact series of initialization steps depends on which &perl; <filename>script</filename> was called. If you want to check, just look into the <filename>script</filename> file the <computeroutput>perl</computeroutput> command on the first <guilabel>Messages</guilabel> window line did call.
</para>
<note><para>
The setup scripts make use of a set of &perl; subroutines collected in the <filename>kdevelop.pm</filename> file which you may find in the <filename class="directory">share/apps/kdevwizard/template-common/</filename> subdirectory of your &kde; installation.
</para></note>

<formalpara id="appwizard-behind-app-base">
<title>The Application Base Directory</title>
<para>
When the &perl; script is run, you get a series of messages of what is <emphasis>about to be done</emphasis> in the next installation step. At first a <computeroutput>destination directory</computeroutput> will be set up. This is the base directory of your application, just what you got displayed in the <guilabel>Final location</guilabel> line on the <guilabel>Create New Project</guilabel> dialog <guilabel>General</guilabel> page. The script uses the value of the <computeroutput>--dest</computeroutput> parameter in the &perl; command above.
</para>
</formalpara>

<indexterm zone="appwizard-behind-app-templates">
  <primary>project</primary>
  <secondary>templates</secondary></indexterm>
<indexterm zone="appwizard-behind-app-templates">
  <primary>templates</primary>
  <secondary>project</secondary></indexterm>

<formalpara id="appwizard-behind-app-templates">
<title>The File Templates</title>
<para>
In the next step the file templates you set up in the <guilabel>Create New Project</guilabel> dialog will be copied to the <filename class="directory">templates</filename> subdirectory of this destination directory. As you can see from the <computeroutput>--filetemplates</computeroutput> parameter, the templates are submitted in pairs&mdash;the suffixes they are used for first, followed by the name of a temporary file in which the &appwizard; has copied the contents of the templates dialog pages. These suffixes will be taken as the filenames of where to store the template texts.
</para>
</formalpara>
<para>
In our example two such template files were installed, namely <filename>templates/h</filename> for C++ header and <filename>templates/cpp</filename> for C++ source files.
</para>

<indexterm zone="appwizard-behind-app-license">
  <primary>project</primary>
  <secondary>license</secondary></indexterm>
<indexterm zone="appwizard-behind-app-license">
  <primary>license</primary></indexterm>

<formalpara id="appwizard-behind-app-license">
<title>The License File</title>
<para>
On the <guilabel>General</guilabel> page of the <guilabel>Create New Project</guilabel> dialog you selected the license you want to put your application under. The &appwizard; initiated two actions from this. One was the license indication it put into the templates. The other action causes the according license file to be copied in your application base directory.
</para>
</formalpara>
<para>
The <computeroutput>--licensefile</computeroutput> parameter tells the &perl; <filename>script</filename> which license text file to copy. In our example the <filename>/home/devel/projects/myapp/COPYING</filename> file will have been installed in this step.
</para>

<indexterm zone="appwizard-behind-app-admin">
  <primary>project</primary>
  <secondary>administration</secondary></indexterm>
<indexterm zone="appwizard-behind-app-admin">
  <primary>administration</primary></indexterm>

<formalpara id="appwizard-behind-app-admin">
<title>The Administration Directory</title>
<para>
&kdevelop; needs a bunch of files to administrate the project. These are put in the <filename class="directory">admin</filename> subdirectory of your application base directory.
</para>
</formalpara>
<para>
&appwizard; creates the <filename class="directory">admin</filename> subdirectory in this step and extracts the standard set of files it needs from the <filename>share/apps/kdevappwizard/template-common/admin.tar.gz</filename> tarball in your &kde; directory.
</para>
<note><para>
&kdevelop; always uses the same set of standard files for its administration purposes. Hence no parameter is needed in the &perl;  <filename>script</filename> call to set up the <filename class="directory">admin</filename> subdirectory.
</para></note>

<indexterm zone="appwizard-behind-app-gnu">
  <primary>GNU</primary>
  <secondary>coding standard</secondary></indexterm>

<formalpara id="appwizard-behind-app-gnu">
<title>The &gnu; Coding Standard Files</title>
<para>
There are several standard files to be distributed with every application which conforms to the &gnu; coding standard. The &perl; <filename>script</filename> extracts these files from the <filename>share/apps/kdevappwizard/template-common/gnu.tar.gz</filename> tarball of your &kde; installation directory and customizes them according to the information you provided in the <guilabel>Create New Page</guilabel> dialog.
</para>
</formalpara>
<para>
After this step you will find the following files in your application base directory:
<itemizedlist>
  <listitem><para>
    <filename>AUTHORS</filename>, initially containing information from the <computeroutput>--author</computeroutput> and <computeroutput>--email</computeroutput> parameters.
  </para></listitem>
  <listitem><para>
    <filename>COPYING</filename>, this is the general &gnu; license, which all &gnu; conforming applications must contain&mdash;even if you decided to put your application under another license.
  </para></listitem>
  <listitem><para>
    <filename>ChangeLog</filename>, initially empty&mdash;you should protocol all major changes here.
  </para></listitem>
  <listitem><para>
    <filename>INSTALL</filename> contains generic installation instructions&mdash;modify this if special precautions and/or procedures are needed to install your application.
  </para></listitem>
  <listitem><para>
    <filename>README</filename>, initially empty&mdash;put any information here the user should know before installing your application.
  </para></listitem>
  <listitem><para>
    <filename>TODO</filename>, initially empty&mdash;put information here about what has to be done to further develop your application. You can use this as a notebook for your own purposes, but it is all the well really helpful once you have put your application in public domain.
  </para></listitem>
</itemizedlist>
</para>

<indexterm zone="appwizard-behind-app-doc">
  <primary>project</primary>
  <secondary>documentation</secondary></indexterm>
<indexterm zone="appwizard-behind-app-doc">
  <primary>documentation</primary>
  <secondary>project</secondary></indexterm>

<formalpara id="appwizard-behind-app-doc">
<title>The Initial Application Documentation</title>
<para>
Every project you set up will contain an initial <emphasis>DocBook</emphasis> template from where you can start to write your application documentation. The &perl; <filename>script</filename> will in this step have set up <filename class="directory">doc</filename> and <filename class="directory">doc/en</filename> subdirectories of the application base directory with an initial <filename>doc/en/index.docbook</filename> template and some &automake; <filename>Makefile.am</filename> files from which &kdevelop; can later build help system files.
</para>
</formalpara>

<indexterm zone="appwizard-behind-app-project">
  <primary>project</primary>
  <secondary>project file</secondary></indexterm>
<indexterm zone="appwizard-behind-app-project">
  <primary>&kdevelop;</primary>
  <secondary>project file</secondary></indexterm>

<formalpara id="appwizard-behind-app-project">
<title>The Project File</title>
<para>
Up to here most of the more global stuff has been set up, things which more or less are to be found in any &kdevelop; project. With this step the more application-specific setup processes start. These may vary upon the type of application you selected. Have a look at the actual &perl; <filename>script</filename> the &appwizard; called up for your new application if you want to lookup details. We will continue to follow the example steps listed above.
</para>
</formalpara>
<para>
In the first step of these the <emphasis>&kdevelop; project management file</emphasis> is copied out of the template directory, where the &perl; <filename>script</filename> resides. In our case the <filename>share/apps/kdevappwizard/template-kapp/app.kdevelop</filename> file was copied into the application base directory and then customized according to the selections made in the <guilabel>Create New Project</guilabel> dialog.
</para>

<note><para>
You may want to have a look at the resulting project file which in our case was saved as <filename>/home/devel/projects/myapp/myapp.kdevelop</filename>. It is written in XML format and easily to be displayed with <application>Kate</application> or any other text editor. But take care nothing to change as &kdevelop; relies on its contents.
</para></note>

<indexterm zone="appwizard-behind-app-framework">
  <primary>project</primary>
  <secondary>framework</secondary></indexterm>
<indexterm zone="appwizard-behind-app-framework">
  <primary>project</primary>
  <secondary>application framework</secondary></indexterm>
<indexterm zone="appwizard-behind-app-framework">
  <primary>framework</primary></indexterm>
<indexterm zone="appwizard-behind-app-framework">
  <primary>application</primary>
  <secondary>framework</secondary></indexterm>

<formalpara id="appwizard-behind-app-framework">
<title>The Application Framework</title>
<para>Now it is about time that the directory structures and other maintenance files be set up to put the new application in and have it maintained. A so-called <emphasis>application framework</emphasis> will be set up in this step. Its structure basically dependends on the type of application you selected in the <guilabel>Create New Project</guilabel> dialog, but parts of it are common enough to be found in other projects, too.
</para>
</formalpara>
<para>
In our case the following directory structure has been created in the <filename class="directory">/home/devel/projects/myapp/</filename> application base directory:
<itemizedlist>
  <listitem><para>
    The <filename>src</filename> subdirectory is meant to hold the source files of your application.
  </para></listitem>
  <listitem><para>
    The <filename>debug</filename> subdirectory will hold the compiled output of the <emphasis><quote>debug</quote> build configuration</emphasis>. (See the <link linkend="buildconfigurations">Build configurations</link> chapter to learn more about that.) As the name says, you should use this directory for debug purposes.
  </para></listitem>
  <listitem><para>
    The <filename>optimized</filename> subdirectory will hold the compiled output of the <emphasis><quote>optimized</quote> build configuration</emphasis>. You should test an optimized version of your application from within here.
  </para></listitem>
  <listitem><para>
    The <filename>po</filename> subdirectory is meant for <emphasis>translation purposes</emphasis>. It will hold so-called <quote>Portable Object</quote> files (<filename>.po</filename> files) and templates (<filename>.pot</filename> files) which will be processed by a translation program as e.g. <application>KBabel</application>.
  </para></listitem>
</itemizedlist>
</para>
<para>
All these directories will not kept empty but filled with a series of <filename>Makefile</filename> and other files &kdevelop; uses to process the sources of the application. Also some initial icon files for the new application will have been put into the <filename>src</filename> subdirectory, if applicable. In our case you will find two of them: <filename>src/hi16-app-myapp.png</filename> and <filename>src/hi32-app-myapp.png</filename> which both hold standard &kde; application icons.
</para>

<formalpara id="appwizard-behind-app-sources">
<title>Application Sources Installed</title>
<para>
This framework finally will be used to put the <emphasis>initial source files</emphasis> of your new project in the <filename class="directory">src</filename> directory. The actual files highly depend on the application type you selected in the <guilabel>Create New Project</guilabel> dialog. You will soon see yourself as this is the stuff you will actually have to work on.
</para>
</formalpara>

</sect2> <!-- appwizard-behind-app -->

<sect2 id="appwizard-behind-cvs">
<title>Setting Up &CVS;</title>

<indexterm zone="appwizard-behind-cvs">
  <primary>CVS</primary>
  <secondary>new project</secondary>
  <tertiary>build</tertiary></indexterm>
<indexterm zone="appwizard-behind-cvs">
  <primary>project</primary>
  <secondary>CVS</secondary></indexterm>

<para>
Now let us have a look at what the <guilabel>Messages</guilabel> window will contain when the &appwizard; continues to build our example project. If no error occurred during the first pass, the <guilabel>Messages</guilabel> contents will revert to create the local &cvs; repository.
</para>
<para>
As before we reformatted the output lines a bit for readability. And we removed some superfluous lines (where the <quote>. . .</quote> dots are).
</para>

<screen><computeroutput>
* cd '/home/devel/projects/myapp' \
  &amp;&amp; cvs -d '/home/devel/cvsroot' \
         import -m 'new project' \
                'MyApp' \
                'vendor' \
                'start' \
  &amp;&amp; sh /opt/kde3/share/apps/kdevcvs/buildcvs.sh . \
                                                 'MyApp' \
                                                 '/home/devel/cvsroot'
  . . .
* N MyApp/NEWS
* N MyApp/TODO
* N MyApp/README
  . . .
* N MyApp/admin/configure.in.bot.end
* N MyApp/templates/h
* N MyApp/templates/cpp
*
* No conflicts created by this import
*
* *** Success ***
</computeroutput></screen>

<para>
As you see from the first message line, the &appwizard; built another shell command line which conducts the &cvs; work to be done. At first the shell changes to the newly created application base directory to use it as default in the following steps.
</para>

<formalpara>
<title>Building the &cvs; Repository</title>
<para>
In the second command line part the &CVS; application will be called to <emphasis>import</emphasis> the initial project contents into the wanted repository. Again, the work in detail is commanded by a series of command line arguments to the &CVS; application call.
</para>
</formalpara>
<itemizedlist>
  <listitem><para>
    <computeroutput>-d '/home/devel/cvsroot'</computeroutput>&mdash;the <computeroutput>-d</computeroutput> option tells &CVS; which root directory is to be used. In our case this is the <emphasis>local &cvs; root</emphasis> located in <filename class="directory">/home/devel/cvsroot</filename>.
  </para></listitem>
  <listitem><para>
    <computeroutput>import</computeroutput>&mdash;tells the &CVS; application which operation to perform in this root. We want to <emphasis>import</emphasis> files into the &cvs; database. To accomplish this, the <computeroutput>import</computeroutput> command needs some arguments of its own:
    <itemizedlist>
      <listitem><para>
        <computeroutput>-m 'new project'</computeroutput>&mdash;the <computeroutput>-m</computeroutput> option provides import some <emphasis>message text</emphasis> for this action. It will be stored in the database and can later be recalled to identify the data which was kept in this step. In our case <quote><computeroutput>new project</computeroutput></quote> denotes the storage of our first files in the database.
      </para></listitem>
      <listitem><para>
        <computeroutput>'MyApp'</computeroutput>&mdash;the second argument tells &CVS; which <emphasis>repository</emphasis> to use. If it does not exist, it will be created prior to the file import actions. In this case the <filename>MyApp</filename> repository will be created.
      </para></listitem>
      <listitem><para>
        <computeroutput>'vendor'</computeroutput>&mdash;this following argument is a <emphasis>tag</emphasis>, a symbolic name which marks a series of files in the directory. There are several different meanings such a tag can have (see <link linkend="cvs">Using CVS</link> for more information), this one in principle marks the whole bunch of files which subsequently will ever be stored in this repository. It is of no particular use to us, so <quote><computeroutput>vendor</computeroutput></quote> is as good a name as any other.
      </para></listitem>
      <listitem><para>
        <computeroutput>'start'</computeroutput>&mdash;is another tag. It marks the <emphasis>release</emphasis>, in easy words a series of subsequently saved files which belong together. We used <quote><computeroutput>start</computeroutput></quote> here, a meaningful description of the use of this initial series.
      </para></listitem>
    </itemizedlist>
  </para></listitem>
</itemizedlist>

<formalpara>
<title>The Imported Files</title>
<para>
The &CVS; application will create the repository and then start to import all files from our <filename class="directory">/home/devel/projects/myapp</filename> directory. It subsequently reports any file which is loaded&mdash;this is the contents of the whole bunch of <quote><computeroutput>N</computeroutput></quote> lines following in the <guilabel>Messages</guilabel> window. The <computeroutput>N</computeroutput> denotes that this file was newly imported into the repository.
</para>
</formalpara>
<para>
Depending on the type of the new application there will be quite a lot of those <quote><computeroutput>N</computeroutput></quote> lines. We truncated the output showing only the first and last three lines as an example.
</para>

<formalpara>
<title>The &CVS; Success Message</title>
<para>
&CVS; always reports when an operation was successfully performed. In our case the <quote><computeroutput>No conflicts created by this import</computeroutput></quote> message was printed, followed by the general <quote><computeroutput>*** Success ***</computeroutput></quote> line as no other operation had to be performed.
</para>
</formalpara>

<note><para>
There <emphasis>could</emphasis> have been some error messages about conflicting files if the repository already existed because &CVS; checks the file contents according to some formal criteria and will report any conflict it possibly finds.
</para></note>

<formalpara>
<title>Building the &cvs; Administration Entries</title>
<para>
The &CVS; import operation is concluded at this point. The repository has been set up and all files we want to be kept were stored in the database. Yet there is more work to do, because the &CVS; application needs some administration information kept in every directory of the application. It uses this information later to communicate with the cvs root and repository.
</para>
</formalpara>
<para>
If we were working with &CVS; alone we had to provide a means for &CVS; to store this information in our working directory. For instance we could <emphasis>check out</emphasis> the files again in an empty base directory in which case &CVS; automatically would write all administrative operation together with the checked out files.
</para>
<para>
In &kdevelop; fortunately there is an easier way. It provides the <filename>buildcvs.sh</filename> shell script in the <filename class="directory">/opt/kde3/share/apps/kdevcvs/</filename> directory (again replace <filename class="directory">/opt/kde</filename> with your &kde; installation directory), which the &appwizard; called after the &CVS; application had successfully finished its work.
</para>
<para>
The <filename>buildcvs.sh</filename> script mainly will put a <filename class="directory">CVS</filename> subdirectory into each directory of the application framework. Each of these  <filename class="directory">CVS</filename> subdirectories will hold three file entries as follows:
</para>
<itemizedlist>
  <listitem><para>
    <filename>Root</filename> holds the name of the server on which the &cvs; root is located. In our case this is the local <filename>/home/devel/cvsroot</filename> root. The rationale behind this is to always use the same repository for these files, because &CVS; does not store them as a whole but will record only the <emphasis>differences</emphasis> of the subsequent parts. This will save lots of disk space yet makes it mandatory that all subsequent information be kept together under all circumstances.
  </para></listitem>
  <listitem><para>
    <filename>Repository</filename> serves the same purpose. &CVS; keeps the name of the repository to use herein, <filename>MyApp</filename> in our case.
  </para></listitem>
  <listitem><para>
    <filename>Entries</filename> holds the names and some other data about the files &CVS; will care of in this directory. This is because &CVS; does not necessarily keep every application file in the repository. You can tell it which files to store and which to ignore&mdash;this information is kept in the <filename>Entries</filename> file.
  </para>
  </listitem>
</itemizedlist>

<para>
All these efforts are necessary because &CVS;'s work is <emphasis>directory-oriented</emphasis>. As &CVS; previously had stored all files in the <filename>MyApp</filename> framework, the <filename>buildcvs.sh</filename> script simply scans every directory and puts the names of all application files it finds into the according <filename>CVS/Entries</filename> file.
</para>
<para>
The script runs silently, just closing without any more line in the <guilabel>Messages</guilabel> window when the work was done.
</para>

</sect2> <!-- appwizard-behind-cvs -->

</sect1> <!-- appwizard-behind -->

</chapter> <!-- appwizard -->

<!-- ====================================================================== -->

<chapter id="projects-advanced">
<title>Advanced Project Management</title>

<sect1 id="oldprojects">
<title>Loading Projects</title>

<sect2 id="loading-recent-project">
<title>Loading a Recently Used Project</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- loading-recent-project -->

<sect2 id="loading-project">
<title>Loading an Existing Project</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- loading-project -->

<sect2 id="converting-projects">
<title>Converting Old KDevelop Project Files</title>

<para>
&kdevelop; allows you to open old KDevelop 2.x project files and convert them to &kdevelop; files. To do so go to <guimenuitem>Open Project...</guimenuitem> and select <guilabel>KDevelop 2 project files</guilabel> in the <guilabel>Filter:</guilabel>. Then select project file you want to open. The project gets converted to &kdevelop; and saved as a <guilabel>&kdevelop; project file</guilabel>.
</para>

</sect2> <!-- converting-projects -->

<sect2 id="importing-projects">
<title>Importing an Existing Project</title>

<para>
To import an existing directory in &kdevelop; select <guimenuitem>Import Existing Directory</guimenuitem>
from the <guimenu>Project</guimenu> menu.  You should see the Import Directory Wizard, as seen below:
</para>

<figure id="screenshot-importdirectory" float="1">
<title>The Import Directory Dialog</title>
<mediaobject>
<imageobject><imagedata fileref="importdirectory.png"/></imageobject>
</mediaobject>
</figure>

</sect2> <!-- importing-projects -->

</sect1> <!-- oldprojects -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="project-options">
<title>Tayloring the Project&mdash;Project Options</title>

<para>
(... to be written ...)
</para>

</sect1> <!-- project-options -->

</chapter> <!-- projects-advanced -->

<!-- ====================================================================== -->

<chapter id="editing">
<title>Editing Tools</title>

<sect1 id="keyboardmapping">
<title>Keyboard Mapping</title>
<indexterm zone="keyboardmapping"><primary>keybindings</primary></indexterm>

<para>
In the following, we will list the default keybindings of the
default editor. You can configure them as you like (how?)
</para>

<informaltable>
<tgroup cols="2">
<tbody>

<row><entry><para><keycap>
  Left
</keycap></para></entry>
<entry><para>
  Moves one character left
</para></entry></row>

<row><entry><para><keycap>
  Right
</keycap></para></entry>
<entry><para>
  Moves one character right
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  Left
</keycap></keycombo></para></entry>
<entry><para>
  Moves one word left
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  Right
</keycap></keycombo></para></entry>
<entry><para>
  Moves one word right
</para></entry></row>

<row><entry><para><keycap>
  Up
</keycap></para></entry>
<entry><para>
  Moves up one line
</para></entry></row>

<row><entry><para><keycap>
  Down
</keycap></para></entry>
<entry><para>
  Moves down one line
</para></entry></row>

<row><entry><para><keycap>
  PgUp
</keycap></para></entry>
<entry><para>
  Moves up one page
</para></entry></row>

<row><entry><para><keycap>
    PgDn
</keycap></para></entry>
<entry><para>
  Moves down one page
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  PgUp
</keycap></keycombo></para></entry>
<entry><para>
  Moves to the beginning of the file
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  PgDn
</keycap></keycombo></para></entry>
<entry><para>
  Moves to the end of the file
</para></entry></row>

<row><entry><para><keycap>
    Home
</keycap></para></entry>
<entry><para>
  Moves to the beginning of the line
</para></entry></row>

<row><entry><para><keycap>
    End
</keycap></para></entry>
<entry><para>
  Moves to the end of the line
</para></entry></row>

</tbody>
</tgroup>
</informaltable>

<para>
For all the keys above, the Shift can be pressed additionally,
to mark from the current cursor position to the one afterwards.
</para>

<informaltable>
<tgroup cols="2">
<tbody>

<row><entry><para><keycap>
  Backspace
</keycap></para></entry>
<entry><para>
  Deletes one character left
</para></entry></row>

<row><entry><para><keycap>
  Delete
</keycap></para></entry>
<entry><para>
  Deletes the character under the cursor
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  C
</keycap></keycombo></para></entry>
<entry><para>
  Copies the selected text to the clipboard
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  V
</keycap></keycombo></para></entry>
<entry><para>
  Pastes the selected text from the clipboard
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  X
</keycap></keycombo></para></entry>
<entry><para>
  Deletes the selected text and puts it into the clipboard
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Ctrl
</keycap><keycap>
  Z
</keycap></keycombo></para></entry>
<entry><para>
  Undo
</para></entry></row>

<row><entry><para><keycombo><keycap>
  Shift
</keycap><keycap>
  Ctrl
</keycap><keycap>
  Z
</keycap></keycombo></para></entry>
<entry><para>
Redo
</para></entry></row>

</tbody>
</tgroup>
</informaltable>

</sect1> <!-- keyboardmapping -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="editing-reporter">
<title>The Problem Reporter</title>

<para>
(... to be written ...)
</para>
</sect1> <!-- editing-reporter -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="searchinggrepping">
<title>Searching and Grepping</title>
<indexterm zone="searchinggrepping"><primary>searching</primary></indexterm>
<indexterm zone="searchinggrepping"><primary>finding</primary></indexterm>

<sect2 id="searching">
<title>Searching for Text</title>

<para>
<keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo>- Find
<keycombo><keycap>Ctrl</keycap><keycap>R</keycap></keycombo>- Replace
</para>

</sect2> <!-- searching -->


<sect2 id="isearch">
<title>ISearch</title>
<indexterm zone="isearch"><primary>isearch</primary></indexterm>
<indexterm zone="isearch"><primary>incremental search</primary></indexterm>
<indexterm zone="isearch"><primary>search</primary><secondary>incremental</secondary></indexterm>

<para>
The conventional search with <menuchoice><guimenu>Edit</guimenu>
<guimenuitem>Find</guimenuitem></menuchoice> requires you to specify the full
search term before starting. Most of the time, it is much faster to search
incrementally. If you click into the edit field labeled
<guilabel>ISearch</guilabel> in the toolbar, the search is performed as you
type. You will find that often the desired term is already found after typing
in 3 or 4 letters.
</para>

</sect2> <!-- isearch -->


<sect2 id="grep">
<title>Grep</title>
<indexterm zone="grep"><primary>search</primary><secondary>in files</secondary></indexterm>

<para>
Both search mechanisms described above are restricted to searching within one
source file. An additional tool which allows you to search through a (possibly
large) number of files is available through the
<guimenuitem>Search in Files...</guimenuitem> item in the
<guimenu>Edit</guimenu> menu. It is basically a frontend for the
&grep;(1) program.
</para>

<para>
In the dialog, you can specify which files are searched. There is a number of
wildcard patterns available in a combo box. In this way, you can easily
restrict the find mechanism to header files. Furthermore, you specify a
directory where the search is started. If you check the
<guibutton>Recursive</guibutton> box, the search iterates through all
directories in the hierarchy below this one.
</para>

<para>
The search term is in general a regular expression following POSIX syntax.
For example, you can use the term <literal>"\&lt;K.*"</literal> if you want to
find all words which begin with the letter K. The following characters
are interpreted in a special way:
</para>

<informaltable>
<tgroup cols="2">
<tbody>

<row><entry>
  <literal>.</literal>
</entry><entry>
  Matches any character
</entry></row>
<row><entry>
  <literal>^</literal>
</entry><entry>
Matches the beginning of a line
</entry></row>
<row><entry>
  <literal>$</literal>
</entry><entry>
  Matches the end of a line
</entry></row>
<row><entry>
  <literal>\&lt;</literal>
</entry><entry>
  Matches the beginning of a word
</entry></row>
<row><entry>
  <literal>\&gt;</literal>
</entry><entry>
  Matches the end of a word
</entry></row>
<row><entry>
  <literal>?</literal>
</entry><entry>
  The preceding item matches less than once
</entry></row>
<row><entry>
  <literal>*</literal>
</entry><entry>
  The preceding item is matched zero or more times
</entry></row>
<row><entry>
  <literal>+</literal>
</entry><entry>
  The preceding item is matched once or more times
</entry></row>
<row><entry>
  <literal>{n}</literal>
</entry><entry>
  The preceding item is matched exactly n times
</entry></row>
<row><entry>
  <literal>{n,}</literal>
</entry><entry>
  The preceding item is matched n or more times
</entry></row>
<row><entry>
  <literal>{,n}</literal>
</entry><entry>
  The preceding item matches less than n times
</entry></row>
<row><entry>
  <literal>{n,m}</literal>
</entry><entry>
  The preceding item matches at least <literal>n</literal> times but less
than <literal>m</literal> times
</entry></row>

</tbody>
</tgroup>
</informaltable>

<para>
Backreferences to bracketed subexpressions are also available by the notation
<literal>\n</literal>.
</para>

<para>
For C++ programmers, as special bonus there are some search templates
available for typical patterns. These allow you to search for example
all calls of member functions of a certain object.
</para>

<para>
Once you start the search by clicking on the <guibutton>Search</guibutton>
button, it will be performed by an external, asynchronous process. All found
items will appear in the view called <guilabel>Grep</guilabel>. You can then
jump to the found items by clicking on them. Note that grep scans the files
as they stored in the file system. If you have modified versions of them in
your editor, you may get some mismatches in the line number, or some found
items will be invalid. You can avoid this by saving all files beforehand.
</para>

</sect2> <!-- grep -->

</sect1> <!-- searchinggrepping -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="code-completion">
<title>Code Completion</title>

<para>
(... to be written ...)
</para>
</sect1> <!-- code-completion -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="newfiles">
<title>Creating New Files and Classes</title>

<para>
(... to be written ...)
</para>

<sect2 id="newfiles-edittemplates">
<title>Editing the Templates</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- newfiles-edittemplates -->

</sect1> <!-- newfiles -->

</chapter> <!-- editing -->

<!-- ====================================================================== -->

<chapter id="file-browsers">
<title>The File Browsers</title>

<para>
On the left side of the main window, &kdevelop; can display various kinds of
lists and trees for the selection of files:
</para>

<itemizedlist>
<listitem>
<formalpara>
<title>File Tree</title>
<para>
This shows a tree view of the file hierarchy below the project directory. If
you click on a file, it is loaded into the editor. For files which do not
contain text, KDevelop starts an application that can handle the respective
MIME type.
</para>
</formalpara>

<para>
The file tree is regularly updated whenever something changes in the file
system. For example, if you create new files or directories (even outside
&kdevelop;), this is immediately reflected in the file list. On Linux,
this feature makes use of the FAM library. On other operating systems or over
NFS, the directories shown are polled in small intervals.
</para>

<para>
The file tree hides files which are usually not interesting, like object
files. In the <guimenuitem>Project options</guimenuitem> under
<guibutton>File views</guibutton>, you can configure (as a comma separated
list of wildcards) which patterns are used to filter out irrelevant files.
</para>

<para>
Furthermore, you can decide to restrict the file tree to show only files which
belong to the currently loaded project. This can be toggled by clicking with
the right mouse button on the root item of the tree.
</para>

<figure id="screenshot-filetree" float="1">
<title>A Screenshot of the File Tree</title>
<mediaobject>
<imageobject><imagedata fileref="filetree.png"/></imageobject>
</mediaobject>
</figure>

</listitem>

<listitem>
<formalpara>
<title>File Groups</title>
<para>
This shows the files belonging to the project, grouped by their file name
extension. As in the file tree, you can edit a file by clicking on it
with the left mouse button.
</para>
</formalpara>

<para>
The groups shown in this view can be configured under
<guibutton>File views</guibutton> in the
<guimenuitem>Project options</guimenuitem> dialog. In order to customize the
view to your needs, it is helpful to understand how files are distributed on
the groups. For each file, &kdevelop; goes through all groups from top to
bottom. In each group, it looks whether the file name matches one of the
patterns. If there is a match, the file is shown in this group and the
iteration is aborted. This makes it clear that more general patterns should
be put below more specific ones. For example, an asterisk for the
<guilabel>Other</guilabel> group should  be the last pattern.
</para>

</listitem>

</itemizedlist>

</chapter> <!-- file-browsers -->

<!-- ====================================================================== -->

<chapter id="class-browsers">
<title>The Class Browsers</title>
<indexterm zone="class-browsers"><primary>class browser</primary></indexterm>

<para>
When working on a project in an object-oriented language, your emphasis when
working on a project is not on the source files and their names, but on the
classes and their relationships. In order to help you navigating in the space
of defined classes and symbols, &kdevelop; includes various class browsers
that visualize the class structure in different ways.
</para>

<sect1 id="classview">
<title>Class View</title>

<para>
This view is shown on the left side of the main window and contains a linear
list of all classes, variables and functions in your project. It is designed
as a tree view. If you open a class node by clicking on it, a list with all
methods and attributes of the respective class is shown.
</para>

<figure id="screenshot-classview" float="1">
<title>A Screenshot of the Class View</title>
<mediaobject>
<imageobject><imagedata fileref="classview.png"/></imageobject>
</mediaobject>
</figure>

<para>
The class view works in two different modes. By default, all symbols are
grouped into <quote>Classes</quote>, <quote>Structs</quote>, <quote>Functions</quote>, <quote>Variables</quote> and <quote>Namespaces</quote>.
In the context menu of the view, you can choose
<guimenuitem>List by Namespaces</guimenuitem>. In this mode, the namespace
hierarchy is shown and the symbols grouped into the respective namespace where
they are defined. This may be more useful in projects which make heavy use of
(nested) namespaces. It is less useful in projects without namespaces.
</para>

<para>
You can also change the way in which class names are displayed. Normally, the
names of the classes are shown, without the namespace in which they are defined.
This means, you cannot immediately distinguish classes with the same name in
different namespaces. If you rest for a while with the mouse over an item, the
full scoped name is shown as a tooltip though. You can decide to always
display the fully scoped class name by choosing
<guimenuitem>Full Identifier scopes</guimenuitem> from the context menu.
</para>

<para>
Clicking on a class or method in the class view brings you to its definition.
You can also jump to the declaration of a method by choosing
<guimenuitem>Go to declaration</guimenuitem> from the context menu. In the
context menu for classes are also the items
<guimenuitem>Add method..</guimenuitem> and
<guimenuitem>Add attribute...</guimenuitem>. This opens dialogs where you can
generate new method and variable declaration in the respective class, together
with an empty implementation.
</para>

</sect1> <!-- classview -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="classtools">
<title>Class Tools</title>

<para>
The class tool dialog is activated by right clicking on a class in the class
view and choosing <guimenuitem>Class tool...</guimenuitem>.
</para>

</sect1> <!-- classtools -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="classhierarchy">
<title>Class Hierarchy</title>

<para>
(... to be written ...)
</para>

</sect1> <!-- classhierarchy -->

</chapter> <!-- class-browsers -->

<!-- ====================================================================== -->

<chapter id="documentation">
<title>Documentation</title>

<para>
Documention unfortunately belongs to the most-overlooked programming issues. Yet, once properly set up and maintained internal and external documentation provides most valuable help.
</para>
<para>
Documentation has multiple facets. There is
<itemizedlist>
  <listitem><para>
  <emphasis>project internal documentation</emphasis>, mainly consisting of
  <itemizedlist>
    <listitem><para>
    <emphasis>comments</emphasis> in header/source files
    </para></listitem>
    <listitem><para>
    <emphasis>internal API documentation</emphasis> of your project generated from the program file by special tools, e.g. &doxygen;
    </para></listitem>
  </itemizedlist>
  </para></listitem>
  <listitem><para>
  <emphasis>project external documentation</emphasis>, comprising among others
  <itemizedlist>
    <listitem><para>
    <emphasis>external API documentation</emphasis> of e.g. common system libraries (<application>KDE</application>, <application>Qt</application>, etc.)
    </para></listitem>
    <listitem><para>
    any other documentation (programming language manuals, general system information, HowTo articles and the like)
    </para></listitem>
  </itemizedlist>
  </para></listitem>
</itemizedlist>
</para>
<para>
All this documentation should be easily maintainable and ready at hand whenever you need it. &kdevelop; has provisions for just this.
</para>

<!-- ### doc browser, notes on internal documentation, how to profit from Doxygen -->

<sect1 id="docbrowser">
<title>The Documentation Browser</title>


<figure id="screenshot-doctreeview" float="1">
<title>A Screenshot of the Documentation Tree</title>
<mediaobject>
<imageobject><imagedata fileref="doctreeview.png"/></imageobject>
</mediaobject>
</figure>

</sect1> <!-- docbrowser -->

</chapter> <!-- documentation -->

<!-- ====================================================================== -->

<chapter id="project-management">
<title>Building and Project Management</title>

<para>
This chapter deals only with compiled projects, such as C++, Java or
Fortran projects. Projects for scripting languages like Python and
PHP work very differently.
</para>

<para>
You will find here information on:
<itemizedlist>
  <listitem><para>
  <link linkend="automake-manager-summary">Summary of &automanag;</link> containing an initial overall view of &automanag;,
  </para></listitem>
  <listitem><para>
  <link linkend="automake-manager-operation">Automake Manager Operation</link> describing the basics of how to work with &automanag;,
  </para></listitem>
</itemizedlist>
</para>
<sect1 id="automake-manager-summary">
<title>Summary of &automanag;</title>

<para>
In the <link linkend="unixdev-buildsystems">Build systems</link> chapter we have given a rough survey of the build systems commonly in use on UNIX systems. In the following sections we will look at this in more detail.
</para>
<para>
There is some confusion about how to name such things. GNU calls them <quote>build systems</quote> when it describes Automake, Autoconf and Libtool. QMake calls itself <quote>a tool to write Makefiles for different compilers and platforms</quote>. In KDE often the term <quote>project management systems</quote> is used. We will use this term in a broader sense to describe the built-in environments in &kdevelop; which are used to organize and build your projects. In the context of this section, however, we will mostly talk about <quote>automated build systems</quote>.
</para>

<sect2 id="automake-manager-summary-buildsys">
<title>The Need for an Automated Build System</title>

<para>
If you have a simple <quote>Hello World</quote> program, written in C, you can compile and link it using <command>gcc</command> <parameter>-o hello hello.c</parameter> and execute it using the command <command>./hello</command>, so you do not even need a <filename>Makefile</filename>.
</para>
<para>
If you have a C application with several modules and header files and you are only going to run it on your own machine (i.e. it is an in-house application), you will only need a simple <filename>Makefile</filename>, which is fairly easy to write by hand (use <userinput>info Make</userinput> to find out more).
</para>
<para>
The complications begin when:
</para>
<itemizedlist>
  <listitem><para>
  Your source-code, documentation, graphics, sounds, translations, data files, etc. are located in more than one directory,
  </para></listitem>
  <listitem><para>
  You have a hierarchy of directories and sub-directories,
  </para></listitem>
  <listitem><para>
  You are using libraries that are not part of the traditional &UNIX; set, such as the &Qt; Object Library or the &kde; Desktop libraries,
  </para></listitem>
  <listitem><para>
  You are using a pre-processor to generate some of your source-code, such as Qt's MOC pre-compiler,
  </para></listitem>
  <listitem><para>
  You aim to distribute your application worldwide, to people who may not have the same &UNIX;/&Linux; system, software and hardware as you,
  </para></listitem>
  <listitem><para>
  You require an automated Install and Uninstall facility,
  </para></listitem>
  <listitem><para>
  You aim to make your application part of the &kde; Desktop set.
  </para></listitem>
</itemizedlist>

<para>
If you have some or all of the above situations, you probably need a <emphasis>build system</emphasis>. In the example above we used <command>gcc</command> to compile and build the <quote>Hello World</quote> program, but not all C compilers are called <quote><command>gcc</command></quote>. So if you distribute your application to someone who is using some other C compiler, your Makefile must somehow use the name of that person's compiler, otherwise your application will fail to compile&mdash;and that is just simple example of what can go wrong.
</para>
<para>
A build system will iron out these differences for you.
</para>
<itemizedlist>
  <listitem><para>
  It will check that the libraries you need are present on each receiving machine,
  </para></listitem>
  <listitem><para>
  will automatically scan all your application directories for files to pre-process, compile or install and
  </para></listitem>
  <listitem><para>
  will install the components of your application in the correct receiving directories, making sure that
  </para></listitem>
  <listitem><para>
  the directories are created in the receiving machine as required.
  </para></listitem>
</itemizedlist>

<para>
In brief, a build system offers safe and secure methods for your application to be compiled and installed correctly on any receiving machine. As we have shown before in the <link linkend="makesystems">Project Management Systems</link> survey, &kdevelop; offers three automated build systems and the option of creating your own Makefile, in short (click on the project names to get more information):
</para>
<itemizedlist>
  <listitem><para>
  <link linkend="automake-project">Automake projects</link> which use the &gnu; standard development tools.
  </para></listitem>
  <listitem><para>
  <link linkend="qmake-project">QMake projects</link> which use the trolltech QMake project manager.
  </para></listitem>
  <listitem><para>
  <link linkend="ant-project">ANT projects</link> which use the Apache ANT project manager for Java development.
  </para></listitem>
  <listitem><para>
  <link linkend="custom-project">Custom projects</link> which require you to maintain your own <filename>Makefiles</filename>.
  </para></listitem>
</itemizedlist>

<important>
<para>
One of these four alternatives must be chosen when you create a project and <emphasis>the choice is difficult to change later</emphasis>, so you should give it some thought before you start.
</para>
</important>

</sect2> <!--  automake-manager-summary-buildsys -->

<sect2 id="automake-references">
<title>Tutorials on Autoconf/Automake/Libtool</title>
<para>
There are several tutorials available on the &GNU; Build System (<command>Autoconf</command>, <command>Automake</command> and <command>Libtool</command>) of which the &automanag; makes use.
</para>
<itemizedlist>
  <listitem><para>A short <ulink url="http://www.kdevelop.org/index.html?filename=tutorial_autoconf.html">autoconf tutorial</ulink> written by Christopher W. Curtis available on the KDevelop home page. It concentrates on some basic steps to modify a <filename>Makefile</filename>.
  </para></listitem>
  <listitem><para>
  A more detailed tutorial can be found in a greater set of tutorials on  <ulink url="http://www.amath.washington.edu/~lf/tutorials/autoconf/toolsmanual_toc.html"><quote>Developing software with GNU</quote></ulink>.
  </para></listitem>
  <listitem><para>
  And there is the famous <ulink url="http://sources.redhat.com/autobook"><quote>Goat Book</quote></ulink>, titled <quote>Autoconf, Automake, and Libtool</quote>. This is an easily readable, yet concise, introduction in all main aspects of the &GNU; Autotools.
  </para></listitem>
</itemizedlist>

</sect2> <!--  automake-references -->

<sect2 id="automake-manager-basics">
<title>What does &automanag; Do?</title>

<para>
The <link linkend="appwizard">&appwizard;</link> will have set up some initial <filename>Makefile.am</filename> files when you created a <guilabel>New Project</guilabel> of a type that uses the &GNU; Build System, such as <menuchoice><guimenuitem>C++</guimenuitem> <guimenuitem>KDE</guimenuitem> <guimenuitem>Application framework</guimenuitem></menuchoice>. During development &automanag; creates any other <filename>Makefile.am</filename> files for projects that use the &GNU; Build System and maintains them all, &appwizard; and &automanag; created alike.
</para>
<para>
There will be one <filename>Makefile.am</filename> file in each directory of your project that contains files to be compiled or installed. It will contain your specifications for compiling, building and installing files and a reference to any subdirectories that also have a <filename>Makefile.am</filename> file and possibly some files to compile, build and install.
</para>

<note><para>
Your project's directories and source files may be structured to any depth, or you may prefer a flat project-structure with all subdirectories at the top level.
</para></note>

<para>
The aim of the &GNU; Build System is to produce source-code file structures that can be compiled, built and installed on any &UNIX; or &Linux; system by using the simple commands:
</para>
<screen>
./configure
make
make install    # Usually as "root".
</screen>
<para>and can be uninstalled by the command <command>make uninstall</command> (usually as root).
</para>
<para>
How does this work? Well <command>configure</command> is a script that
<itemizedlist>
  <listitem><para>
  works out the details of whatever system it is in, such as what compiler and libraries to use and where they are located, and then
  </para></listitem>
  <listitem><para>
  creates recursive <filename>Makefile</filename> files by filling in the substitutions in the corresponding <filename>Makefile.in</filename> files.
  </para></listitem>
</itemizedlist>
</para>
<para>
The <filename>Makefile.in</filename> are <quote>input</quote> files&mdash;templates which provide basic information for the <filename>Makefile</filename>s to be produced from them by filling in some system dependent information. They are generated by the <command>Automake</command> utility from the <filename>Makefile.am</filename> files.
</para>
<para>
The process of going from <filename>Makefile.am</filename> (<filename>.am</filename> denotes <quote>Automake</quote> template files) to <filename>Makefile</filename> files is handled automatically by the KDevelop &promanag;, using the <command>Autoconf</command> utility, <command>M4</command> macros and other arcana we need not go into here.
</para>
<para>
So when <command>make</command> runs, it automatically picks up the correct pieces from the current environment, such as compilers and libraries. Similarly, <command>make install</command> puts your application components, such as executables, documentation and data files in the correct places for that environment.
</para>

<para>
If you distribute your application as a <quote>tarball</quote> (a single compressed file that KDevelop can create for you), it will include the <filename>Makefile.in</filename> files and the <filename>configure</filename> script file, so the recipient can compile, build and install your application without having <command>Automake</command>, <command>Autoconf</command> or KDevelop on their machine. The <filename>Makefile.am</filename> files are also included, just in case the receiver needs to do any source-code modifications.
</para>
<note><para>
The rules are rather different if you distribute via a web-based source-code repository such as KDE CVS.
</para></note>

</sect2> <!--  automake-manager-basics -->

<sect2 id="automake-manager-basics-summary">
<title>Summary of What Automake Manager Does</title>

<itemizedlist>
  <listitem><para>
  Generates <filename>Makefile.am</filename> files in subdirectories it knows as <quote>subprojects</quote>.
  </para></listitem>
  <listitem><para>
  Updates <filename>Makefile.am</filename> files as the project structure changes.
  </para></listitem>
  <listitem><para>
  Updates <filename>Makefile.am</filename> files as files are added to or removed from the project.
  </para></listitem>
  <listitem><para>
  Accepts definitions of how the various files are to be built or installed and modifies the <filename>Makefile.am</filename> accordingly.
  </para></listitem>
  <listitem><para>
  Accepts parameters used in building or installing (e.g. library names) and ensures that they are used in the required compilation and build steps.
  </para></listitem>
</itemizedlist>

</sect2> <!--  automake-manager-basics-summary -->

<sect2 id="automake-file-contents">
<title>Contents of Automake Files</title>

<para>
A <filename>Makefile.am</filename> file has lines containing variable-names followed by an equals sign and a list of files or parameter values. The <quote>variables</quote> have two-part names, such as <varname>bin_PROGRAMS</varname>, <varname>myapp_SOURCES</varname> or <varname>kdelnk_DATA</varname>. The second part is called the <emphasis>primary</emphasis> and represents something from which to build or install. The first part is called the <emphasis>prefix</emphasis> and represents:
</para>
<itemizedlist>
  <listitem><para>
  A <emphasis>directory</emphasis> in which to do installation (e.g. <filename>bin</filename>),
  </para></listitem>
  <listitem><para>
  A <emphasis>qualifier</emphasis> for the primary (e.g. <varname>myapp</varname> for <varname>SOURCES</varname>, indicating that the source files listed after <varname>myapp_SOURCES</varname> go into building <filename>myapp</filename>),
  </para></listitem>
  <listitem><para>
  A special <emphasis>prefix</emphasis> <varname>noinst</varname> (short for <quote>no installation</quote>), usually used to list program header files (<filename>.h</filename>),
  </para></listitem>
  <listitem><para>
  Or the special prefix <varname>EXTRA</varname>, for <emphasis>configuration-dependent</emphasis> stuff.
  </para></listitem>
</itemizedlist>

<para>
For more information on <command>Automake</command> and <filename>Makefile.am</filename> files, look up <userinput>info Automake</userinput>.
</para>
<para>
Basically, &automanag; creates and updates the variable-names and lists of files or parameters. See the following example of a <filename>Makefile.am</filename> for a typical application, called <filename>myapp</filename>.
</para>

<screen>
## Makefile.am for myapp

# this is the program that gets installed.  it's name is used for all
# of the other Makefile.am variables
bin_PROGRAMS = myapp

# set the include path for X, qt and KDE
INCLUDES = $(all_includes)

# the library search path.
myapp_LDFLAGS = $(KDE_RPATH) $(all_libraries)

# the libraries to link against.
myapp_LDADD   = $(LIB_KFILE) $(LIB_KDEPRINT)

# which sources should be compiled for myapp
myapp_SOURCES = main.cpp myapp.cpp myappview.cpp

# these are the headers for your project
noinst_HEADERS = myapp.h myappview.h

# let automoc handle all of the meta source files (moc)
METASOURCES = AUTO

KDE_ICON = myapp

# this is where the kdelnk file will go
kdelnkdir = $(kde_appsdir)/Utilities
kdelnk_DATA = myapp.desktop

# this is where the XML-GUI resource file goes
rcdir = $(kde_datadir)/myapp
rc_DATA = myappui.rc

AM_CXXFLAGS = -DMY_C++_PREPROCESSOR_OPTION
</screen>

<para>
As you can see, many of the items on the right hand side are symbols of the form <varname>$(xxx)</varname>. These are <emphasis>environment variables</emphasis> which are defined in the actual &kde; environment and are substituted with real values when <command>./configure</command> generates the final <filename>Makefile</filename> files in the receiving machine.
</para>
<para>
Also, sometime after you have started with KDevelop, it is a good idea to run the command <command>./configure --help</command>, which will show you the range of things you can change at build and installation time, such as for a test environment. In particular, the command:
<screen>
./configure --prefix=/where/you/wish
</screen>
will re-direct the entire installation to a directory structure of your choice, by changing the internal variable <varname>$(prefix)</varname> to value <filename class="directory">/where/you/wish</filename>.
</para>

</sect2> <!-- automake-file-contents -->

</sect1> <!--  automake-manager-summary -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="automake-manager-operation">
<title>Automake Manager Operation</title>

<para>
In this chapter you will find a basic description of the &automanag; elements and how to use them. This covers:
<itemizedlist>
  <listitem><para>
  <link linkend="automake-manager-operation-window">The &automanag; Window</link> describes the basic structure of the &automanag; main window.
  </para></listitem>
  <listitem><para>
  <link linkend="automake-manager-operation-survey-window">The Overall View Window</link> describes the elements of the upper subwindow.
  </para></listitem>
  <listitem><para>
  <link linkend="automake-manager-operation-detail-window">The Detail View Window</link> describes the elements of the lower subwindow.
  </para></listitem>
  <listitem><para>
  <link linkend="automake-manager-operation-navigate">Navigating in the &automanag;</link> lists some basic operations you can perform in the &automanag;.
  </para></listitem>
  <listitem><para>
  <link linkend="automake-manager-operation-popups">Popup Menus in the &automanag;</link> describes the windows which will pop up when you select an action in the &automanag;.
  </para></listitem>
</itemizedlist>
</para>

<sect2 id="automake-manager-operation-window">
<title>The &automanag; Window</title>

<informaltable frame="none">
<tgroup cols="2"><tbody><row>
  <entry><inlinemediaobject>
    <imageobject>
      <imagedata fileref="automake-manager.png" format="PNG"/>
    </imageobject>
  </inlinemediaobject></entry>
  <entry valign="top"><itemizedlist>
    <listitem><para>
    &automanag; runs in a split window. The top part is called the <emphasis>Overall View</emphasis> and the bottom part is called the <emphasis>Detail View</emphasis>. Between them is a narrow bar that can be dragged with the mouse to adjust the sizes of the views. In IDEAl mode you can also drag the side of the split window to change the width.
    </para></listitem>
    <listitem><para>
    On top of each view there is a <emphasis>toolbar</emphasis>, the buttons in which will become activated when an element in this view is selected. This provides one way you can access the actions provided for that view element. The other are context menus which pop up on right mouse button click as will be discussed below.
    </para></listitem>
    <listitem><para>
    In IDEAl mode there are two additional small buttons in the &automanag; window title bar left hand side &ndash; a triangular shaped right arrow, and a dot button. The arrow button is used to <emphasis>close the window</emphasis>. The dot button on the other hand will <emphasis>keep the window open</emphasis> even if another &kdevelop; window has been selected. (Otherwise the &automanag; window will automatically close whenever another window gets the input focus.)
    </para></listitem>
  </itemizedlist></entry>
</row></tbody></tgroup>
</informaltable>

</sect2> <!-- automake-manager-operation-window -->

<sect2 id="automake-manager-operation-survey-window">
<title>The Overall View Window</title>

<para>
The overall view window contains a tree-list of all the directories in your project that contain program files, documentation or data. Each such directory contains a <filename>Makefile.am</filename> file and is known in &automanag; as a <emphasis>subproject</emphasis>. There are three typical subprojects in a &kde;-based project as shown in the above illustration:
</para>

<itemizedlist>
  <listitem><para>
  <filename>src</filename> &ndash; source-code files for your application,
  </para></listitem>
  <listitem><para>
  <filename>doc</filename> &ndash; your user manual or Handbook,
  </para></listitem>
  <listitem><para>
  <filename>po</filename> &ndash; extracts of strings in your source-code files that require translation into other human languages (e.g. window titles, menu names, button labels, dialog box text and messages of various kinds).
  </para></listitem>
</itemizedlist>

<para>
Note that the <filename>doc</filename> subproject always has an <filename>en</filename> subproject, which you can see if you click on the <symbol>+</symbol> symbol next to the word <filename>doc</filename>. That is because the base language of all documentation in KDE is English (en). If your application becomes part of KDE, the KDE translation teams may translate your documentation from English into other languages and the translations will go into other subprojects, such as <filename>de</filename> (German) or <filename>fr</filename> (French). The strings in the <filename>po</filename> subproject may also be translated and stored in other files in <filename>po</filename>, thus allowing your application to be operated by people who do not know English.
</para>

<note><para>
The <filename>doc</filename> and <filename>po</filename> subprojects serve different purposes. <filename>doc</filename> contains <emphasis>documentation</emphasis> like a user manual, <filename>po</filename> contains translatable text strings of the <emphasis>user interface</emphasis> which is integrated in the source code of this application.
</para></note>

<para>
The overall view window serves&mdash;amongst other things&mdash;as a navigation tool. If you select a subproject in the overall view window, the corresponding details will be shown in the detail view window.
</para>

</sect2> <!-- automake-manager-operation-survey-window -->

<sect2 id="automake-manager-operation-detail-window">
<title>The Detail View Window</title>

<para>
The detail view contains a tree-list of all the files in the subproject currently selected in the overall view as well as the compilation, build and installation rules for this subproject. Thus the two views together can give you access to all the components of your application and all the information on how to compile, build and install it.
</para>

<formalpara>
<title>Targets</title>
<para>The tree-list in the detail view has two levels. The top level consists of so-called &automanag; <emphasis>targets</emphasis> and the next level contains lists of files that go to make up each target.
</para>
</formalpara>
<para>
This concept of an &automanag; target differs somewhat from what a <filename>Makefile</filename> target usually is. In short:
<itemizedlist>
  <listitem><para>
  The definition of how a set of files is to be compiled, built or installed is known as a <emphasis>target</emphasis> in &automanag;, but as a <emphasis>variable</emphasis> in <command>Automake</command> itself.
  </para></listitem>
  <listitem><para>
  A <emphasis>target</emphasis> in <command>make</command> is often something quite different, being the parameter of a <command>make</command> command (e.g. <userinput>make install</userinput>, <userinput>make clean</userinput>).
  </para>
  <para>
  However some <filename>Makefile.am</filename> variables do represent an underlying <emphasis>sub-target</emphasis> in <command>make</command>.
  </para></listitem>
</itemizedlist>
</para>

</sect2> <!-- automake-manager-operation-detail-window -->

<sect2 id="automake-manager-operation-navigate">
<title>Navigating in the &automanag;</title>

<para>
In both the overall and the detail view you can left-click on the <symbol>+</symbol> or <symbol>-</symbol> next to a subproject or target name to expand or contract the tree view. If you do that with a <emphasis>subproject</emphasis> in the overall view, it shows or hides the subprojects at the next level down (if any). If you do it with a <emphasis>target</emphasis> in the detail view, it shows or hides the list of files that go into that target.
</para>

<formalpara>
<title>Opening a File for Edit</title>
<para>
If you <emphasis>left-click</emphasis> on a file name in the detail view, the corresponding file opens up in KDevelop's editing window.
</para>
</formalpara>

<formalpara>
<title>Activating the &automanag; Toolbar Buttons</title>
<para>
If you <emphasis>left-click</emphasis> on the name of a subproject in the overall view or target in the detail view, the name is highlighted and some toolbar buttons become active in the top part of that view.
</para>
</formalpara>

<note>
  <para>
  It is recommended that you use the <emphasis>right mouse-button and popup menus</emphasis>, rather than the toolbar buttons, because it is then much easier to see and understand what you are doing.
  </para>
  <para>
  Operations on subprojects and targets have far-reaching effects on the structure, compilation, building and installation of your application.
  </para>
</note>

<formalpara>
<title>Selecting Actions/Popup Menus</title>
<para>
If you <emphasis>right-click</emphasis> on the name of a subproject, target or file, a menu pops up and you can then select actions to perform on the subproject, target or file, such as add a target to the subproject, add a file to a target or logically remove the selected file from its target.
</para>
</formalpara>

</sect2> <!-- automake-manager-operation-navigate -->

<sect2 id="automake-manager-operation-popups">
<title>Popup Menus in the &automanag;</title>

<para>
The following sections explain in short terms which operations the menus make available which will pop up on right mouse button clicks in the &automanag; window. They are meant for overall view only. You will find detailed descriptions of most operations in a later chapter.
</para>
<!-- ### add a link to this chapter when ready -->

<sect3 id="automake-manager-operation-popups-file">
<title>The Popup Menu for a File</title>

<para>
When you right-click on a <emphasis>file name</emphasis> in the detail view the following menu will pop up allowing you to select one of several operations to be performed on that file. In the illustration below the <filename>hi-16app-myapp.png</filename> icon file was selected from the <guilabel>Icon data in myapp</guilabel> target of the <guilabel>myapp/src</guilabel> subproject.
</para>

<informaltable frame="none">
<tgroup cols="2"><tbody><row>
  <entry><inlinemediaobject>
    <imageobject>
      <imagedata fileref="automake-file-popup.png" format="PNG"/>
    </imageobject>
  </inlinemediaobject></entry>
  <entry valign="bottom"><itemizedlist>
    <listitem><para>
    The main popup-menu item for a file is to <guimenuitem>Remove</guimenuitem> the file from its target (i.e. it will no longer be used to compile, build or install that target).
    </para></listitem>
    <listitem><para>
    The <guimenuitem>CVS</guimenuitem> item offers a variety of CVS operations on the file.
    </para></listitem>
    <listitem><para>
    The <guimenuitem>Open With</guimenuitem> item allows you to open the file with a variety of editors or with any application at all (e.g. you can open the icon file in our example with <application>KIcon</application>).
    </para></listitem>
    <listitem><para>
    The <guimenuitem>Perforce</guimenuitem> item is used for similar operations as in CVS using the commercial <quote><application>Perforce</application></quote> version control system.
    </para></listitem>
  </itemizedlist></entry>
</row></tbody></tgroup>
</informaltable>

</sect3> <!-- automake-manager-operation-popups-file -->

<sect3 id="automake-manager-operation-popups-target">
<title>The Popup Menu for a Target</title>

<para>
When you right-click on a <emphasis>target</emphasis> in the detail view the following menu will pop up allowing you to select one of several operations to be performed on it. In the illustration below the <guilabel>myapp (Program in bin)</guilabel> target of the <guilabel>myapp/src</guilabel> subproject was selected.
</para>

<informaltable frame="none">
<tgroup cols="2"><tbody><row>
  <entry><inlinemediaobject>
    <imageobject>
      <imagedata fileref="automake-target-popup.png" format="PNG"/>
    </imageobject>
  </inlinemediaobject></entry>
  <entry valign="bottom"><itemizedlist>
    <listitem><para>
    The <guimenuitem>Options</guimenuitem> item for a target only applies to source code files. In the corresponding dialog box you can specify linker flags and paths on which to locate libraries and you can give a list of actual libraries to be linked in to your application.
    </para></listitem>
    <listitem><para>
    The <guimenuitem>Create New File</guimenuitem> item brings up a dialog in which you can set the file name and the type of file to be generated (from a drop-down list).
    </para></listitem>
    <listitem><para>
    The <guimenuitem>Add Existing Files</guimenuitem> item brings up a dialog box in which you can add an already existing file to this target.
    </para></listitem>
    <listitem><para>
    The <guimenuitem>Remove</guimenuitem> item for a target allows you to logically remove the target and all its files from the project structure.
    </para></listitem>
    <listitem><para>
    The <guimenuitem>Make Target Active</guimenuitem> item only applies to targets containing source code files. New files will always be added to such an active target.
    </para></listitem>
    <listitem><para>
    The <guimenuitem>Build Target</guimenuitem> item calls all necessary compile and make operations to build the code for this target only.
    </para></listitem>
  </itemizedlist></entry>
</row></tbody></tgroup>
</informaltable>

</sect3> <!-- automake-manager-operation-popups-target -->

<sect3 id="automake-manager-operation-popups-subproject">
<title>The Popup Menu for a Subproject</title>

<para>
When you right-click on a <emphasis>subproject</emphasis> in the overall view window the following menu will pop up which allows you to make major changes to the structure of your project and the way it is compiled, built and installed. You can use it to expand or modify the basic project structure that the &appwizard; has created.
</para>


<informaltable frame="none">
<tgroup cols="2"><tbody><row>
  <entry><inlinemediaobject>
    <imageobject>
      <imagedata fileref="automake-subproject-popup.png" format="PNG"/>
    </imageobject>
  </inlinemediaobject></entry>
  <entry valign="bottom"><itemizedlist>
    <listitem><para>
    The <guimenuitem>Options</guimenuitem> item for a subproject controls the way that the subproject will be compiled, built and installed. The dialog box that pops up has tabs for Compiler, Includes, Prefixes and Build Order.
    </para></listitem>
    <listitem><para>
    The <guimenuitem>Add Subproject</guimenuitem> item creates a new directory and skeleton Makefile.am file.
    </para></listitem>
    <listitem><para>
    The <guimenuitem>Add Target</guimenuitem> item pops up a dialog in which you can set the rules for compiling, building or installing a group of files within your subproject.
    </para></listitem>
    <listitem><para>
    <guimenuitem>Add Service</guimenuitem> (... to be written ...)
    </para></listitem>
    <listitem><para>
    <guimenuitem>Add Application</guimenuitem> (... to be written ...)
    </para></listitem>
    <listitem><para>
    <guimenuitem>Add Existing Subprojects</guimenuitem> (... to be written ...)
    </para></listitem>
    <listitem><para>
    The <guimenuitem>Remove Subproject</guimenuitem> item in the popup menu for a subproject is the proper way to remove a subproject. It will adjust the <filename>Makefile.am</filename> files accordingly. You will also be offered the option to delete all the files (or links) in the corresponding subdirectory. Obviously, this feature should be used with caution.
    </para></listitem>
    <listitem><para>
    The <guimenuitem>Build</guimenuitem> item calls all necessary compile and make operations to build the code for this subproject only.
    </para></listitem>
    <listitem><para>
    <guimenuitem>Force Reedit</guimenuitem> (... to be written ...)
    </para></listitem>
    <listitem><para>
    <guimenuitem>Clean</guimenuitem> (... to be written ...)
    </para></listitem>
    <listitem><para>
    <guimenuitem>Install</guimenuitem> (... to be written ...)
    </para></listitem>
    <listitem><para>
    <guimenuitem>Install (as root user)</guimenuitem> (... to be written ...)
    </para></listitem>
  </itemizedlist></entry>
</row></tbody></tgroup>
</informaltable>

</sect3> <!-- automake-manager-operation-popups-subproject -->

</sect2> <!-- automake-manager-operation-popups -->

</sect1> <!-- automake-manager-operation -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="autoproject">
<title>Automake Projects</title>
<indexterm zone="autoproject"><primary><command>autoproject</command></primary></indexterm>
<indexterm zone="autoproject"><primary>&automake;</primary></indexterm>
<indexterm zone="autoproject"><primary>&autoconf;</primary></indexterm>
<indexterm zone="autoproject"><primary>&libtool;</primary></indexterm>

<para>
(... to be written ...)
</para>


<sect2 id="autoconf">
<title>Autoconf</title>
<indexterm zone="autoconf"><primary><filename>configure</filename> script</primary></indexterm>
<indexterm zone="autoconf"><primary><filename>config.status</filename> script</primary></indexterm>
<indexterm zone="autoconf"><primary><filename>Makefile.in</filename></primary></indexterm>
<indexterm zone="autoconf"><primary><filename>config.h.in</filename></primary></indexterm>

<figure id="flow-configure" float="1">
<title>Effect of the Configure Script</title>
<mediaobject>
<imageobject><imagedata fileref="configure.png"/></imageobject>
</mediaobject>
</figure>

<para>
<filename>Makefile.in</filename> into <filename>Makefile</filename>
</para>

<programlisting>
prefix = @prefix@
INSTALL = @INSTALL@
build_triplet = @build@
CXX = @CXX@
</programlisting>

<programlisting>
prefix = /home/bernd/kde3
INSTALL = /usr/bin/ginstall -c -p
build_triplet = i686-pc-linux-gnu
CXX = g++
</programlisting>

<para>
<filename>config.h.in</filename> into <filename>config.h</filename>
</para>

<programlisting>
/* Define if you have libz */
#undef HAVE_LIBZ
/* The size of a `int', as computed by sizeof. */
#undef SIZEOF_INT
</programlisting>

<programlisting>
/* Define if you have libz */
#define HAVE_LIBZ 1
/* The size of a `int', as computed by sizeof. */
#define SIZEOF_INT 4
</programlisting>

</sect2> <!-- autoconf -->


<sect2 id="automake">
<title>Automake</title>

<para>
(... to be written ...)
</para>

</sect2> <!--automake  -->


<sect2 id="automake-manager">
<title>KDevelop's &automanag;</title>

<figure id="screenshot-automake-manager" float="1">
<title>A screenshot of the automake manager</title>
<mediaobject>
<imageobject><imagedata fileref="automake-manager.png"/></imageobject>
</mediaobject>
</figure>

</sect2> <!-- automake-manager -->


<sect2 id="automakelibrary">
<title>Building and Installing Libraries</title>

<para>
<itemizedlist>
<listitem><para>
  -rpath
</para></listitem>
<listitem><para>
  PIC
</para></listitem>
<listitem><para>
  static
</para></listitem>
<listitem><para>
  plugins: no-undefined
</para></listitem>
</itemizedlist>
</para>

</sect2> <!-- automakelibrary -->

</sect1> <!-- autoproject -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="customproject">
<title>Custom Makefiles and Build Scripts</title>
<indexterm zone="customproject"><primary><filename>Makefile</filename></primary></indexterm>
<indexterm zone="customproject"><primary><filename>build.xml</filename></primary></indexterm>

<para>
(... to be written ...)
</para>

</sect1> <!-- customproject -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="compileroptions">
<title>Compiler Options</title>

<para>
(... to be written ...)
</para>

</sect1> <!-- compileroptions -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="makeoptions">
<title>Make Options</title>

<para>
(... to be written ...)
</para>

</sect1> <!-- makeoptions -->

</chapter> <!-- project-management -->

<!-- ====================================================================== -->

<chapter id="adv-project-management">
<title>Advanced Project Management</title>
<indexterm zone="adv-project-management"><primary>&automake;</primary></indexterm>

<sect1 id="buildconfigurations">
<title>Multiple Build Configurations</title>
<indexterm zone="buildconfigurations"><primary>build configurations</primary><secondary>multiple</secondary></indexterm>

<para>
(... to be written ...)
</para>

</sect1> <!-- buildconfigurations -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="crosscompiling">
<title>Cross-Compiling</title>
<indexterm zone="crosscompiling"><primary>cross compiling</primary></indexterm>
<indexterm zone="crosscompiling"><primary>compiling</primary><secondary>cross</secondary></indexterm>
<indexterm zone="crosscompiling"><primary><option>--host</option></primary></indexterm>

<para>
When you have suitable cross compilers available, you can cross compile your
programs for processors and operating systems different from the system where
&kdevelop; and the compiler is running. The &gnu; compiler collection GCC can
be configured and compiled as a cross compiler if you compile it yourself.
Consult the <ulink url="info://gcc/Cross-Compiler">GCC info pages</ulink> for
more information. Some Linux distributions also provide binary packages.
</para>

<para>
An automake based package can easily be cross-compiled by specifying the
<option>--host</option> option to the configure script and setting the
<envar>CC</envar> and <envar>CXX</envar> environment variables to the
respective cross compiler binaries. Often you want to switch between a
the cross-compiled version of your application and one compiled for your
development system. For this, it is advantageous to use &kdevelop; capability
of creating multiple build configurations, as explained in
<xref linkend="buildconfigurations"/>. Once you have created a new build
configuration for cross-compiling in the
<menuchoice><guimenu>Project</guimenu>
<guimenuitem>Project Options...</guimenuitem></menuchoice> dialog, add
the option
</para>

<para><screen>
<option>--host=</option><replaceable>platform</replaceable>
</screen></para>

<para>
to the configure options. The <replaceable>platform</replaceable> name
is a tuple of the form
</para>

<programlisting>cpu-vendor-os</programlisting>
<para>or</para>
<programlisting>cpu-vendor-kernel-os</programlisting>

<para>
For many combinations, you can use a short form, for instance
<wordasword>i386-linux</wordasword> or <wordasword>arm-elf</wordasword>.
</para>

</sect1> <!-- crosscompiling -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="qtembedded">
<title>Qt/Embedded</title>
<indexterm zone="qtembedded"><primary>embedded</primary><secondary>Qt</secondary></indexterm>
<indexterm zone="qtembedded"><primary>Qt/Embedded</primary></indexterm>
<indexterm zone="qtembedded"><primary>Qtopia</primary></indexterm>
<indexterm zone="qtembedded"><primary>framebuffer</primary></indexterm>

<para>
&qte; is a version of the &qt; library that does not use the X window
system, but draws directly to the framebuffer on Linux systems. It is
therefore interesting for embedded systems which have tight restrictions
on the memory usage of the whole system. Its API is fully compatible with
the one of the X11 version.
</para>

<para>
Developing an application for &qte; with &kdevelop; is not very different
from developing a program for the X11 version of &qt;. In fact, you can use the
same codebase for both versions. If you use the autoproject project
management, you switch to the embedded version by passing the argument
<option>--enable-embedded</option> to the configure script. You can set
this in the <menuchoice><guimenu>Project</guimenu>
<guimenuitem>Project Options...</guimenuitem></menuchoice> dialog under
<guilabel>Configure Options</guilabel>. With the option
<option>--with-qt-dir=DIR</option> you set the directory in which &qte;
is installed.
</para>

<para>
After configuring and compiling your application with these options, it will
link with the <filename>libqpe.so</filename> library. This version of your
application will not normally run when you use X11. In order to test it,
run it under the control of the program <application>qvfb</application>
(Qt Virtual Frame Buffer). This is done by starting
<application>qvfb</application> and then starting your application with
</para>

<para><screen><command>
app <option>-qws</option> <option>-display QVFb:0</option>
</command></screen></para>

<para>
Naturally, when you have a working version of your application, you
will want to use it on the target processor. For this, it will probably
be convenient to create multiple build configurations, as explained above,
so that you can quickly switch between the version running on your development
system and the version running on the target system.
</para>

<para>
Applications for &qte; normally run as single applications on the
device they are designed for. Trolltech also supports Qtopia, which is a
collection of applications for PIM, web browsing and various other areas that
work together in a consistent manner. It is the standard environment for
instance on the Sharp Zaurus. You can write applications that integrate into
this environment by using the Qtopia SDK. This implies making your application
class a subclass of <classname>QPEApplication</classname> and linking to the
library <filename>libqpe.so</filename>. If you develop your application with
the autoproject project management, you have to add
<option>--enable-qtopia</option> to the configure options.
</para>

</sect1> <!-- qtembedded -->

</chapter> <!-- adv-project-management -->

<!-- ====================================================================== -->

<chapter id="debugger">
<title>The Debugger Interface</title>
<indexterm zone="debugger"><primary>debugger</primary></indexterm>

<para>
For C and C++, &kdevelop; contains an internal debugger that is directly
integrated with the editor. Technically, it is implemented as a frontend
that uses the portable &gnu; debugger <application>gdb</application> through
a pipe. The debugger can be started in several ways:
</para>

<itemizedlist>
<listitem>
<para>
With <menuchoice><guimenu>Debug</guimenu><guimenuitem>Start</guimenuitem></menuchoice>,
the main program of your project is loaded into the debugger.
</para>
</listitem>

<listitem>
<para>
Using <menuchoice><guimenu>Debug</guimenu>
<guimenuitem>Start (other)</guimenuitem>
<guimenuitem>Examine core file</guimenuitem></menuchoice> you load a core file
into memory, which is generated by the operating system kernel when the
program has crashed (The generation of core files may be switched off on your
system, see <application>ulimit(1)</application>). This is useful for a
post-mortem analysis of a program.
</para>
</listitem>

<listitem>
<para>
With <menuchoice><guimenu>Debug</guimenu>
<guimenuitem>Start (other)</guimenuitem>
<guimenuitem>Attach to process</guimenuitem></menuchoice> you invoke the
debugger on an already running program. You will be shown a
process list where you can select the process which the debugger
should take over.
</para>
</listitem>

<listitem>
<para>
Note that debugging is only possible if your project has been compiled with
debugging information enabled. It can be activated in the
<guibutton>Compiler options</guibutton> dialog. When this option is switched
on, the compiler generates additional data which allows the debugger to
associate file names and line numbers with addresses in the executable.
</para>
</listitem>
</itemizedlist>

<para>
The debugger frontend offers several views <quote>into</quote> the process:
</para>

<itemizedlist>
<listitem>
<formalpara>
<title>Variables</title>
<indexterm zone="debugger"><primary>watch variables</primary></indexterm>
<para>
This window lists the values of all local variables at the current execution
point of the program. It covers the variables in the complete call stack,
i.e.  the function where the process was interrupted, the function that called
this function, and so on up to <function>main()</function> function.
</para>
</formalpara>

<para>
Another branch in the variables contains watch variables. You can configure
yourself which variables are shown here. Both local and global variables can
be watched. You can add variables either by clicking on the
<guibutton>Add</guibutton> button or pressing <keycap>RETURN</keycap> while
the <guilabel>Watch</guilabel> item is selected. They can be removed again
via the context menu.
</para>
</listitem>

<listitem>
<formalpara>
<title>Breakpoints</title>
<indexterm zone="debugger"><primary>breakpoints</primary></indexterm>
<para>
(... to be written ...)
</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title>Frame Stack</title>
<indexterm zone="debugger"><primary>frame stack</primary></indexterm>
<para>
(... to be written ...)
</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title>Disassemble</title>
<indexterm zone="debugger"><primary>disassemble</primary></indexterm>
<para>
(... to be written ...)
</para>
</formalpara>
</listitem>

</itemizedlist>


<sect1 id="settingbreakpoints">
<title>Setting Breakpoints</title>

<para>
(... to be written ...)
</para>

</sect1> <!-- settingbreakpoints -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id ="debuggeroptions">
<title>Options</title>

<formalpara>
<title>Display Mangled Names</title>
<indexterm zone="debugger"><primary>name mangling</primary></indexterm>
<indexterm zone="debugger"><primary>mangling</primary><secondary>name</secondary></indexterm>

<para>
In C++, function names in the executable are <quote>mangled</quote>, i.e. the function
names include information about the argument types. This is necessary in
order to support overloading of functions. The mangling algorithm is not
standardized and differs even between different versions of the
&gnu; C++ compiler.
</para>
</formalpara>

<para>
In the disassembling window, normally unmangled names are displayed, so
function signatures appear in the similar way as in the source code, so
they are easily readable. Alternatively, you can decide to see mangled names.
</para>

<formalpara>
<title>Try Setting BPs on Lib Load</title>
<indexterm zone="debugger"><primary>lazy breakpoints</primary></indexterm>
<indexterm zone="debugger"><primary>breakpoints</primary><secondary>lazy</secondary></indexterm>

<para>
The debugger backend <application>gdb</application> does not allow to set
breakpoints within code that is not currently loaded. In a highly modular
application, where often code is only loaded on demand as a plugin (using
the libc function <function>dlopen(3)</function>), this can be inconvenient.
Therefore, &kdevelop; rolls its own support for breakpoints in shared
libraries. If you set this option, it allows you to set breakpoints in
libraries which are not loaded. Then, whenever <application>gdb</application>
notifies that a library is loaded, &kdevelop; tries to set the pending
breakpoints.
</para>
</formalpara>

<formalpara>
<title>Enable Floating Toolbar</title>
<indexterm zone="debugger"><primary>debugger toolbar</primary></indexterm>
<indexterm zone="debugger"><primary>toolbar</primary><secondary>debugger</secondary></indexterm>

<para>
(... to be written ...)
</para>
</formalpara>

</sect1> <!-- debuggeroptions -->

</chapter> <!-- debugger -->

<!-- ====================================================================== -->
<!-- ### Questionable, probably not IDE-specific enough. Check later again.
<chapter id="python">
<title>Python</title>

<para>...
</para>

</chapter> --> <!-- python -->

<!-- ====================================================================== -->
<!-- ### Questionable, probably not IDE-specific enough. Check later again.
<chapter id="php">
<title>PHP</title>

<para>...
</para>
</chapter> --> <!-- php -->

<!-- ====================================================================== -->

<chapter id="cvs">
<title>Using CVS</title>
<indexterm zone="cvs"><primary>CVS</primary></indexterm>
<indexterm zone="cvs"><primary>revision control</primary></indexterm>

<sect1 id="cvs-basics">
<title>&CVS; Basics</title>

<para>
&CVS; is the revision control system which many open source projects -
including &kde;&mdash;are using. It stores all sources codes in a central place,
called the <emphasis>repository</emphasis>.  From the repository, developers
can check out a current version of the project or snapshots of it at arbitrary
points of time. In contrast to some other revision control systems, it is not
necessary to <emphasis>lock</emphasis> files one wants to work on. So
development can be highly parallelized.
</para>

<para>
Whenever a developer has finished a task, he <emphasis>commits</emphasis> his
code (accompanied by a log message). &CVS; takes the job to merge the changes
made by several developers. It can of course happen that developers work on
the same piece of code, resulting in a conflicting set of changes (in practice
this occurs seldom, and is often a sign of a lack of communication). In this
case &CVS; rejects a commit; only after all conflicts are resolved, a file can
be committed.
</para>

<para>
So far, this has been a description of the basic features of &CVS; one usually
has to cope with. But &CVS; can provide a lot more: One can  maintain several
branches of a project (e. g. &kde; 1.1.2 and &kde; 2 were branches in &kde;'s
development tree), merge changes from one branch to another, ask for
differences between revisions, the revision history of files etc.
</para>

<para>
&CVS; is implemented as a client-server system. As a user, all communication
with the repository goes through the command line program &cvs;. A higher
level user interface is available through frontends like
<application>Cervisia</application> (<ulink url="http://cervisia.sf.net"/>)
or <application>TkCVS</application> (<ulink url="http://tkcvs.sf.net"/>).
In &kdevelop;, only a small part of the &cvs; functionality which is
important for your daily work can be used directly.
</para>

<para>
Basic knowledge of &CVS; usage is assumed. In particular, you should know
how to checkout a given project from the repository. We recommend the
book <quote>Open Source Development With CVS</quote> by Karl Fogel which is freely
distributed (except for the non-technical chapters). See
<ulink url="http://cvsbook.red-bean.com/cvsbook.html"/>.
</para>

</sect1> <!-- cvs-basics -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="cvs-commands">
<title>&CVS; Commands in &kdevelop;</title>

<para>
In the file views, the following context menu items are available:
</para>

<itemizedlist>

<listitem>
<formalpara>
<title>Add to Repository</title>
<para>Prepares the marked file for addition to the repository. The file
is transferred to the repository when you commit it (or the containing
directory) the next time.
</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title>Remove from Repository</title>
<para>
Prepares a file for removal from the repository. This also deletes
the file on the local file system, so use this feature with care!
</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title>Update</title>
<para>
Runs <command>cvs update</command> to merge any changes from other
users into your working directory. When you use this menu item over
a directory, the update normally happens recursively, except if you
have disabled this in the configuration file <filename>.cvsrc</filename>.
</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title>Commit</title>
<para>
Runs <command>cvs commit</command> to upload any locally made changes
to the repository. Note that you should update before doing this.
Otherwise, when another user has committed his own changes before,
&CVS; may give you an error message.
</para>
</formalpara>
</listitem>

</itemizedlist>

<para>
All these commands are invoked as subprocesses by &kdevelop; without any
further command line options or environment variables. This may be a
problem when the connection with the &CVS; server goes through a
&ssh; connection and requires that you enter your password each time
you commit or update. This is for instance necessary when your project is
hosted on <filename>sourceforge.net</filename>. Workarounds for this
problem are described on the CVS/SSH FAQ which you can find in the
SourceForge documentation.
</para>

</sect1> <!-- cvs-basics -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="cvs-behind">
<title>Behind the Scenes</title>

<sect2 id="cvs-behind-workdir">
<title>What &CVS; Records in the Working Directory</title>

<para>
(... to be written ...)
</para>
</sect2> <!-- cvs-behind-workdir -->

</sect1> <!-- cvs-behind -->

</chapter> <!-- cvs -->

<!-- ====================================================================== -->

<chapter id="external-progs">
<title>Leveraging External Programs</title>
<indexterm zone="external-progs"><primary>programs</primary><secondary>external</secondary></indexterm>

<para>
Although &kdevelop; is a so-called <quote>Integrated</quote> development environment, it
will never contain all features that you may want to use, and the
capabilities of its editor will never suffice to perform often-used text
processing tasks. As a genuine UNIX program, &kdevelop; contains several
possibilities to start external programs, plugin external programs to work
on files, or use external filters to process the content of the editor.
</para>

<para>
The most general and simple feature of this kind is the tool menu, which you
can freely configure. This is done in the <menuchoice><guimenu>Settings</guimenu>
<guimenuitem>Configure KDevelop...</guimenuitem></menuchoice>.
dialog under <guibutton>External tools</guibutton>.
</para>

<para>
Other tools will be discussed in the chapter <xref linkend="plugin-tools"/>.
</para>

</chapter> <!-- external-progs -->


<!-- ====================================================================== -->

<chapter id="credits">
<title>Credits</title>

<sect1 id="credits-contributions">
<title>Contributions</title>

<para>
<itemizedlist>
  <listitem><para>
  The initial contents of this manual were witten by Bernd Gehrmann <email>bernd@kdevelop.org</email> and Caleb Tennis <email>caleb@aei-tech.com</email>.
  </para></listitem>
  <listitem><para>
  The <link linkend="automake-manager-summary">Summary of &automanag;</link> and <link linkend="automake-manager-operation">Automake Manager Operation</link> chapters were written by Ian Wadham, <email>ianw@netspace.net.au</email>).
  </para></listitem>
</itemizedlist>
</para>

</sect1> <!-- credits-contributions -->

</chapter> <!-- credits -->

<!-- ====================================================================== -->

<appendix id="app-menus">
<title>Menus and Toolbars Survey</title>

<para>
(... to be written ...)
</para>

</appendix> <!-- app-menus -->

<!-- ====================================================================== -->

<appendix id="app-shortcuts">
<title>Shortcut Keys</title>

<para>
(... to be written ...)
</para>

</appendix> <!-- app-shortcuts -->

<!-- ====================================================================== -->

<appendix id="plugin-tools">
<title>Plugin Tools</title>

<indexterm zone="plugin-tools">
  <primary>plugins</primary></indexterm>

<para>
&kdevelop; contains a large number of little tools that help you to perform
certain task. Most of them are realized as plugins. This means, if you do not
like one of them, you can simply  disable it in the
<guimenuitem>Project options</guimenuitem> dialog under
<guibutton>Plugins</guibutton> (for project-wide plugins) or under
<menuchoice><guimenu>Settings</guimenu>
<guimenuitem>Configure KDevelop...</guimenuitem></menuchoice>.
Plugins which are switched off do not clutter your menus and are not loaded
into memory.
</para>

<itemizedlist>
<listitem>
<formalpara>
<title>The <command>abbrev</command> Plugin</title>
<indexterm zone="plugin-tools"><primary><command>abbrev</command></primary></indexterm>

<para>
This plugin expands abbreviations into frequently used code snippets. It is
activated by pressing <keycombo><keycap>Ctrl</keycap>
<keycap>Space</keycap></keycombo>. For example, when you enter
<literal>"ife"</literal> into a C++ in the editor and press
<keycombo><keycap>Ctrl</keycap><keycap>Space</keycap></keycombo>, you obtain
an <literal>if-else</literal> code template and save some key strokes. The set
of supported abbreviations depends on the programming language of the edited
file. For example, for PHP you will obviously be interested in other code
templates than for Java.
</para>
</formalpara>

<para>
The set of code templates is configurable. You can see
which ones are available in the <menuchoice><guimenu>Settings</guimenu>
<guimenuitem>Configure KDevelop...</guimenuitem></menuchoice>
dialog under <guibutton>Abbreviations</guibutton>
</para>
</listitem>

<listitem>
<formalpara>
<title>The <command>filter</command> Plugin</title>
<indexterm zone="plugin-tools"><primary><command>filter</command></primary></indexterm>

<para>
This offers two features. If you select <menuchoice><guimenu>Tools</guimenu>
<guimenuitem>Execute command</guimenuitem></menuchoice>, you can enter a shell
command. The output of this command is inserted into the editor buffer when
you hit the <guibutton>Start</guibutton> button.
</para>
</formalpara>

<para>
A related feature is available under
<menuchoice><guimenu>Tools</guimenu><guimenuitem>Filter selection through
command...</guimenuitem></menuchoice>.  In order to use this, you must
select a text area in the editor. If you now enter a shell command and hit
the <guibutton>Start</guibutton> button, the command is started and the
selection used as the standard input for it. The standard output of the
command is then inserted into the editor.
</para>
</listitem>

<listitem>
<formalpara>
<title>The &doxygen; Plugin</title>
<indexterm zone="plugin-tools"><primary>&doxygen;</primary></indexterm>
<indexterm zone="plugin-tools"><primary>documentation tool</primary></indexterm>
<indexterm zone="plugin-tools"><primary>API documentation</primary></indexterm>

<para>
This one helps you to use the &doxygen; API documentation tool
(<ulink url="http://www.doxygen.org"/>). You can select
<menuchoice><guimenu>Project</guimenu>
<guimenuitem>Run Doxygen</guimenuitem></menuchoice> to generate API
documentation for your current project, based on the configuration given by
the file <filename>Doxyfile</filename> in your project directory.
</para>
</formalpara>

<para>
Furthermore, you can configure &doxygen; in the
<menuchoice><guimenu>Project</guimenu>
<guimenuitem>Project options...</guimenuitem></menuchoice> dialog. This dialog
is very similar to the &doxywizard; tool.
</para>
</listitem>

<listitem>
<formalpara>
<title>The &ctags; Plugin</title>
<indexterm zone="plugin-tools"><primary>&ctags;</primary></indexterm>

<para>
Although the class browser gives you extensive insight into the symbols and
classes of your project, you may also want to use the ctags tool. In particular,
this one supports a lot more language than the class browser.
</para>
</formalpara>

<para>
You activate this plugin under <menuchoice><guimenu>Tools</guimenu>
<guimenuitem>CTags...</guimenuitem></menuchoice>. When you start it the first
time, you will be asked to generate a search database first. When you accept
this, the &ctags; program will be started and will create a file named
<filename>tags</filename> in your project directory. This is a text file containing
all symbols of your source files.
</para>

<para>
You can search in the symbol database in two ways: when the
<guilabel>Regular expression match</guilabel> box is checked, the text you
enter will be interpreted as a regular expression (POSIX flavor) and matched
with the existing symbols. For example, the text <literal>.*Widget</literal>
will search for all symbols ending with <literal>Widget</literal>. If the
box is not checked, the search will be verbatim.
</para>

<para>
When searching, you will get a list of the matched symbols, accompanied with
the line numbers where they are defined. You jump to the respective point by
clicking on the list.
</para>

<para>
For some languages, &ctags; distinguishes different kinds of symbols. For
example, Python has classes and functions. You can selectively search only
for classes by checking the respecting kinds in the dialog.
</para>

<para>
The symbol database is normally not updated when your sources change.
Consequently, after a while the line numbers will not be correct anymore
and newly added classes and functions will be missing. Therefore you should
update the <filename>tags</filename> file in regular intervals by pressing
the button <guibutton>Regenerate</guibutton>.
</para>
</listitem>

<listitem>
<formalpara>
<title>The <command>astyle</command> Plugin</title>
<indexterm zone="plugin-tools"><primary><command>astyle</command></primary></indexterm>
<indexterm zone="plugin-tools"><primary><application>Artistic Style</application></primary></indexterm>
<indexterm zone="plugin-tools"><primary>indentation</primary></indexterm>

<para>
(... to be written ...)
</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title>The <command>regexptest</command> Plugin</title>
<indexterm zone="plugin-tools"><primary><command>regexptest</command></primary></indexterm>
<indexterm zone="plugin-tools"><primary>debugging</primary><secondary>regular expressions</secondary></indexterm>
<indexterm zone="plugin-tools"><primary>regular expressions</primary><secondary>debugging</secondary></indexterm>

<para>
Designing with regular expressions can be hard work. Often the first try at an
expression matches too many strings. In particular, when working with a
compiled language, the turnaround times when debugging a regular expression
can be awkward. The regexptest plugin allows you to directly explore the
changes in a regular expression. It is activated by choosing
<menuchoice><guimenu>Tools</guimenu>
<guimenuitem>Debug Regular Expression...</guimenuitem></menuchoice>.
</para>
</formalpara>

<para>
In the flavor group box, you can choose the flavor of the regular expression
engine used. Currently supported is the flavor defined in the POSIX standard,
which is used by the &grep; program, and the extended POSIX syntax used by the
program &egrep;.
</para>

<para>
When you enter an expression, you get immediate feedback about any syntax
errors in it. By entering a text under <guilabel>Test string</guilabel>,
you can see whether the expression matches this string. In particular, if
your regular expression includes groups, such as <literal>([a-z])</literal>,
the content of the matched subgroups will be shown in a list box.
</para>
</listitem>

<listitem>
<formalpara>
<title>The <command>konsole</command> Plugin</title>
<indexterm zone="plugin-tools"><primary><command>konsole</command></primary></indexterm>
<indexterm zone="plugin-tools"><primary>terminal</primary><secondary>embedded</secondary></indexterm>

<para>
(... to be written ...)
</para>
</formalpara>
</listitem>

</itemizedlist>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="parts-survey">
<title>Survey</title>

<para>
&kdevelop; offers extensible modules, or parts, to be loaded at runtime and on demand.  This allows developers to only turn on features that they need or want for their development.
</para>

<para>
Some of the parts are considered <link linkend="table-global-parts">global</link>&mdash;that is, they effect the entire operation of &kdevelop;. For example, the uimode part allows a developer to select which user interface they wish to use.
</para>

<para>
Other parts are <link linkend="table-project-parts">project specific</link>, and are only utilized when a project of that type is loaded.  The Automake Manager, for example, only needs to be active when an Automake based project is currently loaded.  Otherwise, this part will not be active.
</para>

<para>
Active parts can have many effects on &kdevelop;.  Depending on their function, they may add extra menus, extra menu items, extra tool buttons, etc.
</para>

<table id="table-project-parts">
<title>Project Management Parts in &kdevelop;</title>

<tgroup cols="2"><tbody>
<row>
  <entry>antproject</entry>
  <entry>ANT Project Manager (Java applications)</entry>
</row>
<row>
  <entry>autoproject</entry>
  <entry>Automake Project Manager</entry>
</row>
<row>
  <entry>customproject</entry>
  <entry>Custom Project Manager</entry>
</row>
<row>
  <entry>trollproject</entry>
  <entry>QMake based Project Manager</entry>
</row>
</tbody></tgroup>
</table>

<table id="table-global-parts">
<title>Global Parts in &kdevelop;</title>

<tgroup cols="2"><tbody>
<row><entry>Part Name</entry><entry>Description</entry></row>
<row><entry>appwizard</entry><entry>New Project Wizard</entry></row>
<row><entry>history</entry><entry></entry></row>
<row><entry>konsole</entry><entry>Embedded Konsole</entry></row>
<row><entry>editor-chooser</entry><entry>Chooses an internal text editor</entry></row>
<row><entry>doctreeview</entry><entry>Documentation Viewer</entry></row>
<row><entry>openwith</entry><entry></entry></row>
<row><entry>fileselector</entry><entry>A file selection widget</entry></row>
<row><entry>uimode</entry><entry>Customize the UI mode</entry></row>
<row><entry>texttools</entry><entry>Additional text tools</entry></row>
<row><entry>tipofday</entry><entry>A tip of the day</entry></row>
<row><entry>grepview</entry><entry>A graphical grep utility</entry></row>
<row><entry>cvs</entry><entry>CVS Support</entry></row>
<row><entry>tools</entry><entry></entry></row>
<row><entry>regexptest</entry><entry>A regular expression tester</entry></row>
<row><entry>abbrev</entry><entry>Abbreviation Expansion</entry></row>
<row><entry>filter</entry><entry></entry></row>
<row><entry>valgrind</entry><entry>A graphical valgrind frontend</entry></row>
</tbody></tgroup>
</table>

<table>
<title>Language Support Parts in &kdevelop;</title>
<tgroup cols="2">
<tbody>
<row><entry>cppsupport</entry><entry>Support for C/C++</entry></row>
<row><entry>fortransupport</entry><entry>Support for Fortran</entry></row>
<row><entry>javasupport</entry><entry>Support for Java</entry></row>
<row><entry>perlsupport</entry><entry>Support for Perl</entry></row>
<row><entry>phpsupport</entry><entry>Support for PHP</entry></row>
<row><entry>pythonsupport</entry><entry>Support for Python</entry></row>
</tbody></tgroup>
</table>

<table>
<title>Project Specific Parts in &kdevelop;</title>
<tgroup cols="2"><tbody>
<row><entry>astyle</entry><entry></entry></row>
<row><entry>buglist</entry><entry></entry></row>
<row><entry>classview</entry><entry>Classview Manager</entry></row>
<row><entry>ctags</entry><entry></entry></row>
<row><entry>debugger</entry><entry>&gnu; Debugger Manager</entry></row>
<row><entry>diff</entry><entry></entry></row>
<row><entry>distpart</entry><entry></entry></row>
<row><entry>doxygen</entry><entry></entry></row>
<row><entry>fileview</entry><entry></entry></row>
<row><entry>javadebugger</entry><entry></entry></row>
<row><entry>manager</entry><entry></entry></row>
<row><entry>nedit</entry><entry></entry></row>
<row><entry>outputviews</entry><entry></entry></row>
<row><entry>perforce</entry><entry></entry></row>
<row><entry>qeditor</entry><entry></entry></row>
<row><entry>scripting</entry><entry></entry></row>
<row><entry>scriptproject</entry><entry></entry></row>
<row><entry>sourcenav</entry><entry></entry></row>
<row><entry>svn</entry><entry></entry></row>
<row><entry>visualboyadvance</entry><entry></entry></row>
<row><entry>windowmenu</entry><entry></entry></row>
</tbody></tgroup>
</table>

</sect1> <!-- parts-survey -->

</appendix> <!-- plugin-tools -->

<!-- ====================================================================== -->

<appendix id="app-uimodes-examples">
<title>&kdevelop; User Interface Mode Examples</title>

<sect1 id="ideal-desc">
<title>IDEAl Mode</title>

<para>
Click <link linkend="uimodes-survey">here</link> to return to the modes survey.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="kdevelop-ideal-mode.png" format="PNG"/>
    </imageobject>
    <textobject><phrase>Screenshot</phrase></textobject>
    <caption><para>&kdevelop; IDEAl mode</para></caption>
  </mediaobject>
</screenshot>

<para>
Click <link linkend="uimodes-survey">here</link> to return to the modes survey.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="kdevelop-ideal-mode-0.png" format="PNG"/>
    </imageobject>
    <textobject><phrase>Screenshot</phrase></textobject>
    <caption><para>&kdevelop; IDEAl mode, closed tabs</para></caption>
  </mediaobject>
</screenshot>

<para>
This example screenshot demonstrates one of the main virtues of IDEAl mode. There is a maximum workspace available. Yet any tool view is readily available by clicking on the according tab.
</para>
<para>
You will most probably need some time to get accustomed to the icons in the tab bar. If you got lost, just position the mouse over a tab and wait a few seconds. A short tool tip description will pop up. In this screenshot the <quote>Automake Manager</quote> tool tip is shown as an example. It describes the lower tab in the right tab bar.
</para>

<para>
Click <link linkend="uimodes-survey">here</link> to return to the modes survey.
</para>

</sect1> <!-- ideal-desc -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="mdi-desc">
<title>Child Frame Windows Mode</title>

<para>
Click <link linkend="uimodes-survey">here</link> to return to the modes survey.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
    <imagedata fileref="kdevelop-mdi-mode.png" format="PNG"/>
    </imageobject>
    <textobject><phrase>Screenshot</phrase></textobject>
    <caption><para>&kdevelop; child frame windows mode</para></caption>
  </mediaobject>
</screenshot>

<para>
Click <link linkend="uimodes-survey">here</link> to return to the modes survey.
</para>

</sect1> <!-- mdi-desc -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="tabbed-desc">
<title>Tabbed Pages Mode</title>

<para>
Click <link linkend="uimodes-survey">here</link> to return to the modes survey.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="kdevelop-tabbed-mode.png" format="PNG"/>
    </imageobject>
    <textobject><phrase>Screenshot</phrase></textobject>
    <caption><para>&kdevelop; tabbed pages mode</para></caption>
  </mediaobject>
</screenshot>

<para>
Click <link linkend="uimodes-survey">here</link> to return to the modes survey.
</para>

</sect1> <!-- tabbed-desc -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="toplevel-desc">
<title>Toplevel Windows Mode</title>

<para>
Click <link linkend="uimodes-survey">here</link> to return to the modes survey.
</para>

<screenshot>
  <mediaobject>
    <imageobject>
      <imagedata fileref="kdevelop-toplevel-mode.png" format="PNG"/>
    </imageobject>
    <textobject><phrase>Screenshot</phrase></textobject>
    <caption><para>&kdevelop; toplevel windows mode</para></caption>
  </mediaobject>
</screenshot>

<para>
Click <link linkend="uimodes-survey">here</link> to return to the modes survey.
</para>

</sect1> <!-- toplevel-desc -->

</appendix> <!-- app-uimodes-examples -->

<!-- ====================================================================== -->

<appendix id="app-misc-info">
<title>Further Information</title>
<sect1 id="gettinginformation">
<title>Getting Information</title>
<para>
(... to be written ...)
</para>
</sect1> <!-- gettinginformation -->

<sect1 id="app-reporting-bugs">
<title>Reporting Bugs</title>
<para>
(... to be written ...)
</para>
</sect1> <!-- app-reporting-bugs -->

<sect1 id="app-licensing">
<title>Licensing</title>
&underFDL;
&underGPL;
</sect1> <!-- app-licensing -->
</appendix> <!-- app-misc-info -->

<!-- ====================================================================== -->

<appendix id="app-changelog">
<title>Changes</title>
<sect1 id="changes">
<title>Changes to This Document</title>
<para>
<itemizedlist>
<listitem><para>
2003-01-03&mdash;Started this Changelog
</para></listitem>
</itemizedlist>
</para>
</sect1> <!-- changes -->
</appendix> <!-- app-changelog -->

<!-- ====================================================================== -->

<!--  Note (bp, 2003-09-04): <bibliography> should remain the last appendix section because of a (meinproc???) bug which sends the Next selection in circles back to it. -->

<appendix id="app-bibliography">
<title>Bibliography</title>

<para>(... to be written ...)</para>

<!-- ### temporarily disabled as the <bibliography> markup is not used by KDE Docbook
     (see: Lauri Watts: The KDE DocBook Authors guide, Revision 1.00.00: 2003,
                        Chapter 19. Tags we do not use)
<bibliography>

<biblioentry>
<title><ulink url="info://make/Top">&gnu; Make Manual</ulink></title>
<authorgroup>
<author><firstname>Richard M.</firstname><surname>Stallman</surname></author>
<author><firstname>Roland</firstname><surname>McGrath</surname></author>
</authorgroup>
</biblioentry>

<biblioentry>
<title><ulink url="info://automake/Top">&gnu; Automake</ulink></title>
<authorgroup>
<author><firstname>David</firstname><surname>MacKenzie</surname></author>
<author><firstname>Tom</firstname><surname>Tromey</surname></author>
</authorgroup>
</biblioentry>

<biblioentry>
<title><ulink url="info://autoconf/Top">&gnu; Autoconf</ulink></title>
<authorgroup>
<author><firstname>David</firstname><surname>MacKenzie</surname></author>
<author><firstname>Ben</firstname><surname>Elliston</surname></author>
</authorgroup>
</biblioentry>

<biblioentry>
<title><ulink url="info://gcc/Top">Using the &gnu; Compiler Collection</ulink></title>
<author><firstname>Richard M.</firstname><surname>Stallman</surname></author>
</biblioentry>

<biblioentry>
<title><ulink url="info://libtool/Top">&gnu; Libtool</ulink></title>
<authorgroup>
<author><firstname>Gordon</firstname><surname>Matzigkeit</surname></author>
<author><firstname>Alexandre</firstname><surname>Oliva</surname></author>
<author><firstname>Thomas</firstname><surname>Tanner</surname></author>
<author><firstname>Gary V.</firstname><surname>Vaughan</surname></author>
</authorgroup>
</biblioentry>

<biblioentry>
<title>GNU Autoconf, Automake, and Libtool</title>
<edition>1st edition</edition>
<pubdate>October 2000</pubdate>
<authorgroup>
<author><firstname>Gary V.</firstname><surname>Vaughan</surname></author>
<author><firstname>Ben</firstname><surname>Elliston</surname></author>
<author><firstname>Tom</firstname><surname>Tromey</surname></author>
<author><firstname>Ian Lance</firstname><surname>Taylor</surname></author>
</authorgroup>
<publisher><publishername>New Riders Publishing</publishername></publisher>
<isbn>ISBN 1578701902</isbn>
</biblioentry>


<biblioentry>
<title>Advanced Programming in the UNIX(R) Environment</title>
<edition>1st edition</edition>
<pubdate>June 1992</pubdate>
<author><firstname>W. Richard</firstname><surname>Stevens</surname></author>
<publisher><publishername>Addison-Wesley Pub Co</publishername></publisher>
<isbn>ISBN 0201563177</isbn>
</biblioentry>

<biblioentry>
<title>Thinking in C++, Volume 1: Introduction to Standard C++</title>
<edition>2nd Edition</edition>
<pubdate>April 15, 2000</pubdate>
<author><firstname>Bruce</firstname><surname>Eckel</surname></author>
<publisher><publishername>Prentice Hall</publishername></publisher>
<isbn>ISBN 0139798099</isbn>
</biblioentry>

<biblioentry>
<title>Open Source Development with CVS</title>
<edition>2nd Edition</edition>
<pubdate>October 12, 2001</pubdate>
<authorgroup>
<author><firstname>Karl</firstname><surname>Fogel</surname></author>
<author><firstname>Moshe</firstname><surname>Bar</surname></author>
</authorgroup>
<publisher><publishername>The Coriolis Group</publishername></publisher>
<isbn>ISBN 158880173X</isbn>
</biblioentry>

<biblioentry>
<title>Programming PHP</title>
<edition>1st edition</edition>
<pubdate>March 2002</pubdate>
<authorgroup>
<author><firstname>Rasmus</firstname><surname>Lerdorf</surname></author>
<author><firstname>Kevin</firstname><surname>Tatroe</surname></author>
</authorgroup>
<publisher><publishername>O'Reilly &amp; Associates</publishername></publisher>
<isbn>ISBN 1565926102</isbn>
</biblioentry>

<biblioentry>
<title>Programming Python</title>
<edition>2nd Edition</edition>
<pubdate>March 2001</pubdate>
<author><firstname>Mark</firstname><surname>Lutz</surname></author>
<publisher><publishername>O'Reilly &amp; Associates</publishername></publisher>
<isbn>ISBN 0596000855</isbn>
</biblioentry>

<biblioentry>
<title>Gui Programming With Python : Using the Qt Toolkit</title>
<edition>Bk&amp;Cd-r edition</edition>
<pubdate>January 2002</pubdate>
<author><firstname>Boudewijn</firstname><surname>Rempt</surname></author>
<publisher><publishername>Opendocs Llc</publishername></publisher>
<isbn>ISBN 0970033044</isbn>
</biblioentry>

<biblioentry>
<title>Programming Perl</title>
<subtitle>The Camel book</subtitle>
<edition>3rd Edition</edition>
<pubdate>July 2000</pubdate>
<authorgroup>
<author><firstname>Larry</firstname><surname>Wall</surname></author>
<author><firstname>Tom</firstname><surname>Christiansen</surname></author>
<author><firstname>Jon</firstname><surname>Orwant</surname></author>
</authorgroup>
<publisher><publishername>O'Reilly &amp; Associates</publishername></publisher>
<isbn>ISBN 0596000278</isbn>
</biblioentry>

<biblioentry>
<title>Learning Perl</title>
<subtitle>The Lama book</subtitle>
<edition>3rd Edition</edition>
<pubdate>July 15, 2001</pubdate>
<authorgroup>
<author><firstname>Randal L.</firstname><surname>Schwartz</surname></author>
<author><firstname>Tom</firstname><surname>Phoenix</surname></author>
</authorgroup>
<publisher><publishername>O'Reilly &amp; Associates</publishername></publisher>
<isbn>ISBN 0596001320</isbn>
</biblioentry>

</bibliography>//
-->

</appendix> <!-- app-bibliography -->

<!-- ====================================================================== -->

<index id="app-index"/>

</book>
