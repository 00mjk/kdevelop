<!doctype linuxdoc system>
<article>
<title>Manual do Utilizador do KDevelop
<author>Ralf Nolden <htmlurl url="mailto:Ralf.Nolden@post.rwth-aachen.de" name = "<Ralf.Nolden@post.rwth-aachen.de>">, A Equipa do KDevelop

<date>Versão 2.0 , Abril 11,1999
<abstract>
O Guia de Referência para o Ambiente De Desenvolvimento Integrado KDevelop para Sistemas Unix, Versão 2.0. Este manual em si é parte do Ambiente de Desenvolvimento Integrado KDevelop e é assim também licenciado sob a Licença Genérica Pública GNU; veja <ref
id="Copyright" name="Copyright"> para mais informações.
</abstract>
<toc>

<sect>Introdução
<p>
Como tudo na Terra parece ter as suas modas, o mundo da informática hoje em dia parece tender mais para a utilização de aplicações gratuitas mesmo para
fins comerciais. O projecto de aplicações gratuitas mais popular é o Linux. É já ponto acente que o Linux, (bem como outros projectos
tais como o servidor de páginas Apache, a linguagem Perl e o conjunto de ferramentas GNU), comprova que as aplicações gratuitas podem ser de tão boa qualidade como
as aplicações comerciais. Mas apesar da qualidade, o utilizador final ainda tem de sofrer com os comandos crípticos de qualquer Sistema UNIX. Para o Linux
prosperar, necessita de aplicações, tanto gratuitas como comerciais, e facilidade de utilização.

O project <idx/KDE/ tenta diminuir este fosso providenciando um ambiente gráfico fácil de utilizar e as bibliotecas necessárias para aumentar a variedade de
aplicações baseadas num ambiente gráfico (GUI) disponíveis. Mas como principalment as aplicações gratuitas são feitas nos tempos livres dos autores, a pergunta para muitos
programadores é o quanto gostam eles do seu ambiente de desenvolvimento actual. O KDevelop deseja realizar um novo grande passo: tornar a
vida do programador mais fácil e mais eficiente: produtos criados com o KDevelop podem atingir um nível superior de confiança e funcionalidade
no mesmo período de desenvolvimento.

Para atingir este objectivo, o Ambiente Integrado de Desenvolvimento KDevelop oferece muitas funcionalidades que os programadores necessitam bem como
encapsula a funcionalidade de projectos de terceiros tais como o <CODE>make</CODE> e o compilador GNU C++ e torna-os uma parte integrante, invisível, 
do processo de desenvolvimento. O KDevelop gere:

<itemize>
<item> Todas as ferramentas de desenvolvimento necessárias para programação C++ tais como compilador, linkador ('linker'), automake e
autoconf,
<item> KAppWizard, que gera aplicações base completas e prontas a utilizar,
<item> Gerador de Classes, para criar novas classes e integra-las no projecto actual,
<item> Gestão de ficheiros para fonte, headers, documentação etc. para serem incluídas no projecto,
<item> A criação de Manuais do Utilizador escritos em SGML e a geração automática de output em HTML com a aparência e funcionamento KDE,
<item> Documentação da API baseada em HTML automática para as classes do seu projecto com referências cruzadas para as bibliotecas utilizadas,
<item> Suporte para a internacionaliação da sua aplicação, permitindo aos tradutores facilmente adicionar a sua linguagem alvo ao projecto,
<item> Criação WYSIWYG (O que vê é o que obtem) de interfaces de utilização com um editor de caixas de diálogo incorporado,
<item> Depuração da sua aplicação através da integração do KDbg,
<item> Edição de imagens pixmap específicas do projecto com o KIconedit,
<item> A inclusão de qualquer outro programa de que necessite para o desenvolvimento adicionando-o ao menu "Ferramentas" de acordo com as suas necessidades individuais.
</itemize>

O KDevelop torna uma alegria trabalhar com todos os programas num local e poupa tempo automatizando processos standard de desenvolvimento
bem como dando-lhe acesso directo e transparente a toda a informação de que necessita. Os mecanismos integrados de navegação estão desenhados
para suportar requerimentos de documentação que os programadores tenham em conjunto com o seu projecto.

O visualizador de classes e o detector de erros levam-no a qualquer ponto do código do programa com um clique do rato sem ser necessário procurar ficheiros; Árvores
de ficheiros dão acesso directo aos ficheiros do projecto e o sistema integrado de ajuda oferece um acesso soberbo à documentação electrónica de qualquer ponto
dentro do ambiente gráfico.

<sect1>Alterações
<p>Desde a última actualização, o trabalho debruçou-se principalmente em três áreas diferentes: o visualizador de classes, o editor de diálogos e
a aparência e funcionamento em geral, incluindo novas funções de edição e a criação de aplicações <idx/KDE/. Por forma a conseguir tudo isto,
estamos orgulhosos de dar as boas vindas aos dois mais recentes membros da equipa, Jonas Nordin, que desenvolveu um completo visualizador e analisador gramatical de classes, e Pascal
Krahmer, que se juntou à equipa para implementar um editor de diálogos integrado. Outro trabalho tem sido feito em várias partes do ambiente, tais como um novo
diálogo <tt/grep/ permitindo a procura de expressões através de todos os ficheiros do projecto ou mesmo de todo o sistema; utilitários de configuração
melhorados; documentação revista e aumentada bem como um novo gerador de projectos.

<sect1>Sobre este Manual
<p>
Este manual do utilizador dá uma visão geral do ambiente do KDevelop e descreve brevemente o processo de desenvolvimento básico. Para mais
informação sobre assuntos específicos de programação, sugerimos a leitura do Manual de Programação KDevelop incluído com o KDevelop, que
cobre tems como compreender a estrutura das aplicações geradas e como criar aplicações <idx/KDE/ completas utilizando 
projectos de exemplo.

A estrutura deste manual está assim separada nas seguintes partes:
<itemize>
<item>Capítulo <ref id="Installation" name="Instalação">, cobre os requerimentos do sistema, instalação e configuração do ambiente 
KDevelop. <item>Capítulo <ref id="Programs" name="Programas">, diz-lhe como os programas são criados com ferramentas de desenvolvimento standard GNU e
como são construídos.
<item>Capítulo <ref id="Development with KDevelop" name="Desenvolvimento com o KDevelop">, leva-o numa pequena volta descrevendo as
principais funcionalidades do ambiente.
<item>Capítulo <ref id="Overview" name="Descrição Geral">, explica os menus e diálogos bem como os atalhos de teclado.
<item>Capítulo <ref id="The Help System" name="O Sistema de Ajuda">, mostra como utilizar o navegador de documentação incorporado e 
funções adicionais de ajuda.
<item>Capítulo <ref id="Working with the Editor" name="Trabalhar com o Editor">, explica as fucnionalidades de gestão de ficheiros e
edição.
<item>Capítulo <ref id="Projects" name="Projectos">, descreve a criação e manutenção de projectos de aplicações.
<item>Capítulo <ref id="Build Settings" name="Definições de Build">, contém uma referência sobre como definir parâmetros de compilação e linkagem bem como opções de projecto.
<item>Capítulo <ref id="The Class Browser" name="O Navegador de Classes">, diz-lhe como utilizar o potente Navegador de Classes do KDevelop.
<item>Capítulo <ref id="The Dialog Editor" name="O Editor de Diálogos">, fala do construtor de inteface gráfico integrado e de como
gera código C++.
<item>Capítulo <ref id="General Configuration" name="Configuração Genérica"> mostra como pode definir preferências globais para a utilização do KDevelop.
<item>Capítulo <ref id="Questions and Answers" name="Perguntas e Respostas">, cobre perguntas que se relacionam com a utilização do KDevelop
sob diferentes versões de sistemas Unix e resolução de problemas em geral.
</itemize>

Para iniciados na programação e novos utilizadores deste produto recomendamos que leia bem este manual antes de começar realmente
a trabalhar com o ambiente pois cobre a sua utilização com profundidade. O entendimento de como as coisas podem ser feitas da forma mais rápida poupar-lhe-á imenso
tempo procurando funcionalidades já que lhe permitirá a utilização de ferramentas de desenvolvimento de primeira classe ainda mais fácil.

<sect>Instalação<label id="Installation">
<p>
<sect1>Como obter o KDevelop
<p>
O KDevelop pode ser encontrado quer na página de Aplicações <idx/KDE/ (<htmlurl url="http://www.kde.org/current.html"
name="http://www.kde.org/current.html">) ou na página principal do KDevelop (<htmlurl
url="http://www.kdevelop.org" name="http://www.kdevelop.org">).
O KDevelop também está disponível em distribuições de Linux, tais como a SuSE 6.1.

Estamos a disponibilizar snapshots semanais do repositório CVS do KDevelop na nossa página de internet para aqueles que se querem manter actualizados com o
KDevelop. Normalmente, as snapshots não são supostamente para utilização de produção mas sim para teste de novas funcionalidades e para dar uma prespectiva
do progresso de desenvolvimento da equipa do KDevelop. Também disponibilizamos várias aplicações de terceiros que o KDevelop necessita directamente tal como
o KDoc e o KDbg.

Se estiver a sentir problemas com a compilação ou utilização do KDevelop, por favor leia a 
secção <ref id="Questions and Answers" name="Perguntas e Respostas"> deste manual ou o ficheiro "FAQ - Perguntas Colocadas Frequentemente" incluida com o pacote KDevelop. Se o seu problema não se encontrar mencionado, por favor
subscreva a lista de discussão do KDevelop em <htmlurl url="mailto:kdevelop@fara3.cs.uni-potsdam.de" name =
"kdevelop@fara3.cs.uni-potsdam.de"> enviando um e-mail com o "Assunto" vazio e com o corpo da mensagem a dizer apenas "subscribe". Pedidos e reporte de problemas
devem apenas debruçar-se sobre a utilização do ambiente KDevelop e não dirigir-se a questões que tenha sobre problemas de implementação
enquanto programa uma aplicação. De qualque forma, todos os e-mails enviados para a lista de discussão devem ser escritos em inglês, para que todos os participantes possam
tomar parte na discussão e serem capazes de prestar melhor ajuda. A lista de discussão também se dirige aqueles que estejam dispostos a contribuir
e que tenham encontrado soluções para quaisquer problemas encontrados, para que nós possamos corrigir erros e incluir esse conhecimento para prestar aos novatos uma ajuda
ainda melhor e mais qualificada.
Uma boa forma de reportar problemas é enviando o output que obtém iniciando o KDevelop da consola ou copiando e colando o
conteúdo da Janela de Mensagens interna do KDevelop.

<sect1>Requerimentos
<p>
Por forma a compilar e utilizar com sucesso o KDevelop, necessita dos seguintes programas e bibliotecas que estão disponíveis para a maior parte das plataformas
como pacotes de distribuição e podem, assim, ser facilmente instalados.
<p>
<bf>Requeridos:</bf>
<itemize>
<item>g++ 2.7.2/g++ 2.8.1/egcs 1.1 (ou compatível), disponível em <htmlurl url="http://www.gnu.org" name="http://www.gnu.org">
<item>GNU make (ou compatível), disponível em <htmlurl url="http://www.gnu.org" name="http://www.gnu.org">
<item>perl 5.004, disponível em <htmlurl url="http://www.perl.com" name="http://www.perl.com">
<item>autoconf 2.12, disponível em <htmlurl url="http://www.gnu.org" name="http://www.gnu.org">
<item>automake 1.2, disponível em <htmlurl url="http://www.gnu.org" name="http://www.gnu.org">
<item>Qt 1.42, disponível em <htmlurl url="http://www.troll.no" name="http://www.troll.no">
<item><idx/KDE/ 1.1.x, disponível em <htmlurl url="http://www.kde.org" name="http://www.kde.org">
</itemize>
<p>
<bf>Opcional:</bf>
<itemize>
<item>a2ps ou enscript para suporte de impressão
<item>ghostview ou kghostview para visualização prévia de impressão
<item>glimpse 4.0 para o índice de busca, disponível em <htmlurl url="http://glimpse.cs.arizona.edu" name="http://glimpse.cs.arizona.edu">
<item>sgmltools 1.0, disponível em <htmlurl url="http://www.sgmltools.org" name="http://www.sgmltools.org">
<item><idx/KDE-SDK/ (<bf/KDE S/oftware <bf/D/evelopment <bf/K/it) com KDoc, KSgml2Html, KTranslator (disponível em <htmlurl
url="http://developer.kde.org" name="http://developer.kde.org">)
<item>KDbg, KIconEdit (disponível em <htmlurl url="http://www.kde.org" name="http://www.kde.org">)
</itemize>

O KDevelop foi testado com SuSE Linux 5.2 num AMD K6 200, 64MB RAM e FreeBSD 3.0-Release bem como um SuSE Linux 6.0 num Intel
200 MMX, 128MB RAM.

Tanto quanto os autores sabem, SuSE Linux e FreeBSD contêm todos os pacotes necessários, incluindo a2ps e enscript como pacotes ou
rpm's, pelo que não deve ter qualquer problema a instalar as aplicações de terceiros requeridas.

<bf>Documentação:</bf>	

Para criar a documentação da biblioteca <idx/KDE/, necessita do pacote das kdelibs em código fonte disponível no seu
sistema como providenciado pelo projecto KDE ou incluido com os pacotes de código-fonte da sua distribuição e do <bf>KDoc</bf> (incluido no
<idx/KDE-SDK/).

Estamos também a oferecer uma Referência C/C++ na nossa página principal em <htmlurl url="http://www.kdevelop.com"
name="http://www.kdevelop.com"> que é integrada no navegador de documentação após a sua
instalação. Descarregue o pacote e copie o ficheiro como <tt/root/ para o seu directório <idx/KDE/  e descomprima-o <tt/tar zxvf
c_c++_reference.tar.gz/, após o que a referência estará disponível na árvore de documentação; caso contrário seleccionar o livro de referência no
navegador mostrará uma página de erro com o endereço URL da página do KDevelop oferecendo o ficheiro e descrevendo o processo de instalação.
<sect1>Compilação e Instalação
<p>
Por forma a compilar e instalar o KDevelop no seu sistema, escreva o seguinte no directório base da sua distribuição do KDevelop:

<tscreen><verb>
	&percnt ./configure
	&percnt make

	(como root)
	
	&percnt make install
</verb></tscreen>


<p>Visto que o KDevelop utiliza o <tt>autoconf</tt> não deverá ter problema a compila-lo.

Por forma a compilar a snapshot do CVS do KDevelop, escreva o seguinte:
<tscreen><verb>
	&percnt make -f Makefile.cvs
	&percnt ./configure
	&percnt make

	mude para `root` e escreva:
	
	&percnt make install
</verb></tscreen>

Se o comando make do seu sistema for <tt/gmake/, escreva <tt/gmake/ em vez de <tt/make/.

<sect1>Iniciar o KDevelop
<p>
Se utiliza o <idx/KDE/ como gestor de janelas, o KDevelop pode ser iniciado escolhendo
"K"&rarr"Aplicações"&rarr"KDevelop"&rarr"KDevelop 0.4". Como o KDevelop suporta <idx/KDE/-Mime-types, também o pode iniciar seleccionando um
ficheiro de projecto KDevelop ("*.kdevprj", apresentado com o icon de projecto do KDevelop) no Gestor de Ficheiros do <idx/KDE/ o que iniciará o KDevelop
e carregará o projecto.
Utilizando outros gestores de janelas, abra uma consola e escreva:
<tscreen><verb>
&percnt kdevelop
</verb></tscreen>

Para iniciar o Kdevelop com um projecto existente, mude para o directório do projecto e escreva:

<tscreen><verb> 	
&percnt kdevelop  &lt;seuProjecto&gt;.kdevprj
</verb></tscreen>

Dentro de cada conta de utilizador o KDevelop irá invocar o processo de 
<ref id="The Installation Program" name="instalação automatica"> no primeiro arranque,
permitindo uma configuração rápida das opções mais necessárias. Se a sua instalação estiver estragada, pode reconfigurar o KDevelop
a qualquer momento quer escrevendo

<tscreen><verb> 	
&percnt kdevelop  --setup
</verb></tscreen>

ou, quando a utilizar o KDE, escolhendo "K"&rarr"Aplicações"&rarr"KDevelop"&rarr"Setup".

<sect1>The Installation Program<label id="O Programa de Instalação">
<p>
O KDevelop inclui um módulo de instalação automatica que é invocado sempre que o Kdevelop é iniciado e o ficheiro de configuração
kdeveloprc não existe. Sugerimos que siga os passos de instalação escolhendo "Prosseguir" para automaticamente verificar o seu sistema e
configurar o ambiente do KDevelop.

Os botões de diálogo da instalação executam as seguintes acções:
<p>
<bf>Ajuda:</bf>  Abrirá o programa KDEHelp.
<p>
<bf>Prosseguir:</bf> Isto inicia o processo de instalação e executa as seguintes acções:

<enum>
<item> Verificar a existência do make/gmake, autoconf, autoheader, automake e perl para a criação e compilação de novas aplicações
geradas pelo KDevelop. Se o gmake estiver instalado, o comando make será definido automaticamente para utilizar o gmake.  Outras opções de linha de comando
para o seu programa make podem ser definidas no diálogo de configuração acessível pelo menu de opções, mais tarde. Uma introdução ao desenvolvimento em Unix é
explicado na secção <ref id="Programs" name="Programas">.

<item> Verificar a existência do KDoc e Glimpse. Estas permitirão criar automaticamente uma nova documentação de bibliotecas KDE e um indice de busca
num passo seguinte da configuração, se encontradas.

<item> Verificar a existência do a2ps e enscript para assegurar que é possível imprimir. Um destes dois programas tem de estar instalado
para permitir imprimir correctamente. Se nenhum deles estiver instalado, pode faze-lo a qualquer momento mais tarde sem ter de correr a
configuração de novo.

<item> Verificar a existência do KDbg, KIconedit e KTranslator. Encorajamo-lo a instalar esses programas pois são bons
ajudantes para criar aplicações <idx/KDE/ completas. Note que o KDbg é utilizado directamente para depurar o seu projecto actual dentro do
KDevelop; o KIconedit é utilizado para apresentar e editar pixmaps seleccionados nas árvores de vista de ficheiros. Os programas KDbg, KIconedit e KTranslator
serão então configurados para estarem disponíveis no menu "Ferramentas" da barra de menu do KDevelop se encontrados. Outras ferramentas podem ser adicionadas ao
menu Ferramentas seleccionado "Ferramentas..." no menu de Opções mais tarde.

<item> Resumo de programas detectados: a instalação lista os programas que encontrou e os que não encontrou. Dicas adicionais são dadas, see um
um programa necessário for recomendado.

<item>Detecção do caminho para a sua documentação electrónica Qt: verifica vários caminhos standard no seu sistema procurando a documentação e
define o caminho automaticamente. Se a sua documentação Qt não tiver sido encontrada quer porque não está instalado ou o seu sistema a tem numa
localização diferente, uma mensagem aparecerá pedindo-lhe para definir o caminho manualmente ou continuar. Escolhendo o botão para definir
o caminho leva-lo-á de volta à janela principal de instalação e mostrará um campo de edição com um botão à direita para escolher o caminho.
Normalmente isto é no directório qt/html. Após faze-lo, a instalação pode continuar com a selecção de "Prosseguir" novamente.

<item> Se o KDoc foi detectado, ser-lhe-á pedido para criar/actualizar a documentação da sua biblioteca <idx/KDE/. Para isso, precisa de ter as
bibliotecas KDE em código fonte. Para utilizadore Linux que tiverem instalado o <idx/KDE/ de uma distribuição, sugerimos que copiem e extraiam
o código fonte do pacote kdelibs para o seu sistema; utilizadores do Free BSD que tenham instalado as kdelibs como pacote deverão procurar o correspondente pacote
de distribuição na colecção de portes. Se nenhum destes casos for o seu, deverá ir buscar o código fonte a <htmlurl
url="http://www.kde.org" name="http://www.kde.org"> e descomprimir as fontes no seu sistema. Se deseja utilizar o pacote de documentação
disponibilizado por <htmlurl url="http://developer.kde.org" name="http://developer.kde.org">, cancele a criação e continue criando
o índice de busca. Depois do programa de instalação terminar e o KDevelop ter iniciado, defina o caminho para o pacote de documentação descomprimido
no diálogo de Configuração do KDevelop e corra a configuração do índice de novo, que pode ser encontrado na mesma página do diálogo de configuração.

O diálogo "Actualizar a documentação das bibliotecas <idx/KDE/" é definido para utilizar um caminho por defeito para a localização da documentação em 
$(HOME)/.kde/share/apps/kdevelop/KDE-Documentation. A única coisa que tem a fazer é escolher o caminho para o código fonte das bibliotecas que
descompactou no seu sistema com o botão de selecção no topo do diálogo e escolher OK. Como exemplo, se tiver o pacote kdelibs.tar.gz
de <htmlurl url="http://www.kde.org" name="http://www.kde.org"> e o tiver puxado para o seu directório principal, terá de abrir uma
consola ou terminal e escrever "tar zxvf kdelibs.tar.gz". Isto irá descomprimir o código fonte para o directório $HOME/kdelibs, que então
conterá o código fonte para cada biblioteca num subdirectório, por ex. para a kdecore, seria em /home/rnolden/kdelibs/kdecore. Agora, o
caminho que tem de inserir no diálogo de documentação das bibliotecas KDEdeverá ser o caminho para todas as bibliotecas, no exemplo
/home/rnolden/kdelibs.

Se o caminho tiver sido definido correctamente, ser-lhe-á perguntado se a documentação deve ser criada utilizando a biblioteca khtml ou a khtmlw. Ambas
disponibilizam um widget HTML que é utilizado para criar janelas que podem mostrar ficheiros HTML e é utilizado pelo KDEHelp e KFM. Como as classes são
as mesmas em ambas as bibliotecas, decidimos apenas incluir uma biblioteca para documentação para evitar confusão devido ao facto de os ficheiros
header que contêm as classes diferirem nos seus nomes. Após premir o botão OK, uma mensagem na janela de instalação mostra que ela
está em progresso e que deve aguardar pela próxima mensagem.
<p>

<bf>NOTA:</bf> Num sistema multi-utilizador ou sistemas com quotas de espaço em disco para contas de utilizadores, a instalação de uma documentação completa em HTML
para cada utilizador seria um desperdício de espaço em disco. Neste caso, peça ao seu administrador de sistema para correr o KDevelop com a conta root para
permitir acesso de escrita à raiz do sistema. Depois instalar a documentação dentro do directório <idx/KDE/, debaixo de
$KDEDIR/share/apps/kdevelop/KDE-Documentation. O caminho correcto pode depois ser definido mais tarde no diálogo de configuração do KDevelop, disponível no
menu "Opções".

<item> Se a verificação do sistema encontrou o programa Glimpse, é-lhe oferecida a possibilidade de criar uma base de dados de busca. A
base de dados de busca pode ser criada com as opções de incluir a documentação KDE e a documentação Qt (defeito). Adicionalmente
a documentação do KDevelop é incluida e será indexada. Se possuir outra documentação que deseje indexada pode
seleccionar os directórios e adiciona-los também ao processo de indexação.

<item> Durante a criação do index de busca, a janela de instalação apresentará uma mensagem indicando que está em progresso.

<item> Se todos os passos de instalação tiverem sido realizados correctamente, uma mensagem final dirá que o KDevelop será iniciado
após se premir OK. Lembre-se que pode definir opções adicionais tais como gravação automática no diálogo de <ref id="General Configuration" name="Configuração do KDevelop"> que é acessível a partir do menu de opções.</enum>

<bf>Cancelar:</bf>  Mostrará uma mensagem de aviso de que o processo de instalação será cancelado.  Esta mensagem de aviso permite-lhe
regressar à instalação ("Regressar") ou iniciar o KDevelop com os valores por defeito ("Continuar"). Lembre-se que neste caso terá
de definir todas as opções sozinho com os diálogos de configuração disponibilizados no menu de opções.

<sect>Programas<label id="Programs">
<p>
Agora que o KDevelop foi instalado com sucesso e as opções mais utilizadas estão configuradas, você está provavelmente a perguntar-se se o programa
cumprirá as expectativas. Este capítulo dá-lhe as linhas mestras sobre como os programas são criados utilizando as ferramentas GNU em geral e especificamente
que papel o KDevelop tem neste jogo.
<sect1>The Compiler<label id="O Compilador">
<p>
O compilador é na realidade o programa no seu sistema que tem de estar instalado como um mínimo para criar programas executáveis; é ele que
compila o código fonte em ficheiros objecto e cria o programa.

Normalmente, você iniciaria assim:
Abra um editor da sua preferência - não utilize um processador de texto. Escreva algo similar a isto para criar o código fonte do seu primeiro
programa:

<tscreen><verb>
#include <iostream.h>

int main(){

cout << "Olá Mundo!" << endl;

}
</verb></tscreen>
Bem, na realidade tudo o que o programa fará é imprimir a frase "Olá Mundo!" no seu output standard. Mas isto é apenas o
código fonte para o programa ser construido, não o programa em si. Por isso, necessitamos de um compilador, neste caso um compilador C++ como o
g++. Depois podemos gravar este ficheiro com o código fonte, como, por exemplo, meuprograma.cpp e invocar o compilador com o nome de ficheiro
(na consola):

<tscreen><verb>
g++ -o meuprograma meuprograma.cpp
</verb></tscreen>
Depois podemos iniciar o nosso programa- basta escrever <tt/meuprograma/ na consola, e o programa imprime a frase; depois termina.

<sect1>Make e Makefiles<label id="Make">
<p>
Tenho tudo o que necessito: um editor, um compilador e posso executar o meu próprio programa C++. Mas não é assim tão fácil. Que acontece se
tiver mais de um ficheiro de código? E, tem de compilar todos os ficheiros de código vezes e vezes sem conta se apenas tiver alterado um ficheiro?
Compilar tornar-se-á mais e mais complicado e moroso, porque tem de escrever todos os comandos e opções
você próprio. Por isso, poderia escrever o que se chama uma "Makefile". Também lhe pode chamar qualquer outro nome excepto no nome do programa
a construir. Depois, deverá ter a ferramenta <tt/make/ ou <tt/gmake/ instalada, ou qualquer outra ferramenta que seja capaz de manter registo da
compilação de um projecto. Insira todos os comandos de compilação numa certa sintaxe nessa Makefile e grave-a; depois apenas
terá de escrever <tt/make/ ou <tt/gmake/ na consola no directório onde a Makefile se encontra, e o make tomará conta da situação,
levando o compilador a criar a sua aplicação. O utilitário make tem muitas outras vantagens e pode ser utilizado para bastantes fins.
Para obter uma visão geral e total, abra uma consola e escreva:

<tt/man make/

ou procure "GNU Make" no KDEHelp, "Sistema GNU Info conteúdos".
Pelo menos, tem uma ideia, porque um programador necessita do utilitário make para tornar mais fácil compilar a sua aplicação.
Agora, escrever Makefiles não é apenas trabalho manual até agora, também tem de pesquisar por si toda a sintaxe e opções. Mas aqui
estão as boas notícias sobre o KDevelop e qualquer utilitário Make: Apenas tem de definir o comando Make no diálogo de 
<ref id="General Configuration"
name="Configuração do KDevelop"> e está tudo pronto. Todos os projectos gerados com o KDevelop irão utilizar aquele comando Make para construir a
aplicação alvo, e nada de escrever mais. Apenas prima o botão na barra de ferramentas do KDevelop, a começar com o primeiro após a segunda linha separadora, ou escolha a função desejada para o Make no menu "Construir".

A barra de ferramentas e o menu construir então oferecem as funções mais comuns de que necessita para deixar o make fazer o trabalho sujo:

<itemize>
<item> Compilar Ficheiro: apenas está activo se você estiver a trabalhar num ficheiro de código. Invoca o make com o comando correcto para compilar apenas
o ficheiro de código actual.
<item> Make: apenas chama o make e cria o seu alvo.
<item> Reconstruir tudo: reconstroi todo o projecto
<item> Limpar/Reconstruir tudo: limpa primeiro o directório do projecto e depois corre novamente o make.
<item> Parar Construção: cancela o processo actual- isto é principalmente utilizado se vir o make a trabalhar e a emperrar no seu código fonte. Então-
ahh- Eu esqueci-me desta linha...e você tem de corrigir o seu código. Basta premir Parar, corrigir o erro que descobriu por si só e correr
o Make de novo.
</itemize>

Mas esta não é a única forma como o KDevelop funciona em conjunto com o make- para aplicações <idx/KDE/, existem algumas coisas que são especiais,
tal como criar ficheiros de mensagens para internacionalização. Estas funções estão também incluidas, pelo que não tem de se preocupar mais
com estas coisas.

Até agora, você sabe sobre código fonte, o compilador e porque o make é necessário. Na próxima secção, iremos discutir como é que
projectos criados com o KDevelop automaticamanre podem ser compilados em quase todas as outras plataformas Unix utilizando o script (ficheiro de código) <tt/configure/.

<sect1>Configure<label id="Configure">
<p>
O título desta secção deixa-lhe provavelmente a questão: Configurar ? O que tem de ser configurado? Ou quem?
Bem, assuma que escreveu um programa incluindo um Makefile. Depois deseja distribui-lo, mas o binário compilado apenas
corre no seu sistema ou em sistemas que são compatíveis com o seu. Para suportar outras plataformas como diferentes sistemas Unix ou
máquinas como Alpha's ou RISC's, tem de recompilar o programa. A forma mais simples seria copiar o pacote com o código fonte para a
máquina alvo e executar <tt/make/ de novo. Mas e se a máquina alvo utiliza outro comando de compilador ou tem de outra forma um
problema em construir o seu binário? Já para não mencionar assuntos mais difíceis tais como caminhos de instalação para o seu programa e documentação-
por ex. o KDE pode estar instalado em <tt//opt/kde/ numa máquina, enquanto esta instalado em <tt//usr/local/kde/ noutra. Neste
caso, você teria de re-escrever o Makefile cada vez para assegurar uma correcta compilação e instalação do seu produto.

Felizmente, as ferramentas GNU têm ainda mais a oferecer que aquele poderoso <tt/make/- os muito utilizados pacotes automake e
autoconf. Soa bem ouvir algo com "auto"- parece que algo sobre o desenvolvimento de aplicações pode ser feito fácil e rapidamente,
o que completamente correcto.

O objectivo do Automake é basicamente criar um chamado <tt/Makefile.in/ a partir de um ficheiro <tt/Makefile.am/ que tem de escrever para o
seu projecto. Este Makefile.am consiste em macros que podem ser interpretadas e reduzem a complexidade que o make apresenta, pelo que
um Makefile.am é escrito mais segura e rapidamente que o Makefile final.

Tendo dito isto, quem é que afinal está a criar o meu Makefile ? Agora, aqui entra o autoconf. O Autoconf necessita de vários ficheiros de macro
para o projecto. Esses ficheiros são o Makefile.in gerado pelo automake e um ficheiro chamado <tt/configure.in/, também contendo macros.
Assim o Makefile.am e .in contêm macros que são responsáveis pela forma como a sua aplicação é construida em termos de
que código fonte é compilado, que ficheiros pertencem ao pacote e que nome o binário final ou biblioteca terá após a
construção. O Configure.in por outro lado contém macros sobre o que o script de consola configure irá verificar no sistema em que o
configure é executado. Poderão ser por ex. o comando de compilador, bibliotecas necessárias com as quais o binário final será ligado (linked),
ficheiros include que o projecto necessita e a sua localização.

Por exemplo você deseja escrever uma aplicação <idx/KDE/. Após escrever o seu código,
deseja distribuir o seu programa à comunidade, e cada utilizador tem de compilar o binário por si. Então você escreveria um
ficheiro configure.in que conteria as macros para uma aplicação compatível com o <idx/KDE/. Essa macro irá expandir-se para verificar o
sistema sobre se a biblioteca Qt está instalada, verificar onde estão os ficheiros header do Qt, as bibliotecas KDE e headers etc.

<bf>Resumo:</bf>  Para criar uma aplicação compatível GNU que seja portável para diferentes sistemas operativos Unix e máquinas que não a sua,
terá de fazer o seguinte:

<enum>
<item> escreva o código do seu projecto
<item> escreva um Makefile.am para cada subdirectório, incluindo o directório principal do seu projecto
<item> escreva um ficheiro configure.in gravado no directório principal do seu projecto contendo as macros com os requerimentos de sistema
<item> execute o automake
<item> execute o autoconf
</enum>

Então o trabalho principal está feito. O Automake cria os Makefile.in, o autoconf processa o configure.in e Makefile.in's e
gera um script de consola executável chamado <tt/configure/. Tudo o que então tem a fazer é executá-lo com ./<tt/configure/ e o
script fará as verificações da sua escolha. Finalmente os Makefiles serão gerados e permitirão uma execução final do make (ou gmake)
que irá processar todos os Makefiles e tudo estará feito.

Isto parece ser um monte de coisas para escrever uma pequena aplicação e muito a aprender especialmente como escrever macros correctamente. Mas mesmo
o facto de que possibilitará a compilação em quase todos os sistemas Unix valerá a pena mais cedo ou mais tarde. Finalmente, você apenas tem
de fazer este trabalho uma vez para o seu projecto e no caso de os ficheiros do seu projecto aumentarem apenas terá de acrescentar os seus nomes às macros.


Agora, quão longe o KDevelop suporta este tipo de desenvolvimento aplicacional e quão complicado se torna para o programador?
As boas noticias são, que você nem precisa de saber nada sobre macros e scripts. Todos os detalhes são escondidos atrás de um interface gráfico
fácil de utilizar e que faz o trabalho por si. Uma aplicação é assim criada com as ferramentas GNU de uma forma muito amiga do utilizador:

Basta gerar a sua aplicação com o KAppWizard, pela escolha das necessidades da sua aplicação- seja ela uma aplicação pura de terminal em C++
ou um programa com uma espécie de interface gráfico utilizando as bibliotecas <idx/Qt/ ou Qt/<idx/KDE/. Todo o trabalho é feito automaticamente e o seu projecto
já conterá os Makefiles que são criados pela execução automática das ferramentas GNU e do script de configuração.

É tudo- está preparado para expandir o código do seu projecto, seja adicionando classes, diálogos, traduções ou
documentação, o que é também completamente automatizado. Concentre-se apenas no verdadeiro trabalho do programador, que é criar
funcionalidades para a aplicação final que deseja criar. Na maior parte dos casos, provavelmente não chegará a entrar em contacto com Makefiles de
todo enquanto a utilizar o KDevelop.

<sect1>Depuração<label id="Debugging">
<p>
A secção seguinte cobre um termo que é muito utilizado pelos programadores: Depuração (Debugging). Significa que, apesar do compilador produzir
a aplicação final, a sua aplicação pode não correr ou bloquear durante a execução devido a um chamado "bug" (erro de código) no código. Um erro de
programa descrito pelo nome deste insecto tem origem na história dos computadores; um dos primeiros erros que causou o "crash" de uma
máquina não foi obviamente uma avaria- havia insectos dentro do computador que eram responsaveis pelo problema. Assim, um erro não
detectado à primeira vista é chamado um "bug", pelo que "debugging" (depuração) significa retirar os "bugs" de onde eles não deveriam estar. Mas não precisa
de os caçar a sério; assumindo que os computadores actuais são desenhados para os manter fora através de uma qualquer protecção exterior.
Eles têm de ser encontrados dentro do código, quase sempre terminando a execução de um programa com a mensagem "Segmentation fault". GNU
oferece outra ferramenta chamada <tt/gdb/, o depurador GNU. Este programa de consola permite observar valores internos da
aplicação e a execução passo a passo pela definição de "breakpoints" (pontos de paragem) no código. O Gdb pára a execução sempre que o programa
atingir um ponto de paragem enquanto a correr. Mas tal como a maioria das ferramentas, o depurador é gerido por outro programa disponibilizando um interface,
permitindo facilmente observar valores e a definição de pontos de paragem no código.

Para este porpósito, a aplicação do seu projecto é criada por defeito com uma opção de compilador para depuração, guardando assim
informação adicional no executável para permitir a localização de valores e linhas no código. Sendo um interface de terceiros para o gdb,
o KDevelop utiliza o KDbg, o KDebugger. Para depurar o seu programa, apenas tem de seleccionar "Depurar" no menu Construir ou premir o
correspondente botão da barra de ferramentas apresentado por uma roda com uma lupa sobre ela, sinalizando que você deseja observar a execução.

O KDevelop abre então a janela de ferramentas e inicia a sua aplicação com o KDbg. O interface do KDbg surge dentro da janela de ferramentas e
permite a sua utilização tal como se o tivesse iniciado de fora.

Em geral, os passos acima estão claramente a indicar a necessidade de algumas medidas que um programador tem de tomar quando inicia a codificação
da sua aplicação, e cobre aspectos que são comuns a todos os projectos. Também, explicamos que parte do trabalho o KDevelop faz pelo programador e
como suporta a ideia de oferecer uma maneira simples de programar em Unix. Para obter mais informações sobre o papel e propósito das
ferramentas GNU, deverá ler a documentação disponibilizada com elas, facilmente acessível através do comando <tt/man/ ou pela secção "Sistema GNU
Info conteúdos" no KDEHelp.

<sect>Desenvolvimento com o KDevelop<label id="Development with KDevelop">
<p>
Neste capítulo obterá uma visão genérica sobre como pode utilizar o KDevelop e o Editor de Diálogos interno para criar as suas aplicações.
Assim, todas as ferramentas são descritas pela sua utilização durante o processo de desenvolvimento. Se é um iniciado no desenvolvimento C++/Interface Grafico Utilizador (IGU)
e programação, deverá ler <em/"O Manual de Programação KDevelop"/, que descreve alguma informação básica para desenho de programas e mostra
uma utilização mais detalhada do KDevelop através de projectos exemplo que pode seguir passo a passo para se habituar com a forma como as aplicações são
criadas utilizando o KDevelop. Deverá também ter lido o capítulo <ref id="Programs" name="Programas"> para possuir um entendimento genérico
porque aplicações Unix devem fazer uso das ferramentas de desenvlvimento disponibilizadas; isto fará as coisas mais fáceis quando atingir referências sobre o que
são Makefiles etc.

<sect1>O que são Projectos de Aplicações KDevelop?
<p>
Projectos criados com o KDevelop tornam mais fácil para os programadores a utilização das ferramentas standard de desenvolvimento GNU. Os Makefiles
gerados automaticamente, que têm de ser escritos de qualquer forma devido à complexidade do projecto, oferecem não apenas uma melhor forma
de gerar Makefile mas também um meio bom e seguro de oferecer uma rápida adaptação em direcção a diferentes sistemas através de scripts 
de <tt/configure/ gerados pelo autoconf.

A distribuição das suas aplicações não requer que o utilizador final tenha nada de mais instalado além do compilador C++ e
das bibliotecas de desenvolvimento, o que é o caso quase sempre; mas pode também distribuir pacotes de binários das suas aplicações. De
qualquer forma, o utilizador final do seu produto não necessita de ter o KDevelop instalado. Para distribuir o seu código fonte, aconselhamo-lo a
incluir também o ficheiro de projecto do KDevelop, já que isto torna mais fácil a outros programadores trabalharem com o seu código fonte se
também utilizarem o KDevelop. Para projectos em que vários programadores, talvez trabalhando em diferentes locais, estão envolvidos, este deve ser também o caso
para assegurar consistência nos Makefiles para que não depare com problemas. Especialmente em aplicações multi-idiomas, os tradutores
não irão realmente trabalhar com o código fonte, excepto nos casos em que requeiram correcções para permitir suporte para traduções. De qualquer forma, eles
ficarão agradecidos pois o KDevelop simplifica-lhes o trabalho a um mínimo adicionando o seu idioma e reduzindo o trabalho para que se concentrem
na tradução.

Com a utilização do KDevelop para os seus projectos, poderia iniciar a criação de uma nova aplicação com o KAppWizard. Aí, poderia também
definir o tipo de projecto de acordo com os objectivos do seu programa. Depois, iniciaria o desenvolvimento do interface do utilizador adicionando
widgets que já se encontram construidos nas bibliotecas e apenas têm de ser chamados pela sua aplicação, ou por auto-construções
que podem ser feitas com o editor de diálogos. Depois vem a extensão do interface do utilizador pela alteração e extensão daquelas partes que
já foram feitas pelo KDevelop tal como a barra de estados, barra de menu e barra de ferramentas. Como os resources são coleccionados num ficheiro resource, isto pode ser
expandido apenas adicionando novos valores aos já existentes; os resources existentes podem também ser utilizados como linhas de orientação para adicionar
os seus específicos. Após implementar a funcionalidade a métodos que são ou gerados vazios pelo editor de diálogo ou já
contêm código para acções standard do utilizador, deverá aumentar o Manual do Utilizador simplesmente editando o ficheiro de índice em sgml que é fornecido
no sentido de descrever as capacidades da sua aplicação. O último passo seria gerar os ficheiros de tradução e distribuir o seu
projecto aos tradutores para fazerem o restante no sentido de potenciar a internacionalização.

Mas mesmo para programadores de aplicações não-gráficas o ambiente gráfico de desenvolvimento oferece uma forma fácil de criar novos projectos; o editor e o Navegador de Classes em
conjunto com a poderosa gestão de projectos do KDevelop irá reduzir o tempo de desenvolvimento a um mínimo que é requerido para
a implementação das funcionalidades.

<sect1>Breve Descrição das Ferramentas do KDevelop
<p>
Com KDevelop você escolheu um pacote, que, em conjunto com a utilização de outras ferramentas, lhe disponibilizará um ambiente perfeito e flexível
para desenvolvimento orientado por objectos de aplicações em Sistemas Unix. Geralmente, o KDevelop consiste do ambiente de programação
e do editor de diálogos; para além disso todos os programas necessários que possam ser úteis para a programação de aplicações estão imbutidos
de uma forma ou de outra.

<sect2>Ambiente de Desenvolvimento e Editor de Diálogos
<p>

<sect3>O Ambiente de Desenvolvimento
<p>
O Ambiente de Desenvolvimento é o interface do utilizador que o KDevelop disponibiliza para a criação e manutenção de projectos, utilizando implicitamente
muitas outras ferramentas simplificando a sua utilização. O Editor e Navegador de Ajuda incorporados bem como o Navegador de Classes reduzem a quantidade de
trabalho que o processo de desenvolvimento normalmente coloca sobre o programador. A facilidade de utilização tornam a programação de aplicações para Unix um prazer por
si só e irá provavelmente resultar em ciclos de lançamento de novas versões mais curtos e mais melhorias nas características. A partir daqui, está a gerir
o seu projecto através de todos os seus detalhes, mantém uma visão geral das suas classes e não tem de utilizar consolas adicionais para o seu
trabalho, bem como a integração de todos os interfaces de utilizador resulta em que você apenas tem de trabalhar com uma janela dentro do X e
em vez de ter de controlar várias espalhadas pelo seu ambiente de trabalho.

<sect3>O Editor de Diálogos
<p>
O editor de diálogos incorporado no KDevelop oferece uma forma simples de desenhar interfaces de utilizador com as bibliotecas <idx/Qt/ e <idx/KDE/. A sua
forma simples de fazer quase tudo com o rato permite uma construção rápida de diálogos e ecrãs principais para aplicações e a sua
transformação directa em código C++, que é directamente adicionado ao projecto. Como o editor de diálogos está incorporado no resto do
interface do utilizador KDevelop, tem disponíveis os mesmos comandos que teria estando a trabalhar em modo Programação. Isto permite por ex. construir um
diálogo, geração de código de output e o seu teste directo dentro do programa pela disponibilidade dos comandos make e pode ainda
controlar o output do compilador sem ter de voltar para a vista de programação. Para uma descrição detalhada, veja <ref
id="The Dialog Editor">.

<sect2>KAppWizard e as Ferramentas de Classes
<p>
O KAppWizard e as Ferramentas de Classes oferecidas para geração de projectos e extenção automática de código têm como intuito tornar a
criação de aplicações fácil e segura e oferece uma boa forma de iniciados na programação <idx/Qt//<idx/KDE/ iniciarem-se e
realmente trabalharem nos detalhes de desenho do Interface Gráfico do Utilizador da aplicação, já que os resultados conseguem ser atingidos muito rapidamente.

<sect3>KAppWizard
<p>
O KAppWizard tem como objectivo criar projectos de aplicações completamente funcionais que estão prontos a correr utilizando ferramentas standard GNU e, para
programas gráficos, ganhar proveito das bibliotecas <idx/KDE/ e <idx/Qt/. Especificando apenas a informação que é requerida como um
mínimo, os utilizadores podem começar a trabalhar num novo projecto em segundos. Chamar o KAppWizard deveria ser o primeiro passo a ser realizado para
criar novas aplicações com o KDevelop.

O KAppWizard oferece-lhe um chamado esqueleto (ou moldura) de aplicação com todos os ficheiros de código C++ necessários para uma aplicação executável. Depois de
você especificar um nome de projecto e defenir as preferências necessárias, o seu novo projecto será gerado e terá uma aplicação completa que
já conterá imensas funcionalidades (para projectos KDE e Qt), sem mesmo ter de escrever uma linha de código C++ sozinho. Caso
especifique o conjunto total de opções que o gerador de programas disponibiliza, a sua aplicação já conterá:
<itemize>
<item>um interface SDI (para trabalhar com um documento por janela de aplicação), baseado no modelo de controlo de vista de documento
<item>Menus e diálogos para abrir e gravar ficheiros bem como diálogos de impressão
<item>uma barra de ferramentas e de estados já dispondo de total funcionalidade
<item>um sistema de ajuda, contendo um manual do utilizador baseado em sgml e uma ajuda de barra de estados
<item>uma documentação API (interface de programação da aplicação) completa baseada em HTML para o estado actual do projecto
<item>uma rotina de instalação através do make
</itemize>

O KAppWizard está disponível no menu Projecto, opção "Novo...".

<sect3>Ferramentas de Classe
<p>
O termo "Ferramentas de Classe" descreve uma variedade de funções que estão disponíveis para o programador num projecto não só através
de uma linguagem orientada por objectos mas utilizando o código fonte de uma forma orientada por objectos. Trabalhando com classes em vez de ter de
olhar para ficheiros oferece uma forma muito flexível de extender o seu projecto e permite ao programador concentrar-se nos objectos que o projecto contém.
As ferramentas que o KDevelop oferece são um Gerador de Classes e um Navegador de Classes, em que cada um disponibiliza bastantes funcionalidades
automatizadas.

<sect4> Criar uma nova classe com o Gerador de Classes
<p>
Após gerar um projecto com o KAppWizard o seu trabalho como programador seria adicionar um conjunto de classes que coincidiriam com o
desenho da aplicação. O processo típico sem utilizar o KDevelop seria criar um novo header e ficheiro de código fonte, adiciona-los manualmente ao
correspondente Makefile.am e começar a escrever as declarações e implementações de classe. Para simplificar todo o processo, o
Gerador de Classes permite-lhe fazer isto apenas especificando a nova classe pelo seu nome, classe de onde herda, atributos herdados e mais
informação tal como documentação da classe segundo os seus objectivos para o projecto. Adicionalmente, pode também mudar os nomes dos ficheiros que são
pré-definidos pelo gerador e se a classe teria por defeito Qt-sinal/espaço (signal/slot).

O resto do trabalho é feito automaticamente- não tem de se preocupar com os Makefile.am, ficheiros e a classe em sí. Uma nova invocação
do "make" é o suficiente para incluir a nova classe no processo de compilação. Como o Navegador de Classes se actualiza após a adição de
uma classe, a declaração e implementação está disponível desde logo e pode começar a trabalhar na extensão da classe. O
Gerador de Classes é invocado pelo menu Projecto, opção "Nova Classe".

<sect4>O Navegador de Classes
<p>
O Navegador de Classes apresenta todos os tipos de objectos e funções do seu projecto numa árvore à esquerda das janelas de edição. Um analisador de classes
percorre todos os ficheiros procurando métodos e classes e torna-os acessíveis através de símbolos gráficos. Sobre eles, menus de contexto oferecem uma
funcionalidade especializada para trabalhar com o código fonte focando-se nas classes e funções.

Seleccionar uma classe resultará na abertura do ficheiro que contém a declaração; em métodos e funções isto irá
mostrar-lhe a implementação. Para uma descrição completa, veja <ref id="The Class Browser" name="O Navegador de Classes">

<sect1> O Processo de Desenvolvimento
<p>
O desenvolvimento de uma nova aplicação com o KDevelop pode ser geralmente dividida em dois passos principais: primeiro, tem de gerar um
esqueleto de programa com o KAppWizard, depois o "resto" do desenvolvimento tem de ser feito utilizando as características do KDevelop, que apenas
necessitam das suas capacidades como programador. Para descrever o processo de desenvolvimento, nós assumimos que deseja criar uma aplicação Qt/<idx/KDE/,
que implica utilizar a maior parte das características do KDevelop para trabalhar com estes tipos de projectos, para que tenha um "Como-Fazer" geral.

<sect2>Criar um Esqueleto de Programa
<p>
Para começar a criar a sua aplicação, normalmente invoca o KAppWizard, introduz o nome do projecto e gera o programa. Através
disto, o assistente cria automaticamente um ficheiro de projecto para a aplicação e insere as áreas do KDevelop nos Makefile.am's
que serão utilizados mais tarde quando expandir a aplicação. O ficheiro de projecto é o ficheiro que tem de executar para abrir o projecto em
sessões posteriores.

Você chama o KAppWizard pelo menu "Projecto", opção "Novo...". Quando o assistente surge, tem de especificar o tipo de
projecto na primeira página. Seleccionando "Seguinte >>" leva-o à página seguinte onde tem de inserir o nome, versão e directório
do projecto e a sua informação pessoal. A página 3 oferece opções mais detalhadas, as páginas 4 e 5 permitem a edição dos cabeçalhos para os ficheiros
header e de implementação que são inseridos automaticamente de acordo com a sua selecção. Se já possui cabeçalhos de ficheiro que deseja
utilizar, pode seleccionar esses ficheiros também. A última página contém uma janela de output e uma janela de mensagem de erro. Quando seleccionar
"Criar", a sua aplicação será gerada e as acções que forem executadas podem ser observadas na janela de output. Se surgir PRONTO (READY)
na janela de output, o KAppWizard termina e pode seleccionar "Sair" para regressar ao ambiente de programação. Para construir o
binário, escolha "Make" do menu Construir ou escolha o botão correspondente na barra de ferramentas. Pode também testas as funções já
existente escolhendo "Executar" a partir do menu Construir.

<sect2>Desenvolver uma Aplicação
<p>
Esta secção descreve a fase de desenvolvimento de aplicações com o KDevelop e o Editor de Diálogos - e todo o trabalho pode ser feito
dentro do Ambiente Gráfico.

Os passos de desenvolvimento são geralmente editar os ficheiros de código fonte, a compilação do código do projecto seguido do processo
de ligação unindo todos os ficheiros objecto ao binário final. Então os erros tem de ser encontrados quer sejam dos que impedem a compilação ou
linkagem ou são erros de semântica que podem ser encontrados através de uma sessão de depuração. Finalmente, a documentação tem de ser acrescentada e
traduções têm de ser adicionadas. Mas como todos esses passos se podem misturar, não é assim tão fácil descrever uma forma genérica de como
desenvolver a sua própria aplicação. Geralmente, o procedimento habitual seria primeiro criar todas as partes visíveis do projecto tal como o
ecrã principal e os diálogos para configurar quaisquer opções, depois gerar o código fonte e implementar todas as conecções necessárias que ainda
tenham de ser feitas tal como modificar as barras de menu e de ferramentas, adicionar ajuda na barra de estados para entradas de menu e preencher as novas funções
membro com objectos que são apresentados nos seus diálogos. Depois compilaria a sua aplicação e testaria as suas capacidades, corrigiria
erros e testaria de novo. A secção seguinte descreve como isto poderia ser realizado; para a sua aplicação particular
poderá seleccionar outra forma- o KDevelop deixa-lhe flexibilidade suficiente para decidir o que fazer e quando o fazer.

<sect3>Interfaces do Utilizador
<p>
O Interface do Utilizador de uma aplicação é na realidade o que o utilizador vê e através do que interage com o programa. Assim um
programa geralmente tem uma barra de menu, barras de ferramentas e de estados bem como uma janela principal que seria por ex. uma janela de inserção de texto para um
editor. As aplicações geradas pelo KAppWizard já possuem uma complexa funcionalidade no interface gráfico- a estrutura base
toma conta de elementos standard tais como barras e botões. Quando a desenvolver a sua aplicação, tem de expandir a estrutura dada
para oferecer ao programa a capacidade de interacção com o utilizador que deseja prestar. Uma parte do trabalho é o desenho dos diálogos por ex. para
alterar valores tais como a grossura do pincel numa aplicação de desenho. Isto pode ser facilmente realizado com o Editor de Diálogos dentro do KDevelop. Agora,
como criar esses diálogos com tão bom aspecto? Como a biblioteca Qt é um conjunto de ferramentas de Interface Gráfico, disponibiliza um conjunto base dos chamados "widgets"
tal como etiquetas apresentando texto, linhas de edição para entrada de texto e botões para navegação e selecção de comandos. Para além destas
partes de "baixo-nível" do interface de utilização, diálogos standard são fornecidos e estão prontos a usar tais como o diálogo de impressão. As
bibliotecas <idx/KDE/ são por sua vez baseadas na biblioteca Qt e contêm substitutos para alguns diálogos bem como widgets adicionais que
podem ser utilizados na sua aplicação. Assim, quando iniciar o desenho do comportamento da sua aplicação em relação ao utilizador, deverá fazer por estar
á-vontade com os widgets disponibilizados com a <idx/Qt/ e <idx/KDE/. A documentação electrónica da Qt disponibilizam capturas de ecrã da maior parte deles,
pelo que deverá vê-los lá primeiro. Depois aconselhamo-lo a verificar com mais atenção a biblioteca KDE-UI, que disponibiliza outros widgets. Bibliotecas
como a biblioteca KHTML contêm widgets extremamente especializados de que imensos programas utilizam. Isto simplifica o desenho de aplicações tais como
os diálogos pré-definidos oferecidos com o Qt. Para os seus próprios diálogos, aqueles widgets de baixo-nível são o que necessita. Um diálogo consiste
meramente na colecção de diferentes widgets combinados em conunto para construir o interface e é tecnicamente programado em código C++ 
numa classe que é derivada da QWidget ou uma classe de diálogo mais especializada que herda a QWidget. O programa que utiliza um widget
necessita assim de um objecto da classe do widget- isto é praticamente tudo o que tem de compreender sobre como os diálogos ou vistas são utilizados.

O Editor de Diálogos do KDevelop dispõe agora de uma forma simples de construir diálogos e interfaces de utilizador visualmente em vez de ter de
combinar diálogos com puro código C++- esta é a forma difícil de criar interfaces. Alterne para o Editor de Diálogos
escolhendo a entrada correspondente no menu "Ferramentas" (ou pelo botão da barra de ferramentas). Verá que o aspecto do KDevelop mudou mas
por ex. a barra de menu e de ferramentas são bastante similares. Isto torna muito fácil saltar de trás para a frente entre os dois modos de trabalho
e você sentir-se-á confortável em ambos passado pouco tempo. Aí poderá construir as suas vistas e diálogos como desejar e definir todas as
preferências disponíveis para os items que a vista conterá. Quando terminar, seleccione "Gerar Código" a partir do menu Construir;
o Editor de Diálogos e a gestão do projecto tomarão conta do resto. Pode testar se tudo funcionou correctamente seleccionando Make ou
Executar, o que irá construir a sua aplicação incluindo o novo código. Mas não espere que os diálogos já estejam a funcionar- isto é uma
questão de implementação que é a forma habitual como um programador trabalha. Não se preocupe- isto também não é muito difícil. Para mais informação
sobre criar diálogos, veja <ref id="The Dialog Editor" name="O Editor de Diálogos">, exemplos e linhas de orientação podem também ser encontradas em
<em/O Manual de Programação KDevelop/.

<sect3>Ligar Novos Elementos
<p>
Após ter criado o seu interface de utilizador e gerado o código, está pronto a fazer a sua aplicação utiliza-los por objectos.
Como descrito acima, um programa baseado num interface gráfico normal contém barras e a janela principal; adicionalmente a janela principal funciona com as barras,
que são parte da classe principal da aplicação, e do objecto documento a que está conectado. Em termos de desenho orientado por
objectos, descreveria a arquitectura dada como o modelo "Controlador de Vista de Documento". Este modelo descreve as funções básicas
para objectos numa aplicação no que respeita ao seu papel dentro do programa. O Controlador representa aquele que coordena a
aplicação principal e permite a interacção do utilizador através da barra de menu e barras de ferramentas e status adicionais. A classe Documento
toma a tarefa de representar um documento com que o utilizador trabalha. Assim, uma classe documento deveria realizar todas as acções tal como ler
ficheiros e grava-los novamente. A vista é agora o centro da janela da aplicação, mostrando ao utilizador uma parte do documento
visualmente e disponibilizando todas as funções para manipular os dados. Como as barras de menu e ferramentas já estão presentes, o seu trabalho
seria criar a vista principal e diálogos adicionais através dos quais o utilizador pudesse modificar quaisquer definições ou ter acesso a funções
adicionais.

Para construir a sua vista principal, o código fonte gerado para a sua aplicação já contém uma classe sob a forma de
&lt;YourApplication&gt;View (Vista_de_Sua_Aplicação) que herda da classe QWidget (esta é a classe mínima que gere interfaces visuais em Qt e
assim também em <idx/KDE/). Em geral, existem três maneiras diferentes de extender a dada classe:
<itemize>
<item>remover a estrutura de vista de documento e utilizar um dos "grandes" widgets pré-definidos que já contêm imensas funcionalidades-
basta remover a View-class (classe-Vista) e substituir o objecto-vista por outro.
<item>alterar a herança da classe-Vista. Alterar a herança para por ex. QMultiLineEdit e a sua aplicação seria um
editor.
<item>Se a sua vista principal consistirá de várias partes separadas, criar os widgets e as suas classes de que necessita com o
editor de diálogos e criar objectos destas classes no construtor de vista de classes que em combinação irá construir a vista principal.
</itemize>

Para diálogos, as coisas são ligeiramente diferentes. A forma normal seria chamar um diálogo através de uma entrada na barra de menu e adicionalmente por um
icon da barra de ferramentas. Após ter construido o seu diálogo e gerado o código, a classe está disponível para criar um objecto que irá
ser o diálogo. Então primeiro terá de procurar um lugar funcional na barra de menu para adicionar a entrada que irá chamar o diálogo quando
seleccionada pelo utilizador. Se os menus já existentes não coincidirem com as suas necessidades, crie um menu tal como os outros e insira
a sua entrada e o espaço que quer chamar quando o item de menu for seleccionado. Depois implemente o espaço criando uma instância da
classe de diálogo e chame o diálogo com as funções membras dadas pela classe base. Tem também de especificar um ID para a entrada
de menu. As aplicações base têm todas IDs já atribuídos coleccionados num ficheiro resource.h, pelo que apenas tem de adicionar o ID e
dar-lhe um novo número. E está feito- adicionalmente poderia construir um icon de barra de ferramentas novo e adicionar uma mensagem de ajuda para a barra de estados. A sua
aplicação agora oferece uma nova funcionalidade que é visível ao utilizador. Agora tem de adicionar a implementação dos métodos com que o
seu diálogo irá operar para manipular quaisquer valores. Finalmente, chamar a sua ferramenta make ou "Executar" e os ficheiros modificados serão
recompilados; o resultado das suas alterações pode ser testado imediatamente.

<sect3>O Processod de Desenvolvimento Completo
<p>
Acima, discutimos a maneira normal de como começar a trabalhar numa aplicação nova utilizando o KDevelop e como expandir o interface do utilizador.
Agora, estes são os passos standard em que o ambiente gráfico o irá ajudar, mas o KDevelop faz mais do que disponibilizar ferramentas para criar aplicações
e as suas componentes visuais. De seguida iremos ver uma breve descrição das principais funcionalidades que são oferecidas para melhorar
o desenvolvimento de aplicações.

<sect4>Gestão de Código Fonte
<p>
O ambiente gráfico do KDevelop disponibiliza imensos métodos para o programador atingir os seus objectivos no menor espaço de tempo. Como descrito acima,
o KAppWizard e o Editor de Diálogos diminuem o tempo que normalmente necessitaria para obter o mesmo resultado manualmente. Mas isto
não cobriu o trabalho que um programador normalmente tem de realizar: trabalhar na implementação da sua aplicação para proporcionar uma execução
correcta pelo utilizador final. Agora, porque é o KDevelop o ambiente gráfico que desejaria utilizar como ambiente de desenvolvimento, incluindo a sua
utilização para criar aplicações não-gráficas?

Implicitamente, o ambiente gráfico controla o seu projecto em geral; isso significa que, não tem de se preocupar em gravar as alterações, a
geração de Makefile e por aí fora- isto é disponibilizar completa gestão de projecto, e o KDevelop mostra todo o seu poder aqui no desenvolvimento de
qualquer tipo de aplicação C++. É fácil entender que, após tirar a gestão ao programador, ele está mais concentrado
em trabalhar no código fonte. Por um lado, o código encontra-se normalmente espalhado por vários ficheiros ao longo do
projecto, pelo que pode separar algumas partes. Mas isri ainda significa trabalhar da maneira difícil- sendo o programador, você ainda
teria de lutar com a criação desses ficheiros e escrever conteudo standard tal como cabeçalhos de ficheiros contendo a data e o
nome do autor bem como por ex. termos de licença para o código. Adicionalmente, isto requer que tenha que se lembrar onde as suas
funções, declarações de classes e implementações estão no projecto. Assim, o KDevelop contém a Ferramenta de Classes- uma variedade de
acções, que permitem um trbalho mais rápido e mover a atenção do programador de ficheiros para objectos- classes, estruturas e métodos. O
gerador de classes permite-lhe criar facilmente uma nova classe incluindo a herança, atributos e documentação. Para trabalho orientado por objectos,
o Navegador de Classes leva-o para a localização dos seus objectos; já não importa onde o código está na realidade. O
Navegador procura todos os ficheiros de código automaticamente e reconstroi-se após adições para se actualizar com o seu trabalho e permitir-lhe acesso
ao novo código directamente. Através de menus de contexto, o navegador oferece ainda mais funcionalidades, tais como leva-lo para a implementação ou para a
declaração de funções membras. Depois, a adição de membros é feita graficamente por diálogos- não há a procura do ficheiro e do
local em que teria de adicionar as suas entradas. Finalmente, pode obter uma vista ainda mais especializada das classes do seu projecto através do
diálogo de Ferramenta de Classes, apresentando-lhe árvores que mostram a utilização, conteudo e herança das classes e seus objectos. Para informação
mais detalhada, veja <ref id="The Class Browser" name="O Navegador de Classes">.

<sect4>Construir e Executar as Suas Aplicações
<p>
O ambiente do KDevelop está especialmente desenhado para lhe retirar os passos que tem de fazer periodicamente tal como construir e executar
o seu programa bem como localizar erros no código fonte.

Você inicia o processo de construção com:
<itemize>
<item>carregando com o rato no símbolo "Construir" ou "Construir Tudo" na barra de ferramentas
<item>ou seleccionando "Construir"/"Construir Tudo" a partir do menu Construir.
</itemize>

Para executar a sua aplicação, escolha
<itemize>
<item>o símbolo "Executar" ou "Depurar" (inicia o KDbg com o seu programa) a partir da barra de ferramentas
<item>através das respectivas entradas de menu no menu Construir.
<item>ou através de "Executar com Argumentos" para iniciar a aplicação com argumentos adicionais
</itemize>
Para mais informações sobre o processo de construção, veja <ref id="Projects" name="Projectos">.

<sect4>Procurar Erros de Programação
<p>
Naturalmente erros ocorrem ou durante o processo de construção (que são detectados pelo compilador e são chamados erros de sintaxe
porque resultavam de uma sintaxe errada no código) ou durante a execução da aplicação, os quais têm de ser encontrados e
removidos pelo programador. Para localizar erros, o programador necessita da informação de onde precisamente se dá o problema. Tal como
mencionado, o compilador é capaz de detectar erros de sintaxe sozinho, resultando em que o executável não pode ser construido (isto pode também
acontecer quando o linker detecta "unresolved symbols"-veja <ref id="Linker Options" name="Opções de Linkagem">). Como ele dá uma descrição
do erro o mais detalhada possível, o erro pode ser encontrado e removido. Durante o processo de construção, verá a janela de output
surgir mostrando-lhe o que a sua ferramenta make e o compilador têm a dizer. Em caso de erros ou avisos, basta premir o botão do rato
sobre a linha de erro e o editor irá abrir o ficheiro afectado e colocar o cursor na linha do erro. Isto também pode ser feito através
das entradas no menu "Ver", "Próximo Erro" e "Erro Anterior" ou através dos correspondentes atalhos de teclado. Irá descobrir que isto é extremamente
funcional e poupa imenso tempo a chegar ao erro, apesar de que para o remover os seus conhecimentos como programador são vitais.

Erros de Execução (Runtime Errors), que ocorrem durante a execução e irão resultar numa "segmentation fault", são por vezes difícies de detectar.
Assim, pode requesitar ao compilador que adicione informação dentro do binário para observar a execução através do código fonte. Um depurador
é então outro programa que lhe permite fazer isto iniciando a aplicação e permitindo-lhe definir pontos de paragem (breakpoints) no código onde a
execução pára, para que possa controlar implementações críticas e assim detectar pelo menos a linha que causa o erro. Descobrir
a verdadeira causa é outra tarefa; depende do programador localiza-la. O <bf/gdb/ é um depurador que é disponibilizado com o
compilador GNU e programas como o <em/ddd/ ou <em/KDbg/ são interfaces gráficos que permitem uma utilização mais fácil. O KDevelop utiliza assim o KDbg e permite-lhe
invocar o processo de depuração através dos comandos "Depurar" no menu Construir ou através do símbolo "Depurar" na barra de ferramentas. Para mais
informações sobre depuração de aplicações, veja <ref id="Projects" name="Projectos"> e <em/O Manual de Programação do KDevelop/.

<sect1>Informação Adicional
<p>
Os tópicos abordados dentro deste capítulo são descritos em mais detalhe dentro da documentação disponibilizada com o ambiente de desenvolvimento KDevelop IDE 
e outra documentação:

<itemize>
<item><em/O Manual de Programação do KDevelop/, cobre uma introdução completa no desenho de aplicações de interface gráfico e programação com as
bibliotecas Qt e <idx/KDE/,
<item>este manual, secções <ref id="Overview" name="Descrição Geral"> a <ref id="Projects" name="Projectos">, descrevendo todas as funções
disponíveis dentro do KDevelop, 
<item>este manual, secção <ref id="The Dialog Editor" name="O Editorde Diálogos">, respeitante à utilização do
editor de diálogos para criar os seus widgets, 
<item>A <em/Documentação Electrónica de Referência/ para a biblioteca Qt, que cobre exemplos da
utilização do conjunto de ferramentas de interface gráfico Qt bem como uma classe de referência e imagens dos widgets prontos a utilizar mais importantes incluidos,
<item>A <em/Referência de Classes da Biblioteca KDE/, gerada automaticamente pelo KDevelop a partir do código fonte das bibliotecas KDE, contendo
descrições de todas as classes e widgets incluindo exemplos para a sua utilização,
<item>na Internet, veja:
<itemize>
<item><htmlurl url="http://www.troll.no" name="http://www.troll.no"> para informações sobre a Qt e widgets adicionais de terceiros,
<item><htmlurl url="http://www.kde.org" name="http://www.kde.org"> para informações sobre o projecto KDE e linhas mestras de desenvolvimento,
<item><htmlurl url="http://developer.kde.org" name="http://developer.kde.org"> para referências adicionais para o desenvolvimento de aplicações KDE.
<item>na página do KDevelop <htmlurl url="http://www.kdevelop.org"
name="http://www.kdevelop.org"> </itemize>
</itemize>

<sect>Descrição Geral<label id="Overview">
<p>
Olhando para o KDevelop, o interface do utilizador pode ser descrito através da sua separação lógica: a janela principal, a vista de árvore e a janela
de output, rodeadas pelas barras de menu, ferramentas e estados. Esta secção descreve o objectivo de cada parte do interface,
começando pelas janelas, seguido das barras e das funções que disponibilizam.

<sect1>Janela Principal
<p>
A janela principal consiste de quatro pastas em que as duas da esquerda são para realizar edições. Primeiro vem a janela Header/Resource
para headers e quaisquer outros ficheiros de texto tais como a documentação em sgml, depois a janela C/C++ para o código fonte. A estas segue-se
a janela de Documentação apresentando o conteudo em formato HTML. Por fim é a janle de Ferramentas para programas externos tais como o KIconedit
e o KDbg que estão integrados no ambiente gráfico. Qualquer Ferramenta que esteja registada pode ser acedida através do menu de Ferramentas; pelo que o registo
de programas de terceiros pode ser facilmente conseguido através de um diálogo de configuração (veja <ref id="General Configuration" name="Configuração Genérica">). Para uma descrição das funcionalidades das janelas do Editor, veja o capítulo <ref id="Working with the Editor" name="Trabalhar com o Editor">, e para o Navegador de Ajuda, deverá ler a secção <ref id="Using the Documentation Browser" name="O Sistema de Ajuda">.
<sect1> O Navegador de Classes e Janelas de Ficheiros
<p>

<sect2>O Visualizador de Classes
<p>
O Visualizador de Classes (VC) mostra as classes do seu projecto bem como as funções e variáveis globais. Abrindo a árvore irá mostrar todas
as funções membras e membros com símbolos para atributos (privado, protegido e público, sinais e espaços), para que possa ver as
propriedades dos membros visualmente sem ter de alternar para os ficheiros header. Seleccionar o nome de uma classe irá abrir o ficheiro header
correspondente contendo a classe e colocar o cursor no início da declaração da classe. Seleccionar funções membras irá abrir o
ficheiro de implementação e colocar o cursor no cabeçalho da função. Para elementos, o KDevelop irá procurar o ficheiro header e colocar
o cursor na linha onde o elemento é declarado. O visualizador de classes também disponibiliza um menu de contexto (acessível pelo botão 
direito do rato) que oferece opções mais específicas,
veja <ref id="The Class Browser" name="O Navegador de Classes"> para informação mais detalhada.

<sect2>O Visualizador de Ficheiros Lógicos
<p>
O Visualizador de Ficheiros Lógicos (VFL) permite ordenar ficheiros por filtros em grupos. Grupos individuais podem ser adicionados pela opção de
propriedades do menu de projecto ou através do clique do botão direito do rato no item da árvore. Isto permite uma busca mais especializada para ficheiros que
deseja aceder rapidamente, primeiramente apenas mostrando os ficheiros incluidos no projecto. De acordo com o seu tipo Mime, os ficheiros serão abertos
quando seleccionados. Você gostará do VFL por coisas como seleccionar ficheiros gráficos- irá iniciar o KIconEdit (se instalado no sistema) na
janela de Ferramentas e abrir a imagem escolhida.

<sect2>O Visualizador de Ficheiros Reais
<p>
O Visualizador de Ficheiros Reais (VFR) mostra a árvore de directório do projecto com todos os seus ficheiros, para que possa editar ficheiros que não pertencem ao projecto ou que estão escondidas
no VFL tal como o configure.in e Makefiles.
Os menus de contexto também disponibilizam funções tais como adicionar ou remover ficheiros do projecto actual.

<sect2>A Árvore de Documentação
<p>
A Árvore de Documentação (ADOC) apresenta toda a documentação baseada em HTMLque está configurada como livros. Seleccionando um livro irá
abrir a primeira página na janela de Navegação. Também, um menu de contexto permite configuração personalizada para pacotes de documentação
adicionais baseados em HTML.

<sect1>Janela de Output
<p>
A janela de Output está separada também numa janela de mensagens, uma janela stdin/stdout
e uma janela stderr para as seguintes necessidades:
<itemize>
<item> janela de mensagens: mostra todo o output do compilador. Carregando numa mensagem de erro irá alterar o widget de edição para colocar o
cursor na linha onde o compilador encontrou o erro.
<item> janela stdout: apresenta para aplicações baseadas em consola que enviam mensagens para o output standard do computador. Note que
aplicações de Consola são agora iniciadas numa janela de consola externa.
<item> janela stderr: apresenta todas as mensagens de erro que o seu programa
produzir. Isto é útil para realizar testes. A janela de Output está programada para surgir cada vez que um processo externo for chamado,
tal como o make ou uma aplicação de consola (ou terminal).
</itemize>

<sect1>Comandos da Barra de Menu
<p>

<sect2>Gestão de Ficheiros e Impressão
<p>
Esta secção cobre as funções que o KDevelop disponibiliza em relação a ficheiros; acedido através do menu de Ficheiros na barra de menu ou pelos respectivos itens na barra de ferramentas:

<itemize>
<item><bf/Novo			Ctrl+N/ Abre o diálogo "Novo Ficheiro", permitindo criar um novo ficheiro. O ficheiro pode ser criado utilizando diferentes modelos
e o nome do ficheiro tem de ser dado bem como o caminho onde o ficheiro será criado.<p>
<item><bf/Abrir			Ctrl+O/ apresenta o diálogo "Abrir Ficheiro..." e permite-lhe escolher um ficheiro para ser aberto.<p>
<item><bf/Fechar		Ctrl+W/ Fecha o ficheiro de topo na janela de edição<p>
<item><bf/Gravar			Ctrl+S/	Grava o ficheiro aberto no topo da janela de edição. Se o ficheiro não tiver ainda sido gravado , o diálogo "Gravar Ficheiro Como..."
será aberto para lhe permitir escolher um caminho e nome de ficheiro para o ficheiro a ser gravado.<p>
<item><bf/Gravar Como.../ Abre o diálogo "Gravar Ficheiro Como..." para lhe permitir gravar o ficheiro actual com um novo nome de ficheiro<p>
<item><bf/Gravar Todos/ Grava todos os ficheiros modificados<p>
<item><bf/Imprimir...	Ctrl+P/ Abre o diálogo "Imprimir Ficheiro" onde pode definir várias opções de impressão quer utilizando o a2ps, o enscript ou
o lpr<p>
<item><bf/Sair			Ctrl+Q/ Sai do KDevelop. Se ficheiros tiverem sido modificados, ser-lhe-á perguntado se os deseja gravar.<p>
</itemize>
<p>

<sect2>Editar Ficheiros
<p>
Aqui, o menu "Editar" e os icons correspondentes na barra de ferramentas são cobertos o que permite editar ficheiros. As funções de edição estão
também disponíveis através de um menu de contexto no editor.
<itemize>
<item><bf/Desfazer			Ctrl+Z/ Desfaz a última operação de edição<p>
<item><bf/Refazer 	Ctrl+Z/ permite-lhe fazer de novo o último passo desfeito<p>
<item><bf/Cortar			Ctrl+X/ corta a selecção e copia-a para a área de transferência do sistema.<p>
<item><bf/Copiar			Ctrl+C/ copia a selecção para a área de transferência do sistema. Isto também inclui selecções feitas no navegador de
documentação.<p>
<item><bf/Colar		Ctrl+V/ insere o conteúdo da área de transferência na posição actual do cursor.<p>
<item><bf/Indentar		Ctrl+I/ Indentar move a selecção para a direita<p>
<item><bf/Des-Indentar	Ctrl+U/ Des-Indentar move a selecção para a esquerda<p>
<item><bf/Inserir Ficheiro...Ctrl+Insert/ Permite-lhe inserir um ficheiro e insere o seu conteudo na posição actual do cursor<p>
<item><bf/Procurar...		Ctrl+F/ Abre um diálogo de busca que procura uma expressão no ficheiro actual. Para uma busca através de vários
ficheiros, "Procurar nos Ficheiros..." deverá ser utilizado.<p>
<item><bf/Repetir Busca	F3/ Repete a última busca por uma expressão. Isto também inclui buscas que foram feitas sobre a
documentação, em que mais de uma ocorrência foi encontrada na mesma página. A ocorrência seguinte será apresentada escolhendo "Repetir Busca"
ou F3 e assinalar como marcado.<p>
<item><bf/Substituir...		Ctrl+R/ Abre o diálogo de "Busca e Substituição" que permite a busca por uma expressão e substituir o texto
encontrado por uma nova expressão.<p>

<item><bf/Procurar nos Ficheiros...		Ctrl+Alt+F/ Apresenta o diálogo "Procurar nos Ficheiros...", que gere o <tt/grep/ em directorias inteiras com
restrições (wildcards). Os resultados da busca são apresentados com uma lista de ficheiros, linhas e expressões. Escolhendo uma entrada é aberto o ficheiro
e o cursor é colocado na linha do resultado da busca<p>
<item><bf/Seleccionar Tudo  Ctrl+A/ Selecciona todo o texto do ficheiro correntemente aberto na janela de edição de topo<p>
<item><bf/Des-seleccionar Tudo/ Des-selecciona todo o texto do ficheiro actual. Isto é utilizado para selecções múltiplas para que não tenha de 
des-seleccionar cada um separadamente<p>
<item><bf/Inverter Selecção/ Inverte a selecção, o que significa que a selecção fica des-seleccionada e o texto que não está seleccionado
fica seleccionado.<p>
</itemize>
<p>

<sect2>Configuração de Vista
<p>
O Menu Ver cobre as funções de abertura e fecho de janelas e comandos para activar/desactivar as barras de ferramentas e estados
bem como para ir para erros no código.
<itemize>
<item><bf/Ir Para a Linha...	Ctrl+G/ Abre um diálogo "Ir Para Linha..." que lhe permite inserir um número de linha para mostrar no ficheiro corrente. O último
número de linha é recordado e marcado, para que possa saltar para essa linha de novo ou apenas inserir um novo número de linha que deseje ver.<p>
<item><bf/Erro Seguinte		F4/ Salta para o erro seguinte que o KDevelop detectar a partir do output. A mensagem de output do Make ou outra ferramenta deve
dar-lhe uma ajuda descritiva do que é o problema, para que possa corrigir o erro.<p>
<item><bf/Erro Anterior		Shift+F4/ Salta para o erro anterior que tenha sido reportado.<p>
<item><bf/Editor de Diálogos   Ctrl+D/ Alterna para o Editor de Diálogos<p>
<item><bf/Vista de Árvore	Shift+T/ (Des)Activa a janela de Árvore no lado esquerdo da vista principal contendo o Navegador de Classes, VFL, VFR e
ADOC.<p>
<item><bf/Vista de Output	Shift+O/ (Des)Activa a janela de Output no fundo da vista principal.<p>
<item><bf/Barra de Ferramentas/ (Des)Activa a barra de ferramentas.<p>
<item><bf/Barra de Navegação/ (Des)Activa a barra de navegação, contendo os botões de Seguinte, Anterior e Procurar do Navegador<p>
<item><bf/Barra de Estados	Ctrl+B/ (Des)Activa a barra de estados.<p>
<item><bf/Refrescar/ percorre novamente todos os ficheiros para reconstruir o Navegador de Classes. O progresso do processo de percorrer os ficheiros é mostrado na barra de estados.<p>
</itemize>
<p>

<sect2>Criar e Manter Projectos
<p>
Esta secção descreve funções que estão disponíveis no menu "Projecto" e é suposto cobrirem a criação e manutenção
dos projectos
<itemize>
<item><bf/Novo.../ Inicia o KAppWizard e permite-lhe criar um novo projecto escolhendo o tipo de aplicação, nome,
versão e outras opções.<p>
<item><bf/Abrir/ Mostra o diálogo de Abertura de Projecto, onde pode escolher um ficheiro de projecto KDevelop para ser aberto. Após a selecção, o
projecto é aberto.<p>
<item><bf/Abrir projecto recente.../ contem um submenu com pelo menos 5 projectos que foram abertos. Pode abrir um projecto mais facilmente utilizando o
menu de projectos recentes.<p>
<item><bf/Fechar/ Fecha o projecto actual. Isto é basicamente feito automaticamente quando sai do KDevelop, invoca o
KAppWizard ou abre outro projecto.<p>
<item><bf/Nova Classe.../ Inicia o gerador de classes para crear uma nova classe que será adicionada ao projecto actual. O gerador
de  classes permite-lhe especificar um nome de classe, herança e nome de ficheiro para a nova classe.<p>
<item><bf/Adicionar Ficheiro(s) Existente(s)/ Abre um diálogo de selecção onde pode escolher os ficheiros que deseja adicionar ao projecto actual e
o caminho para onde serão copiados. Se escolher um destino que não estava actualmente incluido no projecto, por ex. criando um novo
subdirectório, o KDevelop copiará os ficheiros a adicionar ao novoa subdirectório e criará um novo Makefile.am. Após o processo de cópia,
o seu projecto será reconstruido pelo automake e autoconf para incluir o novo subdirectório criado no processo do make.<p>
<item><bf/Adicionar novo ficheiro de tradução/ Abre um diálogo de selecção de idioma que lhe permite escolher o idioma do ficheiro de tradução que irá ser
adicionado ao projecto. Isto é principalmente utilizado por tradutores que podem facilmente adicionar o seu idioma ao projecto e trabalhar na
tradução sem ter de se preocupar com os Makefile.am's<p>
<item><bf/Propriedades de Ficheiros Shift+F7/ Abre o diálogo de Propriedades de Ficheiros mostrando uma cópia do VFL e as opções do ficheiro de projecto. Aqui, as
propriedades para os seus ficheiros têm de ser definidas tal como o caminho de instalação e tipo de ficheiro.<p>
<item><bf/Fazer mensagens e juntar/ Isto tem como objectivo criar o ficheiro de mensagens para o seu projecto. O ficheiro de mensagens é o que
contém todas as frases que estão definidas no código para internacionalização e é utilizado pelos tradutores para criar o ficheiro .po
para o seu idioma alvo.<p>
<item><bf/Fazer Doc-API/ Chama o KDoc sobre os seus ficheiros header e gera um output em HTML com a documentação das classes do seu
projecto.<p>
<item><bf/Fazer Manual do Utilizador/ executa o ksgml2html sobre o ficheiro sgml do seu manual, criando um manual do utilizador em HTML. Se o ksgml2html não está instalado,
o sgml2html será utilizado para fazer isto.<p>
<item><bf/Fazer Distribuição:/<p>
<itemize>
<item><bf/tar.gz / cria um ficheiro de distribuição do seu projecto actual no directório do projecto e que está pronto para enviar aos utilizadores finais
contendo o código fonte do projecto. O utilizador final tem de <tt/tar zxvf seuprojecto.tar.gz / para descompactar o código para um directório e
utilizar os comandos standard <tt>./configure, make</tt> e <tt/make install/.<p>
</itemize>
<item><bf/Opções  F7/ Abre o diálogo de Opções do Projecto que
lhe permite modificar várias definições para o seu projecto. Isto pode ser um novo número de versão ou as opções de compilador para definir -02 para uma
distribuição com optimização.<p>
</itemize>
<p>

<sect2>Construir Projectos
<p>
Esta secção descreve o menu Construir que cobre todas as acções a serem feitas com o make ou acções como reconstruir a documentação
ou ajuda electrónica do projecto.

<itemize>
<item><bf/Compilar ficheiro... Ctrl+F8/ Activo, se a janela de topo de edição é a Janela C++. Isto apenas compila o ficheiro actual de
implementação e permite-lhe poupar tempo no caso de suspeitar de erros.<p>
<item><bf/Make  F8/ Invoca o comando make para o seu projecto e constroi o alvo.<p>
<item><bf/Reconstruir Tudo/ Reconstroi todos os ficheiros objecto e o alvo do seu projecto.<p>
<item><bf/Limpar Reconstruir Tudo/ Limpa o directório do projecto de todos os ficheiros criados pelo make e reconstroi o alvo.<p>
<item><bf/Parar Construção  F10/ Pára o processo em curso.<p>
<item><bf/Executar F9/ Executa o seu alvo após construir o programa com o make.<p>
<item><bf/Executar com Argumentos Alt+F9/ Executa o seu alvo com argumentos. Primeiro, um diálogo surge para lhe permitir especificar os argumentos
de execução (que são gravados no projecto para a próxima sessão), depois a sua aplicação utiliza a linha de comando inserida. Lembre-se que a
sua aplicação é iniciada directamente do directório do projecto<p>
<item><bf/Depurar.../ Abre o KDbg na Janela de Ferramentas para depurar a sua
aplicação. Neste caso, o KDbg abre automaticamente o ficheiro contendo a função main() e executa a sua aplicação.<p>
<item><bf/Distclean/ Remove todos os ficheiros que são gerados pelo projecto tal como ficheiros objecto etc. Distclean tem de ser feito antes
de distribuir o seu projecto, para que o ficheiro de distribuição não contenha nenhum ficheiro específico de plataforma tal como aquelas geradas pelo seu
compilador.<p>
<item><bf/Autoconf e automake/ Chama o Make sobre o ficheiro Makefile.dist, localizado no seu directório principal do projecto. O Makefile.dist contém
todos os comandos para o automake, autoconf etc. para construir o seu projecto. Se adicionou ficheiros manualmente ou modificou macros, deve correr
o Autoconf depois, seguido do Configure para recriar todos os Makefiles.<p>
<item><bf/Configurar/ Executa o script configure gerado pelo autoconf. Se este comando não puder ser executado, corra o Autoconf e depois
o Configure de novo.<p>
</itemize>
<p>

<sect2>Chamar Ferramentas
<p>
O menu de Ferramentas cont´me por defeito as entradas para o Editor de Diálogos interno (que pode também ser iniciado pelo botão da barra de ferramentas) e
os seguintes programas se instalados: KDbg, KIconEdit e KTranslator. Estes são procurados pelo programa de instalação do KDevelop e
inseridos na ordem indicada no menu. Invocar uma ferramenta irá abrir a janela de "Ferramentas" e iniciar o programa seleccionado dentro desta
janela. O menu de Ferramentas pode ser editado pela entrada Ferramentas no menu de Opções; veja <ref id="Configuring the &dquot;Tools&dquot; Menu"
name="Configurar o Menu &dquot;Ferramentas&dquot;">).

<sect2>Alterar as Definições do KDevelop
<p>
O menu de Opções contém todas as entradas para invocar diálogos de configuração com os quais pode alterar as definições de defeito do KDevelop.
Definições principais tais como as do editor ou impressão têm as suas entradas específicas; definições gerais do comportamento do KDevelop podem ser feitas
com o diálogo de <ref id="KDevelop Setup" name="Configuração do KDevelop">.
<itemize>
<item><bf/Editor.../ Permite a configuração do comportamento do editor tal como a quebra de palavras, selecções etc.<p>
<item><bf/Cores do Editor.../ Aqui, pode definir a configuração de cores do editor tal como por ex. o fundo.<p>
<item><bf/Defeitos do Editor.../ Isto define a apresentação por defeito tal como fontes e tamanho de letra do editor<p>
<item><bf/Realce de Sintaxe / Este diálogo permite-lhe definir as fontes e cores para o realce de várias linguagens de programação,
incluindo HTML, e o realce dos tipos-mime também será activada.<p>
<item><bf/Navegador de Documentação/ Neste diálogo de pastas, pode definir as fontes, tamanhos e cores para o navegador de ajuda interno<p>
<item><bf/Configuração de Impressora.../ Contém as entradas para o diálogo de configuração da impressora de acordo com o programa de impressão utilizado, a2ps
ou enscript.<p>
<itemize>
<item><bf/a2ps/ Configura a impressora para utilização com o a2ps. Veja Imprimir para mais informações.<p>
<item><bf/enscript/ Configura a impressora para utilização com o enscript. Veja Imprimir para mais informações.<p>
</itemize>
<item><bf/Ferramentas.../ Abre o diálogo de Configuração de Ferramentas. Aqui, pode configurar o menu "Ferramentas" adicionando ou removendo programas que serão
iniciados na janela de Ferramentas.<p>
<item><bf/Configuração do KDevelop/ Abre o diálogo de Configuração do KDevelop. A primeira pasta configura definições gerais, seguida das
definições principais e de Documentação. As definições de Documentação também incluem a geração dum novo conjunto de
documentação HTML de bibliotecas e a reconstrução do index de busca para o navegador de Ajuda.
</itemize>

<sect2>O Menu Janela
<p>
O menu Janela contém uma lista com todos os ficheiros actualmente abertos. Isto permite ir rapidamente para outro ficheiro em que esteja correntemente a trabalhar.

<sect2>Gerir Marcas de Leitura
<p>
O menu de Marcas de Leitura é destinado para adicionar e remover marcas de leitura que deseje colocar no ficheiro correntemente em edição. Como o KDevelop utiliza
duas janelas de edição, cada uma configura as suas marcas de leitura separadamente.
<itemize>
<item><bf/Definir Marca de Leitura/ Abre um menu de contexto com até nove marcas de leitura configuráveis. Isto permite definir uma marca de leitura para uma dada entrada
no menu de marcas de leitura por razões lógicas.<p>
<item><bf/Adicionar Marca de Leitura  Ctrl+Alt+A/ Adiciona a linha da posição actual do cursor ao menu de marcas de leitura como uma marca de leitura. tenha em atenção
que isto pode sobrepor uma marca de leitura definida com a opção Definir Marca de Leitura. Se o navegador estiver aberto, uma marca de leitura será adicionada ao menu
de marcas de leitura da Janela de Navegação.<p>
<item><bf/Limpar Marcas de Leitura Ctrl+Alt+C/ Limpa as entradas de marcas de leitura para a janela de edição no topo ou o navegador, por ex. se
a Janela de Header é visível e chamar Limpar Marcas de Leitura, as entradas para a Janela de Header serão apagadas.<p>
<item><bf/Janela de Header/ Contém a lista de marcas de leitura para a Janela de Header. Seleccionando uma marca de leitura colocará o cursor na linha da
maraca de leitura seleccionada. Tome nota que a marca de leitura só é atribuida ao ficheiro em que é definida, pelo que se mudar de ficheiro, as
marcas de leitura não são apagadas mas escolher uma marca de leitura não irá para o ficheiro onde ela foi definida.<p>
<item><bf>Janela C/C++</bf> Contém a lista de marcas de leitura para a Janela C/C++. As opções são as mesmas que para a
Janela de Header.
<item><bf>Janela de Navegação</bf> Contém as marcas de leitura do navegador. Seleccionando uma marca de leitura irá abrir o navegador na página seleccionada.
</itemize>

<sect2>Ajuda Electrónica
<p>
O menu de Ajuda contém entradas para navegação no navegador de Ajuda bem como as entradas para documentação electrónica e de bibliotecas para os
mais utilizados recentemente. Aceder a documentação electrónica adicional pode ser conseguido com a ADOC na vista de árvore
automaticamente aberta (se a Auto-Alternância estiver activa) quando se muda para a janela do Navegador de Documentação.
<itemize>
<item><bf/Recuar  Alt+ Seta para Esquerda/ Abre a página aberta antes da actual.<p>
<item><bf/Recuar Alt+ Seta para Direita/ Abre a página seguinte na história do navegador, disponível após se ter feito um "Recuar".<p>
<item><bf/Procurar Texto Marcado		F2/ Procura no índice de busca o texto correntemente marcado nas janelas de edição ou na janela de navegação. Após
a busca, uma página com os resultados é apresentada que lhe permite seleccionar a página de ajuda para onde ir. Após escolher a página, o navegador irá
realçar a ocorrência encontrada para a expressão com que a busca foi invocada. Com a tecla F3 o próximo resultado de busca na mesma página
será apresentado se mais de uma ocorrência foi reportada para a busca numa página.<p>
<item><bf/Procurar Ajuda Sobre.../ Abre o diálogo Procurar Ajuda Sobre... que lhe permite procurar por uma expressão específica sobre a qual deseja ajuda.<p>
<item><bf/Manual do Utilizador		F1/ Abre o Manual do Utilizador do KDevelop na página de ínice para que tenha acesso a este manual.<p>
<item><bf/Manual de Programação / Abre o Manual de Programação do KDevelop na página de índice para aceder ao manual de programação.<p>
<item><bf/Dica do Dia/ Abre o diálogo da Dica do Dia para o informar sobre as características do KDevelop.<p>
<item><bf/Página do KDevelop/ Abre a página de internet do KDevelop na janela de navegação se existir acesso à internet.<p>
<item><bf/Reporte de Erros.../ Abre o diálogo de Reporte de Erros do KDevelop, onde pode enviar um relatório de erro directamente para a Equipa do KDevelop por e-mail.
Veja <ref id="Bug Reporting" name="Reporte de Erros de Código (Bugs)"><p>
<item><bf>Referência C/C++</bf> Apresenta a página de índice da referência da linguagem. Se a
referência não estiver instalada, uma página de erro explica-lhe como obter a referência e como a instalar correctamente.<p>
<item><bf/Biblioteca Qt/ Vai para a página de índice da documentação da biblioteca Qt disponibilizada com a sua cópia da biblioteca Qt.<p>
<item><bf/Biblioteca KDE-Core/ Abre o ficheiro de índice de classes da documentação da biblioteca KDE-Core.<p>
<item><bf/Biblioteca KDE-GUI/  O que acima foi dito mas para a biblioteca GUI<p>
<item><bf/Biblioteca KDE-KFile/ O que acima foi dito mas para a biblioteca KFile<p>
<item><bf/Biblioteca KDE-HTML/ O que acima foi dito mas para a biblioteca HTML<p>
<item><bf/Doc da API do Projecto/ Vai para o índice da documentação das classes do projecto.<p>
<item><bf/Manual do Utilizador do Projecto/ Abre o ficheiro de índice do manual do utilizador para o projecto actual. Isto pode ser utilizado para rever o resultado em HTML
gerado pelo ksgml2html<p>
<item><bf/Sobre o KDevelop.../ Mostra a caixa Sobre o KDevelop contendo o número da versão utilizada e os nomes dos autores e
endereços de e-mail bem como a referência ao licenciamento do KDevelop.
</itemize>

<sect1>Itens da Barra de Ferramentas
<p>
O KDevelop disponibiliza acesso rápido a vários conjuntos de comandos através das barras de ferramentas. Estas são as barras standard e de navegação; no
modo de edição de diálogos apenas a barra de ferramentas standard é visível. Ambas podem ser (des)activadas através das respectivas entradas de menu no menu "Ver"; também
podem ser arrastadas para fora da janela principal e colocadas de cada lado da área de trabalho.

<sect2>A Barra de Ferramentas Standard
<p>
A barra de ferramentas standard disponibiliza acesso rápido às funções mais recentemente utilizadas para processamento de ficheiros e sua edição bem como construir a sua
aplicação. Os botões executam os seguintes comandos da esquerda para a direita:

<itemize>
<item>Abrir Projecto - mostra o diálogo de abertura de projecto
<item>Abrir Ficheiro - mostra o diálogo de abertura de ficheiro e contém uma forma de escolher rapidamente os ficheiros header e código fonte do projecto.
<item>Gravar Ficheiro - grava o ficheiro correntemente aberto para o disco
<item>Imprimir Ficheiro - abre o diálogo de impressão
<item>(separador)
<item>Desfazer - reverte a última acção
<item>Refazer - executa a acção revertida de novo
<item>Cortar - corta a selecção corrente
<item>Copiar - copia a selecção corrente para a área de transferência do sistema
<item>Colar - cola o conteudo actual da área de transferência na posição corrente do cursor
<item>(separador)
<item>Compilar Ficheiro - compila o ficheiro correntemente visível na janela de ficheiro de código. No modo de edição de diálogos é substituido pelo botão de Gerar Ficheiros.
<item>Make - invoca make sobre o projecto
<item>Reconstruir Tudo - reconstroi o projecto
<item>Depurar - abre o KDbg com o binário da aplicação para depurar na janela de Ferramentas
<item>Executar - executa o binário da aplicação alvo
<item>Parar - cancela o processo actual
<item>(separador)
<item>Editor de Diálogos - vai para o modo de edição de diálogos. Aí, o botão é substituido pelo botão do Editor de Código Fonte
<item>Vista de Árvore - (des)activa a vista de árvore e funciona como um botão de alternância para apresentar o estado actual
<item>Vista de Output - (des)activa a vista de output e funciona como um botão de alternância para apresentar o estado actual
<item>(separador)
<item>Botão de Ajuda O que é isto..? - modifica o cursor para um ponto de interrogação e permite-lhe obter informação sobre os componentes do ambiênte de desenvolvimento do KDevelop
</itemize>

<sect2>A Barra de Ferramentas de Navegação
<p>
A barra de ferramentas de navegação é outra barra de ferramentas que disponibiliza vários comandos úteis para navegar nos ficheiros e documentação. A barra de ferramentas
contém:

<itemize>
<item>a caixa de lista de Classes - permite-lhe seleccionar uma classe do projecto actual para ir para
<item>a caixa de lista de Métodos - permite-lhe seleccionar um método do da classe actual e navega até à implementação do método
<item>o botão do assistente de Classes - um único clique do rato leva-o para a declaração do método actualmente seleccionado. Contém uma
forma rápida de aceder a ferramentas de classes para adicionar Classes, Métodos e Atributos bem como comandos de navegação.
<item>Recuar - navega para trás na história de navegação da documentação; contém uma forma rápida de seleccionar uma dada página da história.
<item>Avançar - navega para a frente na história de navegação da documentação; contém uma forma rápida de seleccionar uma página da história.
<item>Parar - pára a leitura de um ficheiro de documento pedido no navegador
<item>Reler - relê a página actualmente apresentada
<item>Casa - abre a página de índice do Manual do Utilizador do KDevelop no navegador
<item>Procurar Texto Marcado - procura o índice de documentação pelo texto seleccionado; funciona com as janelas de navegação e de edição
<item>Procurar Ajuda Sobre... - abre o diálodo Procurar Ajuda Sobre.. para lhe permitir inserir uma expressão a procurar na documentação
</itemize>

<sect1>Atalhos de Teclado
<p>
Esta secção gere os valores pré-definidos bem como os valores standard para comandos de teclado configuráveis utilizados no ambiente de desenvolvimento KDevelop.
É recomendado que veja a secção <ref id="Changing Keyboard Shortcuts" name="Alterar Atalhos de Teclado"> para uma explicação detalhada de
como modificar valores designados a comandos.

<sect2>Atalhos para Processamento de Texto
<p>

<sect3>Movimentos do Cursor<p>
<code>
uma letra para a esquerda                        Seta Esquerda
uma letra para a direita                         Seta Direita
uma palavra para a esquerda                      CTRL+Seta Esquerda
uma palavra para a direita                       CTRL+Seta Direita
uma linha para cima                              Seta para Cima
uma linha para baixo                             Seta para Baixo
para o princípio da linha                        POS 1
para o fim da linha                              END
uma página para cima                             PageUp
uma página para baixo                            PageDown
para o princípio do ficheiro actual              CTRL+PageUp
para o final do ficheiro actual                  CTRL+PageDown
</code>
<p>

<sect3>Selecção de Texto
<p>
<code>
uma letra para a esquerda                        SHIFT+Seta Esquerda
uma letra para a direita                         SHIFT+Seta Direita
uma palavra para a esquerda                      CTRL+SHIFT+Seta Esquerda
uma palavra para a direita                       CTRL+SHIFT+Seta Direita
uma linha para cima                              CTRL+Seta para Cima
uma linha para baixo                             CTRL+Seta para Baixo
para o princípio da linha                        CTRL+POS 1
para o fim da linha                              CTRL+END
uma página para cima                             SHIFT+PageUp
uma página para baixo                            SHIFT+PageDown
para o princípio do ficheiro actual              CTRL+SHIFT+PageUp
para o final do ficheiro actual                  CTRL+SHIFT+PageDown
</code>
<p>

<sect3>Inserir e Copiar Texto, Tabuladores
<p>
<code>
(des)activar modo de inserção                    INS
copiar selecção para a área de transferência     CTRL+C, CTRL+INS
inserir texto da área de transferência           CTRL+V, SHIFT+INS
apagar linha actual                              CTRL+K
inserir linha após linha actual                  END, depois Enter
inserir linha antes da linha actual              POS 1, depois Enter
desfazer passo de edição                         CTRL+Z
refazer passo desfeito                           CTRL+Y
tabulador                                        TAB
</code>
<p>

<sect3>Apagar Texto
<p>
<code>
apagar letra à esquerda da posição do cursor     Backspace
apagar letra à direita da posição do cursor      Delete
apagar texto seleccionado                        Seleccionar texto, depois Backspace ou Delete

</code>
<p>

<sect3>Procurar Texto Dentro do Editor
<p>
<code>
abrir diálogo Ir Para Linha...                   STRG+G
abre diálogo Procurar Texto                      STRG+F
repete a última busca                            F3
abre o diálogo Procurar e Substituir             STRG+R

abre o diálogo Procurar em Ficheiros (grep)      STRG+ALT+F
procurar texto marcado com o Grep                SHIFT+F2

localizar erro seguinte                          F4
localizar erro anterior                          SHIFT+F4

</code>
<p>

<sect3>Procurar Texto com o Navegador de Documentação
<p>
<code>
procurar texto seleccionado no editor na documentação          F2
procurar texto seleccionado no navegador na documentação       F2
apresentar ocorrência seguinte na mesma página                 F3

procurar texto seleccionado no navegador dentro do projecto    SHIFT+F2
</code>
<p>

<sect3>Atalhos do Navegador
<p>
<code>
página anterior                                 Alt+ Seta para a Esquerda
página seguinte                                 Alt+ Seta para a Direita
</code>
<p>

<sect3>Gerir Marcas de Leitura
<p>
<code>
adicionar marcas de leitura                      STRG+ALT+A
limpar lista de marcas de leitura                STRG+ALT+C
</code>
<p>	

<sect2>Atalhos par Símbolos da Barra de Ferramentas
<p>
<code>
Símbolo "Abrir Ficheiro"                          STRG+O
Símbolo "Gravar Ficheiro"                         STRG+S
Símbolo "Imprimir Ficheiro"                       STRG+P
Símbolo "Desfazer"                                STRG+Z
Símbolo "Refazer"                                 STRG+Y
Símbolo "Cortar"                                  STRG+X
Símbolo "Copiar"                                  STRG+C
Símbolo "Colar"                                   STRG+V
Símbolo "Compilar Ficheiro"                       STRG+F8
Símbolo "Make"                                    F8
Símbolo "Executar"                                F9
Símbolo "Executar com Argumentos"                 ALT+F9
Símbolo "Editor de Diálogos"                      STRG+D
Símbolo "Recuar"                                  ALT+Seta para a Esquerda, se navegador aberto
Símbolo "Avançar"                                 ALT+Seta para a Direita, se navegador aberto
Símbolo "Procurar Texto Marcado"                  F2
</code>
<p>

<sect2>Gestão de Janelas
<p>
Para ir para uma dada janela, prima ALT mais a letra sublinhada no título da janela, por ex. Ferramentas seria Alt+F
<p>

<sect2>Atalhos par o Processo de Compilação
<p>
<code>
Compilar ficheiro de código actual               STRG+F8
Construir projecto alvo actual                   F8
Executar alvo após processo de construção        STRG+F9
Executar alvo com Argumentos                     ALT+F9
Parar o processo actual                          F10
</code>

<sect>The Help System<label id="The Help System">
<p>
Most of KDevelop's strength is accumulated in the Help System.  It is also to be understood as an example of how to extend your own
KDE application with a complete set of help functionality, and is, in part, already realized in the template applications, so
KDE/Qt application frameworks generated with the KAppWizard do already contain the basic functionality for statusbar help and
documentation, that only has to be extended by the programmer. This section therefore introduces into the usage of the general
help provided within the IDE as well as to show the usage of the Helpbrowser, which, by intelligent use, will make it very easy to
get the information you need for development.

<sect1>The "What's this ?"-Button and Quickhelp
<p>
Looking at KDevelop's top toolbar, you will see the "What's this?" button on the right end. By selecting the button, the cursor
will change to a pointer with a question mark on the right, as is the same as the button in the toolbar. Now, you can select any
visible part of the KDevelop user interface and click on it. This will result in displaying a helpwindow giving you a short
description of the function this part gives you or what it can do for you. Included are the main view, the treeviews and the
toolbars, for which every button help is provided. After another mouseclick or a keyboard input, the What's this? help window
disappears and your cursor is set to the last active position. Mind, that, if you place the mousepointer over a button, it gets
raised and after a short time, you will get a QuickTip-window, describing the function the button represents in the menubar; this
will disappear if you move the mousepointer away.

For user interaction dialogs, Quickhelp provides you help windows with a short description of the selected item you want help for.
These are accessed by a right-button mouseclick to the item, a context-menu pops up that allows the selection of "Quick-Help".
Selecting this will pop up the help window. This is always useful for dialogs where you can't see the action's purpose for as long
as you are not familiar with KDevelop. Mind that most dialogs offer a Help-button which will show you the detailed context-help
for the dialog's options within the provided online-manual in the help-browser.

<sect1> The Statusbar Help
<p>
The statusbar of KDevelop offers you many fuctions that inform you about the current activity state as well as "status messages"
offering a short description for commands.

<sect2> Statusbar Entries
<p>
The Statusbar contains:
<enum>
<item> a general message field, mostleft. This is used for help messages and displays the current activity.
<item> the progressbar, indicating the progress for actions that require a comparably long time to be finished, such as saving
files and the scan-progress of the Class Browser. The progressbar only appears during those processes are executed.
<item> an Insert/Overwrite indicator. It shows the editor mode for insert actions by INS for Insert mode and OVR for Overwrite
mode. The mode can be changed by the INS-key on the keyboard.
<item> a line counter, displaying the current line the cursor is placed.
<item> a column counter, indicating the current column position of the cursor in a line.
</enum>

<sect2> Help Messages
<p>
The statusbar informs you about the action of menuentries if you select a menu within the menubar and select an action without
executing it. Further, if you press on a toolbar icon, but without releasing the mousebutton, the help message for the button is
displayed in the same way as for the menuentries. You can prevent the execution of the selected icon by moving the mousepointer
away from the icon, still hoding the button pressed. If the cursor is away, release the mousebutton.

For actions that are currently executed, KDevelop displays the action. This counts for processes running in the background
such as saving files as well as for dialogs. If the process has exited such as a make-invocation, the statusbar display
changes back to "Ready" state.

Also, when using the documentation browser, the statusbar displays link urls for as long as the cursor is placed over an URL link
in the browser window. Therefore, you can easily find out if the file is a local or a remote file only accessed by network
connection.

The caption of the KDevelop Project Editor shows you the currently opened filename in the top window. This would be a HTML file
for the documentation browser or a text file for the editing windows. Further, the Project name is displayed, so you have constant
control where you are and what you're currently working at.

<sect1> Configuring the HTML Browser
<p>
The browser included in KDevelop is completely HTML-based, therefore you can specify the usual options like background and the
like. You can set all preferences by the "Documentation Browser"-entry of the "Options"-menu.
The configuration dialog shows you two tabulators; the first for setting the font preferences, the second for color selection.

<sect2>Font Preferences
<p>
The first option for the font display is the size. Available are small, medium and large. The best display for normal use
is set to small by default.
For the font selection you have to specify a standard font for normal text as it appears in HTML documents; the fixed font is the
one used for dispaying e.g. code within the HTML file.

<sect2>Color Preferences
<p>
The color preferences dialog allows configuration of background, normal text, URL Link and followed link color. The
colored buttons on the right are displaying the current settings; selecting a button will result in opening the "Select Color"
dialog. There, you can specify the color either by choosing a System Color, a custom color, select the color by the multi-colored
window or by setting the values directly. The middle contains a preview for the color selected.

Further, you can specify if the browser should underline links to easier detect them visually and if you like to use your own
colors always independent of the page's preset ones. "Apply" will execute all changes, while "OK" will apply changes and close the
dialog. "Cancel" leaves all settings untouched and exits the configuration.

<sect1> Using the Documentation Browser<label id="Using the Documentation Browser">
<p>
The documentation browser allows quick and easy access to all manuals and documentations that are provided with KDevelop or
generated automatically, including online-documentation for the <idx/KDE-libraries/ and your project documentation. Plus, the
Documentation Tree in the tree-view lets you customize a special "Others" folder that contains all individually added
documentation.

<sect2>Requirements
<p>
To make use of all features of the Helpbrowser, you should have KDoc and glimpse installed. KDoc will generate all kind of online
classdocumentation for the <idx/KDE-libraries/ during the setup process, but can also invoked by option in the <ref id="General
Configuration" name="KDevelop Setup">. For the generation of an API (Application Programming Interface) Documentation for your
project's classes, KDoc is also used and called by the Build-menu, entry "Make API-Doc". This will process all current header files of
the project plus the addition of a cross-reference to the Qt and <idx/KDE-libraries/ if those are available in the Helpbrowser. For the
generation of the project handbooks, you should have ksgml2html (provided with the <idx/KDE-SDK/) and, as a minimum, SGML-tools
installed on your system. To extend and change your project's online-documentation, you have to edit the documentation file for your
project by selecting it in the RFV. After saving your changes, call "Make User-Manual" from the Build-menu. In case sgmltools detect
formatting errors, those will be displayed in the output window allow you to find the error line directly. The program "glimpse"
is used to create a personal search-index for your documentation automatically. The index is generally build during the
installation process, but can also be build with the <ref id="General Configuration" name="KDevelop Setup"> dialog. For a description of
the provided search functions see <ref id="Using the Search Index" name="Using the Search Index">.

<sect2>Provided Documentation
<p>
The KDevelop IDE comes with two sets of online-documentation, which can be accessed either via the Help-menu or by the Doc-tree in
the Tree-View in the KDevelop folder. The first book provided is this online-handbook containing all information you need towards
installation, configuration, available functionality and introduction to application development. The second book is <em/The
KDevelop Programming Handbook/ in it's first edition. The programming handbook covers most questions related to the creation and
extension of projects that work with KDevelop. By tutorials the user gets an introduction to the rich facilities that applications
created with the Qt- and/or <idx/KDE-libraries/ have to offer as well as given a guideline for ensuring <idx/KDE/-compliance, which
covers the same instructions given on the internet site of <htmlurl url="http://developer.kde.org" name="http://developer.kde.org">
However, the programming handbook cannot replace any additonal documentation available in printed or electronic form about the C++
programming language as well as about the usage of the Qt-library in certain terms.

The C/C++-Reference used with KDevelop is currently only available on the KDevelop homepage at <htmlurl
url="http://www.cs.uni-potsdam.de/~smeier/kdevelop/index.html" name="http://www.cs.uni-potsdam.de/~smeier/kdevelop/index.html">.
It can be installed easily by downloading and copying the sourcefile to the main KDE-directory ($KDEDIR). There, you have to
untar it as root with <tt/tar zxvf c_c++_reference.tar.gz/, the reference will then be copied the documentation
directory of KDevelop. For uninstalling the reference documentation you just have to delete the "reference" folder under
($KDEDIR)/share/doc/HTML/default/kdevelop/reference.

The Qt/KDE-libraries documentation folder allows direct access to the HTML-online documentation of your copy of the Qt-library.
The path to the library documentation is usually automatically detected by the KDevelop installation program, but can be set
manually in the <ref id="General Configuration" name="KDevelop Setup"> dialog. Also, all available documentation for the KDE-libraries
are listed in order of the library name, so if you would use classes of a certain library it is easy to determine the library type
to be added to the linker settings in the project. Mind that the whole KDE-library documentation is only accessable when generated
by KDoc- so this program, included in the <idx/KDE-SDK/, has to be installed before the documentation can be generated. As the
installation program of KDevelop does this automatically, it should be installed before KDevelop is started for the first time. If
this is not the case and the documentation cannot be build, you are able to create it afterwards at any time with the <ref
id="General Configuration" name="KDevelop Setup"> dialog.

The library documentation tree is followed by the "Others" folder which is inteded to contain all personally customized
documentation as described below. Finally, the Doc-Tree allows access to the Project API and the Project Manual for your current
project.

<sect2>Adding Documentation to the Helpbrowser
<p>
To customize your Helpbrowser, open the Tree-View and select the "DOC" Tabulator. You will see an opened tree called
Documentation, containing four folders. The "Others" folder is, by default, empty. On a right mousebutton click over this folder,
a context menu opens that has an entry "Add Entry". Select this to open the Add Entry dialog where you have to enter two values:
the upper one for the name that will be displayed for the documentation within the Doc-tree, and, below that, a file-entry line.
Here, you have to enter the path and filename to the startpage that will be opened by the selection of the entry later. You can
enter the path and filename directly or by selection of the pushbutton on the right to open a file-chooser dialog. This allows a
quick browsing on your system to the path for your startpage. Mind that only HTML-documentation can be selected, so only HTML
files are allowed to choose. Selecting OK will add the entry to the Doc-tree and is available directly.

<sect2>Using the Search Index<label id="Using the Search Index">
<p>
KDevelop includes a set of fuctions to help you search information within HTML documentation. To use these features, your system
needs to have the program "glimpse", a free database generator, installed, which creates the search index and executes searches
within the documentation. To set up the index, see <ref id="General Configuration" name="KDevelop Setup">. The index is also
automatically generated during the installation program.

The search functions are available through several ways which you can choose from:
<enum>
<item>in the editor, select the text you want to have help on or place the cursor in the word that you want to look for. Then
press the right mouse button and select look up: "expression" This can also be done by selecting "Search Marked Text" from the
help menu, the shorcut key F2 or by selecting the Search icon from the toolbar.
<item>in the Documentation browser select the text you want to look up and press the right mouse button, select look
up:"expression" or select "Search Marked Text" or the search icon as above.
<item>if you want to search for a specific keyword, select "Search for Help on..." in the help menu or select the "Search for Help
on..." icon from the toolbar, opening a search dialog where you can enter the expression you want to get information for.
</enum>
Direct access to specific documentation is given by selecting the according icon in the "DOC" -tree-view or by the help menu
entries.

The Helpbrowser also offers support for grep to search for a selection within your current project, e.g you've opened the documentation
page for the <tt/KTMainWindow/ class (KDEUI library) and you want to know where in your code <tt/KTMainWindow/ appears. Mark
<tt/KTMainWindow/ and either select "Grep: KTMainWindow" or press Shift+F2. The "Search in Files" dialog opens with the results about
your grep search directly. Then you can choose an result line to jump to the according sourcecode.

<sect>Working with the Editor<label id="Working with the Editor">
<p>
An important part of the integrated development environment is the editor. You're using it for:
<itemize>
<item>creating, opening and saving source and project files
<item>editing source and project files
<item>writing your sgml documentation
<item>printing your project files
</itemize>
Generally, the editor itself doesn't do much difference in comparison to other editors; especially as it is a build-in version of
the popular KWrite, also known as the "Extended Editor". If you're familar with that, you won't have any problems using it for
managing your projects. In addition to normal editors, KDevelop contains a new printing system, that is far more extended for use
with sourcecodes- and you can choose between the printing program you want to use.

This section gives you more information about how to handle your project files and to make you more familiar with the editor's
functionality. A lot of Unix-hardliners would prefer using Emacs or XEmacs- they're fine with that. But it isn't neccessary for
easy programming, and especially for beginners, to work themselves into powerful editors which shall, in the result, only allow
you to enter your code.

<sect1>Managing Project Files
<p>
The following sections describe how to create, save, open and close your project files you need to edit- mind that this doesn't
include translation files or pixmaps. Those are recognized automatically and the according editing program like KTranslator opens
those files for you.

To give you an easy access to your files, KDevelop contains two easy-to-handle treeviews, similar to a filemanager, that recognize
if you selected a file, and opens it in the according editor window. The main view contains two windows that are used
independently, but connected via the Project Editor, so you can do all menubar actions the same way. The intention behind this is
that it allows you to handle two windows at the same time, although only one is visible. The C/C++ window thereby takes another
task, which allows you to easily compile your sources one by one, so you can check the impelmentations without having to run a
complete build-process over your project.

This can be done when having the C/C++ window on top. Select "Compile File" from the Build-menu or press the according button in
the toolbar. Your file gets saved and compiled, and you can control any errors by the compiler output in the output window.

Within the IDE you can open as many textfiles as you like. All opened files are listed in the Window-menu, so you can switch
between them by selecting the according filename from the menu. Further, the actual opened file is displayed with its name in the
window frame of KDevelop.

<sect2>Creating and Saving Files
<p>
To create a new file, choose "New" from the File-menu or select "Add File(s) to project"&rarr"New File". This opens the "New File"
dialog, where you can specify the filename and type. Additionally, you have to set the destination directory as well if the file
is added to the project or not. Finally, you can also use your header template for the project in case you want to add a new
sourcefile without generating a new class by the Class-Generator.

After the file has been created, you can edit the new file as usual; if you have to switch between different files, you can always
turn back to the file either via the file-trees or by the Window-menu.

For saving any changes, KDevelop offers a whole variety of options. The standard way would be to save the file by selecting "Save"
or "Save As" from the File-menu or by the Save-button on the toolbar. For saving all changed files at once, you could as well
select "Save all" from the File-menu.

Now, when working on a project, it is very annoying if something critical happens while you have done a lot of changes on your
files; sometimes you will bite yourself that you have forgotten to save the changes. KDevelop takes care of this by offering
"Autosaving", which is by default enabled and set to save all files in intervalls of 5 minutes. To select another saving period or
to disable this, see <ref id="KDevelop Setup" name="KDevelop Setup">, where the setup options are described.

Additionally, KDevelop takes care for all changes if you open another project or exit KDevelop. You will be asked for saving the
changed files, where you also have the option to specify which one to save and which you want to stay unsaved. Further, when
invoking any build-processes, your files get saved automatically, so you won't ever wonder why your application doesn't run the
way you expected it to do after your changes to the sourcefiles. The only exception is the "Compile File" command, which only
saves the currently opened source file visible in the source editor window.

<sect2>Opening and Closing Files
<p>
To open a source file, you have a lot of options as well. One way could be, as the standard for editors, to select "Open" from the
File-menu. You will be presented an "Open File" dialog, which allows you to choose the file you want to edit. Another, probably
more frequently used way is to select the file from the LFV, the Logical File Viewer, or the RFV, the Real File Viewer (see <ref
id="Overview">). The advantage of the file trees is that they provide a quick visual access to your files, especially the LFV,
which only displays your project files by their type, collected into folders. You can as well configure the LFV towards sorting
your files in another manner by a right mouseclick on the tree. Select "New Group" from the popup-menu, and you can configure a
new group, or select "Edit Group" to install new file filters by specifying the goup's file extensions, separated by commas.

The standard file groups for a project generated by KAppWizard are the Headers, Sources, GNU and Others. Additionally, after
adding a translation file, KDevelop adds a folder "Translations", containing your *.po files.

To close files, select the file to close from the Window-menu, which loads the opened file into the front editor. Then select
"Close" from the File-menu. If your file has been changed, you will be asked to save it. When closing a project, all currently
opened files will be checked for changes and you will be asked for saving as well.

<sect1>Navigating within Files
<p>
The following gives you a general guideline how to locate certain positions within your files for a quicker access.

<bf>&raquo How to find a certain line in a file</bf>

<enum>
<item>Select "Line" in the "View"-menu or press STRG+L. The dialogfiled "Goto Line" appears.
<item>Insert the linenumber you want to go to.
<item>Press OK.
</enum>

<bf>&raquo How to set a bookmark</bf>

<enum>
<item>Set the cursor to the line you want to access via a bookmark
<item>Select "Set Bookmark" from the "Bookmarks"-menu.
<item>A popup-menu opens that allows you to select the bookmark number you want to set for the new bookmark.
<item>Select the bookmark number.
</enum>

Another way to set bookmarks would be to select "Add Bookmark" from the "Bookmarks"-menu. This sets a bookmark to the current line
and appends it to the bookmarks-list. The documentation browser also offers setting a bookmark to the current page by a context menu
entry "Add Bookmark".

<bf>&raquo How to delete bookmarks</bf>

The bookmarks are set for each editing window separately- mind that your bookmarks aren't connected to a certain file you set the
bookmark for. To delete all bookmaks, select "Delete Bookmarks" from the "Bookmarks"-menu. This deletes the bookmarks for the
window actually on top, either the Header window, the C++ window or the browser window.

<bf>&raquo How to go to a bookmarked line</bf>

<enum>
<item>Select the "Bookmarks"-menu and open the popup menu containing the bookmarks for the window containing the bookmark you want
to view; either the C++-Window or the Header-Window entry.
<item>Select the bookmarked line.
</enum>

Selecting a bookmark for the browser window will open the browser and loads the page.

<sect1>Working with Keyboard Shortcuts
<p>
For using the editor, you should make yourself comfortable with some keyboard shortcuts that make it easier to position the cursor
and edit the file. The complete shortcut reference is also listed in section <ref id="Overview" name="Overview">.

<code>
one letter to the left                           Left Arrow
one letter to the right                          Right Arrow
one word to the left                             CTRL+Left Arrow
one word to the right                            CTRL+Right Arrow
one line upwards                                 Up Arrow
one line downwards                               Down Arrow
to the beginning of the line                     POS 1
to the end of the line                           END
one page up                                      PageUp
one page down                                    PageDown
to the beginning of the current file             CTRL+PageUp
to the end of the current file                   CTRL+PageDown
one letter to the left                           SHIFT+Left Arrow
one letter to the right                          SHIFT+Right Arrow
one word to the left                             CTRL+SHIFT+Left Arrow
one word to the right                            CTRL+SHIFT+Right Arrow
one line upwards                                 CTRL+Up
one line downwards                               CTRL+Down
to the beginning of the current line             CTRL+POS 1
to the end of the current line                   CTRL+END
one page up                                      SHIFT+PageUp
one page down                                    SHIFT+PageDown
to the beginning of the current file             CTRL+SHIFT+PageUp
to the end of the current file                   CTRL+SHIFT+PageDown
en/disable insertmode                            INS
copy selection to the clipboard                  CTRL+C, CTRL+INS
insert text from the clipboard                   CTRL+V, SHIFT+INS
delete current line                              CTRL+K
insert line after current line                   END, then Enter
insert line before current line                  POS 1, then Enter
undo editing step                                CTRL+Z
redo an undo step                                CTRL+Y
tabulator                                        TAB
delete letter left of cursor position            Backspace
delete letter right of cursor position           Delete
delete selected text                             Select text, then Backspace
</code>
<p>

<sect1>Edit Windows Settings
<p>
The editor inside KDevelop can be configured towards special editing needs with a global effect on all editing windows. Thereby
you can set the color modes, highlighting colors (also configurable in reference to the programming language of the file) and
automatic text settings like tab-with and selection modes. The following describes how to set these options by the configuration
dialogs provided in the "Options"-menu.

<sect2>General Settings
<p>
The editor's general settings can be configured with the "Editor" entry in the "Options"-menu. Select the according values and
press OK after you finished with your configuration.

<sect3>Edit Options
<p>
<descrip>
<tag/Auto Indent:/	this sets the edior to place the cursor below the first literal when a new line is entered.
<p>
<tag/Backspace Indent:/ this option sets the cursor below the first literal of the line above when backspace is pressed.
<p>
<tag/Word Wrap:/ words are taken into the next line after the column set in "Wrap Words At:"
<p>
<tag/Replace Tabs:/ tabulators in the current text are replaced with tabulators of the "Tab Width:" value
<p>
<tag/Remove Trailing Spaces:/removes trailing spaces
<p>
<tag/Wrap Cursor:/ sets the cursor to the end of the last line when backspace enters the beginning of a line
<p>
<tag/Auto Brackets:/ creates a closing bracket in front of the cursor when a bracket (any kind) is opened.
</descrip>

<sect3>Select Options
<p>
<descrip>
<tag/Persistent Selections:/ selections made stay marked after setting the cursor to a different place
<p>
<tag/Multiple Selections:/ allows multiple independent selections within the text
<p>
<tag/Vertical Selections:/ when selecting multiple lines, the selection is also made horizontal and doesn't cover the
whole line
<p>
<tag/Delete On Input:/ deletes a selection when writing in the selection.
<p>
<tag/Toggle Old:/ allows only one selection. A selection made gets deselected when another selection is made.
<p>
<tag/Wrap Words At:/ sets the maximum columns that a line can have. The word that contains a letter that reaches over this value
will be automatically broken into the next line.
</descrip>

<sect2>Colors
<p>
For changing the editor's general appearance, you can define a set of colors that the editor uses by selecting "Editor Colors"
from the "Options"-menu. You can configure colors for:
<itemize>
<item><bf/background:      /        the editor's background
<item><bf/text background:  /     	the background of displayed text
<item><bf/selected:         /       the color of selected text to display the selection
<item><bf/found:            /       the color of text found by a search via the menu "View"-"Search", "Repeat search" and "Replace".
<item><bf/selected + found: /       the color of text selected to search for and found
</itemize>

<sect2>Syntax Highlighting
<p>
The syntax-highlighting mode of KDevelop's editor can be configured by two dialogs; first you can set default colors for
syntax-highlihgting by the "Editor Defaults" entry in the "Options"-menu. There, you can set colors and fonts as well as the
fontsize for e.g. keywords. Select the default item and set all needed options.

The second configuration dialog is accessed by the "Syntax-Highlighting" entry in the "Options"-menu. This allows you to set the
file filters for the programming language, e.g. *.cpp, *.h  for C++. Then select the item that you want to configure. If you wish
to use the default values you've set in the "Editor Defaults" dialog, select the "default" checkboxes in the Item-style and
Item-Font sections. This reads the default settings for the selected item. After pressing OK, your new values will be enabled and
used by the editor.

<sect1>Searching and Replacing
<p>
<sect2>Sigle File Search
<p>
<bf>&raquo How to find one or more characters in the actual editing window</bf>
<enum>
<item>Select "Search" from the "Edit"-menu. This opens the search dialog.
<item>Specify the expression to search for in the edit field. The drop-down menu offers selecting a previous search expression.
<item>Select additonal options like "Whole Words only"
<item>Press OK.
</enum>

To repeat searching for an expression entered in the search dialog, press F3.

<sect2>Searching over Several Files
<p>
As the seach function only is referencing seaches over a single file that is currently visible, you're limited to this. But often
you want to search for the same expression overall your project. Therefore, KDevelop contains a <tt/grep/-dialog, which
lets you search over all files that you specify either by setting the directory to start the search from and/or by mime-type.
Specifying the exact directory and the mime-type will therefore reduce the time that KDevelop needs to read your files and display
the results. To start a search over several files, select "Search in files..." from the "Edit"-menu. The seach dialog opens and
lets you enter:

<itemize>
<item>The expression to search for (the pattern)
<item>The template used for the search
<item>The mime-type of files to search in
<item>The directory to start form
<item>If the search is recursive over all included subdirectories
</itemize>

By default, the grep-dialog is set to start at your project directory and works recursively over implementation and header files.

You can even extend your search pattern by using the following options:

<enum>
<item><bf/./ Match any character
<item><bf/^/ Match the beginning of a line
<item><bf/$/ Match the end of a line
<item><bf/\< / Match the beginning of a word
<item><bf/\> / Match the end of a word
</enum>

For a repeating search, you can also use the availabel operators:
<enum>
<item><bf/?/ The preceding item matches less than once
<item><bf/*/ The preceding item is matched zero or more times
<item><bf/+/ The preceding item is matched once or more times
<item><bf/{ n }/ The preceding item is matched exactly <em/n/ times
<item><bf/{ n,}/ The preceding item is matched <em/n/ or more times
<item><bf/{,n }/ The preceding item matches less than <em/n/ times
<item><bf/{n,m}/ The preceding item matches at least <em/n/ times but less than <em/m/ times
</enum>

Backreferences to bracketed subexpressions are also available by the notation <em/\n/.

After specifying your search, press "Search". The results are then displayed in the result-window. To jump to a file and line
number, select the resultline and press Enter or double click the result. The editor will automatically open the according file
and place the cursor to the line of the result. This allows a complete specification for any search action and give out exact
results.

KDevelop offers also some more specialized functionality to use grep within the editors and the browser. Select the expression you want
to search for in either of the windows and press SHIFT+F2 or select "grep:&lt;your_expression&gt;" from the right button popup menu.
This will ask grep to search for the selection in your project directory's files and will show the results immediately. Switching to
the result works as described above. From within the browser window, it lasts to place the cursor over a word and start searching; the
word under the cursor will be the search pattern.

<sect2>Searching within Documentation
<p>
While working on a project, you often need to have information about the parameters of member functions you want to use- most
often you remember the function's name that matches your needs, but the parameters are a very hard thing to keep in mind.
Therefore, and for other purposes that may occur, KDevelop contains a search functionality that combines searching expressions
that appear in your files with the documentation browser. To make use of this search functionality, you should have set up the
documentation browser correctly and created the search database. For invoking a search through the documentation, do the
following:

<enum>
<item>place your cursor at the word you want to search or mark an expression
<item>select "Search Marked Text" from the "Help"-menu or press the right mouse button to open the context menu; then select "Look
Up: "expression".
<item>after the search result page is displayed in the documentation browser, select the page that you think could contain the
information you need.
<item>the selected documentation page is displayed and your search result is marked. To display the next result within the same
documentation page, press F3.
</enum>

This allows you to easily find the information you need. For using the results, the documentation browser allows marking a
selection and copying it to the clipboard. Then return to the file you're editing and select "Paste" from the "Edit"-menu.

For a full description on how to use the Documentation, see <ref id="Using the Search Index" name="Using the Search Index">.

<sect2>Replacing Text
<p>
For replacing an expression, select "Search and Replace" from the "Edit"-menu. The "Search and Replace"-dialog lets you specify
the expression to be replaced as well as the replacement expression. Then press OK. The first expression which is found will be
marked, so you can see where the expression is and in which context. Then you can specify by a dialog if the expression shall be
replaced or not. When the search is finished by reaching the end of the current file, you will be asked if you want to start the
search again from the beginning. If you're finished, select "Cancel".

<sect1>Printing
<p>
As KDevelop is designed to give developers the best access to files and information to reduce development cycles, it also contains
a new printing utility which makes use of two common printing programs available for Unix-Systems, <em/a2ps/ (ASCII-to-Postscript) and
<em/enscript/. Besides these, you can also print by directly using lpr (the lineprinter device). As using a2ps or enscript offers the
most options towards printing, you should install either one of these on your system; both programs are usually shipped with
distributions, so you shouldn't have any problem to get them. But before printing, you should have a look at the available
configuration dialogs to prepare the output according to your needs. The following section describes how to configure KDevelop for
printing files.

<sect2>Configuring the Printer
<p>
The printing programs can both be configured by selecting "Print" from the "File"-menu; on the printing dialog, select the program
by the drop-down-menu in the left upper corner. Then press the "Options" button on the right. This opens the configuration for the
selected program that will be used. Another way to configure the programs are selecting "Printer Configuration..." from the
"Options"-menu; then select "a2ps" or "enscript".

<sect3>The a2ps Configuration Options
<p>
<sect4>Printing
<p>
<itemize>
<item><bf/header:/  adds a header frame to the page
<item><bf/filename:/  if checked, the header frame will contain the filename as its text
<item><bf/login:/  adds the User ID to the right upper corner of the page
<item><bf/borders:/  adds frame borders to the text page
<item><bf/Date & Time:/  adds the printing date and time
<item><bf/align files:/  prints out files on the same page, available for two-page printing mode
<item><bf/set TAB size:/  sets the TAB size for printing TABs
<item><bf/headertext:/ available, if filename is deselected and allows inserting another text to the header frame
<item><bf/fontsize:/  sets the fontsize for the text. The default fontsize is 9
</itemize>

<sect4>Textprinting
<p>
<itemize>
<item><bf/cut lines:/  cuts the line's contents if the line is too large to be printed. If deselected, lines will be broken.
<item><bf/interpret TAB, BS and FF:/ interpret TAB, Backspace and FastForward characters.
<item><bf/replace non-printing character by space:/ if the file contains non-printable characters, those will be replaced by space
characters.
<item><bf/print non-ASCII character as ISO-Latin 1:/ prints characters not included in the ASCII format in ISO-Latin 1 mode output
<item><bf/bold font:/ prints the whole text in bold font mode.
</itemize>

<sect4>Numbering
<p>
<itemize>
<item><bf/numbering lines:/  numbers all lines top-down if enabled
<item><bf/numbering pages:/ allows selecting page-numbering mode by:
<itemize>
<item><bf/file single:/ numbers each file's pages beginning with 1
<item><bf/file together:/  appends all following pages after the first for page numbering
</itemize>
<item><bf/lines per page:/  sets the maximum lines per page to be printed.
</itemize>

<sect3>The enscript Configuration Options
<p>
<sect4>Header
<p>
<itemize>
<item><bf/Fancy Header:/ adds a fancy header
<item><bf/Header Text:/ enables adding a header text
<itemize>
<item><bf/text:/ sets the text's contents
<item><bf/position:/ sets the text's position to left, center or right
</itemize>
<item><bf/Login:/ add the UserID to the header
<itemize>
<item><bf/login:/ enables adding UserID
<item><bf/position:/ sets the position for the UserID
</itemize>
<item><bf/Filename:/ add the filename to the header
<itemize>
<item><bf/Size of filename:/ add filename as full or short, meaning full path or filename only
<item><bf/Position:/ sets the position for the filename
</itemize>
<item><bf/Hostname:/ add the hostname to the header
<itemize>
<item><bf/hostname:/ enables adding hostname
<item><bf/size of hostname:/ sets the size for hostname
<item><bf/Position:/ sets the position for hostname
</itemize>
</itemize>

<sect4>Date & Time
<p>
<itemize>
<item><bf/Current Date:/ include the current date
<itemize>
<item><bf/current date:/ enables current date adding
<item><bf/positon:/ sets the position for the date entry
<item><bf/format:/ sets the date format
</itemize>
<item><bf/Modification Date:/ include the last modification date
<itemize>
<item><bf/modification date:/ enables modification date adding
<item><bf/position:/ sets the position for modification date entry
<item><bf/format:/ sets the date format
</itemize>
<item><bf/Current Time:/ include current time
<itemize>
<item><bf/current time:/ enables current time adding
<item><bf/AM/PM:/ use AM/PM or 24h format
<item><bf/Position:/ sets the position for the time entry
<item><bf/Format:/ sets the time format
</itemize>
<item><bf/Modification Time:/ include the last modification time
<itemize>
<item><bf/modification time:/ enables adding modification time
<item><bf/AM/PM:/ use AM/PM or 24h format
<item><bf/Position:/ sets the position for the time entry
<item><bf/Format:/ sets the time format
</itemize>
</itemize>

<sect4>Layout
<p>
<itemize>
<item><bf/Numbering & Border:/
<itemize>
<item><bf/numbering lines:/ adds line numbers to the document for printing
<item><bf/borders:/ adds a border to the pages for printing
<item><bf/numbering pages:/ numbers pages for printing
<item><bf/align files:/ appends files for page numbering
<item><bf/lines per page:/ the maximum value for lines per page
</itemize>
<item><bf/Format and TAB:/
<itemize>
<item><bf/set TAB size:/ sets the TAB size for interpreting TABs
<item><bf/font for header:/ sets the font used for the header text
<item><bf/font for body:/ sets the font for the body text (file contents)
</itemize>
<item><bf/Textprinting:/
<itemize>
<item><bf/cut lines:/ cuts the lines if too large. If unchecked, lines are broken
<item><bf/replace non-printing character by space:/ replaces characters that the printing charset doesn't support by space characters
</itemize>
<item><bf/Other Options:/
<itemize>
<item><bf/table of contents:/ adds a table of contents page that contains information about printed files, page numbers etc.
<item><bf/Highlight bars:/
<itemize>
<item><bf/highlight bars:/ highlights rows for printing
<item><bf/cycle fo change:/ sets the number of rows to change highlight style
</itemize>
<item><bf/Wrapped line:/
<itemize>
<item><bf/mark wrapped lines:/ lines that are broken get marked for printing
<item><bf/value for wrapped line:/ the preset value for the new line the line is broken into.
</itemize>
</itemize>
</itemize>

<sect4>Underlay
<p>
<itemize>
<item><bf/Text:/ sets the text to underlay
<item><bf/Position:/ sets the position of underlay text
<item><bf/Font:/ sets the font used for the underlay
<item><bf/Angle:/ sets the angle for the underlay text
<item><bf/Gray scaling:/ sets the grayscaling for the underlay text
<item><bf/Style:/ sets the underlay text to be printed as outlined or filled
</itemize>

<sect2>The Printing Dialog
<p>
<sect3>Direct Printing Options
<p>
<itemize>
<item><bf/Program:/ sets the printing program to be used for printing: a2ps, enscript or lpr
<item><bf/Printer:/ sets the printer to be used for printing
<item><bf/Output location:/ for printing into a file, select the output location
<item><bf/Orientation:/ sets the orientation for printing, either landscape or portrait
<item><bf/Copy:/ sets the amount of copies to be made per page
<item><bf/Paper Size:/ sets the paper size to be used
<item><bf/Output Format:/ for using enscript as printing program, you can choose between postscript or html printing
<item><bf/Default Printsettings:/ sets the default settings to use for printing
<item><bf/Outprinting:/
<itemize>
<item><bf/Page Printing:/ sets one or two pages on one sheet
<item><bf/Pages:/ select all,odd or even for using enscript
<item><bf/Pretty Print:/
<itemize>
<item><bf/pretty-print:/ enables pretty-print mode for enscript
<item><bf/color:/ use color printing
<item><bf/Pretty Print Mode:/ sets the printing mode dependend on your file format
</itemize>
</itemize>
</itemize>

<sect3>File Selection
<p>
The file selection dialog is accessed by the "Files" button on the printing dialog. The file selection allows specifying which files to
print out by certain criterias:
<itemize>
<item><bf/File Selection:/
<itemize>
<item><bf/current:/ the currently opened file visible in the editing window
<item><bf/all in project:/ all files included in the project currently opened
<item><bf/self chosen files:/ allows choosing the files to be printed by file-selection
<item><bf/all cpp files:/ prints out all source files of the project
<item><bf/all headers:/ prints out all header files of the project
<item><bf/changed files:/ allows specifying files that are changed in a timespan:
</itemize>
<item><bf/Changed Files:/
<itemize>
<item><bf/Between:/ specifies all files changed after:
<itemize>
<item><bf/Date:/ the date the files were changed
<item><bf/Time:/ the time the files were changed
</itemize>
<item><bf/And:/ specifies all files changed before:
<itemize>
<item><bf/Date:/ the date the files were changed
<item><bf/Time:/ the time the files were changed
</itemize>
</itemize>
<item><bf/Self Chosen Files:/ available if self chosen files is selected (see above)
<itemize>
<item><bf/add:/ press this to add a file selected for printing in the lineedit field left
<item><bf/delete:/ deletes a selected file from the printing list
<item><bf/clear:/ clears the printing list
</itemize>
</itemize>

<sect3>Print Preview
<p>
Print Preview is available for you to control how the output will look like. Therefore, KDevelop uses the program <em/ghostview/ or
<em/kghostview/. When the preview-button was pressed on either printing dialog, you will be presented a template output that shows you
the effect of the currently set options.

<sect>Projects<label id="Projects">
<p>

<sect1>Projecttypes
<p>

<sect2>Programs
<p>
KDevelop creates a projectfile with the .kdevprj ending. This file contains all your project information, so be careful not to
delete it. It is stored in the project's base directory and has to be opened to load the project. The projectfile keeps all
information for your files like the file properties, install path, distribution status and compiler options (CXXFLAGS). Setting
file properties allows you to keep track of where the files should go.

With KAppWizard, you can create a new application project according to your choice of application type. For now, KAppWizard
generates three kinds of fram applications, as:

<itemize>
<item>a single document interface (SDI) <idx/KDE/-application including a menubar, a toolbar and a statusbar. It contains basic control
resource management to allow extending the frame application into a unique <idx/KDE/ application. The application frame also
contains statusbar help messages as known from commercial products just like KDevelop itself. From the programmer's point of view,
it is based on three application-specific classes leaning on the MVC-concept (Model-View-Controller). Technically, the base
classes may not be viewed that way, but it's construction is at least created most logical to create applications with a GUI.

<item>a <idx/KDE/-based application frame window. This application type offers most flexibility to those wanting to develop their
program from scratch, but can also be used as a basis for developing wizard applications or modules.

<item>a Qt-only based program framework. For those programmers who want to use the Qt library as the GUI interface alone, we
tried to offer you a smart framework to support your application development. As Qt programming is fully supported, you should
have no problems to create a full-functional application by using Qt only.

<item>a C++ program framework. This application type is intended for those wanting to write a terminal based C++ program. Just
remove the "Hello World" line in main() and construct your classes the same way with KDevelop as for <idx/KDE/ applications.
</itemize>
For importing existing applications, we suggest using the New Project option. Select "Project" from the menubar and select "New".
The New Project dialog offers creates a project directory and subdirectories as well as the project file with the project name and
type. We advise copying all needed creation files like configure.in, Makefile.am's etc. into the project directory from your
existing project and choose "Project"&rarr"Add file(s)"&rarr"Add existing file(s)" to copy the sources into your new project directory.
Note that your Makefile.am's will be changed by KDevelop and you probably will have to change or delete some entries to provide
clean compilation. You should not edit the KDevelop write area, instead you should read the entries made by KDevelop and delete
matching titles created yourself. Also note that only one project is supported to work on at the moment, so your source files
should be in the project's subdirectory which has the same name as the main project directory. In the Logical File Viewer the
groups have to be set by yourself if you chose to use that importing possibility. Another way could be to create a frame
application and delete the created source and header files. Then you can add existing files as above.

<sect2>Libraries
<p>

This type of project isn't supported at the moment. This will be another feature planned to be integrated in later versions of
KDevelop.

<sect2>Multiple Targets
<p>

For some projects, the facilities of KDevelop at it's current state will not last. Those are projects that include multiple
targets like packages containing several applications. As commands like "Execute" or the Class Browser require that only one
target is build by the developer, those types of projects are only supported in the way that you have to write your own entries to
the Makefiles and build your directories for the additional libraries or binaries to build. Nevertheless, a build-process always
invokes your make-program independent from what actually the targets are; so these functions still can be used.

Another way to still work with this type and to still have access to the binaries themselves are creating empty projects and move
their subdirectories in conjunction with the project files to the directory containing all sources later. Then you could load each
target independently by its project file; this also allows executing and debugging the target.

<sect1> New Projects
<p>

The KDevelop Application Wizard allows the creation of four different types of projects, constructing a
framework for each. All projects are FSF-compliant and use the GNU standard development tools as described in the requirements
section of this handbook. For <idx/KDE/ applications, the wizard offers two different frameworks, the <idx/KDE/-Application, providing
a complete application with base classes for document type, view and application. This includes the creation of a menubar, toolbar
and statusbar, the mainwindow inherits the KTMainWindow class. The <idx/KDE/-Mini-Application only gives a view which is empty. This
type of project can be used for the creation of small desktop tools or other simple applications without too much change on the
existing code provided by the framework. A Qt-Application offers the creation of a <idx/Qt/-only program if you wish no dependencies
towards the KDE-libraries for end-users. (NOTE: The configure script still checks for the <idx/KDE-libraries/.  This will be fixed in
the next version of KDevelop).	
The Qt-Application also is created by using tree base classes like the KDE-standard-Application and provides a menubar, toolbar
and statusbar.

The C++ -Application type offers a framework for creating commandline applications.  It is ready to run and by default displays
"Hello World" as the only action.  This may be useful for C++ learners who would like to program applications without using a GUI
first or for those working on commandline programs written in C++ or C.

The wizard asks for your project name, version and the location where the project directory will be build.  Furher, your Name and
Email adress are asked for inserting them in header and cpp templates on top of your source files as well as for entries in the
*.lsm file.

<sect1>Opening and Closing of Projects
<p>
KDevelop is by default configured to open the last project loaded when starting. This allows a fast start, but you may want to
change that to just start the IDE without any project. To prevent the default behavoir, disable the "Load last project" option in
the <ref id="KDevelop Setup" name="KDevelop Setup"> dialog.

To open another project, select "Open" from the "Project" menu or press the "Open Project" button on the toolbar. In case you've
got another project currently open, this will be closed. If your current project then contains files that aren't saved, you are
asked to save all changed files. Thereby, you can select which file to save and which you want to close without saving, or to save
all at once.

Then you get an "Open Project" dialog, where you can change to the directory containing the project file to be loaded. KDevelop
project files have the <em/*.kdevprj/ mime-type which is also displayed by a project icon. Select the project file and press
"Open". When loading a project, the Class Browser scans all files and builds the initial classtree, so you can start working on the
project by using the Class Browser directly.

Another comfortable way to open a project is to select the project file in the KFM, the <idx/KDE/ File Manager. This will start
KDevelop with loading the selected project file. You could as well open a project by commandline, entering <tt/kdevelop
projectname.kdevprj/.

When closing KDevelop, your project file will be saved automatically and the IDE detects if you have changed any projectfiles.
Then you will be asked to save any changes before exiting. The available options for closing are the same than for closing a
project before loading another.

<sect1>Editing a Project
<p>
After you created a new project with the KAppWizard, the usual task is to extend the project by editing the already created
sources and adding classes, pixmaps, pictures and whatelse you project needs. Now, editing a project means that you can change the
default project after its generation by menus and dialogs according to your needs. The next section therefore describes how you
can add existing files and classes as well as creating new files. This is needed for building your project, but this won't help
you for the installation process by the end-user. Therefore, section <ref id="Setting Project File Options" name="Setting Project File
Options"> describes how to set File Properties especially for additional files that you want make to install, like documentation or
pixmaps.
Another part in project maintaining is adding translations for applications that support internationalization, which is described
in <ref id="Adding Translations" name="Adding Translations">.

<ref id="Extending the Project Documentation" name="Extending the Project Documentation"> covers questions on how to create a good set
of documentation for online help enabling the end-user to help himself in case of troubles as well as how to use your product.

Finally, <ref id="Project Hacking" name="Project Hacking"> describes how you can eventually work around the KDevelop project
management in special cases.

<sect2>Adding and Removing Files and Classes<label id="Adding Files and Classes">
<p>
Adding a new file is often used when you think that you should separate your class implementation file into several ones. Then you
need to create an new file which will contain the part of the class implementation you want to move. You can do this by choosing
"New" from the "File" menu, opening the "New File" dialog. This enables you to specify the file-type, name and the location. When
entering the filename, KDevelop automatically enters the extension for you, but you can as well change the extensions towards your
own preferences. Further, you can include the header template for sourcefiles, so you don't have to copy this into your new file
yourself. Also, you can decide, if the file is included in the project or not. Mind that this doesn't cover the installation
destination; this has to be configured later by setting the file preferences.

After the new file has been created, the project file will be updated as well as the according Makefile.am's.
To add a complete class to your project, you can constuct a new class with the Classgenerator which is invoked by "New Class" from
the Project-menu.

In case you have an existing project and you want to add certain classes that you want to re-use in your project, select "Add
File(s) to Project..." from the Project-menu. Select "Add existing files", which will open a dialog to let you specify which files
will be added to the project and the destination directory. Mind that the files will be copied into the specified directory and
added to the project. You should call "Make" after adding sources; then your added files will be included in the build-process. In
case you want to add e.g. pixmaps that have to be installed by the end-user, you should update the File Properties for the added
file and specify the installation path (see <ref id="Setting Project File Options" name="Setting Project File Options">

To add a file to the project that is already in the project directory, go to the RFV, where all project-included files are
dispayed by their project status by a red ! over the file icon. Select the file you want to add to the project (which has a normal
file icon) and press the right mouse button to get the popup-menu. Then select "Add".

Files can also be removed from your project. This could be needed in cases where you don't want to use pre-generated files that
are already given by the KAppWizard. To remove a file, you have additionally the option between removing a file from the project
or delete it completely. To remove a file from the project, select the file in the LFV or the RFV, press the right mouse button
and select "remove". To delete a file, select "delete physically".

<sect2>Setting Project File Options<label id="Setting Project File Options">
<p>
The file properties dialog can be accessed via the project menu or within the LFV by a right mouseclick.  It shows the project
files in groups as they are sorted in the LFV and displays the file properties like file size, file type and if the file is
included in the project as well as the installation path if the file is going to be installed by the end-user's make install
command.  It is important for documentation files as well as pixmaps to specify the location where the files should go when the
project is build and installed by end users, so you have to set up those locations. For standard <idx/KDE/ location macros you should
look in your Makefile.am where the location macros are specified.


<sect2>Adding Translations<label id="Adding Translations">
<p>
As <idx/KDE/ allows configuring your desktop and the behavoir of your applications, you also have the option to choose the language
that your application uses, in regards of the use of online-documentation as well as the application's look. For documentation files,
this seems a trivial task. You would add a subdirectory labeled by the desired language, e.g. <tt/de/ for german, to the
<tt/docs/ directory of your project and copy the english documentation into that directory. Then you would generate the
documentation and set all project file options for the installation directories. Then you could start translating the sgml file to
your desired language and regenerate the documentation; then you're done.
For the application, this seems a bit more difficult for the programmer. Now, we want to explain how to enable
internationalization support for your application and how to add the languages you want to support.

First, you have to enclose all visible strings of your application that appear in bars or dialogs with the <tt/i18n()/ macro.
This macro is a replacement for the function <tt/klocale->tranlate()/ of the KLocale class and much easier to use. As this macro
is declared in the <tt/kapp.h/ include file, you have to add <tt/#include &lt;kapp.h&gt;/ to the source file or the class
declaration file of the class that makes use of the macro. Also it should be mentioned, that although <tt/i18n()/ is a macro and
therefore you could think about using the original function, this won't work because the strings that are set up for translation
have to be read out of the sources and get stored in the application's translation file (&lt;YourApp&gt;.pot in the /po
subdirectory). This task is done by the program xgettext, and to do this, you would enter <tt/make messages/ in your prject
directory containing the sources. As xgettext depends on the <tt/i18n()/ macro, the original function won't do the job.

For translations themselves, you first have to create the message file containing all strings that are used in your sources with
the <tt/i18n()/ macro. This can be done by choosing "Make Messages and merge" from the Build-menu.
Then you have to add the languages that your application wants to support. Therefore, select "Add Tranlation File" from the
Project-menu. This opens a language selection dialog. Select the language and press OK. This will build the ASCII file containing
entries for the filename of the string and the line where the original string is placed. Then you will see a <tt/msgid/ line
containing the string to translate, followed by <tt/msgstr/. The msgstr line is mostly empty except for the translations already
provided by the <idx/KDE-libraries/. Those have to be filled with the according translations of your language.

You could think about writing the translations by hand, which can also be done. But the <idx/KDE-SDK/ offers the use of the program
KTranslator, which ready the already existing files from other applications installed on the system, so you can reuse already
translated strings to support your language.

To access KTranslator, the easiest way is selecting a &lt;language&gt;.po file in the /po directory either in the LFV or in the
RFV. This opens KTranslator and lets you do the translating easiely. Mind that you have to set up KTranslator's properties
yourself to include the author name and the language as well as the destination file. KTranslator by default only opens your
translation file.

For all translation files, <tt/make/ uses the program <tt/msgfmt/ to format your message files to use with the binary, but you
don't have to take care for that, as well as specifying the destination directory for installing the translation files; this is
all done by KDevelop automatically.

For more information about internationalization support, see <htmlurl url="http://www.kde.org" name="http://www.kde.org">; a lot
of people are doing translations for you to support their language. You will find a list of email-adresses of the translators you
could write to and who will help you with this. Also read <ref id="The Dialog Editor" name="The Dialog Editor"> and <em/The KDevelop
Programming Handbook/ where questions about internationalization are covered again.

<sect2>Extending the Project Documentation<label id="Extending the Project Documentation">
<p>
All projects created with KDevelop contain a pre-configured documentation, which already contains standard chapters for
installation, project name and version as well as the author name and email-address. As KDevelop uses SGML-templates, it's very
easy to extend the documentation to a full descriptive helpsystem. The only thing you have to do is editing the sgml file, placed
in docs/en as index.sgml. The reference documentation included with your sgml-tools package can be added to the helpbrowser and
allow you direct access to special tags as well as a short description of how to extend the documentation. SGML has a lot of
advantages, whereas <idx/KDE/ makes wide use by this documentation type with the additional ksgml2html tool. This creates the typical
<idx/KDE/-style documentation and makes it look nicer. Anyway, the sgmltools alone are enough to produce a html output that is already
included in your application. To create the documents using ksgml2html, install the tool and run "Make User-Manual" from the
Build-menu. The Documentation Browser allows a direct controlling of the output by selecting "Project User-Manual" from the
Help-menu or the according icon in the DOC-tree. Then you can browse the documentation online in KDevelop and have a better
overview by the output over errors that result in missing tags.

Now, while extending the documentation, you can't avoid that additional files are produced that have to be included into the
project as each <tt/sect/-tag creates a new HTML file. The output generated by the KAppWizard is already included in the project,
so you don't have to care for their installation path. What you have to watch out for is any index-xx.html file, where xx is
higher than 6 (as the first six pages are already included in the project). After generating the documentation, switch to the RFV
and browse to your documentation directory. Press the right mouse button over the files to add and select "Add". Further,
ksgml2html adds the <idx/KDE/ logo to the documentation directory. This file, <tt/logotp3.gif/, has to be added to the project as well.
Then you have to select the "File Properties" either from the Project menu or by the popup menu in the file-viewers. The easiest
way to set the installation path is to select a documentation file already set up for installation such as <tt/index.html/. You
see that <tt/Install/ is checked and the Installdir+filename already contains the destination. Mark the Installdir and enter
CTRL+C to copy the installation path to the clipboard. Then select the file you want to specify for installation. Enable
<tt/Install/, this will enable the installdir-entry field, already containing the filename. Place the cursor in front of the
filename and enter CTRL+V to insert the clipboard contents (which was the installation path copied before). This is the fastest
way to specify the installation path. For more options about specifying installation destinations, see <em/The KDevelop
Programming Handbook/.

<sect2>Project Hacking<label id="Project Hacking">
<p>
When working with a project, you should never edit the project file by hand. This will prevent KDevelop from loading your project
correctly under certain circumstances, as well as changes will not result in updating the Makefiles. To change any settings for
your project, you have to use the given menuentries like e.g. for adding files or setting file properties. For experts that are
not comfortable with certain options for e.g. the linker or need additional project configuration, you should work yourself into
the Makefile.am macros and add all changes in the Makefile.am's after the section separated with the entry "KDevelop write area".
As the GNU-tools are using the commands at the end of all macro files, you can overwrite KDevelop's settings with this. Mind that
this will prevent using KDevelop for any changes related to project configuration.

<sect1>Compiler and Linker Flags for Projects
<p>
Each new project contains all needed options for the compiler and linker as well as general settings. By default, your project
is set to use debugging by the -g flag, and warnings are set to the standard, -Wall. This ensures you can debug your application
and detect constructions that may cause program errors. For some applications, you would need additional compiler or linker flags,
especially if you're using libraries that are not currently included by the linker. Then you need to update the project by
configuring the correct settings with the Project Options dialog. See <ref id="Build Settings" name="Build Settings"> for more
information how and where to set Compiler Options, Warnings and Linker Options.

<sect1>External Projects
<p>
Existing projects can be converted to KDevelop projects by selecting "New" from the project menu.  The following dialog creates an
empty project file with your project name, version and type information as well as your name and email adress.  Then copy all your
compilation and construction files to the new project directory and choose "Add Files" from the project menu.  The files selected
will be copied into your project directory and the makefile.am's are updated.   Please change all Makefile.am entries existing
before the conversion towards the now created entries done by KDevelop in the KDevelop area.  Test, if your program can still be
compiled and installed after the conversion to ensure the project's consistancy.

<sect>Build Settings<label id="Build Settings">
<p>
The Project Options dialog, accessed by the project menu, lets you specify all needed parameters for your project. Those will be
used for the Makefile.am's and the configure.in script (e.g. version number change or compiler warnings ) and thereby set the
compilation preferences as well.. After changing the project options, you should invoke "make clean" or "rebuild all" to compile
your project with the new options. Please mind that debugging is only available if the project options are set to create debugging
information, the amount can be set with the debug level (0-3). If you add functions that belong to a library that is not included
in the linker flags, your program will not link correctly if those are not updated, so keep track of your library linking.

For a release build of your application or for distributing the sourcecode package, you should watch the following standard
settings:

<itemize>
<item>disable debugging
<item>enable optimization and set optimization level to <bf/-02/
<item>set the compiler warnings to <bf/-Wall/
<item>for each new release, increase the version number and update the project.lsm file for version and requirements.
</itemize>

<sect1>General Options
<p>
The first page of the Project Options dialog sets the general options for your project. These are project name and number, the
handbook sgml file which is used for generating a set of HTML files that are included in the project and specific information
about the author. The short description field is for additional information that you want to include like the program's purpose
and the like.

<sect1>Compiler Options<label id="Compiler Options">
<p>
The compiler options page sets the compiler flags towards your target, debugging and additional.

<sect2>Target
<p>
The target box contains three options that can be set:

Target Machine: You have the choice to set the target machine option here by choosing between your machine (default) and i386v,
which is the option if you configured your compiler as a cross-compiler for an Intel 386-compatible machine running System V. This
option sets the -b flag to the compiler. Usually you would leave this to the default.

only syntax-check: If checked, the -fsyntax-only flag is set. This means that the compiler will check your code only for
correctness in regards to the syntax, but doesn't check anything beyond that.

Optimize: You can enable optimization for your build process by this option, meaning to set the -O flag. If not checked, the flag
is set to -O0, so no optimization will be used. If you enable optimization by checking this option, you can as well specify the
optimization level below from 1 to 3.

For a release version of your application, enable optimization and set the level to 2.

<sect2>Debugging
<p>
Right of the Target box, you can see the Debugging-section. This means that you can set your compiler to include information for
debuggers within the final binary, so the programmer can follow the execution of the application with the debugger in direct
context to the sourcecode.

Enable debugging therefore sets the -g flag; the debugging level specifies the amount of information to be included in the binary.
Availabel are level 1 to 3 to choose from. Mind that the binary execution will be slower by setting any debugging option and that
the binary size will increase by the debugging level.

Generate extra information for gprof: sets the -pg flag, resulting that the compiler will include information for the gprof
program that displays caller graphs of your program's function.

Store temporary intermediate files: sets the -save-temps flag. This will result in storing the usually temporary files produced by
the preprocessor and the assembler. A compilation of a sourcefile will therefore produce three output files: an *.o file which is
the final output of the compiler, an *.i file produced by the preprocessor and an *.s file as the output of the assembler.

For a release of your project, disable any debugging.

<sect2>Additional Options
<p>
The text entry field on the bottom is intended for you to manually set any flags for the compiler by setting the CXXFLAGS
environment variable in the makefiles, so make sets the flags before the build process and reset them afterwards. For a complete
description of all available compiler flags you should see your compiler documentation; for gcc and egcs this can be done by
<bf/man gcc/; <bf/man g++/ will show you information about the c++ script that is used to lead the compiler.


<sect1>Compiler Warnings<label id="Compiler Warnings">
<p>
The following gives a desciption about the compiler warning options that can be set on page 3 of the project options dialog. The
explanations are taken from the man page for GCC, egcs version 1.1.1.
The warnings themselves are diagnostic messages that indicate that constructions may cause errors.

<descrip>
<tag/-Wall/Standard `-W' options combined.
<p>
<tag/-W/ Compile with -W. This option sets options not included in -Wall which are very specific. Please read GCC-Info for more
information.
<p>
<tag/-Wtraditional/Warn about certain constructs that behave differently in traditional and ANSI C.
<p>
<tag/-Wundef/"Warn if an undefined identifier is evaluated in an `#if' directive.
<p>
<tag/-Wshadow/Warn whenever a local variable shadows another local variable.
<p>
<tag/-Wid-clash-LEN/Warn whenever two distinct identifiers match in the first len characters. This may help you prepare a program
that will compile with certain obsolete, brain-damaged compilers.
<p>
<tag/-Wlarger-then-LEN/Warn whenever an object of larger than LEN bytes is defined.
<p>
<tag/-Wpointer-arith/Warn about anything that depends on the «size of» a function type or of void. GNU C assigns these types a
size of 1, for convenience in calculations with void * pointers and pointers to functions.
<p>
<tag/-Wbad-function-cast/Warn whenever a function call is cast to a non-matching type. Forexample, warn if <tt/int malloc()/ is
cast to <tt/anything *./
<p>
<tag/-Wcast-equal/Warn whenever a pointer is cast so as to remove a type qualifier from the target type. For example, warn if a
const char * is cast to an ordinary char *.
<p>
<tag/-Wcast-align/Warn whenever a pointer is cast such that the required alignment of the target is increased. For example, warn
if a char * is cast to an int * on machines where integers can only be accessed at two- or four-byte boundaries.
<p>
<tag/-Wwrite-strings/Give string constants the type const char[length] so that copying the address of one into a non-const char *
pointer will get a warning. These warnings will help you find at compile time code that can try to write into a string constant,
but only if you have been very careful about using const in declarations and prototypes. Otherwise, it will just be a nuisance;
this is why we did not make `-Wall' request these warnings.
<p>
<tag/-Wconversion/Warn if a prototype causes a type conversion that is different from what would happen to the same argument in the absence of a
prototype. This includes conversions of fixed point to floating and vice versa, and conversions changing the width or signedness
of a fixed point argument except when the same as the default promotion.
<p>
<tag/-Wsign-compare/Warn when a comparison between signed and unsigned values could produce an incorrect result when the signed
value is converted to unsigned.
<p>
<tag/-Waggregate-return/Warn if any functions that return
structures or unions are defined or called. (In languages where you can return an array, this also elicits a warning.)
<p>
<tag/-Wmissing-prototypes/ Warn if a global function is defined without a previous prototype declaration. This warning is issued even if the definition
itself provides a prototype. The aim is to detect global functions that fail to be declared in header files.
<p>
<tag/-Wmissing-declarations/ Warn if a global function is defined without a previous declaration. Do so even if the definition
itself provides a prototype. Use this option to detect global functions that are not declared in header files. -Wredundant-decls
Warn if anything is declared more than once in the same scope, even in cases where multiple declaration is valid and changes nothing.
<p>
<tag/-Wredundant-decls/Warn if anything is declared more than once in the same scope even in cases where multiple declaration is
valid and changes nothing.
<p>
<tag/-Wnested-externs/Warn if an extern declaration is encountered within an function.
<p>
<tag/-Winline/Warn if a function can not be inlined, and either it was declared as inline, or else the -fin*line-functions option was given.
<p>
<tag/-Wold-style-cast/Warn if an old-style (C-style) cast is used within a program
<p>
<tag/-Woverloaded-virtual/(C++ only.) In a derived class, the definitions of virtual functions must match the type signature of a
virtual function declared in the base class. Use this option to request warnings when a derived class declares a function that may
be an erroneous attempt to define a virtual function: that is, warn when a function with the same name as a virtual function in
the base class, but with a type signature that doesn't match any virtual functions from the base class.
<p>
<tag/-Wsynth/Warn when g++'s synthesis behavoir does not match that of cfront.
<p>
<tag/make all warnings into errors/(-Werror) Treat warnings as errors; abort compilation after any warning.
<p>
</descrip>

For a release of your project, it is recommended to enable <bf/-Wall/.

<sect1>Linker Options<label id="Linker Options">
<p>
The Linker Options for your current project can be set by the last page of the project options dialog. You have to enable those
libraries that your application uses to link them to your binary with the linker, e.g. your application uses the class
KFileDialog. As the class KFileDialog is part of the KFile library, you have to enable kfile. For classes or functions that are
not listed as checkboxes, use the <bf/"additonal libraries"/ field.

<sect2>Linker Flags
<p>
<descrip>
<tag/remove all symbol table and relocation information from the executable:/ This means that all redundant information will be
removed from the object files and the binary, resulting that debugging will not be possible. For as long as your application is in
a development stage and not released as final, you should leave this option disabled.

<tag/prevent using shared libraries:/ This option disables the use of shared libraries on systems that support this. On systems
using no shared libraries, this option will have no effect.

<tag/additional flags:/ Here, you can enter additional flags for the linker, setting the LDFLAGS environment variable by make. The
available options can be taken from the man page for <bf/ld/ or your compiler manpage.
</descrip>

<sect2>Libraries
<p>
The libraries section contains checkboxes for the most needed libraries in conjuction with <idx/Qt//<idx/KDE/ application
development. You have to enable those libraries that your application uses, otherwise the linker will complain about unresolved
symbol tables.
<descrip>
<tag/X11/The X11 library. Recommended for all X-Window programs.
<p>
<tag/Xext/The X11 extension library. Also most X-Window programs depend on Xext.
<p>
<tag/qt/The Qt library. Recommended for <idx/Qt/ and <idx/KDE/ applications.
<p>
<tag/kdecore/The KDE Core library; contains the classes for KDE Application frameworks.
<p>
<tag/kdeui/The KDE User Interface library; contains KDE-specific widgets.
<p>
<tag/khtmlw/The KHTML Widget library.
<p>
<tag/kfm/The KFM library containing classes for KFM functions.
<p>
<tag/kfile/The KFile library. Contains file dialogs etc.
<p>
<tag/kspell/The KSpell library. Contains an interface for programs to use ISpell for spellchecking.
<p>
<tag/kab/The KAdressBook library. Needed for access to the adressbook as well as providing adressbook widgets
<p>
</descrip>
<bf/additional libraries:/ Here you can enter additional libraries that your application needs, e.g. the KOM library. Set the
libraries with the -l option; for the example -lkom.

<sect2>Make
<p>
As GNU make supports some useful options, the Project Options dialog contains a page called "Make-Options", where those can be
en/disabled. The available settings are:

<descrip>
<tag/

<tag/Print debug information/ prints out all information about the project files and what make determines for rebuilding them.
<tag/Continue after errors/ tries to continue with the compilation after an error occured (e.g. a file couldn't be compiled due to an
error)
<tag/Print the data base/ prints out the make-database for the current process which contains the changes from the last
build-run. <tag/Environment variables/ give the current environment variables a higher priority than the currently used variables in
the Makefiles.
<tag/No built-in rules/ doesn't use built-in rules for make.
<tag/Touch files/ don't run the compiler on changed files; instead only touches them. This sets them as already processed by make.
<tag/Ignore all errors/ Ignores all errors that occur
<tag/Silent operation/ doesn't print out any information about the build-process
<tag/Print working directory/ prints the current directory during the make-process.
<tag/job number/ sets the amount of parallel processes for make. For a single-CPU system we recommend setting this to one or two.
<tag/set modified/ sets the selected file modified. Choose the file by clicking the folder button on the right. Setting a file modified
means that the file will be processed by make and compiled if it is a source file.
<tag/additional options/ set additional options to make; those can be found in your local man page for "GNU Make". </descrip>

<sect>O Navegador de Classes<label id="The Class Browser">
<p>
<sect1>O Visualizador de Classes
<p>
O Visualizador de Classes do KDevelop é uma das ferramentas mais importantes e úteis que o ambiente de desenvolvimento disponibiliza ao programador para gerir o código do
seu projecto. Quando um projecto é aberto, um analisador de sintaxe de classes lê todo o código do projecto procurando funções, classes etc., apresentando depois os resultados na
árvore de vista VC. Este capítulo mostra-lhe como utilizar o Visualizador de Classes e a funcionalidade disponibilizada e como isso pode melhorar o seu trabalho.

As Classes e os seus métodos também são acessíveis através das caixas de selecção da barra de ferramentas do navegador. Aí, a caixa esquerda selecciona a classe; a direita
permite-lhe escolher os métodos da classe seleccionada. Quando selecciona um método, o navegador de classes mostra automaticamente o ficheiro
de implementação e coloca o cursor no método. Finalmente, o botão de assistente de classes à direita da caixa de selecção irá mostrar-lhe,
quando premido, a declaração do método. O menu de escolha, disponibilizado pela seta para baixo no botão, permite funcionalidades
adicionais também disponíveis no navegador de classes, tais como:

<itemize>
<item>Ver Declaração: navega para a declaração do método
<item>Ver Definição: navega para a definição do método
<item>Nova Classe: abre o diálogo de Nova Classe para construir uma classe nova
<item>Adicionar Método: adiciona um método à classe seleccionada
<item>Adicionar Atributo: adiciona um atributo à classe seleccionada
</itemize>

<sect2>Objectos Disponíveis
<p>
Por objectos disponíveis, descrevemos um termo que significa que o código C++ pode ser visto como uma colecção de objectos- classes, seus membros,
funções globais e afins. A árvore de classes apresenta estes objectos logicamente e ordena-os por caracter, pelo que são fáceis de localizar
na árvore bem como pelo seu icon correspondente. Assim a árvore de classes contém uma pasta "Classes" e uma "Globais". Por isso a pasta "Classes"
geralmente contém as classes do projecto; se o seu projecto contém subdirectórios para gerir os ficheiros de código, estes também são
apresentados pelo seu nme de directório original e contêm todas as classes que estão guardades nos ficheiros localizados no subdirectório.

Mais ainda, quando expandindo uma classe, a árvore de classes apresenta o conteudo da classe separando os métodos e atributos. Como estes podem ter
atributos dos tipos público, privado e protegido, estes são também apresentados por icons modificados. Pode ver que uma classe apresentada no
Navegador de Classes contém todos os objectos que estão presentes na declaração da classe.

Agora, classes são algo muito comum quando a programar em C++ e irão conter a maior parte do código. Mas as aplicações também contêm objectos
que têm a apresentação de "Globais" para o programa. Estes seriam estruturas, funções etc. Especialmente a função <tt/main()/ aparece em
todas as aplicações e necessita de a modificar de uma ou outra forma por vezes. Para aceder a estes objectos, o Visualizador de Classes disponibiliza a
pasta "Globais", contendo subpastas para os seguintes tipos de objectos:
<itemize>
<item>Estruturas
<item>Funções
<item>Variáveis
</itemize>

Como os icons que apresentam estes itens são semelhantes aos utilizados no visualizador de classes, o seu significado é fácil de adivinhar e recordar pelo
programador.

Finalmente, pode ser afirmado que o visualizador de classes apresenta o seu projecto graficamente através dos seus objectos relativamente à sua aparência para
o código. Na secção seguinte irá aprender como utilizar o visualizador de classes e as suas ferramentas em conjunto com o seu código.

<sect2>Navegar as Declarações e Implementações dos Objectos
<p>
A maior capacidade do Visualizador de Classes é disponibilizar uma boa forma de aceder rápidamente ao seu código independentemente da sua localização
dentro dos ficheiros. Assim, selecções através de um clique do rato irão resultar nas seguintes acções:

<itemize>
<item><bf/Num nome de classe:/  Vai para a declaração da classe
<item><bf/Num método da classe:/ Vai para a implementação do método
<item><bf/Num atributo da classe:/ Vai para a declaração do atributo na declaração da classe
<item><bf/Numa estrutura:/ Vai para a declaração da estrutura
<item><bf/Numa função global:/ Vai para a implementação da função
</itemize>

Agora, Isto permite-lhe o acesso mais necessário ao código dos objectos. Aparentemente, pode ser necessário modificar o cabeçalho de um método, resultando
na necessidade de alterar a sua declaração na classe bem como a implementação. O visualizador de classes suporta isto disponibilizando
menus de contexto acessíveis pelo botão direito do rato sobre os itens. Num método ou função, isto significa que pode seleccionar para onde quer ir:

<itemize>
<item><bf/Ir para a definição:/ Vai para a implementação- este é o defeito para um clique do botão esquerdo como descrito acima
<item><bf/Ir para a declaração:/ Vai para a declaração do método ou função.
</itemize>

Através deste comportamento, o Navegador de Classes oferece-lhe acesso a todo o lado que necessita ir para programar a sua aplicação em C++.

As seguintes secções dão-lhe uma descrição de outras ferramentas que o Navegador de Classes disponibiliza- irá acha-las muito úteis quando
trabalhar com grandes projectos pois elas potenciam o trabalho orientado por objectos em programas C++.

<sect1>As Ferramentas de Classes
<p>
As ferramentas de classes são diálogos que tornam ainda mais fácil ao programador obter mais informação sobre as classes do seu projecto. Como o
visualizador de classes apresenta todos os objectos segundo a sua ocorrência no código, por vezes você pode querer mais informação sobre classes sem ter de
olhar para o código. Assim, os diálogos das ferramentas de classes estão idealizadas para apresentar atributos específicos de classes.

O diálogo das ferramentas de classes é invocado pelo menu de contexto sobre uma classe no visualizador de classes. Seleccione "Ferramentas de Classes", e o diálogo surgirá.
Para obter informação sobre uma classe, escolha a classe na lista de selecção no topo. Depois os botões na barra de ferramentas disponibilizam funções que lhe dão
árvores específicas para a sua classe. Estas são:

<descrip>
<tag/ Pais:/
Os pais da classe seleccionada, o que significa a classe donde herdou. Isto é útil para heranças múltiplas bem como para ver porque uma
classe se comporta de uma ou de outra forma, por ex. para diálogos a sua classe Pai poderia ser <em/QWidget/ ou <em/QDialog/.
<tag/Filhos:/
Apresenta as classes filhas que herdam da classe actual.
<tag/Clientes:/
Classes que fazem uso da classe seleccionada através de um atributo na sua declaração de classe.
<tag/Fornecedores:/
Os fornecedores que dão atributos para a classe seleccionada.
<tag/Atributos:/ Os atributos da classe pelo seu nome.
<tag/Métodos:/ Os Métodos da classe seleccionada.
<tag/Métodos Virtuais:/ Os métodos virtuais que uma classe disponibiliza.
</descrip>
Ainda mais, a selecção de um atributo publico, protegido, privado ou todos mostra Atributos, Métodos e Métodos Virtuais pelo seu
valor de atributo.

<sect1>Gerir Classes
<p>
O Navegador de Classes também permite adicionar métodos e atributos directamente através de diálogos. Isto significa que você não tem de escrever a
declaração de classe e o cabeçalho de implementação. Depois de adicionar o método, apenas tem de definir os parâmetros formais para o
cabeçalho de implementação e, se o método requer um atributo, para a declaração.

<bf>&raquo Como adicionar um método a uma classe</bf>

<enum>
<item>seleccione a classe a que  deseja adicionar o método
<item>prima o botão direito do rato; surge o menu de contexto
<item>seleccione "Adicionar função membro".
<item>o diálogo "Adicionar função membro" surge.
<item>inserir o tipo, declaração e documentação para o método
<item>especificar o acesso e modificadores do método
<item>premir OK para sair do diálogo
</enum>

Para adicionar uma variável, esta é a mesma forma, apenas tendo de seleccionar "Adicionar variável membro" no menu de contexto.

A diferença entre as acções destes diálogos são que adicionar uma variável apenas irá adicionar uma variável à declaração da classe,
e a adição de um método irá adicionar a declaração do método e o cabeçalho de implementação do mesmo ao código. Como o visualizador de classes
se actualiza automaticamente por si só, você tem acesso ao novo método implementado, para que só tenha de escrever o código para
o verdadeiro objectivo do método.

<sect>O Editor de Diálogos<label id="The Dialog Editor">
<p>
O Editor de Diálogos integrado do KDevelop permite uma construção fácil de widgets e diálogos através de meios gráficos para a sua aplicação utilizar.
Vê a aparência do seu diálogo directamente tal como será apresentado ao utilizador. Utilizar o editor de diálogos é normalmente o primeiro passo que tomará
após criar um projecto novo com o KAppWizard para dar origem á vista principal, os diálogos de interacção com utilizador e, após terminar
o trabalho gráfico, a geração de código. Desta forma, o seu projecto conterá todas as partes que normalmente são consideradas "difíceis" e
levariam imenso tempo a implementar. Depois, o "resto" do seu trabalho é implementar as funcionalidades no código gerado. Este
capítulo debate-se com a utilização do editor de diálogos para criar widgets do projecto bem como o que fazer no caso de verificar que os seus widgets necessitam
de correcções ou adições mais à frente no processo de desenvolvimento.

Pode ir para o Editor de Diálogos quer seleccionando "Editor de Diálogos" do menu de "Ferramentas" quer através do correspondente icon da barra de ferramentas.
Para regressar ao Editor de Projecto, seleccione "KDevelop" a partir do menu "Ferramentas" do editor de diálogos ou através do icon na barra de ferramentas.

Que mais o interface do editor de diálogos lhe oferece?  Principalmente, que a sua aparência é quase a mesma que o editor de projecto em termos
da separação da janela principal bem como do menu e das barras de ferramentas. Isto permite-lhe acostumar-se muito mais rapidamente com o editor de diálogos
e, como ele interage inteiramente com o gestor de projecto, permanecer no editor de diálogos se deseja controlar o seu processo de
construção. Acções que requeiram que volte para o KDevelop farão isso automaticamente para si, tal como aceder ao navegador de
documentação. Apenas seleccione os comandos de menu, e o KDevelop reagirá aos seus desejos.

Os capítulos seguintes dar-lhe-ão uma visão geral do interface do editor de diálogos, como criar inicialmente um diálogo novo e como definir as propriedades
dos widgets filhos que o seu diálogo poderá conter.

<sect1>A Vista do Editor de Diálogos
<p>
<sect2>A Vista Principal
<p>
A vista do editor de diálogos está logicamente separada em:
<itemize>
<item>O separador Widgets, que contém as pastas "Widgets", "Diálogos" e "Itens". Estes são descritos em <ref id="Adding Widgets"
name="Adicionar Widgets">.
<item>O Editor de Widgets, representando a vista de edição para a criação do seu diálogo. Veja <ref id="The Widget Editor" name="O Editor de Widgets">
<item>A janela de Propriedades, contendo uma lista das propriedades e dos seus valores, dependendo do widget actualmente seleccionado no editor
de widgets. Veja <ref id="Setting Properties" name="Definir Propriedades"> para informação sobre como especializar a aparência e comportamento dos widget's.
</itemize>

<sect2>Diferenças para o KDevelop das Barras de Menus, Ferramentas e Estados
<p>
Em modo de Editor de Diálogos, o KDevelop modifica ligeiramente as barras de menu, ferramentas e estados para disponibilizar a funcionalidade que necessita para criar
widgets. Estes são:

<sect3>Barra de Menus
<p>
<bf/Menu "Ficheiro":/ substitui "Novo" por "Novo Diálogo". "Abrir" permite abrir um ficheiro de definição de diálogo.

<bf/Menu "Ver":/ substitui "Vista de Árvore" por "Vista de Widgets", (des/)activa os separadores de Vista de Widgets; adiciona "Vista de Propriedades" para
(des/)activar a Vista de Propriedades e "Tamanho de Grelha" para lhe permitir especificar o tamanho da grelha em pixels para valores horizontais e verticais.

<bf/Menu "Construir":/ substitui "Compilar Ficheiro" por "Gerar Código". Isto permite-lhe realmente gerar o código para o seu diálogo.

<sect3>Barra de Ferramentas
<p>
A barra de ferramentas contém um novo ícon para "Novo Diálogo" bem como um substituto para "Compilar Ficheiro" por "Gerar Código".

<sect3>Barra de Estados
<p>
A barra de estados disponibiliza-lhe informação sobre o widget actualmente seleccionado, especialmente apresentando os valores de tamanho X
e Y em coordenadas do sistema. Para ajuda de Barra de Estados, e-lhe disponibilizada a mesma funcionalidade que no modo de Edição de Projecto.

Enquanto a modificar o tamanho de um widget, a barra de estados mostrará os valores actuais para o comprimento e altura do widget seleccionado.

<sect1>Criar um Novo Diálogo
<p>
Após criar o seu esqueleto de projecto, é-lhe disponibilizada uma aplicação pronta a correr, de acordo com as suas preferências. Como o KDevelop disponibiliza
os tipos de projecto de aplicação KDE e Qt, o editor de diálogos reconhece isto e oferece a construção dos widgets através dos widgets que são
disponibilizados pelas bibliotecas utilizadas. Para poupar tempo, você já deverá ter um desenho em mente do que fará as acções desejadas. Para
informações sobre desenho de widget's, veja <em/O Manual de Programação do KDevelop/.

Para criar um novo diálogo, seleccione "Novo" do menu "Ficheiro" ou seleccione "Novo" do menu de contexto na pasta dos diálogos. O menu "Novo Diálogo"
surge onde tem de fornecer ao KDevelop informação específica do diálogo em relação à classe base e nomes de ficheiros de código e
seu destino.

<sect2>Classe de Diálogo
<p>
A classe de diálogo que pode seleccionar, é a classe que é herdada pelo seu novo widget, que é tecnicamente representado por uma classe também.
Assim, tem as seguintes opções:
<enum>
<item><bf/QWidget:/ a classe base para todos os widgets com interacção do utilizador disponibilizados pela Qt. Utilizado para vistas principais e widgets de nível superior.
<item><bf/QFrame:/ herda QWidget e é utilizado por numerosos widgets como classe base. Este é útil para widgets que já querem ter
uma funcionalidade QFrame além dos métodos QWidget.
<item><bf/Custom:/ herda uma classe costumizada que tem de ser definida nas "Propriedades Costumizáveis". Pode ser uma classe já desenhada
disponibilizada pelo seu projecto ou pelas bibliotecas.
<item><bf/QDialog:/ a classe base para diálogos que desejaria herdar para interacção do utilizador tal como definir propriedades ou modificar valores.
<item><bf/QTabDialog:/ herda QDialog e disponibiliza um diálogo com botões pré-definidos e um conjunto de pastas, que você irá disponibilizar através dos
widgets que você criar.
</enum>

<bf/Propriedades Costumizáveis/

Para a herança de uma classe costumizável como seleccionado no campo de diálogo de classe, tem de especificar o nome da classe, que vai para "Classe
Costumizável". O editor de diálogos utiliza isto para a geração do código; assim, você também tem de inserir o "Header Costumizável", onde o ficheiro header
da classe costumizável tem de ser definido.

<sect2>Ficheiros
<p>
Na secção "Ficheiros", você tem de inserir a informação específica dos widget's. Esta é o nome da classe (que deverá ser por ex. KColorSelectDlg
para um diálogo que permite a selecção de dores de uma caneta), o header, ficheiros C++ e o Data.
Quando inserir o Nome da Classe, os nomes de ficheiros são dados pelo editor de diálogos, mas você pode também modificar os nomes de ficheiros.

Agora, e sobre os ficheiros? Quando estiver preparado com a construção de widgets visualmente, terá de gerar os ficheiros que contêm
a implementação do seu widget. Como isto será uma classe, o diálogo irá existir através do ficheiro header contendo a declaração de classe,
um ficheiro C++ contendo a implementação dos métodos para os métodos e espaços do widget. O ficheiro Data é o ficheiro que conterá a
função que é chamada pelo construtor do widget,no método <em/initDialog()/. O ficheiro em sí não deverá ser modificado pois contém
o código gerado pelo editor de diálogos para criar o widget em ecrã. Se alguma vez tiver de modificar valores, deverá fazer
isto através do construtor ou ter a certeza de que não irá alterar o diálogo durante o processo de desenvolvimento, pois o ficheiro Data será
substituido de cada vez que o código for gerado para o seu widget. Os ficheiros header e C++ contêm secções, onde o editor de diálogos escreve;
estes estão marcados por comentários. Após a geração dos ficheiros, pode modificar quaisquer valores e definições fora das secções; de outra forma
as alterações perder-se-ão na próxima geração de código.

<sect2>Localização
<p>
Para gerar o código do widget, o editor de diálogos necessita de saber a localização onde este irá. Os valores de defeito para o directório de
destino é o subdirectório que contém o código fonte do projecto actual.

Após premir "OK", os seus valores por defeito serão gerados e um construtor de Widget vazio é aberto. Então encontra-se preparado para ir criar
o seu próprio widget. Lembre-se que o editor de diálogos actualmente apenas suporta widgets estáticos sem gestão de geometria. Se estiver para utilizar
gestão de geometria para os seus widgets, deverá acostumar-se com as classes que a Qt disponibiliza para isto, criando uma nova
classe com o gerador de classes e escrevendo o resto do seu widget à mão. Para mais informações, veja <em/O Manual de Programação do KDevelop/.


<sect1>Adicionar Widgets<label id="Adding Widgets">
<p>
Após especificar a classe e nome de ficheiros dos diálogos ou widgets, está preparado para começar a criar o widget e preenchê-lo com conteudo.
Adicionar widgets de nível-baixo ao seu diálogo é uma tarefa muito simples. Basta seleccionar o widget que deseja a partir da pasta de "Wigets" à
esquerda através de um clique sobre o correspondente icon de widget. O widget será então colocado no canto superior esquerdo do widget principal actualmente
aberto. Um widget adicionado então obtém o temanho de defeito de 100x30 pixels na vista de edição. Para mover um widget, carregue sobre ele para
activar a moldura de desenho, que é apresentada em cinzento escuro com pontos quentes nos cantos e no centro dos lados superior, inferior,
esquerdo e direito do widget. Um cursor em cruz indica que o widget pode ser movido. Para o mover, pressione o botão esquerdo do rato e mantenha-o
premido. Depois mova o widget com o rato até ao local onde deseja que ele passe a estar.

Para redimensionar um widget, mova o cursor do rato sobre um dos pontos quentes do item já activo. O cursor do rato muda então para uma
seta dupla, indicando as direcções, em que o redimensionamento pode ser feito. Prima o botão esquerdo do rato e mantenha-o premido. O item widget
irá ter o seu tamanho modificado quando o rato for movido para a direcção indicada pelo cursor.

Ainda mais, o editor de widget contém imensos menus de contexto para o ajudarem a coordenar o seu trabalho. Estes estão disponíveis sobre todos os itens na
pasta widgets e dão-lhe uma pequena janela de ajuda que mostra o nome da classe do widget seleccionado com uma breve descrição.
Sobre um widget seleccionado, o menu de contexto mostra o nome da classe do item seleccionado e disponibiliza:

<itemize>
<item>Subir
<item>Baixar
<item>Subir ao Topo
<item>Baixar ao Fundo
<item>Cortar
<item>Apagar
<item>Copiar
<item>Colar
<item>Ajuda
</itemize>

Após definir o tamanho e posição, pode editar as preferências para o item seleccionado na janela de Preferências.

<sect2>A Pasta de Widgets
<p>
A pasta de widgets representa os widgets disponíveis que pode colocar no diálogo. Se deseja informação sobre um certo widget, pressione o
botão direito do rato sobre o icon do widget e seleccione "Ajuda-Rápida" do menu de contexto. Lembre-se que o editor de diálogos determina automaticamente,
se o seu projecto é do tipo apenas Qt ou KDE. Isto impede-o de utilizar widgets KDE em aplicações Qt.

Após ter seleccionado um item widget, ele é colocado com os valores e tamanhos de defeito sobre a janela de edição e marcado como seleccionado com a moldura
e cantos escuros. Para redimensionar um widget, mova o seu rato sobre um dos pontos escuros e o seu cursor será modificado para apresentar que direcções de
redimensionamento são possíveis. Depois prime-se o botão do rato e movimenta-se enquanto se mantém o botão premido. Quando terminar de redimensionar o widget,
liberte o rato. Enquanto a redimensionar, a barra de estados apresenta a posição corrente em termos de valores X e Y e o tamanho actual em
valore W(Comprimento) e H(Altura).

<sect2>A Pasta de Diálogos
<p>
A pasta de diálogos é destinada a permitir-lhe abrir os diálogos do seu projecto através de um clique do rato. Como a estrutura de diálogos é gravada num
ficheiro *.kdevdlg dentro do directório que contém os ficheiros gerados, apenas esses ficheiros de definição de diálogos são mostrados. Lembre-se também que você
não apaga estes ficheiros de definição.

Ao seleccionar um diálogo, será mostrado no estado em que foi gravado no último passo de edição na vista de Edição de Widget.

<sect2>A Pasta de Itens
<p>
A pasta de itens permite-lhe ter uma visão geral sobre os itens do widget actual dispostos hierarquicamente. Isto significa que, como
o seu fundo representa o pai de todos os widgets dentro do diálogo, é mostrado no topo da árvore. Os filhos do diálogo principal
são listados no nível de árvore seguinte.

Ao seleccionar um item, ele fica marcado na vista de edição, bem como as suas propriedades são apresentadas na janela de propriedades.
Utilizar a vista de itens é às vezes importante se o comportamento do seu widget depende da relação pai-filho. Para mais informações
veja <em/O Manual de Programação do KDevelop/.

<sect1>O Editor de Widget<label id="The Widget Editor">
<p>
O Editor de Widget é a vista principal que é colocada no meio e onde você constroi o seu widget. Após adicionar itens, eles podem
ser seleccionados e redimensionados, bem como movidos para o local que necessitar. Sobre todos os itens, menus de contexto disponibilizam um acesso rápido às
funções tais como cortar, copiar e inserir.

<sect1>Definir Propriedades<label id="Setting Properties">
<p>
A janela de propriedades à direita é o local onde define o comportamento por defeito do widget e dos seus itens. Apresenta os
valores pré-definidos para cada item seleccionado no momentop; modificar valores resultará em alterações directas na vista do Editor de Widget, por ex. renomear
labels (etiquetas) ou botões.

Para separar alguns valores de propriedades pelos seus efeitos, a janela de propriedades contém quatro pastas; seleccionando uma pasta mostrará todos
os valores paea o grupo de propriedades. Todos os valores possíveis estão descritos abaixo. Lembre-se que as propriedades dependem do widget, por ex. uma
etiqueta (label) e botão (button) terão uma propriedade para o seu nome em ecrã, enquanto que lineedits (caixa de edição multi-linha) terá propriedades para métodos tais como <em/setText()/.

Para uma lista completa dos valores disponíveis por item, deverá ver a referência de classes do widget que explica os métodos utilizados
e todos os valores possíveis. Note que a maior parte dos valores estão implementados no QWidget e são utilizados para todos os widgets que herdam QWidget. Lembre-se também
que o código final não contém quaisquer chamadas a métodos que sejam inalteráveis pelo utilizador e assim utiliza os valores por defeito dados no
cosntrutor de widget's.

Para uma lista completa das propriedades suportadas que podem ser definidas na janela de propriedades para cada ietm widget, veja <em/O Manual de Programação do KDevelop/.


<sect1>Gerar Ficheiros
<p>
Após criar o widget, tem de gerar o código fonte para o tornar disponível no seu projecto. Isto pode ser feito ou com o 
"Gerar Código" do menu "Construir" ou pelo correspondente icon na barra de ferramentas do editor de diálogos. Os seus Makefiles serão actualizados
automaticamente para incluir o novo widget no processo de compilação; Assim, após chamar "Gerar Código", pode construir o seu
projecto de novo dentro do editor de diálogos. A janela de output surge debaixo da janela de Edição de Widget tal como no modo de Edição de Projecto.

Agora qie o seu projecto contém um novo widget, o seu trabalho como programador é implementar funcionalidades para os espaços utilizados e eventualmente
adicionar outros métodos de que possa necessitar.

Para mais informações sobre a implementação de funções de widgets, veja <em/O Manual de Programação do KDevelop/.

<sect>General Configuration<label id="General Configuration">
<p>
This chapter describes how you can set your individual preferences about how KDevelop works. All settings adressed below can be
found by the according entry in the Options-menu.

<sect1>Configuring the "Tools" Menu<label id="Configuring the &dquot;Tools&dquot; Menu">
<p>
As KDevelop supports the use of third-party programs within it's user interface, you are able to configure any program that suits
your needs towards application development. This can be done by adding programs to the already pre-defined ones in the
"Tools"-menu. To change the tools-menu, select "Tools" from the "Options" menu. This dialog allows to specify the entry name,
program and additional command line options you want to pass to the execution. To remove a program from the menu, select the entry
name and choose "Delete". To add a program, specify the menuentry, where a & is used as a menu-accelerator; you may compare the
already configured entries with the entry list. Select the binary and pass your commandline options. Then hit "Add" and the entry
is added to the list. After leaving the configuration dialog, the tools-menu updates itself, so the new configuration is already
usable without restarting KDevelop.

<sect1>File Viewer Options
<p>
The Logical File Viewer can be configured by context menus completely. As it's intention is to separate files logically to keep a
better overview over complex projects, one of the most used configurations is to create file groups. Those can be set by opening the
context menu with a right mouse button click over the project icon displayed at the root of the tree. The menu offers:
<itemize>
<item>New File: Opens the New File dialog. Equals to the menubar command "File"-"New"
<item>New Class: Opens the Classgenerator to create a new class. Equals to the menubar command "Project"-"New Class"
<item>New Group: Opens a dialog to create a new group. There, set the group name and the file filter for the project files that will be
displayed in this group.
<item>Show relative path: displays the files with their path name starting from the main project directory if checked; otherwise only
the filename is shown.
</itemize>

Over a group folder, the according context menu offers:

<itemize>
<item>New Group: Opens the New Group dialog as in the context menu described above.
<item>Remove group: removes the group from the LFV.
<item>Properties: Opens the properties of the group. There, you can edit the file filters by a list of wildcards separated by commas.
</itemize>


<sect1>KDevelop Setup<label id="KDevelop Setup">
<p>
<bf>Make-command:</bf>
The General Options dialog lets you configure KDevelop's general settings.
First, you should set the make-command available on your system. If the selected program does not exist,
KDevelop will warn you the next time your're invoking a make command.

<bf>Autosave:</bf>

If Autosave is checked, KDevelop will save all changed files periodically.  The autosaving time range can be set to 3, 5, 15 or 30 minutes.


<bf>Autoswitch:</bf>

If Autoswitch is enabled, the KDevelop windows will switch on and off according to the usage context, e.g.  if you switch to a
documentation in the Helpmenu, the Documentation browser will be opened, together with the documentation tree and the output
window turned off.
Startup:

For starting KDevelop, you have the option to enable/disable the startlogo to be shown during the time KDevelop loads.
Further, if you don't like the last project to be opened on startup, you can disable the default behavoir.
<sect1>Changing Keyboard Shortcuts<label id="Changing Keyboard Shortcuts">
<p>
The Configure Keys dialog lets you configure the KDevelop key bindings. Note that global keys can be configured in the
KDE Control Center, such as open file and print.  A key function can be configured by choosing the menu entry. Then the
configuration can be changed by checking values like the Alt / Ctrl key etc.

<sect1>Documentation<label id="Documentation">
<p>
<sect2> Directories
<p>
For setting up the documentation browser to work correctly, KDevelop needs some information about where the HTML- documentation
is placed on the system. Therefore, the Documentation Path properties dialog needs the path of the Qt- online documentation in HTML
as well as the path to the KDE-library documentation.

Usually, the Qt-documentation is placed in the same directory where Qt is installed; e.g. if Qt resides in /usr/local/qt, the path
you have to enter is /usr/local/qt/html. For the KDE- Documentation, you have to set the directory to the root of the
documentation, assumed all KDE-Libs documentation resides in the same directory. Both path's can be selected by pressing the
according buttons, displaying a path-selection. If your system doesn't contain the documentation for the KDE-libs,  you should
first enter the next configuration dialog, Update KDE-Documentation. This will create the documentation to a path of your choice,
also setting the KDE Library Doc path automatically.

<sect2>Options
<p>
<sect3>Update KDE-Documentation
<p>
For those users who don't have a recent documentation of the KDE-libraries, especially the documentation for the files
installed on the system, the Update KDE-Documentation dialog creates a new one or updates existing documentations. This
function requires your system to have kdoc and qt2kdoc installed, included in the kdesdk package. First of, you have to set
up the path to your recent kdelibs sources, which is not the include-path for KDE ! Just enter the path to the sources, like:
/home/rnolden/kdelibs-1.1/.

Then, you can choose three different installation modes, as:

<itemize>
<item> Delete old Documentation and  install to recent Documentationpath:  this assumes that youalready have a documentation
installed and is placed in the path the Documentation Path-dialog was entered. This will delete all documentation and install the
newly generated documentation into the recent path.
<item> Delete old Documentation and install to new Documentationpath:   this will result in deleting the old documentation as
well as above, but gives you the choice to set up a new documentation place.
<item> Leave old Documentation untouched and install to new Documentation path:   This is recommended for a new generation of
the kdelibs documentation for users who didn't have one before and for those who want to keep the last documentation for an older
kdelibs version.
</itemize>

The "new KDE Libs Documentation path" is to be set  for option 2 and 3 of the installation mode.  This is also recommended for
users who generate a new documentation from scratch.

After pressing the OK button, KDevelop will create a subdirectory "kdoc-reference" in the documentation path containing the kdoc
reference files.  First, the qt library documentation classes will be indexed to connect the Qt documentation with the
documentation to be generated for the kdelibs.  So it is important that you have set up the Qt documentation path first to ensure
that it can be found by qt2kdoc. Finally, the KDE libs will be indexed and the documentation will be build with crossreferences to
give browsing the most functionality.

<sect3>Create Search Database
<p>
The Create Search Database dialog, accessed via the create-button, allows the programmer to create a database to search for a
keyword interactively.  To create and use the documentation search function, you must have the program glimpse 4.1 installed.
Preset are the options to index the given KDE-library documentation as well as the Qt-documentation, assuming the path to the
documentation files were set in the "Documentation Path" dialog of the options- menu.   Additionally, the index can include
directories the user can set up himself by the "additional directories to index"-field.  After setting a path to an addional
directory, the "Add" - button must be pushed to set the path.  A path once set can be removed from the index by selecting the path
in the path field and pushing "Remove". Furthermore, the user is offered three different modes for the index size: tiny, small and
medium.  The higher the index size, the more the index files will grow. On the other hand, a search in a bigger searchdatabase
will be faster and more successful, so we suggest choosing a "medium" size. For using the search function, see section
<ref id="Using the Documentation Browser" name="Using the Documentation Browser">.

<sect>Perguntas e Respostas<label id="Questions and Answers">
<p>
Esta secção debruça-se sobre questões colocadas pelos utilizadores e que foram respondidas pela Equipa do KDevelop ou pelos seus apoiantes na lista de correio
electrónico do KDevelop durante experiências com as versões actuais do KDevelop bem como reportes de erros em geral.

<sect1>Reporte de Erros<label id="Bug Reporting">
<p>
Outro melhoramento do KDevelop é o sistema integrado de reporte de erros através de correio electrónico. Se encontrar um erro de código (bug), tem a opção de enviar
à equipa de desenvolvimento do KDevelop um reporte quer seja através do seu cliente de e-mail quer através do diálogo de reporte de erros. Todos os reportes de erros são compilados
na página de internet do KDevelop e podem ser revistos em <htmlurl url="http://www.kdevelop.org/bugarchive/maillist.html"
name="www.kdevelop.org/bugarchive/maillist.html">. Pode também receber todos os reportes de erros através da inscrição na
lista de correio electrónico de reporte de erros enviando um e-mail vazio para <htmlurl  url="mailto:kdevelop-bug-report-request@fara3.cs.uni-potsdam.de"
name="kdevelop-bug-report-request@fara3.cs.uni-potsdam.de"> com "subscribe <em/seu_endereço_email/" como conteudo do corpo da mensagem.

Para enviar reporte de erros, por favor utilize este endereço de e-mail através do seu programa de e-mail. Se desejar utilizar o KDevelop para reporte de erros directo, escolha
"Reporte de Erros" do menu "Ajuda". É-lhe apresentado um diálogo de reporte que lhe permite inserir toda a informação necessária sobre o erro que você
descobriu. Após premir "OK", o conteudo do diálogo é enviado para a lista de e-mail automaticamente.

<sect1>Onde Obter Informação
<p>
<bf>P:</bf> Tenho uma pergunta que não está colocada no ficheiro de Perguntas Mais Frequentes, nem nos manuais do KDevelop. Onde me devo dirigir?

<bf>R:</bf>  Em qualquer caso envie todos os pedidos que respeitem ao KDevelop subscrevendo a lista de e-mail do KDevelop em <htmlurl
url="mailto:kdevelop@fara3.cs.uni-potsdam.de" name = "kdevelop@fara3.cs.uni-potsdam.de">. Envie um e-mail com o cabeça-lho vazio e
"subscribe" como conteudo da mensagem; pode então participar nas discussões. Todas as questões devem ser lá colocadas e serão também respondidas.
Se se ficar por aí, obterá a maior parte da ajuda dos programadores e todos os utilizadores que tenham o mesmo problema, bem como ajudará a manter
a lista de Perguntas Mais Frequentes actualizada.

A página de Internet do KDevelop em <htmlurl url="http://www.kdevelop.org"
name="http://www.kdevelop.org"> também contém um arquivo da lista de e-mail que lhe permite ler os e-mails já enviados pelos inscritos, pelo que deverá procurar lá primeiro pois muitos dos problemas podem já ter sido discutidos pelos programadores ou outros utilizadores.


<sect1>Problemas de Sistema e Bibliotecas
<p>

<bf>P:</bf> Erro "Wrong JPEG library version: library is 61, caller expects 62"

<bf>R:</bf>  Existem duas formas.
<enum>
<item> Quando as kdelibs são instaladas elas instalam ficheiros header para as
bibliotecas jpeg, que são da versão 61, no entanto, a maior parte das distribuições
(Redhat) utiliza as bibliotecas da versão 62. Para corrigir basta remover jpeglib.h
de /opt/kde/include (ou /usr/local/kde/include). O ficheiro da include para a versão
62 deverá ser então utilizado. No entanto olhando para a mensagem de erro acima
poderá existir outra forma de contornar, de qualquer forma assegure-se de que apenas
tem uma versão do ficheiro header, a biblioteca e que são consistentes.

É útil utilizar o comando locate para verificar que possui
a versão correcta das bibliotecas e ficheiro header por ex.
updatedb
locate libjpeg
locate jpeglib

<item> Tem de recompilar o kdesupport se a biblioteca jpeg
(./configure --with-libjpeg --with-libgif).
</enum>


<bf>P:</bf>
 <tscreen><verb>
make[2]: Entering directory `/usr/local/src/kdevelop-0.3/po'
cd .. && automake --gnu --include-deps po/Makefile
aclocal.m4: 2709: `AM_PROG_INSTALL' is obsolete; use `AC_PROG_INSTALL'
make[2]: *** [Makefile.in] Error 1
</verb></tscreen>
<bf>R:</bf>  Forma de contornar para utilizadores do automake-1.4/automake-2.13: Basta
correr o "aclocal" manualmente, depois já compilará.


<bf>P:</bf>  O que preciso de fazer, se o configure disse que eu necessitava da giflib23.

<bf>R:</bf>  Tente uma snap mais recente do kdesupport, ou talvez tenha outra giflib instalada?


<bf>P:</bf> Como posso converter um projecto do KDevelop 0.2 para o 0.3?

<bf>R:</bf> Por favor altere o AC_OUTPUT no configure.in para uma versão de uma linha

por exemplo:
versão antiga:
<tscreen><verb>
AC_OUTPUT(Makefile \
kdevelop/kwrite/Makefile \
kdevelop/templates/Makefile
)
</verb></tscreen>
 nova versão:
<tscreen><verb>
AC_OUTPUT(Makefile kdevelop/kwrite/Makefile kdevelop/templates/Makefile)
</verb></tscreen>


<bf>P:</bf>  Obtenho os seguintes erros de linkagem quando a utilizar o SuSE Linux com o KDE 1.1, que tenho de fazer para conseguir linkar o KDevelop?
<tscreen><verb>
/usr/lib/libqt.so:
warning: multiple common of `QArrayT&lt;char&gt; type_info node'
ckdevelop.o: warning: previous common is here
ckdevelop.o: In function `CKDevelop::slotFileSaveAll(void)':
ckdevelop.o(.text+0x784): undefined reference to `kdebug(unsigned short,
unsigned short, char const *,...)'
ckdevelop.o(.text+0x839): undefined reference to `kdebug(unsigned short,
unsigned short, char const *,...)'
ckdevelop.o(.text+0x89d): undefined reference to `kdebug(unsigned short,
unsigned short, char const *,...)'
ckdevelop.o: In function `CKDevelop::slotFileSaveAs(void)':
ckdevelop.o(.text+0xd28): undefined reference to `kdebug(unsigned short,
unsigned short, char const *,...)'
ckdevelop.o: In function `CKDevelop::slotFileClose(void)':
ckdevelop.o(.text+0x1216): undefined reference to `kdebug(unsigned short,
unsigned short, char const *,...)'
ckdevelop.o(.text+0x1263): more undefined references to `kdebug(unsigned
short, unsigned short, char const     *,...)' follow  collect2: ld returned 1
exit status  make[2]: ***
[kdevelop] Error 1  make[2]: Leaving directory
'/home/LinuXDaten/Programme_Updates_Packete/KDE_Updates/Kdevelop_actual_snapshot/kdevelop-0.3/kdevelop'
make[1]: *** [all-recursive] Error 1  make[1]: Leaving directory
`/home/LinuXDaten/Programme_Updates_Packete/KDE_Updates/Kdevelop_actual_snapshot/kdevelop-0.3'
make: *** [all-recursive-am] Error 2
</verb></tscreen>
<bf>R:</bf> Se possuir os rpm's da SuSE do KDE-1.1, tem de recompilar as kdelibs sem a correcção inserida pela SuSE e reinstala-las
ou obter um rpm actualizado das kdelibs de <htmlurl url="ftp://ftp.suse.com" name="ftp://ftp.suse.com">

<sect1>Questões de Utilização
<p>
<bf>P:</bf> Vejo que o KDevelop não permite a utilização da tecla delete (ou apagar com o backspace quando o texto está marcado).

<bf>R:</bf>  vá a "Opções"->"Editor" e certifique-se que "Apagar na Introdução" está activado, então o backspace e o delete funcionarão.


<bf>P:</bf> Se adiciono ficheiros ao meu projecto, eles serão automaticamente incluidos e compilados?

<bf>R:</bf> Sim, eles são logo incluidos nos Makefile.am's se fizer um "Reconstruir Tudo" (./configure actualiza os Makefiles), os seus
ficheiros novos adicionados serão também incluidos.

<bf>P:</bf> Se eu apagar um ficheiro, recebo umas mensagens estranhas do linkador. O que está errado com o meu projecto?

<bf>R:</bf> Se o ficheiro removido é um ficheiro header, que é automaticamente processado pelo automoc (executando o Qt-Meta-Object-Compiler
automaticamente em todos os headers), o seu header removido ainda está presente como um ficheiro *.moc.cpp gerado e compilado. Remova o
correspondente ficheiro *.moc.cpp e reconstrua o projecto.

<sect>Autores
<p>
<bf>Programadores Principais:</bf>

Sandy Meier 			<htmlurl url="mailto:smeier@rz.uni-potsdam.de" name = "<smeier@rz.uni-potsdam.de>">
(manutenção, coordenação do desenvolvimento e disponibilização da página de internet)
<quote/Desenvolvimento Principal de: estrutura geral, aspecto e funcionalidade do ambiente, gestão de projectos./

Stefan Heidrich			<htmlurl url="mailto:sheidric@rz.uni-potsdam.de" name = "<sheidric@rz.uni-potsdam.de>">
<quote/Desenvolvimento Principal de: KAppWizard, funcionalidades de impressão/

Ralf Nolden			<htmlurl url="mailto:Ralf.Nolden@post.rwth-aachen.de" name = "<Ralf.Nolden@post.rwth-aachen.de>">
<quote/Desenvolvimento Principal de: KDevelop<->interface do Editor de Diálogo, funcionalidades de configuração, ajuda electrónica e manuais/

Jonas Nordin			<htmlurl url="mailto:jonas.nordin@cenacle.se" name="<jonas.nordin@cenacle.se>">
<quote/Desenvolvimento Principal de: Visualizador de Classes e analisador de sintaxe (parser)/

Pascal Krahmer 			<htmlurl url="mailto:pascal@beast.de" name="<pascal@beast.de>">
<quote/Desenvolvimento Principal de: Editor de Diálogos/

Bernd Gehrmann 			<htmlurl url="mailto:bernd@physik.hu-berlin.de" name="<bernd@physik.hu-berlin.de>">
<quote/Desenvolvimento Principal de: Diálogo do Comando Grep, Integração CVS/

Stefan Bartel 			<htmlurl url="mailto:bartel@rz.uni-potsdam.de" name = "<bartel@rz.uni-potsdam.de>">
<quote/Desenvolvimento Principal de: Visualizador de Ficheiros Reais/



<bf>Coordenação da Tradução:</bf>

Martin Piskernig		<htmlurl url="mailto:martin.piskernig@stuwo.at" name = "<martin.piskernig@stuwo.at>">



<bf>Tradutores da Aplicação e Documentação:</bf>

Steen Rabol    			<htmlurl url="mailto:rabol@get2net.dk" name = "<rabol@get2net.dk>">			-Dinamarquês

Martin Piskernig    		<htmlurl url="mailto:martin.piskernig@stuwo.at" name = "<martin.piskernig@stuwo.at>">	-Alemão

Salvador Gimeno 		<htmlurl url="mailto:salgiza@eui.upv.es" name="<salgiza@eui.upv.es>">			-Espanhol

Sami Kuhmonen 			<htmlurl url="sami@iqs.fi" name="<sami@iqs.fi>">					-Finlandês

Herve Lefebvre 			<htmlurl url="hlefebvre@easynet.fr" name="<hlefebvre@easynet.fr>">			-Francês

Pahan Szabolcs 			<htmlurl url="szabczy@bigfoot.com" name="<szabczy@bigfoot.com>">			-Hungaro

Duarte Loreto 			<htmlurl url="mailto:dnloreto@esoterica.pt" name="<dnloreto@esoterica.pt>">		-Portugues

Ilmar Habibulin    		<htmlurl url="mailto:ilmar@ints.ru" name = "<ilmar@ints.ru>">				-Russo

Jacek Wojdel 			<htmlurl url="mailto:wojdel@kbs.twi.tudelft.nl" name="<wojdel@kbs.twi.tudelft.nl>">     -Polaco

Jan Prokop 			<htmlurl url="mailto:jprokop@ibl.sk" name="<jprokop@ibl.sk>">				-Eslovaco

Patrik Adolfsson 		<htmlurl url="patrik.adolfsson@iname.com" name="<patrik.adolfsson@iname.com>">		-Sueco


<bf>Logotipo Inicial:</bf>

Jacek Wojdel 			<htmlurl url="mailto:wojdel@kbs.twi.tudelft.nl" name="<wojdel@kbs.twi.tudelft.nl>">


<bf>Adições, alterações e correcções de erros:</bf>

Jost Schenk    			<htmlurl url="mailto:Jost@Schenk.de" name = "<Jost@Schenk.de>">

David Barth    			<htmlurl url="mailto:dbarth@videotron.ca" name = "<dbarth@videotron.ca>">

Matthias Hipp			<htmlurl url="mailto:Matthias.Hipp@gmx.de" name = "<Matthias.Hipp@gmx.de>">

Martin Piskernig    		<htmlurl url="mailto:martin.piskernig@stuwo.at" name = "<martin.piskernig@stuwo.at>">

Matthias Hoelzer-Kluepfel    	<htmlurl url="mailto:mh@caldera.de" name = "<mh@caldera.de>">

Steen Rabol    			<htmlurl url="mailto:rabol@get2net.dk" name = "<rabol@get2net.dk>">

Matt Koss 			<htmlurl url="koss@napri.sk" name="<koss@napri.sk>">

Jochen Wilhelmy 		<htmlurl url="digisnap@cs.tu-berlin.de" name="<digisnap@cs.tu-berlin.de>">

Bernd Gehrmann 			<htmlurl url="mailto:bernd@physik.hu-berlin.de" name="<bernd@physik.hu-berlin.de>">

Walter Tasin 			<htmlurl url="mailto:tasin@e-technik.fh-muenchen.de" name="<tasin@e-technik.fh-muenchen.de>">

Torsten Uhlmann 		<htmlurl url="mailto:TUhlmann@debis.com" name="<TUhlmann@debis.com>">


<bf>O KDevelop contém código fonte das seguintes aplicações:</bf>

<bf/KWrite 0.98/ &copy		por Jochen Wilhelmy		<htmlurl url="mailto:digisnap@cs.tu-berlin.de" name="<digisnap@cs.tu-berlin.de>">

<bf/KDE Help/ &copy		por Martin R. Jones 		<htmlurl url="mailto:mjones@kde.org" name="<mjones@kde.org>">

<bf/GrapeFruit/	&copy 1999 	por Bernd Gehrmann <htmlurl url="mailto:bernd@physik.hu-berlin.de" name="<bernd@physik.hu-berlin.de>">

<bf/KSwallow/	&copy 		por Matthias Hoelzer  <htmlurl url="mailto:hoelzer@physik.uni-wuerzburg.de"
name="<hoelzer@physik.uni-wuerzburg.de>">

<bf/kcmlocale/	&copy 1998 	por Matthias Hoelzer <htmlurl url="mailto:hoelzer@physik.uni-wuerzburg.de"
name="<hoelzer@physik.uni-wuerzburg.de>">

<sect>Agradecimentos
<p>
Gostariamos de exprimir agradecimentos especiais aos membros das nossas famílias e amigos que nos deram apoio de diversas formas o que nos permitiu
construir e melhorar o KDevelop.

Também, nós agradecemos ao Jochen Wilhelmy por oferecer o seu programa kwrite e a sua ajuda para o integrar no KDevelop.

Agradecimentos também à equipa do KDE e ao Stephan Kulow, que nos deu a possibilidade de trabalhar no KDevelop através de CVS

Nós esperamos que o nosso trabalho gratuíto neste produto leve a uma melhor aceitação do Free Software (Aplicações Gratítas) e ao seu desenvolvimento. Sem a ajuda
e idealismo de muitos, o Ambiente Gráfico de Desenvolvimento KDevelop nunca teria sido realizado num período te tempo tão reduzido e nós estamos orgulhosos
de que tantos utilizadores tenham já relatado boas experiências e tenham levado o KDevelop ao seu destino: ajudar programadores de aplicações livres a construir
um mundo melhor em que os utilizadores têm liberdade de escolha.

<sect>Copyright <label id="Copyright">
<p>
<tscreen><verb>

KDevelop Copyright 1998,1999 A Equipa do KDevelop.

Este programa é software livre; pode redistribui-lo e/ou modifica-lo
dentro dos termos da Licença Geral Pública GNU (GNU General Public License) tal como publicado
pela Free Software Foundation (Fundação das Aplicações Livres); quer seja a versão 2 da licença,
ou (pode optar) qualquer versão posterior.

Este programa é distribuido com a esperança de que seja útil,
mas SEM QUALQUER GARANTIA; sem mesmo a garantia implícita de
COMERCIALIZAÇÃO ou PREPARAÇÃO PARA UM FIM ESPECÍFICO. Veja a
Licença Geral Pública GNU para mais detalhes.

Deverá ter recebido uma cópia da Licença Geral Pública GNU
junto com esta aplicação; se não recebeu, escreva para a
Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
</verb></tscreen>

</article>












































