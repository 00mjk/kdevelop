<chapter label="10" role="chapter" id="ch10">
<title>Complex-Function KDE Widgets</title>
<para><emphasis>by David Sweet</emphasis></para>
<highlights>
<itemizedlist mark="bullet" spacing="compact">
<title>In This Chapter</title>
<listitem><para><emphasis role="strong"><link linkend="ch10lev1sec1">Rendering HTML Files</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch10lev1sec2">Manipulating Images</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch10lev1sec3">Checking Spelling</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch10lev1sec4">Accessing the Address Book</link></emphasis></para></listitem></itemizedlist>
</highlights>
<para>Among the KDE/Qt libraries are classes that support complex functions. Using these classes can help reduce the development time of your application and can make your application function in a way more consistent with other KDE applications.</para>
<para>In this chapter we will discuss the following complex functions that are provided by the KDE/Qt libraries:</para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>HTML page rendering and browsing</para></listitem>
<listitem><para>Image file loading, manipulation, and saving of image files in various formats</para></listitem>
<listitem><para>Spell checking in many languages</para></listitem>
<listitem><para>KDE system-wide address book access</para></listitem></itemizedlist>
<section id="ch10lev1sec1">
<title>Rendering HTML Files</title>
<para>Both<indexterm><primary>HTML files</primary><secondary>rendering</secondary></indexterm><indexterm><primary>rendering</primary><secondary>HTML files</secondary></indexterm><indexterm><primary>files</primary><secondary>HTML files</secondary><tertiary>rendering</tertiary></indexterm> <literal>konqueror</literal> and <literal>khelpcenter</literal> need to display HTML pages. <literal>konqueror</literal> generates HTML and acts as a Web browser, displaying HTML pages fetched from remote machines or stored locally. The KDE Help files displayed by <literal>khelpcenter</literal> are in HTML format (see <link linkend="ch15">Chapter 15, <quote>Creating Documentation</quote></link>) and need to be rendered to be viewed.</para>
<para>Long ago, it was realized that a single HTML-rendering class could do the job for both applications, and <literal>KHTMLWidget</literal> was born. It has since been completely rewritten and now supports HTML 4.0, Java applets, JavaScript, and cascading style sheets (CSS1 and some of CSS2) by the time KDE 2.0 is released.</para>
<para>Currently, <literal>KHTMLWidget</literal> is used by KMail and KRN for rendering HTML emails and USENET news articles.<indexterm><primary>HTML files</primary><secondary>rendering</secondary></indexterm><indexterm><primary>rendering</primary><secondary>HTML files</secondary></indexterm><indexterm><primary>files</primary><secondary>HTML files</secondary><tertiary>rendering</tertiary></indexterm><indexterm><primary>KHTMLWidget</primary></indexterm><indexterm><primary>widgets</primary><secondary>KHTMLWidget</secondary></indexterm></para>
<section id="ch10lev2sec1">
<title>A Simple Web Browser</title>
<para>To show how <literal>KHTMLWidget</literal> can be used in an application, let's construct a simple Web browser. When the application&mdash;which we'll call (consistently unimaginatively) KSimpleBrowser&mdash;starts, it displays a short HTML page of instructions telling how to use the application. Then the user can enter the URL of a Web page, such as <ulink url="http://www.kde.org">http://www.kde.org</ulink>, and press Enter to view the page.<indexterm><primary>KSimpleBrowser application</primary><secondary>ksimplebrowser.h class declaration</secondary></indexterm><indexterm><primary>browsers</primary><secondary>simple browser application</secondary><tertiary>ksimplebrowser.h class declaration</tertiary></indexterm><indexterm><primary>ksimplebrowser.h class declaration (simple browser application)</primary></indexterm></para>
<example role="codelisting" label="10.1" id="ch10list01">
<title><literal>ksimplebrowser.h:</literal> Class Declaration for KSimpleBrowser, a Simple Web Browser<indexterm><primary>listings</primary><secondary>KSimpleBrowser</secondary><tertiary>ksimplebrowser.h class declaration</tertiary></indexterm></title>
<programlisting linenumbering="numbered">
 1: #ifndef __KSIMPLEBROWSER_H__
 2: #define __KSIMPLEBROWSER_H__
 3:
 4: #include &lt;ktmainwindow.h>
 5:
 6: class KHTMLPart;
 7:
 8: /**
 9:  * KSimpleBrowser
10:  * A feature-limited Web browser.
11:  **/
12: class KSimpleBrowser : public KTMainWindow
13: {
14:  Q_OBJECT
15:  public:
16:   KSimpleBrowser (const char *name=0);
17:
18:  public slots:
19:   void slotNewURL ();
20:
21:  protected:
22:   KHTMLPart *khtmlpart;
23: };
24:
25: #endif<indexterm><primary>KSimpleBrowser application</primary><secondary>ksimplebrowser.h class declaration</secondary></indexterm><indexterm><primary>browsers</primary><secondary>simple browser application</secondary><tertiary>ksimplebrowser.h class declaration</tertiary></indexterm><indexterm><primary>ksimplebrowser.h class declaration (simple browser application)</primary></indexterm><indexterm><primary>listings</primary><secondary>KSimpleBrowser</secondary><tertiary>ksimplebrowser.h class declaration</tertiary></indexterm></programlisting>
</example>
<para><literal>KSimpleBrowser</literal> is derived from <literal>KTMainWindow</literal>. This allows us to add a toolbar containing a line editor for entering a URL (see <link linkend="ch10list02">Listing 10.2</link>, lines 10&ndash;13) and place an instance of <literal>KHTMLPart</literal> in our content area (see <link linkend="ch10list02">Listing 10.2</link>, lines 16&ndash;24) and have it all managed by <literal>KTMainWindow</literal>.<indexterm><primary>HTML files</primary><secondary>rendering</secondary></indexterm><indexterm><primary>rendering</primary><secondary>HTML files</secondary></indexterm><indexterm><primary>files</primary><secondary>HTML files</secondary><tertiary>rendering</tertiary></indexterm><indexterm><primary>KSimpleBrowser application</primary><secondary>ksimplebrowser.cpp class definition</secondary></indexterm><indexterm><primary>browsers</primary><secondary>simple browser application</secondary><tertiary>ksimplebrowser.cpp class definition</tertiary></indexterm><indexterm><primary>ksimplebrowser.cpp class definition (simple browser application)</primary></indexterm></para>
<example role="codelisting" label="10.2" id="ch10list02">
<title><literal>ksimplebrowser.cpp:</literal> Class Definition for KSimpleBrowser<indexterm><primary>listings</primary><secondary>KSimpleBrowser</secondary><tertiary>ksimplebrowser.cpp class definition</tertiary></indexterm></title>
<programlisting linenumbering="numbered">
 1: #include &lt;khtmlview.h>
 2: #include &lt;khtml_part.h>
 3:
 4: #include "ksimplebrowser.moc"
 5:
 6: const int URLLined = 1;
 7: KSimpleBrowser::KSimpleBrowser (const char *name=0) :
 8:   KTMainWindow (name)
 9: {
10:
11:   toolBar()->insertLined ( "", URLLined,
12:                SIGNAL (returnPressed ()),
13:                this, SLOT (slotNewURL ()) );
14:   toolBar()->setItemAutoSized (URLLined);
15:
16:
17:   khtmlpart = new KHTMLPart (this);
18:   khtmlpart->begin();
19:   khtmlpart->write("&lt;HTML>&lt;BODY>&lt;H1>KSimpleBrowser&lt;/H1>"
20:              "&lt;P>To load a web page, type its URL in the line "
21:              "edit box and press enter.&lt;/P>"
22:              "&lt;/BODY>&lt;/HTML>");
23:   khtmlpart->end();
24:
25:   setView (khtmlpart->view());
26: }
27:
28: void
29: KSimpleBrowser::slotNewURL  ()
30: {
31:   khtmlpart->openURL (toolBar()->getLinedText (URLLined));
32: }<indexterm><primary>HTML files</primary><secondary>rendering</secondary></indexterm><indexterm><primary>rendering</primary><secondary>HTML files</secondary></indexterm><indexterm><primary>files</primary><secondary>HTML files</secondary><tertiary>rendering</tertiary></indexterm><indexterm><primary>KSimpleBrowser application</primary><secondary>ksimplebrowser.cpp class definition</secondary></indexterm><indexterm><primary>browsers</primary><secondary>simple browser application</secondary><tertiary>ksimplebrowser.cpp class definition</tertiary></indexterm><indexterm><primary>ksimplebrowser.cpp class definition (simple browser application)</primary></indexterm><indexterm><primary>listings</primary><secondary>KSimpleBrowser</secondary><tertiary>ksimplebrowser.cpp class definition</tertiary></indexterm></programlisting>
</example>
<para>Short isn't it? If you compile and execute this code (using the <literal>main()</literal> function given in <link linkend="ch10list03">Listing 10.3</link>) you'll find that you can view fully rendered HTML pages (including images, tables, and frames) and follow links.<indexterm><primary>HTML files</primary><secondary>rendering</secondary></indexterm><indexterm><primary>rendering</primary><secondary>HTML files</secondary></indexterm><indexterm><primary>files</primary><secondary>HTML files</secondary><tertiary>rendering</tertiary></indexterm></para>
<para>In KSimpleBrowser, you use two methods of HTML rendering. The first is to create our HTML on-the-fly. The sequence of statements in lines 17&ndash;23 of <link linkend="ch10list02">Listing 10.2</link> tells <literal>khtmlpart</literal> (an instance of <literal>KHTMLPart</literal>) to render the HTML page specified by HTML-marked text. You may call <literal>write()</literal> multiple times before calling <literal>end()</literal>, but the fewer calls you make, the faster the rendering process will be. The second way to get HTML pages rendered is to instruct <literal>khtmlwpart</literal> to open a URL. The URL may be of type <literal>file://</literal>, <literal>http://</literal>, <literal>ftp://</literal>, or any type that points to a valid HTML page. This means that you can load local or remote files using the same techniques. The method <literal>KHTMLPart::openURL()</literal>, used in line 30 of <link linkend="ch10list02">Listing 10.2</link>, loads the Web page. This method returns immediately while the rendering continues in the background.</para>
<para>When compiling Listings 10.1&ndash;10.3, you need to  pass the option <literal>-lkhtml</literal> to <literal>g++</literal>. This tells <literal>g++</literal> to link the program against libkhtml, the library that contains <literal>KHTMLPart</literal>. <link linkend="ch10fig01">Figure 10.1</link> shows KSimpleBrowser displaying the initial instructions page.<indexterm><primary>HTML files</primary><secondary>rendering</secondary></indexterm><indexterm><primary>rendering</primary><secondary>HTML files</secondary></indexterm><indexterm><primary>files</primary><secondary>HTML files</secondary><tertiary>rendering</tertiary></indexterm><indexterm><primary>KSimpleBrowser application</primary><secondary>main() method</secondary></indexterm><indexterm><primary>browsers</primary><secondary>simple browser application</secondary><tertiary>main() method</tertiary></indexterm><indexterm><primary>main() method</primary><secondary>KSimpleBrowser</secondary></indexterm><indexterm><primary>methods</primary><secondary>main()</secondary><tertiary>KSimpleBrowser</tertiary></indexterm></para>
<example role="codelisting" label="10.3" id="ch10list03">
<title><literal>main.cpp:</literal> A <literal>main()</literal> Function that Creates and Executes KSimpleBrowser<indexterm><primary>listings</primary><secondary>KSimpleBrowser</secondary><tertiary>main() method</tertiary></indexterm></title>
<programlisting linenumbering="numbered">
 1: #include &lt;kapp.h>
 2:
 3: #include "ksimplebrowser.h"
 4:
 5: int
 6: main (int argc, char *argv[])
 7: {
 8:   KApplication kapplication (argc, argv, "ksimplebrowser");
 9:
10:   KSimpleBrowser *ksimplebrowser  = new KSimpleBrowser;
11:
12:   ksimplebrowser->show();
13:
14:   return kapplication.exec();
15: }<indexterm><primary>HTML files</primary><secondary>rendering</secondary></indexterm><indexterm><primary>rendering</primary><secondary>HTML files</secondary></indexterm><indexterm><primary>files</primary><secondary>HTML files</secondary><tertiary>rendering</tertiary></indexterm><indexterm><primary>HTML files</primary><secondary>rendering</secondary></indexterm><indexterm><primary>rendering</primary><secondary>HTML files</secondary></indexterm><indexterm><primary>files</primary><secondary>HTML files</secondary><tertiary>rendering</tertiary></indexterm><indexterm><primary>KSimpleBrowser application</primary><secondary>main() method</secondary></indexterm><indexterm><primary>browsers</primary><secondary>simple browser application</secondary><tertiary>main() method</tertiary></indexterm><indexterm><primary>main() method</primary><secondary>KSimpleBrowser</secondary></indexterm><indexterm><primary>methods</primary><secondary>main()</secondary><tertiary>KSimpleBrowser</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KSimpleBrowser</secondary><tertiary>main() method</tertiary></indexterm></programlisting>
</example>
<figure label="10.1" id="ch10fig01">
<title>KSimpleBrowser displaying the initial instructions page.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/10fig01.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
</section>
</section>
<section id="ch10lev1sec2">
<title>Manipulating Images</title>
<para>You can load image files in common formats such as PNG and JPEG (see <link linkend="ch10table01a">Tables 10.1a</link> and <link linkend="ch10table01b">10.1b</link> for a complete list of supported formats) into buffers accessed by <literal>QPixmap</literal> or <literal>QImage</literal> classes using image-loading routines built into Qt or added by the KDE library libksycoca. You can also save arbitrary <literal>QImage</literal> or <literal>QPixmap</literal> buffers in various formats.<indexterm><primary>images</primary><secondary>suported formats</secondary></indexterm><indexterm><primary>graphics</primary><secondary>supported formats</secondary></indexterm><indexterm><primary>Qt library</primary><secondary>supported image formats</secondary></indexterm><indexterm><primary>libraries</primary><secondary>Qt</secondary><tertiary>supported image formats</tertiary></indexterm><indexterm><primary>files</primary><secondary>image formats</secondary></indexterm></para>
<table id="ch10table01a" frame="topbot" label="10.1a">
<title>Image Formats Supported by Qt</title>
<tgroup cols="2" align="left" colsep="0" rowsep="0">
<colspec colname="c1"/>
<colspec colname="c2"/>
<tbody valign="top">
<row>
<entry>PNG</entry>
<entry><emphasis role="strong">P</emphasis>ortable <emphasis role="strong">N</emphasis>etwork <emphasis role="strong">G</emphasis>raphics</entry>
</row>
<row>
<entry>BMP</entry>
<entry>Windows <emphasis role="strong">B</emphasis>it<emphasis role="strong">m</emphasis>a<emphasis role="strong">p</emphasis></entry></row>
<row>
<entry>XBM</entry>
<entry><emphasis role="strong">X</emphasis> <emphasis role="strong">B</emphasis>it<emphasis role="strong">m</emphasis>ap</entry></row>
<row>
<entry>XPM</entry>
<entry><emphasis role="strong">X</emphasis> <emphasis role="strong">P</emphasis>ix<emphasis role="strong">m</emphasis>ap</entry></row>
<row>
<entry>PNM</entry>
<entry><emphasis role="strong">P</emphasis>ortable A<emphasis role="strong">n</emphasis>y<emphasis role="strong">m</emphasis>ap format</entry></row>
<row>
<entry>GIF<footnote role="tablenote"><para>GIF support is included in Qt only if Qt is appropriately configured before its source is compiled. To see whether your installed version of Qt was compiled with GIF support, change to the directory containing Qt include files (/usr/local/qt/include, /usr/include/qt, or another directory) and type</para></footnote></entry>
<entry><emphasis role="strong">G</emphasis>raphics <emphasis role="strong">I</emphasis>nterchange <emphasis role="strong">F</emphasis>ormat<indexterm><primary>images</primary><secondary>suported formats</secondary></indexterm><indexterm><primary>graphics</primary><secondary>supported formats</secondary></indexterm><indexterm><primary>Qt library</primary><secondary>supported image formats</secondary></indexterm><indexterm><primary>libraries</primary><secondary>Qt</secondary><tertiary>supported image formats</tertiary></indexterm></entry></row>
</tbody>
</tgroup>
</table>
<table id="ch10table01b" frame="topbot" label="10.1b">
<title>Additional Image Formats Supported by libksycoca</title>
<tgroup cols="2" align="left" colsep="0" rowsep="0">
<colspec colname="c1"/>
<colspec colname="c2"/>
<tbody valign="top">
<row>
<entry>JPEG</entry>
<entry><emphasis role="strong">J</emphasis>oint <emphasis role="strong">P</emphasis>hotographic <emphasis role="strong">E</emphasis>xperts <emphasis role="strong">G</emphasis>roup</entry></row>
<row>
<entry>XV</entry>
<entry><emphasis role="strong">XV</emphasis>iew Graphics Format</entry></row>
<row>
<entry>EPS</entry>
<entry><emphasis role="strong">E</emphasis>ncapsulated <emphasis role="strong">P</emphasis>ostscript</entry></row>
<row>
<entry>PCX</entry>
<entry>IBM <emphasis role="strong">PC</emphasis> Paintbrush</entry></row>
<row>
<entry>IFF</entry>
<entry>Sun TAAC <emphasis role="strong">I</emphasis>mage <emphasis role="strong">F</emphasis>ile <emphasis role="strong">F</emphasis>ormat</entry>
</row>
<row>
<entry>TGA</entry>
<entry><emphasis role="strong">T</emphasis>ar<emphasis role="strong">ga</emphasis> Image File</entry></row>
<row>
<entry>TIFF</entry>
<entry><emphasis role="strong">T</emphasis>agged-<emphasis role="strong">I</emphasis>mage <emphasis role="strong">F</emphasis>ile <emphasis role="strong">F</emphasis>ormat (read only)</entry></row>
<row>
<entry>KRL</entry>
<entry><emphasis role="strong">K</emphasis>ellogg <emphasis role="strong">R</emphasis>adiation <emphasis role="strong">L</emphasis>aboratory (read only)<indexterm><primary>images</primary><secondary>suported formats</secondary></indexterm><indexterm><primary>graphics</primary><secondary>supported formats</secondary></indexterm><indexterm><primary>libkimgic library</primary><secondary>supported image formats</secondary></indexterm><indexterm><primary>libraries</primary><secondary>libkimgic</secondary><tertiary>supported image formats</tertiary></indexterm><indexterm><primary>files</primary><secondary>image formats</secondary></indexterm></entry></row>
</tbody>
</tgroup>
</table>
<informalexample>
<programlisting linenumbering="unnumbered">
<emphasis role="strong">grep BUILTIN_GIF qgif.h</emphasis>
</programlisting>
</informalexample>
<para>If the last line displayed reads</para>
<informalexample>
<programlisting linenumbering="unnumbered">
#define QT_BUILTIN_GIF_READER 1</programlisting>
</informalexample>
<para>then Qt was compiled with GIF support. Otherwise, the line will read</para>
<informalexample>
<programlisting linenumbering="unnumbered">
#define QT_BUILTIN_GIF_READER 0
</programlisting>
</informalexample>
<section id="ch10lev2sec2">
<title>Comparison of <literal>QImage</literal> and <literal>QPixmap</literal></title>
<para><literal>QImage</literal><indexterm><primary>images</primary><secondary>QImage class</secondary></indexterm><indexterm><primary>QImage class</primary></indexterm><indexterm><primary>classes</primary><secondary>QImage</secondary></indexterm><indexterm><primary>graphics</primary><secondary>QImage class</secondary></indexterm> and <literal>QPixmap</literal> serve different purposes. <literal>QImage</literal> stores image data in a simple buffer, and <literal>QPixmap</literal> stores image data on the X server. This difference means that images will load and save to or from a <literal>QImage</literal> more quickly than to or from a <literal>QPixmap</literal>. It also means that you will be able to directly manipulate pixel data in a <literal>QImage</literal> more quickly, but use drawing functions (through <literal>QPainter</literal>) only on <literal>QPixmap</literal>. (Drawing functions are carried out by the X server, so they can operate only on data owned by the X server&mdash;that is, a <literal>QPixmap</literal>, but not a <literal>QImage</literal>.)</para>
<para>Because a <indexterm><primary>images</primary><secondary>QPixmap class</secondary></indexterm><indexterm><primary>QPixmap class</primary></indexterm><indexterm><primary>classes</primary><secondary>QPixmap</secondary></indexterm><indexterm><primary>graphics</primary><secondary>QPixmap class</secondary></indexterm><literal>QPixmap</literal> is stored on the X server, it can store only images that have <quote>depths</quote> allowed by the X server, and these depths are usually constrained by the specifications of the computer's video card. (An image's depth is the number of bits used to tell the color of one pixel. For example, pseudocolor (256 color) images have a depth of 8 bits, and truecolor (16 million color) images have a depth of 24 bits).</para>
<para>Furthermore, you can <literal>bitblt()</literal> to and from a <literal>QPixmap</literal>, but not to and from a <literal>QImage</literal> (see <link linkend="ch09">Chapter 9, <quote>Constructing a Responsive User Interface</quote></link> for more information about <literal>bitblt()</literal>).<indexterm><primary>images</primary><secondary>QPixmap class</secondary></indexterm><indexterm><primary>QPixmap class</primary></indexterm><indexterm><primary>classes</primary><secondary>QPixmap</secondary></indexterm><indexterm><primary>graphics</primary><secondary>QPixmap class</secondary></indexterm></para>
</section>
<section id="ch10lev2sec3">
<title>An Image Viewer/Converter</title>
<para>To <indexterm><primary>images</primary><secondary>image view/converter application (KImageView)</secondary></indexterm><indexterm><primary>graphics</primary><secondary>image view/converter application (KImageView)</secondary></indexterm><indexterm><primary>KImageView widget (image viewer/converter)</primary></indexterm><indexterm><primary>widets</primary><secondary>KImageView (image viewer/converter)</secondary></indexterm>see how some of the image-manipulation functions work, let's write a widget that loads an image (in any of the acceptable formats listed in Table 10.1), draws an ugly green frame around it, saves it as a PNG file, and then displays it on the widget's window. This widget is shown in <link linkend="ch10list04">Listings 10.4</link> and <link linkend="ch10list05">10.5</link>.<indexterm><primary>images</primary><secondary>image view/converter application (KImageView)</secondary><tertiary>kimageview.h class definition</tertiary></indexterm><indexterm><primary>graphics</primary><secondary>image view/converter application (KImageView)</secondary><tertiary>kimageview.h class definition</tertiary></indexterm><indexterm><primary>KImageView widget (image viewer/converter)</primary><secondary>kimageview.h class definition</secondary></indexterm><indexterm><primary>widets</primary><secondary>KImageView (image viewer/converter)</secondary><tertiary>kimageview.h class definition</tertiary></indexterm><indexterm><primary>kimageview.h class definition (KImageView widget)</primary></indexterm><indexterm><primary>defining</primary><secondary>widget classes</secondary><tertiary>KImageView</tertiary></indexterm></para>
<example role="codelisting" label="10.4" id="ch10list04">
<title>kimageview.h: Class Definition for <literal>KImageView</literal>, a Widget that Loads, Modifies, Saves, and Displays an Image<indexterm><primary>listings</primary><secondary>KImageView</secondary><tertiary>kimageview.h class definition</tertiary></indexterm>
</title>
<programlisting linenumbering="numbered">
 1: #ifndef __KIMAGEVIEW_H__
 2: #define __KIMAGEVIEW_H__
 3:
 4: #include &lt;qwidget.h>
 5:
 6: /**
 7:  * KImageView
 8:  * Display an image.
 9:  **/
10: class KImageView : public QWidget
11: {
12:  public:
13:   KImageView (const QString &amp;filename, QWidget *parent, const char *name=0);
14:
15:  protected:
16:   QPixmap *qpixmap;
17:   QString filename;
18:   void paintEvent (QPaintEvent *);
19:
20: };
21:
22: #endif<indexterm><primary>images</primary><secondary>image view/converter application (KImageView)</secondary><tertiary>kimageview.h class definition</tertiary></indexterm><indexterm><primary>graphics</primary><secondary>image view/converter application (KImageView)</secondary><tertiary>kimageview.h class definition</tertiary></indexterm><indexterm><primary>KImageView widget (image viewer/converter)</primary><secondary>kimageview.h class definition</secondary></indexterm><indexterm><primary>widets</primary><secondary>KImageView (image viewer/converter)</secondary><tertiary>kimageview.h class definition</tertiary></indexterm><indexterm><primary>kimageview.h class definition (KImageView widget)</primary></indexterm><indexterm><primary>listings</primary><secondary>KImageView</secondary><tertiary>kimageview.h class definition</tertiary></indexterm></programlisting>
</example>
<para>In this widget, most of the work is done in the constructor, but <literal>paintEvent()</literal> handles drawing the image onscreen. You store the image in a <literal>QPixmap</literal> so that you can draw on it with a <literal>QPainter</literal>.<indexterm><primary>images</primary><secondary>image view/converter application (KImageView)</secondary><tertiary>kimageview.cpp class declaration</tertiary></indexterm><indexterm><primary>graphics</primary><secondary>image view/converter application (KImageView)</secondary><tertiary>kimageview.cpp class declaration</tertiary></indexterm><indexterm><primary>KImageView widget (image viewer/converter)</primary><secondary>kimageview.cpp class declaration</secondary></indexterm><indexterm><primary>widets</primary><secondary>KImageView (image viewer/converter)</secondary><tertiary>kimageview.cpp class declaration</tertiary></indexterm><indexterm><primary>kimageview.cpp class declaration (KImageView widget)</primary></indexterm><indexterm><primary>declaring</primary><secondary>widget classes</secondary><tertiary>KImageView</tertiary></indexterm></para>
<example role="codelisting" label="10.5" id="ch10list05">
<title>kimageview.cpp: Class Declaration for <literal>KImageView<indexterm><primary>listings</primary><secondary>KImageView</secondary><tertiary>kimageview.cpp class declaration</tertiary></indexterm></literal></title>
<programlisting linenumbering="numbered">
 1: #include &lt;qpixmap.h>
 2: #include &lt;qpainter.h>
 3: #include &lt;qfileinfo.h>
 4:
 5: #include &lt;kimgio.h>
 6:
 7: #include "kimageview.h"
 8:
 9: KImageView::KImageView (const QString &amp;_filename,
10:             QWidget *parent, const char *name=0) :
11:   QWidget (parent, name)
12: {
13:   filename = _filename;
14:
15:   KImageIO::registerFormats();
16:
17:   qpixmap = new QPixmap;
18:   qpixmap->load (filename);
19:
20:   QPainter qpainter (qpixmap);
21:   qpainter.setPen (QPen (Qt::green, 10));
22:   qpainter.drawRect (qpixmap->rect());
23:
24:   QFileInfo qfileinfo (filename);
25:   qpixmap->save (qfileinfo.baseName() + ".png", "PNG");
26: }
27:
28: void
29: KImageView::paintEvent (QPaintEvent *)
30: {
31:   QPainter qpainter (this);
32:
33:   qpainter.drawPixmap (0, 0, *qpixmap);
34: }<indexterm><primary>images</primary><secondary>image view/converter application (KImageView)</secondary><tertiary>kimageview.cpp class declaration</tertiary></indexterm><indexterm><primary>graphics</primary><secondary>image view/converter application (KImageView)</secondary><tertiary>kimageview.cpp class declaration</tertiary></indexterm><indexterm><primary>KImageView widget (image viewer/converter)</primary><secondary>kimageview.cpp class declaration</secondary></indexterm><indexterm><primary>widets</primary><secondary>KImageView (image viewer/converter)</secondary><tertiary>kimageview.cpp class declaration</tertiary></indexterm><indexterm><primary>kimageview.cpp class declaration (KImageView widget)</primary></indexterm><indexterm><primary>declaring</primary><secondary>widget classes</secondary><tertiary>KImageView</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KImageView</secondary><tertiary>kimageview.cpp class declaration</tertiary></indexterm>
</programlisting>
</example>
<para>To load the image formats that are part of libksycoca, you need to call the static method</para>
<informalexample>
<programlisting linenumbering="unnumbered">
KImageIO::registerFormats();
</programlisting>
</informalexample>
<para>as shown on line 15. Conveniently enough, this is all you have to do! This call registers the reading and writing routines for all the libksycoca formats with Qt and makes further use of them transparent. For example, on line 18 you make a call to the method <literal>QPixmap::load()</literal> to load the image. This method automatically determines the image format of the file and uses the appropriate reading routine, whether it resides in the Qt or KDE libraries (for example, libksycoca).</para>
<para>Next, you draw a frame around the image using a green <literal>QPen</literal> of width 10 (lines 20&ndash;22). At this point you could draw anything on the pixmap that <literal>QPainter</literal> allows. You can't read in pixel color values, however, so you are limited simply to drawing on the image.</para>
<note role="normal">
<para>If you want to perform an image transformation that requires reading in pixel color values (such as changing the image's brightness or contrast), you need to load the image into a QImage rather than a QPixmap.</para>
</note>
<para>To save the file (lines 24 and 25), you use <literal>QPixmap::save()</literal>. The first argument to this method is the name of the file and the second is the file type, given as a string. The file type strings are given in <link linkend="ch10table01a">Tables 10.1a</link> and <link linkend="ch10table01b">10.1b</link>.</para>
<note role="normal">
<para>The file type string must be all capitals. For example, use <literal>PNG</literal>, not <literal>png</literal> or <literal>Png</literal>.</para>
</note>
<para>We've made use here of a Qt class called <literal>QFileInfo</literal>. This class lets you find a file's name and extension, among other things. We've created a string with</para>
<informalexample>
<programlisting linenumbering="unnumbered">
qfileinfo.baseName() + ".png"
</programlisting>
</informalexample>
<para>in line 25 that contains the name of the loaded file, with the extension changed to png. See the Qt reference documentation for details on <literal>QFileInfo</literal>.</para>
<para>You can use the following <literal>main()</literal> function to try out <literal>KImageView</literal> on an image file. You pass the image file's name to the program on the command line. If you compile the program to an executable with the name <literal>kimageviewtest</literal> and type</para>
<informalexample>
<programlisting linenumbering="unnumbered">
<emphasis role="strong">./kimageview $KDEDIR/share/wallpapers/Marble01.jpg</emphasis>
</programlisting>
</informalexample>
<para>you will see something similar to <link linkend="ch10fig02">Figure 10.2</link>. (The file Marble01.jpg is included with KDE 2.0.)<indexterm><primary>images</primary><secondary>image view/converter application (KImageView)</secondary><tertiary>main() method</tertiary></indexterm><indexterm><primary>graphics</primary><secondary>image view/converter application (KImageView)</secondary><tertiary>main() method</tertiary></indexterm><indexterm><primary>KImageView widget (image viewer/converter)</primary><secondary>main() method</secondary></indexterm><indexterm><primary>widets</primary><secondary>KImageView (image viewer/converter)</secondary><tertiary>main() method</tertiary></indexterm><indexterm><primary>main() method</primary><secondary>KImageView widget</secondary></indexterm><indexterm><primary>methods</primary><secondary>main()</secondary><tertiary>KImageView widget</tertiary></indexterm></para>
<example role="codelisting" label="10.6" id="ch10list06">
<title>main.cpp: A <literal>main()</literal> Function that Instantiates <literal>KImageView</literal> and Passes a Filename to It from the Command Line<indexterm><primary>listings</primary><secondary>KImageView</secondary><tertiary>main() method</tertiary></indexterm></title>
<programlisting linenumbering="numbered">
 1: #include &lt;kapp.h>/
 2:
 3: #include "kimageview.h"
 4:
 5: int
 6: main (int argc, char *argv[])
 7: {
 8:   KApplication kapplication (argc, argv, "kimageviewtest");
 9:
10:   if (! (argc>1) )
11:     exit (1);
12:   KImageView *kimageview  = new KImageView (argv[1], 0);
13:
14:   kapplication.setMainWidget (kimageview);
15:   kimageview->show();
16:
17:   return kapplication.exec();
18: }<indexterm><primary>images</primary><secondary>image view/converter application (KImageView)</secondary><tertiary>main() method</tertiary></indexterm><indexterm><primary>graphics</primary><secondary>image view/converter application (KImageView)</secondary><tertiary>main() method</tertiary></indexterm><indexterm><primary>KImageView widget (image viewer/converter)</primary><secondary>main() method</secondary></indexterm><indexterm><primary>widets</primary><secondary>KImageView (image viewer/converter)</secondary><tertiary>main() method</tertiary></indexterm><indexterm><primary>main() method</primary><secondary>KImageView widget</secondary></indexterm><indexterm><primary>methods</primary><secondary>main()</secondary><tertiary>KImageView widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KImageView</secondary><tertiary>main() method</tertiary></indexterm>
</programlisting>
</example>
<figure label="10.2" id="ch10fig02">
<title><literal>KImageView</literal> displaying the KDE wallpaper Marble01.jpg.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/10fig02.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
</section>
</section>
<section id="ch10lev1sec3">
<title>Checking Spelling</title>
<para>KDE <indexterm><primary>spell-checking (KSpell)</primary></indexterm><indexterm><primary>editing</primary><secondary>spell-checking (KSpell)</secondary></indexterm><indexterm><primary>KSpell (spell-checking)</primary></indexterm><indexterm><primary>widgets</primary><secondary>KSpell (spell-checking)</secondary></indexterm><indexterm><primary>checking spelling</primary><see>spell-checking</see></indexterm>contains a spell-checking class called <literal>KSpell</literal>, which has four spell checking methods:<indexterm><primary>spell-checking (KSpell)</primary><secondary>methods</secondary></indexterm><indexterm><primary>editing</primary><secondary>spell-checking (KSpell)</secondary><tertiary>methods</tertiary></indexterm><indexterm><primary>KSpell (spell-checking)</primary><secondary>methods</secondary></indexterm><indexterm><primary>widgets</primary><secondary>KSpell (spell-checking)</secondary><tertiary>methods</tertiary></indexterm></para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para><literal>modalCheck()</literal>&mdash;Spell<indexterm><primary>modalCheck() method</primary></indexterm><indexterm><primary>methods</primary><secondary>modalCheck()</secondary></indexterm> checks a plain text buffer using a modal spell checker dialog.</para></listitem>
<listitem><para><literal>check()</literal>&mdash;Spell<indexterm><primary>check() method</primary></indexterm><indexterm><primary>methods</primary><secondary>check()</secondary></indexterm> checks a plain text buffer using a nonmodal spell checker dialog.</para></listitem>
<listitem><para><literal>checkList()</literal>&mdash;<indexterm><primary>checkList() method</primary></indexterm><indexterm><primary>methods</primary><secondary>checkList()</secondary></indexterm>Spell checks a list of words. Useful for checking non-plain text formats, such as HTML, SGML, or internal formats.</para></listitem>
<listitem><para><literal>checkWord()</literal>&mdash;<indexterm><primary>checkWord() method</primary></indexterm><indexterm><primary>methods</primary><secondary>checkWord()</secondary></indexterm>Spell checks a single word. Useful for implementing "online" (or check-as-you-type) spell checking.</para></listitem></itemizedlist>
<para><literal>KSpell</literal> can use International <citetitle>Ispell</citetitle> <ulink url="http://fmg-www.cs.ucla.edu/geoff/ispell.html">(http://fmg-www.cs.ucla.edu/geoff/ispell.html)</ulink> or <citetitle>ASpell</citetitle> <ulink url="http://metalab.unc.edu/kevina/aspell/">(http://metalab.unc.edu/kevina/aspell/)</ulink> as a "back end" to check the spelling of words. Dictionaries are available for these programs in 19 languages at <ulink url="http://fmg-www.cs.ucla.edu/geoff/ispell-dictionaries.html">http://fmg-www.cs.ucla.edu/geoff/ispell-dictionaries.html</ulink>.<indexterm><primary>spell-checking (KSpell)</primary><secondary>methods</secondary></indexterm><indexterm><primary>editing</primary><secondary>spell-checking (KSpell)</secondary><tertiary>methods</tertiary></indexterm><indexterm><primary>KSpell (spell-checking)</primary><secondary>methods</secondary></indexterm><indexterm><primary>widgets</primary><secondary>KSpell (spell-checking)</secondary><tertiary>methods</tertiary></indexterm></para>
<section id="ch10lev2sec4">
<title>Using <literal>KSpell</literal> in an Application</title>
<para>We'll<indexterm><primary>spell-checking (KSpell)</primary><secondary>sample application</secondary></indexterm><indexterm><primary>editing</primary><secondary>spell-checking (KSpell)</secondary><tertiary>sample application</tertiary></indexterm><indexterm><primary>KSpell (spell-checking)</primary><secondary>sample application</secondary></indexterm><indexterm><primary>widgets</primary><secondary>KSpell (spell-checking)</secondary><tertiary>sample application</tertiary></indexterm> use <literal>modalCheck()</literal> in this section because it's the simplest method. If you want to include features such as highlighting misspelled words in the user's document as the spell checking proceeds, then you will need to use <literal>check()</literal>. KEdit, KWrite, and the KMail/KRN composer all use <literal>check()</literal> so that they can highlight misspelled words.</para>
<para>When using <literal>KSpell</literal> in an application, you need to offer the user a menu entry to configure the spell checker and one to start it. These menu entries have standard places. The spell checker configuration entry goes in the Options menu, and the entry to start the spell checker goes in Tools and is called <quote>Spelling&hellip;</quote>.</para>
<para>The following code, <link linkend="ch10list07">Listings 10.7</link> and <link linkend="ch10list08">10.8</link>, demonstrates the use of <literal>KSpell</literal> in an application. This application, KSpellDemo, puts some text in its content area and offers you the option to check the spelling of the text. After the spell check is complete, the corrected text is shown (see <link linkend="ch10fig03">Figure 10.3</link>).</para>
<example role="codelisting" label="10.7" id="ch10list07">
<title>kspelldemo.h: Class Declaration for KSpellDemo, a Simple Application that Uses <literal>KSpell<indexterm><primary>listings</primary><secondary>KSpellDemo (spell-checking application)</secondary><tertiary>kspelldemo.h class definition</tertiary></indexterm><indexterm><primary>KSpellDemo (spell-checking application)</primary><secondary>kspelldemo.h class definition</secondary></indexterm><indexterm><primary>kspelldemo.h class definition (KSpellDemo)</primary></indexterm><indexterm><primary>defining</primary><secondary>widget classes</secondary><tertiary>KSpellDemo</tertiary></indexterm><indexterm><primary>widgets</primary><secondary>names of specific widgets</secondary></indexterm></literal></title>
<programlisting linenumbering="numbered">
 1: #ifndef __KSPELLDEMO_H__
 2: #define __KSPELLDEMO_H__
 3:
 4: #include &lt;ktmainwindow.h>
 5:
 6: class QLabel;
 7:
 8: /**
9:  * KSpellDemo
10:  * Spell check some text with KSpell.
11:  **/
12: class KSpellDemo : public KTMainWindow
13: {
14:  Q_OBJECT
15:  public:
16:   KSpellDemo (const char *name=0);
17:
18:  public slots:
19:   void slotSpellCheck();
20:   void slotConfigure();
21:
22:  protected:
23:   QLabel *label;
24: };
25:
26: #endif<indexterm><primary>listings</primary><secondary>KSpellDemo (spell-checking application)</secondary><tertiary>kspelldemo.h class definition</tertiary></indexterm><indexterm><primary>KSpellDemo (spell-checking application)</primary><secondary>kspelldemo.h class definition</secondary></indexterm><indexterm><primary>kspelldemo.h class definition (KSpellDemo)</primary></indexterm><indexterm><primary>defining</primary><secondary>widget classes</secondary><tertiary>KSpellDemo</tertiary></indexterm>
</programlisting>
</example>
<para>We derive from <literal>KTMainWindow</literal> here so that you can add the menubar and toolbar (see <link linkend="ch10fig03">Figure 10.3</link>). The two slots, <literal>slotSpellCheck()</literal> and <literal>slotConfigure()</literal>, start the spell checker and configure it, respectively.<indexterm><primary>spell-checking (KSpell)</primary><secondary>sample application</secondary></indexterm><indexterm><primary>editing</primary><secondary>spell-checking (KSpell)</secondary><tertiary>sample application</tertiary></indexterm><indexterm><primary>KSpell (spell-checking)</primary><secondary>sample application</secondary></indexterm><indexterm><primary>widgets</primary><secondary>KSpell (spell-checking)</secondary><tertiary>sample application</tertiary></indexterm></para>
<example role="codelisting" label="10.8" id="ch10list08">
<title>kspelldemo.cpp: Class Definition for <literal>KSpellDemo</literal><indexterm><primary>listings</primary><secondary>KSpellDemo (spell-checking application)</secondary><tertiary>kspelldemo.cpp class declaration</tertiary></indexterm><indexterm><primary>KSpellDemo (spell-checking application)</primary><secondary>kspelldemo.cpp class declaration</secondary></indexterm><indexterm><primary>kspelldemo.cpp class declaration (KSpellDemo)</primary></indexterm><indexterm><primary>declaring</primary><secondary>widget classes</secondary><tertiary>KSpellDemo</tertiary></indexterm></title>
<programlisting linenumbering="numbered">
 1: #include &lt;stdio.h>
 2:
 3: #include &lt;qtabdialog.h>
 4:
 5: #include &lt;kspell.h>
 6: #include &lt;ktmainwindow.h>
 7: #include &lt;ksconfig.h>
 8: #include &lt;kstdaction.h>
 9: #include &lt;kaction.h>
10:
11: #include "kspelldemo.moc"
12:
13: KSpellDemo::KSpellDemo (const char *name=0) :
14:   KTMainWindow (name)
15: {
16:
17:   KAction *spelling = KStdAction::spelling (this, SLOT(slotSpellCheck()),
18:       actionCollection());
19:
20:   new KAction ( "&amp;Configure spellchecker..., 0,
21:         this, SLOT (slotConfigure()), actionCollection(),
22:         "configure_spellchecker" );
23:
24:   createGUI();
25:
26:
27:   label = new QLabel ("Som words are mispelled!", this);
28:   setView (label);
29: }
30:
31: void
32: KSpellDemo::slotSpellCheck()
33: {
34:   QString text (label->text());
35:
36:   KSpell::modalCheck (text);
37:   label->setText (text);
38:}
39:
40: void
41: KSpellDemo::slotConfigure()
42: {
43:   QTabDialog qtabdialog (0, 0, true);
44:   qtabdialog.setCancelButton();
45:   KSpellConfig ksconfig (&amp;qtabdialog);
46:   qtabdialog.addTab (&amp;ksconfig, "&amp;Spellchecker");
47:   if (qtabdialog.exec())
48:     ksconfig.writeGlobalSettings();
49: }
</programlisting>
</example>
<figure label="10.3" id="ch10fig03">
<title>KSpellDemo shows some misspelled text.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/10fig03.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>In the constructor, you put the Spelling&hellip; and Configure spellchecker&hellip; entries in their appropriate places and also put a spell checker button on the toolbar (see lines 17&ndash;24 The layout of the user interface is described in the XML GUI file kspelldemoui.rc included on the web site.  Be sure to copy this file to its appropriate directory before running KSpellDemo: $KDEDIR/share/apps/kspelldemo/.</para>
</section>
<section id="ch10lev2sec5">
<title>Modal Spell Checking</title>
<para>In <indexterm><primary>spell-checking (KSpell)</primary><secondary>modal spell-checking</secondary></indexterm><indexterm><primary>editing</primary><secondary>spell-checking (KSpell)</secondary><tertiary>modal spell-checking</tertiary></indexterm><indexterm><primary>KSpell (spell-checking)</primary><secondary>modal spell-checking</secondary></indexterm><indexterm><primary>widgets</primary><secondary>KSpell (spell-checking)</secondary><tertiary>modal spell-checking</tertiary></indexterm><literal>slotSpellCheck()</literal>,<indexterm><primary>slotSpellCheck() method</primary></indexterm><indexterm><primary>methodsslotSpellCheck()</primary></indexterm> you use the method <literal>modalCheck()</literal>. Checking spelling this way is especially simple because the method is static. You fill a <literal>QString</literal>, called <literal>text</literal> here, with the text that needs checking and call</para>
<informalexample>
<programlisting linenumbering="unnumbered">
KSpell::modalCheck (text);
</programlisting>
</informalexample>
<para>When the method returns, <literal>text</literal> contains the spell checked text. Interactive word replacement is handled by <literal>KSpell</literal>. <link linkend="ch10fig04">Figure 10.4</link> shows the KSpell dialog offering suggested replacements for the misspelled word to the user. This dialog is created and maintained by <literal>KSpell</literal>.<indexterm><primary>spell-checking (KSpell)</primary><secondary>modal spell-checking</secondary></indexterm><indexterm><primary>editing</primary><secondary>spell-checking (KSpell)</secondary><tertiary>modal spell-checking</tertiary></indexterm><indexterm><primary>KSpell (spell-checking)</primary><secondary>modal spell-checking</secondary></indexterm><indexterm><primary>widgets</primary><secondary>KSpell (spell-checking)</secondary><tertiary>modal spell-checking</tertiary></indexterm></para>
<figure label="10.4" id="ch10fig04">
<title>The KSpell dialog box shows the misspelled word and offers suggestions for replacement.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/10fig04.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<note role="normal">
<para>While the spell check proceeds, the user will be able to interact only with the KSpell dialog, but the rest of your GUI will still repaint itself when necessary.</para>
</note>
</section>
<section id="ch10lev2sec6">
<title>Configuring <literal>KSpell</literal></title>
<para>A<indexterm><primary>spell-checking (KSpell)</primary><secondary>configuring</secondary></indexterm><indexterm><primary>editing</primary><secondary>spell-checking (KSpell)</secondary><tertiary>configuring</tertiary></indexterm><indexterm><primary>KSpell (spell-checking)</primary><secondary>configuring</secondary></indexterm><indexterm><primary>widgets</primary><secondary>KSpell (spell-checking)</secondary><tertiary>configuring</tertiary></indexterm><indexterm><primary>configuring</primary><secondary>spell-checking</secondary></indexterm> standard configuration dialog called<indexterm><primary>KSpellConfig configuration dialog box</primary></indexterm><indexterm><primary>dialog boxes</primary><secondary>KSpellConfig configuration dialog</secondary></indexterm> <literal>KSpellConfig</literal> is available for use in applications that use <literal>KSpell</literal>. The dialog lets the user choose which dictionary will be used and which back end client will be used, among other things. Standard code to use <literal>KSpellConfig</literal> is shown on lines 43&ndash;48. A screen shot of the <literal>KSpellConfig</literal> dialog box is shown in <link linkend="ch10fig05">Figure 10.5</link>.</para>
<figure label="10.5" id="ch10fig05">
<title>The <literal>KSpellConfig</literal> dialog box lets the user configure <literal>KSpell</literal>.<indexterm><primary>KSpellConfig configuration dialog box</primary></indexterm><indexterm><primary>dialog boxes</primary><secondary>KSpellConfig configuration dialog</secondary></indexterm></title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/10fig05.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>If you want to save the <literal>KSpell</literal> settings, you should call <literal>writeGlobalSettings()</literal> <indexterm><primary>writeGlobalSettings() method</primary></indexterm><indexterm><primary>methods</primary><secondary>writeGlobalSettings()</secondary></indexterm>when  the user clicks OK (that is, if <literal>qtabdialog.exec()</literal> returns <literal>true</literal>). If not, you will need to pass the instance of <literal>KSpellConfig</literal> that you just created to a new instance of <literal>KSpell</literal> so that <literal>KSpell</literal> knows the new configuration, and then use a method other than <literal>modalCheck()</literal>. See the <literal>KSpell</literal> reference documentation for details.</para>
<para>You can use the <literal>main()</literal> function given in <link linkend="ch10list09">Listing 10.9</link> to try KSpellDemo. Be sure to link to the library libkspell by passing the option <literal>-lkspell</literal> to <literal>g++</literal>.</para>
<example role="codelisting" label="10.9" id="ch10list09">
<title>main.cpp: A <literal>main()</literal> Function Suitable for Testing KSpellDemo<indexterm><primary>listings</primary><secondary>KSpellDemo (spell-checking application)</secondary><tertiary>main() method</tertiary></indexterm><indexterm><primary>KSpellDemo (spell-checking application)</primary><secondary>main() method</secondary></indexterm><indexterm><primary>main() method</primary><secondary>KSpellDemo</secondary></indexterm><indexterm><primary>methods</primary><secondary>main()</secondary><tertiary>KSpellDemo</tertiary></indexterm></title>
<programlisting linenumbering="numbered">
 1: #include &lt;kapp.h>
 2:
 3: #include "kspelldemo.h"
 4:
 5: int
 6: main (int argc, char *argv[])
 7: {
 8:   KApplication kapplication (argc, argv, "kspelldemo");
 9:
10:   KSpellDemo *kspelldemo = new KSpellDemo;
11:
12:   kspelldemo->show();
13:
14:   return kapplication.exec();
15: }<indexterm><primary>spell-checking (KSpell)</primary><secondary>configuring</secondary></indexterm><indexterm><primary>editing</primary><secondary>spell-checking (KSpell)</secondary><tertiary>configuring</tertiary></indexterm><indexterm><primary>KSpell (spell-checking)</primary><secondary>configuring</secondary></indexterm><indexterm><primary>widgets</primary><secondary>KSpell (spell-checking)</secondary><tertiary>configuring</tertiary></indexterm><indexterm><primary>configuring</primary><secondary>spell-checking</secondary></indexterm>
</programlisting>
</example>
</section>
</section>
<section id="ch10lev1sec4">
<title>Accessing the Address Book</title>
<para>The<indexterm><primary>address book</primary></indexterm><indexterm><primary>GUIs</primary><secondary>address book</secondary></indexterm> KDE user is provided with an address book that may be accessed by all KDE applications. This means that, ideally, the user will need to type in (or otherwise collect) contact information only once for someone they know, and then use it to send an email, dial the telephone, send a fax, and so on, depending on what applications become available.  You can access the addressbook with the program ABBrowser, part of KDE, or KMail, the KDE mail client.</para>
<para>The address book provides several pieces of information about each entry&mdash;with each entry corresponding to one contact&mdash;in a class of type <literal>AddressBook::Entry</literal> defined in addressbook.h Most members of <literal>Entry</literal> are public variables. For example, the contact's email addresses are stored in a <literal>QStringList</literal> called <literal>Entry::emails</literal>. See addressbook.h for a full list of fields.</para>
<para>In the next section, you learn how to select a contact and read its <literal>AddressBook::Entry</literal> fields.<indexterm><primary>address book</primary></indexterm><indexterm><primary>GUIs</primary><secondary>address book</secondary></indexterm></para>
<section id="ch10lev2sec7">
<title>Selecting a Contact</title>
<para>In <indexterm><primary>address book</primary><secondary>contacts, selecting</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>address book</secondary><tertiary>contacts, selecting</tertiary></indexterm><indexterm><primary>contacts (address book)</primary><secondary>selecting</secondary></indexterm>the most likely scenario, you will want to access information on a contact that has been chosen by the user of your application. The KDE address book library, libkab, provides a dialog box for this purpose called <literal>KabAPI</literal>. The following code Listings 10.10&ndash;10.12 constructs a class called <literal>KabDemo</literal>, executes the dialog and displays the name and first email address of the contact chosen.<indexterm><primary>KabDemo application (address book dialog)</primary></indexterm></para>
<example role="codelisting" label="10.10" id="ch10list10">
<title>kabdemo.h: Class Declaration for KabDemo, a Demonstration of the KDE Address Book<indexterm><primary>KabDemo application (address book dialog)</primary><secondary>kabdemo.h class declaration</secondary></indexterm><indexterm><primary>listings</primary><secondary>KabDemo application (address book dialog)</secondary><tertiary>kabdemo.h class declaration</tertiary></indexterm><indexterm><primary>kabdemo.h class declaration (KabDemo)</primary></indexterm><indexterm><primary>declaring</primary><secondary>widget classes</secondary><tertiary>kabdemo.h class declaration</tertiary></indexterm></title>
<programlisting linenumbering="numbered">
 1: #ifndef __KABDEMO_H__
 2: #define __KABDEMO_H__
 3:
 4: #include &lt;qlabel.h>
 5:
 6: class KabDemo : public QLabel
 7: {
 8:  public:
 9:   KabDemo (QWidget *parent, const char *name=0);
10: };
11:
12: #endif<indexterm><primary>address book</primary><secondary>contacts, selecting</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>address book</secondary><tertiary>contacts, selecting</tertiary></indexterm><indexterm><primary>contacts (address book)</primary><secondary>selecting</secondary></indexterm><indexterm><primary>KabDemo application (address book dialog)</primary><secondary>kabdemo.h class declaration</secondary></indexterm><indexterm><primary>listings</primary><secondary>KabDemo application (address book dialog)</secondary><tertiary>kabdemo.h class declaration</tertiary></indexterm><indexterm><primary>kabdemo.h class declaration (KabDemo)</primary></indexterm><indexterm><primary>declaring</primary><secondary>widget classes</secondary><tertiary>kabdemo.h class declaration</tertiary></indexterm></programlisting>
</example>
<example role="codelisting" label="10.11" id="ch10list11">
<title>kabdemo.cpp: Class Definition for KabDemo<indexterm><primary>KabDemo application (address book dialog)</primary><secondary>kabdemo.cpp class definition</secondary></indexterm><indexterm><primary>listings</primary><secondary>KabDemo application (address book dialog)</secondary><tertiary>kabdemo.cpp class definition</tertiary></indexterm><indexterm><primary>kabdemo.cpp class definiiton (KabDemo)</primary></indexterm><indexterm><primary>defining</primary><secondary>widget classes</secondary><tertiary>KabDemo</tertiary></indexterm></title>
<programlisting linenumbering="numbered">
 1: #include &lt;stdio.h>
 2:
 3: #include &lt;qlabel.h>
 4:
 5: #include &lt;kabapi.h>
 6:
 7: #include "kabdemo.h"
 8:
 9:
10: KabDemo::KabDemo (QWidget *parent, const char *name=0) :
11:   QLabel ("Text", parent, name)
12: {
13:
14:   KabAPI kabapi (this);
15:   if (kabapi.init()!=AddressBook::NoError)
16:     {
17:       printf ("Error\n");
18:       exit (0);
19:     }
20:
21:   AddressBook::Entry entry;
22:   KabKey key;
23:   if (kabapi.exec())
24:     {
25:       switch (kabapi.getEntry(entry, key))
26:     {
27:     case AddressBook::NoEntry:
28:       printf ("Nothing selected.\n");
29:       break;
30:     case AddressBook::NoError:
31:       {
32:         QString name;
33:         kabapi.addressbook()->literalName(entry, name);
34:         setText ("Name: "+name +"\nEmail: "+entry.emails[0]);
35:       }
36:       break;
37:     default:
38:       printf ("Internal error.\n");
39:     }
40:     }
41: }<indexterm><primary>KabDemo application (address book dialog)</primary><secondary>kabdemo.cpp class definition</secondary></indexterm><indexterm><primary>listings</primary><secondary>KabDemo application (address book dialog)</secondary><tertiary>kabdemo.cpp class definition</tertiary></indexterm><indexterm><primary>kabdemo.cpp class definiiton (KabDemo)</primary></indexterm><indexterm><primary>defining</primary><secondary>widget classes</secondary><tertiary>KabDemo</tertiary></indexterm>
</programlisting>
</example>
<para>The two most important lines in <link linkend="ch10list11">Listing 10.11</link> are 15 and 23. Line 15 calls <literal>kabapi.init()</literal>, which opens and loads the address book, and thus needs to be called before <literal>kabapi</literal> can be used. Next is line 23, which calls (<literal>kabapi.exec())</literal>. This executes the KabAPI dialog. When it completes, <literal>kabapi</literal> will hold the user's selection.<indexterm><primary>address book</primary><secondary>contacts, selecting</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>address book</secondary><tertiary>contacts, selecting</tertiary></indexterm><indexterm><primary>contacts (address book)</primary><secondary>selecting</secondary></indexterm></para>
<para>Lines 25&ndash;39 show how to process the user's selection (of course, you'd want to process the various <literal>cases</literal> more elegantly in your application). The method <literal>kabapi.getEnty(entry, key)</literal> fills in <literal>entry</literal> and <literal>key</literal> with the instance <literal>AddressBook::Entry</literal> describing the user's selection and an associated <literal>KabKey</literal> (see addressbook.h for the declaration of <literal>KabKey</literal>). <link linkend="ch10fig06">Figure 10.6</link> shows the KabAPI dialog and <link linkend="ch10fig07">Figure 10.7</link> shows KabDemo displaying the results of the user's selection.</para>
<figure label="10.6" id="ch10fig06">
<title>The KabAPI dialog box lets the user choose an entry from the address book.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/10fig06.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<figure label="10.7" id="ch10fig07">
<title><literal>KabDemo</literal> displays the results of the user's selection.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/10fig07.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>You can use the <literal>main()</literal> function provided in <link linkend="ch10list12">Listing 10.12</link> to complete KabDemo. You will need to link to libkab by passing the option <literal>-lkab</literal> to <literal>g++</literal>.<indexterm><primary>address book</primary><secondary>contacts, selecting</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>address book</secondary><tertiary>contacts, selecting</tertiary></indexterm><indexterm><primary>contacts (address book)</primary><secondary>selecting</secondary></indexterm></para>
<example role="codelisting" label="10.12" id="ch10list12">
<title>main.cpp: A <literal>main()</literal> Function Suitable for Testing KabDemo<indexterm><primary>KabDemo application (address book dialog)</primary><secondary>main() method</secondary></indexterm><indexterm><primary>listings</primary><secondary>KabDemo application (address book dialog)</secondary><tertiary>main() method</tertiary></indexterm><indexterm><primary>main() method</primary><secondary>KabDemo</secondary></indexterm><indexterm><primary>methods</primary><secondary>main()</secondary><tertiary>KabDemo application</tertiary></indexterm></title>
<programlisting linenumbering="numbered">
 1: #include &lt;kapp.h>
 2:
 3: #include "kabdemo.h"
 4:
 5: int
 6: main (int argc, char *argv[])
 7: {
 8:   KApplication kapplication (argc, argv, "kabdemo");
 9:
10:   KabDemo *kabdemo  = new KabDemo (0);
11:
12:   kabdemo->show();
13:
14:   return kapplication.exec();
15: }<indexterm><primary>address book</primary><secondary>contacts, selecting</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>address book</secondary><tertiary>contacts, selecting</tertiary></indexterm><indexterm><primary>contacts (address book)</primary><secondary>selecting</secondary></indexterm><indexterm><primary>KabDemo application (address book dialog)</primary><secondary>main() method</secondary></indexterm><indexterm><primary>listings</primary><secondary>KabDemo application (address book dialog)</secondary><tertiary>main() method</tertiary></indexterm><indexterm><primary>main() method</primary><secondary>KabDemo</secondary></indexterm><indexterm><primary>methods</primary><secondary>main()</secondary><tertiary>KabDemo application</tertiary></indexterm>
</programlisting>
</example>
</section>
</section>
<section id="ch10lev1sec5">
<title>Summary</title>
<para>The KDE libraries offer useful services that go beyond simple widgets. Some of these services were discussed here: HTML page rendering; image loading, manipulation, and saving; spell checking; and access to a systemwide address book.</para>
<para>Taking advantage of these services can dramatically reduce the time required to develop your application. These classes represent many programmer-hours of work that need not be duplicated to add these features to your application.</para>
<para>When compiling applications for these libraries, you will need to link to the appropriate libraries; these classes are not included in libkdecode or libkdeui. The required libraries are summarized in <link linkend="ch10table02">Table 10.2</link>.</para>
<table id="ch10table02" frame="topbot" label="10.2">
<title>Libraries Required for Complex-Function Classes</title>
<tgroup cols="2" colsep="0" rowsep="0" align="left">
<colspec colname="c1"/>
<colspec colname="c2"/>
<thead valign="top">
<row rowsep="1">
<entry><emphasis>Function</emphasis></entry>
<entry><emphasis>Library</emphasis></entry></row>
</thead>
<tbody valign="top">
<row>
<entry>HTML rendering/browsing</entry>
<entry>libkhtml</entry></row>
<row>
<entry>Image loading/saving</entry>
<entry>libksycoca</entry></row>
<row>
<entry>Spell checking</entry>
<entry>libkspell</entry></row>
<row>
<entry>KDE address book</entry>
<entry>libkab</entry></row>
</tbody>
</tgroup>
</table>
</section>
<section id="ch10lev1sec6">
<title>Exercises</title>
<para>See <link linkend="ap-c">Appendix C, <quote>Answers,</quote></link> for the exercise answers.</para>
<qandaset defaultlabel="number">
<qandaentry>
<question id="ch10que01"><para><link linkend="ch10ans01">Examine the <literal>KHTMLWidget</literal> reference documentation. Modify KSimpleBrowser to turn on Java applet and JavaScript support. Try it out.</link></para></question></qandaentry>
<qandaentry>
<question id="ch10que02"><para><link linkend="ch10ans02">Load an image file into a <literal>QImage</literal> instance and perform the following image transformation on an 8-bit color image (try one of the images in $KDEDIR/share/wallpapers): Replace each color in the color table (accessed via <literal>QImage::color()</literal>), with</link></para>
<informalexample>
<programlisting linenumbering="unnumbered">
   qRgb (qGray (color), qGray (color), qGray (color));
Display the image.
</programlisting>
</informalexample>
</question></qandaentry>
</qandaset>
</section>
</chapter>
