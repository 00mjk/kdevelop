<appendix label="C" id="ap-c">
<title>Answers</title>
<section id="appC0">
<title><link linkend="ch01">Chapter 1</link></title>
<para>There are no exercises in this chapter.</para>
</section>
<section id="appC1">
<title><link linkend="ch02">Chapter 2</link></title>
<para/>
<section id="appC2">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question>
<para>Referring to the KDE class documentation for <literal>KToolBar</literal>, modify <literal>KSimpleApp</literal> to include a line editor on the toolbar.</para>
</question>
<answer id="ch02ans01">
<para><link linkend="ch02que01">ksimpleapp.h and ksimpleapp.cpp were modified. You may use main.cpp, given in <link linkend="ch02list04">Listing 2.4</link>, to create a complete application. <link linkend="ap-clist01">Listings C.1</link> and <link linkend="ap-clist02">C.2</link> display these modifications</link>.</para>
<example role="codelisting" label="C.1" id="ap-clist01">
<title>Modified ksimpleapp.h</title>
<programlisting linenumbering="numbered">
 1: #include &lt;ktmainwindow.h>
 2:
 3: /**
 4:  * This is a simple KDE application.
 5:  * @author David Sweet &lt;dsweet@kde.org>
 6:  **/
 7:
 8: class QLabel;
 9:
10: class KSimpleApp : public KTMainWindow
11: {
12:  Q_OBJECT
13:
14:  public:
15:   /**
16:    * Create the widget.
17:    **/
18:   KSimpleApp (const char *name=0);
19:
20:   public slots:
21:     /**
22:      * Reposition the text in the context area. The user will
23:      *  cycle through: left, center, and right.
24:      **/
25:     void slotRepositionText();
26:
27:   /**
28:    * Close the window (thus quitting the application).
29:    **/
30:   void slotClose();
31:
32:   /**
33:    * Chapter 2, Exercise 1
34:    * Respond to an Enter keypress.
35:    **/
36:   void slotEnterPressed();
37:
38:  private:
39:   QLabel *text;
40:   int alignment [3], indexalignment;
41: };
</programlisting>
</example>
<example role="codelisting" label="C.2" id="ap-clist02">
<title>Modified ksimpleapp.cpp</title>
<programlisting linenumbering="numbered">
 1: #include &lt;qlabel.h>
 2:
 3: #include &lt;kstdaccel.h>
 4: #include &lt;kiconloader.h>
 5: #include &lt;kmenubar.h>
 6: #include &lt;kapp.h>
 7:
 8: #include "ksimpleapp.moc"
 9:
10: KSimpleApp::KSimpleApp (const char *name) :
11:   KTMainWindow (name)
12: {
13:   KStdAccel keys;
14:
15:   QPopupMenu *filemenu = new QPopupMenu;
16:   filemenu->insertItem (BarIcon ("idea"), "&amp;Reposition Text",
17:                    this, SLOT (slotRepositionText()),
18:                    CTRL+Key_R);
19:   filemenu->insertSeparator();
20:   filemenu->insertItem ("&amp;Quit", this, SLOT (slotClose()), keys.quit());
21:
22:   menuBar()->insertItem ("&amp;File", filemenu);
23:
24:   const int buttonid = 1;
25:   toolBar()->insertButton ( BarIcon("idea"), buttonid,
26:                        SIGNAL(clicked()), this,
27:                        SLOT (slotRepositionText()), true,
28:                        "Reposition text" );
29:
30:   //Chapter 2, Exercise 1
31:   const int linedid = 2;
32:   toolBar()->insertLined ("Initial text", linedid,
33:                      SIGNAL(returnPressed()), this,
34:                      SLOT (slotEnterPressed()), true);
35:
36:   statusBar()->message ("Ready!");
37:
38:   text = new QLabel ("Hello!", this);
39:   text->setBackgroundColor (Qt::white);
40:   alignment [0] = QLabel::AlignLeft | QLabel::AlignVCenter;
41:   alignment [1] = QLabel::AlignHCenter | QLabel::AlignVCenter;
42:   alignment [2] = QLabel::AlignRight | QLabel::AlignVCenter;
43:   indexalignment = 0;
44:
45:   text->setAlignment (alignment [indexalignment]);
46:   setView (text);
47:
48: }
49:
50: //Chapter 2, Exercise 1
51: void
52: KSimpleApp::slotEnterPressed()
53: {
54:   //You would process the Enter keypress here.
55: }
56:
57: void
58: KSimpleApp::slotRepositionText ()
59: {
60:   indexalignment = (indexalignment+1)%3;
61:   text->setAlignment (alignment[indexalignment]);
62:
63:   statusBar()->message ("Repositioned text in content area", 1000);
64: }
65:
66: void
67: KSimpleApp::slotClose()
68: {
69:   close();
70: }
</programlisting>
</example>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Modify <literal>KSimpleApp</literal> to put a <literal>QMultiLineEdit</literal> widget in the content area instead of a <literal>QLabel</literal>. Replace all the references to the Reposition Text function with a function that clears the widget. You will need to refer to the Qt class documentation for <literal>QMultiLineEdit</literal>.</para>
</question>
<answer id="ch02ans02">
<para><link linkend="ch02que02">ksimpleapp.h and ksimpleapp.cpp were modified. You may use main.cpp, given in <link linkend="ch02list04">Listing 2.4</link>, to create a complete application.</link></para>
<para>Modifications to <link linkend="ap-clist03">Listings C.3</link> and <link linkend="ap-clist04">C.4</link> are marked in comments.</para>
<example role="codelisting" label="C.3" id="ap-clist03">
<title>Modified ksimpleapp.h</title>
<programlisting linenumbering="numbered">
 1: #include &lt;ktmainwindow.h>
 2:
 3: /**
 4:  * This is a simple KDE application.
 5:  * @author David Sweet &lt;dsweet@kde.org>
 6:  **/
 7:
 8: class QLabel;
 9: class QMultiLineEdit;
10:
11: class KSimpleApp : public KTMainWindow
12: {
13:  Q_OBJECT
14:
15:  public:
16:   /**
17:    * Create the widget.
18:    **/
19:   KSimpleApp (const char *name=0);
20:
21:   public slots:
22:     /**
23:      * Chapter 2, Exercise 2
24:      * Clear the text in the content area.
25:      **/
26:     void slotClearText();
27:
28:   /**
29:    * Close the window (thus quitting the application).
30:    **/
31:   void slotClose();
32:
33:  private:
34:   QLabel *text;
35:   int alignment [3], indexalignment;
36:   //Chapter 2, Exercise 2
37:   QMultiLineEdit *editor;
38: };
</programlisting>
</example>
<example role="codelisting" label="C.4" id="ap-clist04">
<title>Modified ksimpleapp.cpp</title>
<programlisting linenumbering="numbered">
 1: #include &lt;qlabel.h>
 2: #include &lt;qmultilineedit.h>
 3:
 4: #include &lt;kstdaccel.h>
 5: #include &lt;kiconloader.h>
 6: #include &lt;kmenubar.h>
 7: #include &lt;kapp.h>
 8:
 9: #include "ksimpleapp.moc"
10:
11: KSimpleApp::KSimpleApp (const char *name) :
12:   KTMainWindow (name)
13: {
14:   KStdAccel keys;
15:
16:   QPopupMenu *filemenu = new QPopupMenu;
17:   //Chapter 2, Exercise 2
18:   filemenu->insertItem (BarIcon ("idea"), "&amp;Clear text",
19:                    this, SLOT (slotClearText()),
20:                    CTRL+Key_C);
21:   filemenu->insertSeparator();
22:   filemenu->insertItem ("&amp;Quit", this, SLOT (slotClose()), keys.quit());
23:
24:   menuBar()->insertItem ("&amp;File", filemenu);
25:
26:   const int buttonid = 1;
27:   //Chapter 2, Exercise 2
28:   toolBar()->insertButton ( BarIcon("idea"), buttonid,
29:                        SIGNAL(clicked()), this,
30:                        SLOT (slotClearText()), true,
31:                        "Clear text" );
32:
33:
34:   statusBar()->message ("Ready!");
35:
36:
37:   //Chapter 2, Exercise 2
38:   editor = new QMultiLineEdit (this);
39:   editor->setText ("Initial text.");
40:
41:   setView (editor);
42:
43: }
44:
45: void
46: KSimpleApp::slotClearText ()
47: {
48:   //Chapter 2, Exercise 2
49:   editor->setText ("");
50:   statusBar()->message ("Cleared text in content area", 1000);
51: }
52:
53: void
54: KSimpleApp::slotClose()
55: {
56:   close();
57: }
</programlisting>
</example>
</answer>
</qandaentry>
</qandaset>
</section>
</section>
<section id="appC3">
<title><link linkend="ch03">Chapter 3</link></title>
<para/>
<section id="appC4">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question>
<para>Write a program that shows an empty window. <link linkend="ap-clist05">Listing C.5</link> shows the program.</para>
</question>
<answer id="ch03ans01">
<example role="codelisting" label="C.5" id="ap-clist05">
<title><link linkend="ch03que01">Program Displaying an Empty Window</link></title>
<programlisting linenumbering="unnumbered">
#include &lt;qwidget.h>
#include &lt;kapp.h>


int main(int argc, char **argv)
{
  KApplication app(argc, argv);
  QWidget window;

  app.setMainWidget(&amp;window);

  window.setGeometry(100,100,200,100);
  window.setCaption("Qwidget");
  window.show();

  return app.exec();
}
</programlisting>
</example>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Create a program that shows a window with a button in it. <link linkend="ap-clist06">Listing C.6</link> provides you with this program.</para>
</question>
<answer id="ch03ans02">
<example role="codelisting" label="C.6" id="ap-clist06">
<title><link linkend="ch03que02">Program Displaying a Window with a Button</link></title>
<programlisting linenumbering="unnumbered">
#include &lt;qwidget.h>
#include &lt;qpushbutton.h>
#include &lt;kapp.h>


class MyWindow : public QWidget
{
public:
  MyWindow();
};

MyWindow() : QWidget()
{
  QPushButton *button = new QPushButton("Button", this);
  button->setGeometry(10,20,100,30);
  button->show();
}


int main(int argc, char **argv)
{
  KApplication app(argc, argv);
  MyWindow window;

  app.setMainWidget(&amp;window);

  window.setGeometry(100,100,200,100);
  window.setCaption("MyWindow");
  window.show();

  return app.exec();
}
</programlisting>
</example>
</answer>
</qandaentry>
</qandaset>
</section>
</section>
<section id="appC5">
<title><link linkend="ch04">Chapter 4</link></title>
<para/>
<section id="appC6">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question>
<para>Modify the method <literal>KTicTacToe::processClicks()</literal> so that the user is required to take turns between X and O.</para>
</question>
<answer id="ch04ans01">
<para><link linkend="ch04que01"><link linkend="ap-clist07">Listing C.7</link> highlights the modified ktictactoe.cpp file</link>.</para>
<example role="codelisting" label="C.7" id="ap-clist07">
<title>Modified ktictactoe.cpp File</title>
<programlisting linenumbering="unnumbered">
#include &lt;qlayout.h>
#include &lt;qlabel.h>

#include "ktictactoe.moc"

KTicTacToe::KTicTacToe (QWidget *parent, const char *name) :
  QWidget (parent, name)
{
  int row, col;

  QGridLayout *layout = new QGridLayout (this, 4, 3);

  const int rowlabel0 = 0, rowlabel1 = 0, collabel0 = 0, collabel1 = 2,
    rowsquares0 = 1, rowsquares1 = 4, colsquares0 = 0, colsquares1 = 3;
  for (row=rowsquares0; row&lt;rowsquares1; row++)
    for (col=colsquares0; col&lt;colsquares1; col++)
      {
        KXOSquare *kxosquare = new KXOSquare (this);
        layout->addWidget (kxosquare, row, col);
        connect ( kxosquare,
                 SIGNAL (changeRequest (KXOSquare *, KXOSquare::State)),
                 SLOT (processClicks (KXOSquare *, KXOSquare::State)) );
      }

  QLabel *label = new QLabel ("Tic-Tac-Toe, this);
  label->setAlignment (Qt::AlignCenter);
  layout->addMultiCellWidget (label,
                             rowlabel0, rowlabel1,
                             collabel0, collabel1);
}

void
KTicTacToe::processClicks (KXOSquare *square, KXOSquare::State state)
{
  //Chapter 4, Exercise 1
  if (state!=previousstate)
    {
      square->newState (state);
      previousstate=state;
    }
}
</programlisting>
</example>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Reimplement <literal>KXOSquare::sizeHint()</literal> and use this method appropriately in the constructor of <literal>KTicTacToe</literal>. Compare what happens now when you resize the window to what happened before.</para>
</question>
<answer id="ch04ans02">
<para><link linkend="ch04que02">Listings C.8&ndash;C.10 demonstrate this</link>.</para>
<example role="codelisting" label="C.8" id="ap-clist08">
<title>Modified ktictactoe.h Method</title>
<programlisting linenumbering="unnumbered">
#ifndef __KTICTACTOE_H__
#define __KTICTACTOE_H__

#include &lt;qarray.h>
#include &lt;qwidget.h>

#include "kxosquare.h"

/**
 * KTicTacToe
 * Draw and manage a Tic-Tac-Toe board using KXOSquare.
 **/
class KTicTacToe : public QWidget
{
 Q_OBJECT

 public:
  /**
   * Create an empty game board.
   **/
  KTicTacToe (QWidget *parent, const char *name=0);


 protected slots:
   /**
    * Process user input.
    **/
   void processClicks (KXOSquare *, KXOSquare::State);
};

#endif
                Modified ktictactoe.cpp
#include &lt;qlayout.h>
#include &lt;qlabel.h>
#include "ktictactoe.moc"

KTicTacToe::KTicTacToe (QWidget *parent, const char *name) :
  QWidget (parent, name)
{
  int row, col;

  QGridLayout *layout = new QGridLayout (this, 4, 3);

  const int rowlabel0 = 0, rowlabel1 = 0, collabel0 = 0, collabel1 = 2,
    rowsquares0 = 1, rowsquares1 = 4, colsquares0 = 0, colsquares1 = 3;

  for (row=rowsquares0; row&lt;rowsquares1; row++)
    for (col=colsquares0; col&lt;colsquares1; col++)
      {
        KXOSquare *kxosquare = new KXOSquare (this);
        //Chapter 4, Exercise 2
        kxosquare->setMinimumSize (kxosquare->sizeHint());

        layout->addWidget (kxosquare, row, col);
        connect ( kxosquare,
                 SIGNAL (changeRequest (KXOSquare *, KXOSquare::State)),
                 SLOT (processClicks (KXOSquare *, KXOSquare::State)) );
      }

  QLabel *label = new QLabel ("Tic-Tac-Toe", this);
  label->setAlignment (Qt::AlignCenter);
  layout->addMultiCellWidget (label,
                            rowlabel0, rowlabel1,
                            collabel0, collabel1);
}


void
KTicTacToe::processClicks (KXOSquare *square, KXOSquare::State state)
{
  //In this simple example, just pass along the click to the appropriate
  // square.
  square->newState (state);
}
</programlisting>
</example>
<example role="codelisting" label="C.9" id="ap-clist09">
<title>Modified kxosquare.h Method</title>
<programlisting linenumbering="unnumbered">
#ifndef __KXOSQUARE_H__
#define __KXOSQUARE_H__


#include &lt;qwidget.h>
#include &lt;qsize.h>

/**
 * KXOSquare
 * Draws a square in one of three states: empty, with an X inside,
 *  or with an O inside.
 **/
class KXOSquare : public QWidget
{
 Q_OBJECT

 public:
  enum State {None=0, X=1, O=2};

  /**
   * Create the widget.
   **/
  KXOSquare (QWidget *parent, const char *name=0);

  /**
   * Chapter 4, Exercise 2
   * Return a recommended size for this widget.
   **/
  QSize sizeHint() const;

  public slots:
  /**
   * Change the state of the widget to &lt;i>state&lt;/i>.
   **/
    void newState (State state);

 signals:
  /**
   * The user has requested that the state be changed to &lt;i>state&lt;/i>
   *  by clicking on the square.
   **/
    void changeRequest (KXOSquare *, KXOSquare::State state);

 protected:
    /**
     * Draw the widget.
     **/
    void paintEvent (QPaintEvent *);

    /**
     * Process mouse clicks.
     **/
    void mousePressEvent (QMouseEvent *);

 private:
  State thestate;
};

#endif
</programlisting>
</example>
<example role="codelisting" label="C.10" id="ap-clist10">
<title>Modified kxosquare.cpp Method</title>
<programlisting linenumbering="unnumbered">
#ifndef __KXOSQUARE_H__
#define __KXOSQUARE_H__


#include &lt;qwidget.h>
#include &lt;qsize.h>

/**
 * KXOSquare
 * Draws a square in one of three state: empty, with an X inside,
 *  or with an O inside.
 **/
class KXOSquare : public QWidget
{
 Q_OBJECT

 public:
  enum State {None=0, X=1, O=2};

  /**
   * Create the widget.
   **/
  KXOSquare (QWidget *parent, const char *name=0);

  /**
   * Chapter 4, Exercise 2
   * Return a recommended size for this widget.
   **/
  QSize sizeHint() const;

  public slots:
  /**
   * Change the state of the widget to &lt;i>state&lt;/i>.
   **/
    void newState (State state);

 signals:
  /**
   * The user has requested that the state be changed to &lt;i>state&lt;/i>
   *  by clicking on the square.
   **/
    void changeRequest (KXOSquare *, KXOSquare::State state);

 protected:
    /**
     * Draw the widget.
     **/
    void paintEvent (QPaintEvent *);

    /**
     * Process mouse clicks.
     **/
    void mousePressEvent (QMouseEvent *);

 private:
  State thestate;
};

#endif
</programlisting>
</example>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>What's the difference between <literal>QPen</literal> and <literal>QBrush</literal>? Examine the <literal>KDisc</literal> code and consult the Qt documentation.</para>
</question>
<answer id="ch04ans03">
<para><link linkend="ch04que03"><literal>QPen</literal> is passed to <literal>QPainter::setPen()</literal> to determine the color of points and outlines of geometric figures that are drawn. A <literal>QBrush</literal> is passed to <literal>QPainter::setBrush()</literal> to determine the color of the interiors of geometric figures</link>.</para></answer>
</qandaentry>
<qandaentry>
<question><para>Get to know <literal>QPainter</literal>. Construct different <literal>QPen</literal>s and <literal>QBrush</literal>es in <literal>KDisc</literal>. Draw figures other than a disc.</para>
</question>
<answer id="ch04ans04">
<para><link linkend="ch04que04"><link linkend="ap-clist11">Listing C.11</link> lists the modified methods from kdisc.cpp</link>.</para>
<example role="codelisting" label="C.11" id="ap-clist11">
<title>Modified Methods from kdisc.cpp</title>
<programlisting linenumbering="unnumbered">
void
KDisc::paintEvent (QPaintEvent *)
{
  QPainter painter (this);

  //Chapter 4, Exercise 4

  painter.setPen ( QPen (QColor (200, 100, 0), 1) );
  painter.setBrush ( QBrush (Qt::green, Qt::SolidPattern) );

  painter.drawPie (discposition.x(), discposition.y(),
                      45, 45, 0, 4760);
}
void
KDisc::mouseMoveEvent (QMouseEvent *qmouseevent)
{

  if (qmouseevent->state()==Qt::LeftButton)
    {
      //Chapter 4, Exercise 4
      QPoint qpoint = qmouseevent->pos();
      qpoint.setX(qpoint.x() - 45/2);
      qpoint.setY(qpoint.y() - 45/2);
      discposition = qpoint;
      update();
    }

}
</programlisting>
</example>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Try using <literal>mousePressEvent()</literal> instead of <literal>mouseReleaseEvent()</literal> in <literal>KDisc</literal>. Can you tell the difference? Which feels right?</para>
</question>
<answer id="ch04ans05">
<para><link linkend="ch04que05">Using <literal>mouseReleaseEvent()</literal> feels right, of course. (Would I have asked otherwise? ;) If you use <literal>mousePressEvent()</literal>, the action happens as soon as you press the button</link>.</para></answer>
</qandaentry>
</qandaset>
</section>
</section>
<section id="appC7">
<title><link linkend="ch05">Chapter 5</link></title>
<para/>
<section id="appC8">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question>
<para>Use <literal>KStatusBar::insertWidget()</literal> to insert the KDE widget of your choice into the statusbar. Is the widget appropriate for the statusbar? What information does it convey to the user? (See Listings C.12&ndash;C.14.)</para>
</question>
<answer id="ch05ans01">
<example role="codelisting" label="C.12" id="ap-clist12">
<title><link linkend="ch05que01">kstatwidget.h: Class Definition for <literal>KStatWidget</literal></link></title>
<programlisting linenumbering="unnumbered">
#ifndef __KSTATWIDGET_H__
#define __KSTATWIDGET_H__

class KProgress;
class QTimer;

#include &lt;ktmainwindow.h>

/**
 * KStatWidget
 * Put a progress bar on the statusbar.
 **/
class KStatWidget : public KTMainWindow
{
 Q_OBJECT

 public:
  KStatWidget (const char *name=0);

  public slots:
  /**
   * Advance the progress bar.
   **/
   void slotTimeout ();

 private:
  KProgress *kprogress;
  QTimer *qtimer;
};

#endif
</programlisting>
</example>
<example role="codelisting" label="C.13" id="ap-clist13">
<title>kstatwidget.cpp: Class Definition for <literal>KStatWidget</literal></title>
<programlisting linenumbering="unnumbered">
#include &lt;qlabel.h>
#include &lt;qpainter.h>
#include &lt;qtimer.h>

#include &lt;kprogress.h>

#include "kstatwidget.moc"

KStatWidget::KStatWidget (const char *name=0) :
  KTMainWindow (name)
{
  kprogress = new KProgress (0, 100, 0,
                            KProgress::Horizontal,
                            statusBar());

  statusBar()->insertItem ("Progress: ",1);

  //This widget is stretched to fit the window.
  statusBar()->insertWidget (kprogress, 1, 2);
  QTimer *qtimer = new QTimer;
  connect ( qtimer, SIGNAL (timeout()),
            this, SLOT (slotTimeout()) );
  qtimer->start (500);

  QLabel *qlabel = new QLabel (this);
  setView (qlabel);
}

void
KStatWidget::slotTimeout()
{
  kprogress->advance (10);
}
</programlisting>
</example>
<example role="codelisting" label="C.14" id="ap-clist14">
<title>main.cpp: <literal>main()</literal> Function, Which Can Be Used to Try <literal>KStatWidget</literal></title>
<programlisting linenumbering="unnumbered">
#include &lt;kapp.h>

#include "kstatwidget.h"

int main (int argc, char *argv[])
{
  KApplication *kapplication = new KApplication (argc, argv, "kstatwidgettest");
KStatWidget *kstatwidget = new KStatWidget (0);

  kapplication->setMainWidget (kstatwidget);

  kstatwidget->show();
  kapplication->exec();
}
</programlisting>
</example>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Create a document-centric application that has <literal>QMultiLineEdit</literal> as its client area. Be sure to use <literal>KMenuBar</literal>, <literal>KToolBar</literal>, and <literal>KStatusBar</literal>. Include New and Quit on the File menu and <literal>New</literal> on the toolbar. Put the line number into the statusbar. (You will need to refer to the Qt documentation for <literal>QMultiLineEdit</literal> for this exercise.) See Listings C.15&ndash;C.17.</para>
</question>
<answer id="ch05ans02">
<example role="codelisting" label="C.15" id="ap-clist15">
<title><link linkend="ch05que02">keditor.h: Class Declaration for <literal>KEditor</literal></link></title>
<programlisting linenumbering="unnumbered">
#ifndef __KEDITOR_H__
#define __KEDITOR_H__

#include &lt;ktmainwindow.h>

class QMultiLineEdit;

class KEditor : public KTMainWindow
{
 Q_OBJECT
 public:
  KEditor (const char *name=0);

 protected slots:
   /**
    * Update the line number field in the statusbar.
    **/
   void slotUpdateStatusBar ();

 private:
  QMultiLineEdit *qmle;
};

#endif
</programlisting>
</example>
<example role="codelisting" label="C.16" id="ap-clist16">
<title>keditor.cpp: Class Definition for <literal>KEditor</literal></title>
<programlisting linenumbering="unnumbered">
#include &lt;qmultilineedit.h>

#include &lt;kapp.h>
#include &lt;kiconloader.h>
#include &lt;kmenubar.h>
#include &lt;kstdaction.h>
#include &lt;kaction.h>

#include "keditor.moc"

//Status Bar id
const int SBLineNumber = 2;

KEditor::KEditor (const char *name) : KTMainWindow (name)
{
  qmle = new QMultiLineEdit (this);

  KStdAction::openNew (qmle, SLOT (clear()), actionCollection());
  KStdAction::quit (kapp, SLOT (closeAllWindows()), actionCollection());

  createGUI();

  statusBar()->insertItem ("Line", 1);
  statusBar()->insertItem ("0000", SBLineNumber);
  slotUpdateStatusBar();

  connect ( qmle, SIGNAL (textChanged()),
            this, SLOT (slotUpdateStatusBar()) );


  setView (qmle);
}

void
KEditor::slotUpdateStatusBar ()
{
  QString linenumber;
  int line, col;

  qmle->getCursorPosition (&amp;line, &amp;col);
  linenumber.sprintf ("%4d", line);

  statusBar()->changeItem (linenumber, SBLineNumber);
}
</programlisting>
</example>
<example role="codelisting" label="C.17" id="ap-clist17">
<title>main.cpp: <literal>main()</literal> Function, Which Can Be Used to Test <literal>KEditor</literal></title>
<programlisting linenumbering="unnumbered">
#include &lt;kapp.h>

#include "keditor.h"

int
main (int argc, char *argv[])
{
  KApplication kapplication  (argc, argv, "keditor");
  KEditor *keditor = new KEditor (0);

  kapplication.setMainWidget (keditor);

  keditor->show();
  return kapplication.exec();
}
</programlisting>
</example>
</answer>
</qandaentry>
</qandaset>
</section>
</section>
<section id="appC9">
<title><link linkend="ch06">Chapter 6</link></title>
<para/>
<section id="appC10">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question>
<para>Improve the program you wrote for Exercise 2 from <link linkend="ch05">Chapter 5</link>. Create a full-featured Edit menu (with Copy, Paste, and Cut, Undo, and Redo), and support file saving and opening, with <literal>KIO::NetAccess</literal>. (See <link linkend="ap-clist18">Listing C.18</link>.)</para>
</question>
<answer id="ch06ans01">
<example role="codelisting" label="C.18" id="ap-clist18">
<title><link linkend="ch06que01">Creating a Full-Featured Edit Menu with <literal>KIO::NetAccess</literal></link></title>
<programlisting linenumbering="unnumbered">
keditor.h: Class Declaration for KEditor
#ifndef __KEDITOR_H__
#define __KEDITOR_H__

#include &lt;ktmainwindow.h>
#include &lt;kurl.h>

class QMultiLineEdit;

class KEditor : public KTMainWindow
{
 Q_OBJECT
 public:
  KEditor (const char *name=0);

 protected slots:
  /**
   * Update the line number field in the statusbar.
   **/
  void slotUpdateStatusBar ();
  /**
   * Open the "Save As" dialog.
   **/
  void slotSaveAs();
  /**
   * Save the file.
   **/
  void slotSave();
  /**
   * Open the "Open" dialog.
   **/
  void slotOpen();

 private:
  QMultiLineEdit *qmle;
  KURL url;
  QString file;
};

#endif
keditor.cpp: Class Definition for KEditor,
#include &lt;qmultilineedit.h>

#include &lt;kapp.h>
#include &lt;kiconloader.h>
#include &lt;kmenubar.h>
#include &lt;kstdaction.h>
#include &lt;kaction.h>

#include &lt;netaccess.h>
#include &lt;ktempfile.h>

#include "keditor.moc"

//Status Bar id
const int SBLineNumber = 2;

KEditor::KEditor (const char *name) : KTMainWindow (name)
{
  qmle = new QMultiLineEdit (this);

  KStdAction::openNew (qmle, SLOT (clear()), actionCollection());
  KStdAction::quit (kapp, SLOT (closeAllWindows()), actionCollection());
  KStdAction::copy (qmle, SLOT (copy()), actionCollection());
  KStdAction::cut (qmle, SLOT (cut()), actionCollection());
  KStdAction::paste (qmle, SLOT (paste()), actionCollection());
  KStdAction::undo (qmle, SLOT (undo()), actionCollection());
  KStdAction::redo (qmle, SLOT (redo()), actionCollection());

  KStdAction::open(this, SLOT(slotOpen()), actionCollection());
  KStdAction::save(this, SLOT(slotSave()), actionCollection());
  KStdAction::saveAs(this, SLOT(slotSaveAs()), actionCollection());

  createGUI();

  statusBar()->insertItem ("Line", 1);
  statusBar()->insertItem ("0000", SBLineNumber);
  slotUpdateStatusBar();
  connect ( qmle, SIGNAL (textChanged()),
        this, SLOT (slotUpdateStatusBar()) );


  setView (qmle);
}

void
KEditor::slotUpdateStatusBar ()
{
  QString linenumber;
  int line, col;

  qmle->getCursorPosition (&amp;line, &amp;col);
  linenumber.sprintf ("%4d", line);

  statusBar()->changeItem (linenumber, SBLineNumber);
}

void
KEditor::slotSaveAs()
{
  url=KFileDialog::getSaveUrl(0,
        "*.txt|Text Files (*.txt)",this)
  file=url.path();

  if (!file.isLocalPath())
  {
     KTempFile temp;
     file=temp.name();

     slotSave();
     temp.unlink();
     return;
  }
  slotSave();
}

void
KEditor::slotSave()
{
  if (url.isEmpty() || file.isEmpty())
    slotSaveAs(), return;
  QFile f(file);

  if (!f.open(IO_WriteOnly | IO_Truncate))
    KNotifyClient::event("cannotopenfile"), return;

  QTextStream t( &amp;f );
  t &lt;&lt; qmle->text();

  f.close();
  qmle->setEdited(false);
}

void
KEditor::slotOpen()
{
  if ( qmle->edited() )
  {
    int result=KMessageBox::questionYesNo(this,
      i18n("You already have a file open! Would you like
           "to save the currently "
           "opened file and open another?"),
      i18n("Continue?"));

    if (result==KMessageBox::Yes)
      slotSave();
    else
      return;
  }

  url=KFileDialog::getOpenURL(0,
        "*.txt|Text Files (*.txt)", this);

  if (!KIO::NetAccess::download(url, file))
    KNotifyClient::event("cannotopenfile"), return;

  QFile f(file);
  if (!f.open(IO_ReadOnly))
    KNotifyClient::event("cannotopenfile"), return;

  QTextStream t( &amp;f );
  QString text(t.read());
  qmle->clear();
  qmle->setText(text);
  f.close();
}

// main.cpp: main() which can be used to test KEditor
#include &lt;kapp.h>

#include "keditor.h"

int
main (int argc, char *argv[])
{
  KApplication kapplication  (argc, argv, "keditor");
  KEditor *keditor = new KEditor (0);

  kapplication.setMainWidget (keditor);

  keditor->show();
  return kapplication.exec();
}
</programlisting>
</example>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Use KRun to execute a program (and tell the user of its completion). Store the text of the KLineEdit for the sake of session management. (See <link linkend="ap-clist19">Listing C.19</link>.)</para>
</question>
<answer id="ch06ans02">
<example role="codelisting" label="C.19" id="ap-clist19">
<title><link linkend="ch06que02">Using <literal>KRun</literal> to Execute a Program</link></title>
<programlisting linenumbering="unnumbered">
kjogger.h: Class Declaration for KJogger
#ifndef __KJOGGER_H__
#define __KJOGGER_H__

#include &lt;ktmainwindow.h>
#include &lt;klineedit.h>
#include &lt;kprocess.h>
#include &lt;kconfig.h>

class JogView;

class KJogger : public KTMainWindow
{
 Q_OBJECT
 public:
  KJogger (const char *name=0);

 protected:
  void saveProperties(KConfig* config);
  void readProperties(KConfig* config);

 private:
  JogView *view;

};

class JogView : public KLineEdit
{
 Q_OBJECT
 public:
  JogView(QWidget *parent);

 protected slots:
  /**
   * Run the program.
   **/
  void slotRun();
  /**
   * Enable the KLineEdit that we are.
   **/
  void slotEnable(KProcess*);
 private:
  KProcess proc;
};

#endif

kjogger.cpp: Class Definition for KJogger,

#include &lt;kapp.h>
#include &lt;kmenubar.h>
#include &lt;kstdaction.h>
#include &lt;kaction.h>

#include "kjogger.moc"


KJogger::KJogger (const char *name) : KTMainWindow (name)
{
  KStdAction::quit (kapp, SLOT (closeAllWindows()),
    actionCollection());
  createGUI();
  view=new JogView(this);

  setView (view);

}

void
KJogger::saveProperties(KConfig* config)
{
  config->writeEntry("program",view->text());
}

void
KJogger::readProperties(KConfig* config)
{
  view->setText(config->readEntry("program",""));
}

JogView::JogView (QWidget *parent) : KLineEdit(parent)
{
  connect(this, SIGNAL(returnPressed()), SLOT (slotRun()) );
  connect(&amp;proc, SIGNAL (processExited(KProcess*)), SLOT (slotEnable(KProcess*)) );
}

void
JogView::slotRun()
{
  setEnabled(false);
  proc.clearArguments();
  proc &lt;&lt; text();

  proc.start();
}

void
JogView::slotEnable(KProcess*)
{
  setEnabled(true);
}


// A main() function required to test this program.
#include "kjogger.h"
#include &lt;kapp.h>
#include &lt;dcopclient.h>

int main(int argc, char **argv)
{
  KApplication app(argc, argv, "kjogger");
  app.dcopClient()->registerAs(app.name());

  if (app.isRestored())
     RESTORE(KJogger)
  else
  {
     KJogger *widget = new KJogger;
     widget->show();
  }

  return app.exec();
}
</programlisting>
</example>
</answer>
</qandaentry>
</qandaset>
</section>
</section>
<section id="appC11">
<title><link linkend="ch07">Chapter 7</link></title>
<para/>
<section id="appC12">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question>
<para>Starting with <literal>KDropDemo</literal> as a base, write a program that accepts drops of images. Use <literal>QImageObject</literal> instead of <literal>QTextObject</literal>.</para>
</question>
<answer id="ch07ans01">
<para><link linkend="ch07que01">Only kdropdemo.cpp was modified. See <link linkend="ap-clist20">Listing C.20</link></link>.</para>
<example role="codelisting" label="C.20" id="ap-clist20">
<title>Modified kdropdemo.cpp</title>
<programlisting linenumbering="unnumbered">
#include &lt;qdragobject.h>

#include "kdropdemo.h"

KDropDemo::KDropDemo (QWidget *parent, const char *name) :
  QLabel (parent, name)
{
  setAcceptDrops(true);

  //Chapter 7, Exercise 1
  setAlignment (AlignCenter);
  setText ("Drop\nan\n     image     \non\n me!");
}

void
KDropDemo::dragEnterEvent (QDragEnterEvent *qdragenterevent)
{
  //Chapter 7, Exercise 1
  qdragenterevent->accept (QImageDrag::canDecode (qdragenterevent));
}

void
KDropDemo::dropEvent (QDropEvent *qdropevent)
{
  //Chapter 7, Exercise 1
  QPixmap qpixmap;

  if (QImageDrag::decode (qdropevent, qpixmap))
    {
      setPixmap (qpixmap);
    }
}
</programlisting>
</example>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Now, using <literal>KDragDemo</literal> as a base, write a program that lets the user drag a pixmap to another application. You can use a <literal>QPixmap</literal> returned by <literal>BarIcon()</literal> as the data for the drag.</para>
</question>
<answer id="ch07ans02">
<para><link linkend="ch07que02">kdragdemo.h and kdragdemo.cpp were modified (see <link linkend="ap-clist21">Listings C.21</link> and <link linkend="ap-clist22">C.22</link>). You can use main.cpp, given in <link linkend="ch07list03">Listing 7.3</link></link>.</para>
<example role="codelisting" label="C.21" id="ap-clist21">
<title>Modified kdragdemo.h</title>
<programlisting linenumbering="unnumbered">
#ifndef __KDRAGDEMO_H__
#define __KDRAGDEMO_H__


#include &lt;qlabel.h>

//Chapter 7, Exercise 2
class QImage;

/**
 * KDragDemo
 *
 **/
class KDragDemo : public QLabel
{
 public:
  KDragDemo (QWidget *parent, const char *name=0);

 protected:
  bool dragging;
  //Chapter 7, Exercise 2
  QImage *qimage;

  void mouseMoveEvent (QMouseEvent *qmouseevent);
  void mouseReleaseEvent (QMouseEvent *qmouseevent);
};

#endif
</programlisting>
</example>
<example role="codelisting" label="C.22" id="ap-clist22">
<title>Modified kdragdemo.cpp</title>
<programlisting linenumbering="unnumbered">
#include &lt;qdragobject.h>
#include &lt;qimage.h>

#include &lt;kiconloader.h>
#include "kdragdemo.h"

KDragDemo::KDragDemo (QWidget *parent, const char *name) :
  QLabel (parent, name)
{
  dragging = false;

//Chapter 7, Exercise 2
  QPixmap qpixmap;
  qpixmap = BarIcon ("exit");
  setPixmap (qpixmap);

  qimage = new QImage;
  *qimage = qpixmap;

}


void
KDragDemo::mouseMoveEvent (QMouseEvent *qmouseevent)
{
  if (!dragging &amp;&amp;qmouseevent->state() == Qt::LeftButton)
    {
      dragging = true;
//Chapter 7, Exercise 2
      QImageDrag *qimagedrag = new QImageDrag (*qimage, this);
      qimagedrag->dragCopy();
    }
}

void
KDragDemo::mouseReleaseEvent (QMouseEvent *)
{
  dragging = false;
}
</programlisting>
</example>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Look up <literal>KAudio</literal> in the KDE class documentation. Using <literal>KStandardDirs</literal> and <literal>KAudio</literal>, locate and play one of the sounds distributed with KDE. (The sounds are in $KDEDIR/share/sounds.) See Listings C.23&ndash;C.25.</para>
</question>
<answer id="ch07ans03">
<example role="codelisting" label="C.23" id="ap-clist23">
<title><link linkend="ch07que03">kplaysound.h</link></title>
<programlisting linenumbering="unnumbered">
#ifndef __KPLAYSOUND_H__
#define __KPLAYSOUND_H__


#include &lt;qlabel.h>

class KAudio;

/**
 * KPlaySound
 *
 **/
class KPlaySound : public QLabel
{
 Q_OBJECT

 public:
  KPlaySound (QWidget *parent, const char *name=0);

 protected slots:
   /**
    * The sound is done playing.
    **/
   void slotPlayFinished();
 protected:
   KAudio *kaudio;
};

#endif
</programlisting>
</example>
<example role="codelisting" label="C.24" id="ap-clist24">
<title>kplaysound.cpp</title>
<programlisting linenumbering="unnumbered">
#include &lt;kaudio.h>
#include &lt;kstddirs.h>

#include "kplaysound.moc"


KPlaySound::KPlaySound (QWidget *parent, const char *name) :
  QLabel (parent, name)
{

  kaudio = new KAudio;
  connect ( kaudio, SIGNAL (playFinished()),
            this, SLOT (slotPlayFinished()) );

  KStandardDirs *dirs = KGlobal::dirs();

  QString soundpath;
  soundpath = dirs->findResource ("sound", "KDE_Startup.wav");

  kaudio->play (soundpath);
}

void
KPlaySound::slotPlayFinished()
{
  //playing has finished
}
</programlisting>
</example>
<example role="codelisting" label="C.25" id="ap-clist25">
<title>main.cpp</title>
<programlisting linenumbering="unnumbered">
#include &lt;kapp.h>

#include "kplaysound.h"
int main (int argc, char *argv[])
{
  KApplication kapplication (argc, argv, "kplaysoundtest");
  KPlaySound kplaysound (0);

  kplaysound.show();
  kapplication.setMainWidget (&amp;kplaysound);
  kapplication.exec();
}
</programlisting>
</example>
</answer>
</qandaentry>
</qandaset>
</section>
</section>
<section id="appC13">
<title><link linkend="ch08">Chapter 8</link></title>
<para/>
<section id="appC14">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question>
<para>Make a dialog box that can be used to compose and send an email message. The dialog box must contain vertically aligned <quote>From:</quote>, <quote>To:</quote>, <quote>Cc:</quote>, and <quote>Subject:</quote> labels each with a line edit widget to the right. The line edit widgets shall be able to display at least 20 characters regardless of the font size. Beneath the labels, add a multiline edit widget that uses the rest of the available space in the dialog box. The dialog box should have the following action buttons at the bottom: <quote>Address</quote>, <quote>Send</quote>, and <quote>Cancel</quote>. <link linkend="ap-clist26">Listing C.26</link> demonstrates how to create the dialog box and <link linkend="ap-cfig01">Figure C.1</link> shows this dialog box.</para>
</question>
<answer id="ch08ans01">
<example role="codelisting" label="C.26" id="ap-clist26">
<title><link linkend="ch08que01">Creating a Dialog Box to Compose and Send Email Messages</link></title>
<programlisting linenumbering="numbered">
  1: //
  2: // maildialog.h
  3: //
  4:
  5: #ifndef _MAIL_DIALOG_H_
  6: #define _MAIL_DIALOG_H_
  7:
  8: class QLineEdit;
  9: class QMultiLineEdit;
 10: #include &lt;kdialogbase.h>
 11:
 12: class MailDialog : public KDialogBase
 13: {
 14:   Q_OBJECT
 15:
 16:   public:
 17:     MailDialog(QWidget *parent=0,const char *name=0,bool modal=true);
 18:
 19:   protected slots:
 20:     virtual void slotUser2();
 21:     virtual void slotUser1();
 22:
 23:   private:
 24:     QLineEdit *mFromLineEdit;
 25:     QLineEdit *mToLineEdit;
 26:     QLineEdit *mCcLineEdit;
 27:     QLineEdit *mSubjectLineEdit;
 28:     QMultiLineEdit *mBodyTextEdit;
 29: };
 30: #endif
 31:
 32: //
 33: // maildialog.cpp
 34: //
 35:
 36: #include &lt;qlabel.h>
 37: #include &lt;qlayout.h>
 38: #include &lt;qlineedit.h>
 39: #include &lt;qmultilineedit.h>
 40: #include &lt;klocale.h>
 41:
 42: #include "maildialog.h"
 43:
 44: MailDialog::MailDialog( QWidget *parent, const char *name, bool modal )
 45:   : KDialogBase( parent, name, modal, i18n("Compose Mail"),
 46:                  User2|User1|Cancel, Ok, false, i18n("&amp;Send"),
 47:  i18n("&amp;Address") )
 48: {
 49:   setPlainCaption("Compose Mail");
 50:
 51:   QWidget *page = new QWidget( this );
 52:   setMainWidget(page);
 53:   QVBoxLayout *topLayout = new QVBoxLayout( page, 0, spacingHint() );
 54:
 55:   QGridLayout *glay = new QGridLayout(topLayout,4,2);
 56:   QLabel *fromLabel = new QLabel( i18n("From:"), page );
 57:   QLabel *toLabel = new QLabel( i18n("To:"), page );
 58:   QLabel *ccLabel = new QLabel( i18n("Cc:"), page );
 59:   QLabel *subjectLabel = new QLabel( i18n("Subject:"), page );
 60:
 61:   mFromLineEdit = new QLineEdit( page );
 62:   mToLineEdit = new QLineEdit( page );
 63:   mCcLineEdit = new QLineEdit( page );
 64:   mSubjectLineEdit = new QLineEdit( page );
 65:
 66:   glay->addWidget( fromLabel, 0, 0, AlignRight );
 67:   glay->addWidget( toLabel, 1, 0, AlignRight  );
 68:   glay->addWidget( ccLabel, 2, 0, AlignRight  );
 69:   glay->addWidget( subjectLabel, 3, 0, AlignRight  );
 70:   glay->addWidget( mFromLineEdit, 0, 1 );
 71:   glay->addWidget( mToLineEdit, 1, 1 );
 72:   glay->addWidget( mCcLineEdit, 2, 1 );
 73:   glay->addWidget( mSubjectLineEdit, 3, 1 );
 74:   mFromLineEdit->setMinimumWidth(fontMetrics().maxWidth()*20);
 75:
 76:   mBodyTextEdit = new QMultiLineEdit( page );
 77:   topLayout->addWidget( mBodyTextEdit, 10 );
 78:   mBodyTextEdit->setMinimumHeight(fontMetrics().lineSpacing()*10);
 79: }
 80:
 81: void
 82: MailDialog::slotUser1() // Send
 83: {
 84:   // Send your mail here
 85: }
 86:
 87: void
 88: MailDialog::slotUser2() // Addresses
 89: {
 90:   // Open your address book here
 91: }
 92:
 93:
 94: //
 95: // A main.cpp file used to test the dialog
 96: //
 97:
 98: #include &lt;kcmdlineargs.h>
 99: #include "maildialog.h"
100: int main( int argc, char **argv )
101: {
102:   KCmdLineArgs::init(argc, argv, "appname", 0, 0);
103:   KApplication app;
104:   MailDialog *dialog = new MailDialog;
105:   dialog->show();
106:   int result = app.exec();
107:   return result;
108: }
</programlisting>
</example>
<figure label="C.1" id="ap-cfig01">
<title>The mail dialog.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/cfig01.gif" format="GIF"/>
</imageobject>
</mediaobject>
</figure>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Change the dialog box so that it no longer contains the <quote>Address</quote> action button. Add a <quote>Help</quote> button instead. Add pushbuttons labeled <quote>Choose&hellip;</quote> to the right of the line edit widgets belonging to the <quote>To:</quote> and <quote>Cc:</quote> fields. <link linkend="ap-clist27">Listing C.27</link> shows how to create this dialog (only the constructor has changed from <link linkend="ap-clist26">Listing C.26</link>), and <link linkend="ap-cfig02">Figure C.2</link> depicts the outcome.</para>
</question>
<answer id="ch08ans02">
<example role="codelisting" label="C.27" id="ap-clist27">
<title><link linkend="ch08que02">Modifying the Dialog Box</link></title>
<programlisting linenumbering="numbered">
 1: MailDialog::MailDialog( QWidget *parent, const char *name, bool modal )
 2:   : KDialogBase( parent, name, modal, i18n("Compose Mail"),
 3:                  Help|User1|Cancel, Ok, false, i18n("&amp;Send") )
 4: {
 5:   setPlainCaption("Compose Mail");
 6:
 7:   QWidget *page = new QWidget( this );
 8:   setMainWidget(page);
 9:   QVBoxLayout *topLayout = new QVBoxLayout( page, 0, spacingHint() );
10:
11:   QGridLayout *glay = new QGridLayout(topLayout,4,2);
12:   QLabel *fromLabel = new QLabel( i18n("From:"), page );
13:   QLabel *toLabel = new QLabel( i18n("To:"), page );
14:   QLabel *ccLabel = new QLabel( i18n("Cc:"), page );
15:   QLabel *subjectLabel = new QLabel( i18n("Subject:"), page );
16:
17:   mFromLineEdit = new QLineEdit( page );
18:   mToLineEdit = new QLineEdit( page );
19:   mCcLineEdit = new QLineEdit( page );
20:   mSubjectLineEdit = new QLineEdit( page );
21:
22:   QPushButton *toPushButton = new QPushButton( i18n("Choose&hellip;"), page );
23:   toPushButton->setAutoDefault( false );
24:   QPushButton *ccPushButton = new QPushButton( i18n("Choose&hellip;"), page );
25:   ccPushButton->setAutoDefault( false );
26:
27:   glay->addWidget( fromLabel, 0, 0, AlignRight );
28:   glay->addWidget( toLabel, 1, 0, AlignRight  );
29:   glay->addWidget( ccLabel, 2, 0, AlignRight  );
30:   glay->addWidget( subjectLabel, 3, 0, AlignRight  );
31:   glay->addMultiCellWidget( mFromLineEdit, 0, 0, 1, 2 );
32:   glay->addWidget( mToLineEdit, 1, 1 );
33:   glay->addWidget( mCcLineEdit, 2, 1 );
34:   glay->addMultiCellWidget( mSubjectLineEdit, 3, 3, 1, 2 );
35:   mFromLineEdit->setMinimumWidth(fontMetrics().maxWidth()*20);
36:   glay->addWidget( toPushButton, 1, 2 );
37:   glay->addWidget( ccPushButton, 2, 2 );
38:
39:   mBodyTextEdit = new QMultiLineEdit( page );
40:   topLayout->addWidget( mBodyTextEdit, 10 );
41:   mBodyTextEdit->setMinimumHeight(fontMetrics().lineSpacing()*10);
42: }
</programlisting>
</example>
<figure label="C.2" id="ap-cfig02">
<title>The mail dialog with the modified layout.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/cfig02.gif" format="GIF"/>
</imageobject>
</mediaobject>
</figure>
</answer>
</qandaentry>
</qandaset>
</section>
</section>
<section id="appC15">
<title><link linkend="ch09">Chapter 9</link></title>
<para/>
<section id="appC16">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question>
<para>What if the process of creating your window contents is a long job? Combine the <literal>QTimer</literal> method for long jobs with double-buffering to efficiently paint a complex scene without hanging the GUI. Your program's GUI should still respond to input while the application is painting the window. (You can easily check this by attempting to close the window while the program is painting.)</para>
</question>
<answer id="ch09ans01">
<para><link linkend="ch09que01">Listings C.28&ndash;C.30 give possible answers to Exercise 1</link>.</para>
<example role="codelisting" label="C.28" id="ap-clist28">
<title>klongdraw.h: Class Declaration for <literal>KLongDraw</literal>, a Widget That Draws a Complex Scene</title>
<programlisting linenumbering="unnumbered">
#ifndef __KQUICKDRAW_H__
#define __KQUICKDRAW_H__


#include &lt;qwidget.h>

class QPixmap;
class QTimer;

const int NEllipses=50000;

/**
 * KLongDraw
 * Handle long drawing job while keeping UI alive.
 **/
class KLongDraw : public QWidget
{
 Q_OBJECT

 public:
  KLongDraw (QWidget *parent, const char *name=0);

  protected slots:
    /**
     * Redraw some of the scene then exit and check the UI.
     **/
    void slotDrawSome();

 protected:
  /**
   * Repaint the window using a bit-block transfer from the
   *  off-screen buffer (a QPixmap).  Recreate the pixmap first,
   *  if necessary.
   **/
  void paintEvent (QPaintEvent *);

  void resizeEvent (QResizeEvent *);
 private:
  QTimer *qtimer;
  QPixmap *qpixmap;
  bool bneedrecreate;
  double x[NEllipses], y[NEllipses];
  int w, h;
  int total;
};

#endif
</programlisting>
</example>
<example role="codelisting" label="C.29" id="ap-clist29">
<title>klongdraw.cpp: Class Definition for <literal>KLongDraw</literal>, a Widget That Draws a Complex Scene</title>
<programlisting linenumbering="unnumbered">
#include &lt;qpainter.h>
#include &lt;qtimer.h>
#include &lt;qpixmap.h>

#include &lt;kmenubar.h>
#include &lt;kapp.h>
#include &lt;kstdaccel.h>

#include "klongdraw.moc"


KLongDraw::KLongDraw (QWidget *parent, const char *name=0) :
  QWidget (parent, name)
{
  bneedrecreate=true;
  qpixmap=0;

  for (int i=0; i&lt;NEllipses; i++)
    {
      x[i]=(kapp->random()%1000)/1000.;
      y[i]=(kapp->random()%1000)/1000.;
    }

  setBackgroundMode (NoBackground);

  qtimer = new QTimer (this);
  connect ( qtimer, SIGNAL (timeout()),
            this, SLOT (slotDrawSome()) );
}
void
KLongDraw::paintEvent (QPaintEvent *)
{

  if (bneedrecreate)
    {
      if (qpixmap!=0)
        delete qpixmap;
      qpixmap = new QPixmap (width(), height());

      QPainter qpainter;
      qpainter.begin (qpixmap, this);
      qpainter.fillRect (qpixmap->rect(), white);

      bitBlt (this, 0, 0, qpixmap);

      w = width()/100;
      h = height()/100;

      bneedrecreate=false;
      total=0;

      qtimer->start(0);
    }

  bitBlt (this, 0, 0, qpixmap);

}

void
KLongDraw::slotDrawSome()
{

  QPainter qpainter;
  qpainter.begin (qpixmap, this);

  qpainter.setBrush (blue);

  int imax = total+100;
  for (int i=total; i&lt;imax; i++)
    qpainter.drawEllipse (x[i]*width(), y[i]*height(), w, h);
  total = imax;
  //This updates the window periodically with the partially-drawn scene.
  // While this _does_ indicate progress on the update, you might,
  // instead, update a progress bar here and only call update()
  // after the entire scene has been drawn.
  if (!(total%1000))
    update();

  if (total>=NEllipses)
    {
      qtimer->stop();
      update();
    }


}
void
KLongDraw::resizeEvent (QResizeEvent *)
{
  bneedrecreate = true;
}
</programlisting>
</example>
<example role="codelisting" label="C.30" id="ap-clist30">
<title>main.cpp: A <literal>main()</literal> Function Suitable for Testing <literal>KLongDraw</literal></title>
<programlisting linenumbering="unnumbered">
#include &lt;kapp.h>

#include "klongdraw.h"

int
main (int argc, char *argv[])
{
  KApplication kapplication  (argc, argv, "klongdrawtest");
  KLongDraw *klongdraw = new KLongDraw (0);

  kapplication.setMainWidget (klongdraw);

  klongdraw->show();
  return kapplication.exec();
}
</programlisting>
</example>
</answer>
</qandaentry>
</qandaset>
</section>
</section>
<section id="appC17">
<title><link linkend="ch10">Chapter 10</link></title>
<para/>
<section id="appC18">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question>
<para>Examine the <literal>KHTMLWidget</literal> reference documentation. Modify <literal>KSimpleBrowser</literal> to turn on Java applet and JavaScript support. Try it out. See <link linkend="ap-clist31">Listings C.31</link> and <link linkend="ap-clist32">C.32</link> for the answers.</para>
</question>
<answer id="ch10ans01">
<example role="codelisting" label="C.31" id="ap-clist31">
<title><link linkend="ch10que01">ksimplebrowser.h&mdash;Class Declaration for <literal>KSimpleBrowser</literal></link></title>
<programlisting linenumbering="unnumbered">
#ifndef __KSIMPLEBROWSER_H__
#define __KSIMPLEBROWSER_H__

#include &lt;ktmainwindow.h>

class KHTMLPart;

/**
 * KSimpleBrowser
 * A feature-limited Web browser.
 **/
class KSimpleBrowser : public KTMainWindow
{
 Q_OBJECT
 public:
  KSimpleBrowser (const char *name=0);

 public slots:
  void slotNewURL ();

 protected:
  KHTMLPart *khtmlpart;
};

#endif
</programlisting>
</example>
<example role="codelisting" label="C.32" id="ap-clist32">
<title>ksimplebrowser.cpp&mdash;Class Definition for <literal>KSimpleBrowser</literal></title>
<programlisting linenumbering="unnumbered">
#include &lt;khtmlview.h>
#include &lt;khtml_part.h>

#include "ksimplebrowser.moc"

const int URLLined = 1;
KSimpleBrowser::KSimpleBrowser (const char *name=0) :
  KTMainWindow (name)
{

  toolBar()->insertLined ( "", URLLined,
               SIGNAL (returnPressed ()),
               this, SLOT (slotNewURL ()) );
  toolBar()->setItemAutoSized (URLLined);

  //Chapter 10, Exercise 1
  khtmlpart->enableJava(true);
  khtmlpart->enableJScript(true);

  khtmlpart = new KHTMLPart (this);
  khtmlpart->begin();
  khtmlpart->write("&lt;HTML>&lt;BODY>&lt;H1>KSimpleBrowser&lt;/H1>"
             "&lt;P>To load a web page, type its URL in the line "
             "edit box and press enter.&lt;/P>"
             "&lt;/BODY>&lt;/HTML>");
  khtmlpart->end();

  setView (khtmlpart->view());
}

void
KSimpleBrowser::slotNewURL  ()
{
  khtmlpart->openURL (toolBar()->getLinedText (URLLined));
}
</programlisting>
</example>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Load an image file into a <literal>QImage</literal> instance and perform the following image transformation on an 8-bit color image (try one of the images in $KDEDIR/share/wallpapers): Replace each color in the color table (accessed via <literal>QImage::color()</literal>), with</para>
<informalexample>
<programlisting linenumbering="unnumbered">
   qRgb (qGray (color), qGray (color), qGray (color));
Display the image.
</programlisting>
</informalexample></question>
<answer id="ch10ans02">
<para><link linkend="ch10que02">See <link linkend="ap-clist33">Listings C.33</link> and <link linkend="ap-clist34">C.34</link> for possible answers</link>.</para>
<example role="codelisting" label="C.33" id="ap-clist33">
<title>ktransform.h&mdash;Class Declaration for <literal>KTransform</literal></title>
<programlisting linenumbering="unnumbered">
#ifndef __KTRANSFORM_H__
#define __KTRANSFORM_H__

#include &lt;qwidget.h>
class QImage;

/**
* KTransform
 * Transform a color image to grayscale.
 **/
class KTransform : public QWidget
{
 public:
  KTransform  (const QString &amp;filename,
           QWidget *parent, const char *name=0);

 protected:
    void paintEvent (QPaintEvent *);

 private:
  QImage *qimage;
};

#endif
</programlisting>
</example>
<example role="codelisting" label="C.34" id="ap-clist34">
<title>ktransform.cpp&mdash;Class Declaration for <literal>KTransform</literal></title>
<programlisting linenumbering="unnumbered">
#include &lt;qimage.h>
#include &lt;qpainter.h>

#include "ktransform.h"

KTransform::KTransform (const QString &amp;filename,
            QWidget *parent, const char *name=0) :
  QWidget (parent, name)
{
  qimage = new QImage;
  qimage->load (filename);

  int i;
  for (i=0; i&lt;qimage->numColors(); i++)
    {
      QRgb color = qimage->color (i);
      QRgb gray = qRgb (qGray (color), qGray (color), qGray (color));
      qimage->setColor (i, gray);
    }

}
void
KTransform::paintEvent (QPaintEvent *)
{
  QPainter qpainter (this);

  qpainter.drawImage (0, 0, *qimage);
}
</programlisting>
</example>
</answer>
</qandaentry>
</qandaset>
</section>
</section>
<section id="appC19">
<title><link linkend="ch11">Chapter 11</link></title>
<para/>
<section id="appC20">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question>
<para>Suppose you would like to have only one instance of your panel applet running at a time. (Who would want, for example, two pagers in their panel?) Combine <literal>KWeather</literal> and <literal>KUnique</literal> into one application that runs only once and displays a <quote>sorry</quote> message if the user tries to start it a second time. See Listings C.35&ndash;C.37 for the answers.</para>
</question>
<answer id="ch11ans01">
<example role="codelisting" label="C.35" id="ap-clist35">
<title><link linkend="ch11que01">kuniqueweather.h: Class Declaration for <literal>KUniqueWeather</literal>, a Single-Instance Panel Applet</link></title>
<programlisting linenumbering="numbered">
 1: #ifndef __KUNIQUEWEATHER_H__
 2: #define __KUNIQUEWEATHER_H__
 3:
 4: #include &lt;kuniqueapp.h>
 5: #include &lt;kpanelapplet.h>
 6:
 7: class KUniqueWeather : public KUniqueApplication, KPanelApplet
 8: {
 9:  public:
10:   KUniqueWeather (int&amp; argc, char** argv,
11:              const QCString&amp; rAppName = 0, QWidget *parent=0);
12:
13: protected:
14:   void preferences();
15:
16: };
17:
18: #endif
</programlisting>
</example>
<example label="C.36" id="ap-clist36" role="codelisting">
<title>kuniqueweather.cpp: Class Definition for <literal>KUniqueWeather</literal>, a Single-Instance Panel Applet</title>
<programlisting linenumbering="numbered">
 1: #include &lt;stdio.h>
 2:
 3: #include &lt;qlabel.h>
 4:
 5: #include "kuniqueweather.h"
 6:
 7: KUniqueWeather::KUniqueWeather (int&amp; argc, char** argv,
 8:              const QCString&amp; rAppName, QWidget *parent) :
 9:   KUniqueApplication (argc, argv, rAppName),
10:   KPanelApplet (parent)
11: {
12:   QLabel *qlabel = new QLabel ("Rainy\n  48F", this);
13:   qlabel->setAlignment (Qt::AlignVCenter);
14:   setMinimumSize (qlabel->sizeHint());
15:
16:   setActions (Preferences);
17:
18:   dock("kweather");
19: }
20:
21: void
22: KUniqueWeather::preferences()
23: {
24:   printf ("Here we let the user configure the panel applet.\n");
25: }
</programlisting>
</example>
<example role="codelisting" label="C.37" id="ap-clist37">
<title>main.cpp: The <literal>main()</literal> Function Used to Start <literal>KUniqueWeather</literal></title>
<programlisting linenumbering="numbered">
 1: #include &lt;kapp.h>
 2: #include &lt;kmessagebox.h>
 3:
 4: #include "kuniqueweather.h"
 5:
 6: int
 7: main (int argc, char *argv[])
 8: {
 9:   if (!KUniqueWeather::start(argc, argv, "kuniqueweather"))
10:     {
11:       KApplication a (argc, argv, "kuniqueweather");
12:       KMessageBox::sorry (0, "Cannot start more that one instance of "
13:                      "KUniqueWeather.");
14:       exit (0);
15:     }
16:
17:
18:   KUniqueWeather kuniqueweather (argc, argv, "kuniqueweather");
19:
20:   return  kuniqueweather.exec();
21: }
</programlisting>
</example>
</answer>
</qandaentry>
</qandaset>
</section>
</section>
<section id="appC21">
<title><link linkend="ch12">Chapter 12</link></title>
<para>There are no exercises in this chapter.</para>
</section>
<section id="appC22">
<title><link linkend="ch13">Chapter 13</link></title>
<para>There are no exercises in this chapter.</para>
</section>
<section id="appC23">
<title><link linkend="ch14">Chapter 14</link></title>
<para/>
<section id="appC24">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question>
<para>Implement a beep sound similar to the stereo beep at the beginning, but with a variable frequency (see <link linkend="ap-clist38">Listing C.38</link>). Make the frequency change very slowly between 220.0 and 660.0 to achieve a siren effect. If you want to keep the source simple, don't do different things for the left and right channels.</para>
</question>
<answer id="ch14ans01">
<para><link linkend="ch14que01">The trick is to use <literal>Synth_MUL</literal> and <literal>Synth_ADD</literal> to get the range right:</link></para>
<example role="codelisting" label="C.38" id="ap-clist38">
<title>Implementing a Beep Sound with Variable Frequency</title>
<programlisting linenumbering="unnumbered">
// exercise1.cc

#include "artsflow.h"
#include "connect.h"

using namespace Arts;


int main()
{
    Dispatcher dispatcher;

    Synth_FREQUENCY freq1,freqmod;   // object creation
    Synth_WAVE_SIN  sin1,sinmod;
    Synth_MUL       mulmod;
    Synth_ADD       addmod;
    Synth_PLAY      play;

    // the modulation frequency
    setValue(freqmod, 0.3);
    connect(freqmod, sinmod);

    // bring it from the range [-1..1] to [-220..220]
    setValue(mulmod,"invalue1",220.0);
    connect(sinmod,mulmod,"invalue2");

    // add 440, to achieve the desired range: [220..660]
    setValue(addmod,"invalue1",440.0);
    connect(mulmod,addmod,"invalue2");

    // and use it as input for the beep generation
    connect(addmod,freq1);
    connect(freq1, sin1);         // object connection

    connect(sin1, play, "invalue_left");
    connect(sin1, play, "invalue_right");

    // start and go ;-)
    freq1.start(); freqmod.start();
    sin1.start(); sinmod.start();
    addmod.start(); mulmod.start();
    play.start();
    dispatcher.run();
}
</programlisting>
</example>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Complete the missing cases in the <literal>StereoBalanceControl</literal> module above. See <link linkend="ap-clist39">Listings C.39</link> and <link linkend="ap-clist40">C.40</link> for the answers.</para>
</question>
<answer id="ch14ans02">
<example role="codelisting" label="C.39" id="ap-clist39">
<title><link linkend="ch14que02">The Missing Cases in balance_impl.cc</link></title>
<programlisting linenumbering="unnumbered">
 case sbLeftOnly:
    for(i=0;i&lt;samples;i++)
    {
        outleft[i] = inleft[i];
        outright[i] = inleft[i];
    }
    break;
case sbRightOnly:
    for(i=0;i&lt;samples;i++)
    {
        outleft[i] = inright[i];
        outright[i] = inright[i];
    }
    break;
case sbReverse:
    for(i=0;i&lt;samples;i++)
    {
        outleft[i] = inright[i];
        outright[i] = inleft[i];
    }
    break;
</programlisting>
</example>
<example role="codelisting" label="C.40" id="ap-clist40">
<title>The Missing Cases in balance.cc</title>
<programlisting linenumbering="unnumbered">
if(strcmp(argv[1],leftonly) == 0)
    bcontrol.balance(sbLeftOnly);
if(strcmp(argv[1],rightonly) == 0)
    bcontrol.balance(sbRightOnly);
if(strcmp(argv[1],reverse) == 0)
    bcontrol.balance(sbReverse);
</programlisting>
</example>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Rewrite the stereo beep example in a way that the beeps are spinning in circles from the left channel to the right channel and back to the left channel. <link linkend="ap-clist41">Listing C.41</link> highlights the code to do this.</para>
</question>
<answer id="ch14ans03">
<example role="codelisting" label="C.41" id="ap-clist41">
<title><link linkend="ch14que03">Stereo Beep Example</link></title>
<programlisting linenumbering="unnumbered">
// exercise3.cc

#include "artsflow.h"
#include "connect.h"

using namespace Arts;


int main()
{
    Dispatcher dispatcher;

    Synth_FREQUENCY freq1,freq2,freqspin;   // object creation
    Synth_WAVE_SIN  sin1,sin2,sinspin;
    Synth_MUL       mulspin1,mulspin2;
    Synth_ADD       addspin1,addspin2;
    Synth_MUL       mul1spin1,mul1spin2,mul2spin1,mul2spin2;
    Synth_ADD       addleft,addright;
    Synth_PLAY      play;

    setValue(freq1, 440.0);       // set frequencies
    setValue(freq2, 880.0);
    setValue(freqspin, 0.4);

    connect(freq1, sin1);         // object connection
    connect(freq2, sin2);
    connect(freqspin, sinspin);

    // first side: (freqspin * 0.5) + 0.5  (is between 0..1)
    connect(sinspin, mulspin1, "invalue1");
    setValue(mulspin1, "invalue2", 0.5);
    connect(mulspin1, addspin1, "invalue1");
    setValue(addspin1, "invalue2",0.5);

    // first side: (freqspin * (-0.5)) + 0.5  (is between 1..0)
    connect(sinspin, mulspin2, "invalue1");
    setValue(mulspin2, "invalue2", -0.5);
    connect(mulspin2, addspin2, "invalue1");
    setValue(addspin2, "invalue2",0.5);

    // multiply sin1 with the (0..1) and (1..0) ranges
    connect(sin1,mul1spin1,invalue1");
    connect(addspin1,mul1spin1,"invalue2");
    connect(sin1,mul1spin2,"invalue1");
    connect(addspin2,mul1spin2,"invalue2");

    // multiply sin2 with the (0..1) and (1..0) ranges
    connect(sin2,mul2spin1,"invalue1");
    connect(addspin1,mul2spin1,"invalue2");
    connect(sin2,mul2spin2,"invalue1");
    connect(addspin2,mul2spin2,"invalue2");

    // left channel output
    connect(mul1spin1,addleft,"invalue1");
    connect(mul2spin2,addleft,"invalue2");
    connect(addleft, play, "invalue_left");

    // right channel output
    connect(mul2spin1,addright,"invalue1");
    connect(mul1spin2,addright,"invalue2");
    connect(addright, play, "invalue_right");

    // start and go ;-)
    freq1.start(); freq2.start(); freqspin.start();
    sin1.start(); sin2.start(); sinspin.start();
    mulspin1.start(); mulspin2.start();
    addspin1.start(); addspin2.start();
    mul1spin1.start(); mul1spin2.start();
    mul2spin1.start(); mul2spin2.start();
    addleft.start(); addright.start();
    play.start();
    dispatcher.run();
}
</programlisting>
</example>
</answer>
</qandaentry>
</qandaset>
</section>
<section id="appC25">
<title><link linkend="p04">Part IV</link></title>
<para>There are no exercises for the chapters in this part.</para>
</section>
</section>
</appendix>
