<chapter label="6" role="chapter" id="ch06">
<title>KDE Style Reference</title>
<para><emphasis>by Charles Samuels</emphasis></para>
<highlights>
<itemizedlist mark="bullet" spacing="compact">
<title>In this chapter</title>
<listitem><para><emphasis role="strong"><link linkend="ch06lev1sec1">Accessing the Standard Actions</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch06lev1sec2">Session Management</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch06lev1sec3">The Standard KDE Icons</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch06lev1sec4">Internationalization</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch06lev1sec5">Playing Sounds</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch06lev1sec6">User Notifications</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch06lev1sec7">Executing Other Programs</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch06lev1sec8">Network Transparency</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch06lev1sec9">User Friendliness</link></emphasis></para></listitem>
</itemizedlist>
</highlights>
<para>The KDE libraries and services are able to provide icons, translations, sounds, data, and network files. It's important to use these resources, rather than your own implementations, because even internal happenings, such as receiving a file from the Internet, may have a system-provided progress bar.</para>
<para>KDE is not just a few applications; it is more a set of libraries that allow users to feel that they are in an environment, not just using the same widget toolkit.</para>
<section id="ch06lev1sec1">
<title>Accessing the Standard Actions</title>
<para>A <indexterm><primary>classes</primary><secondary>KAction</secondary></indexterm><indexterm><primary>KAction class</primary></indexterm>new feature of KDE 2.0 is the <literal>Kaction</literal> class. In a standard toolbar you have standard events. Most applications share toolbars and menu items; rather than sharing those items, they are in fact sharing the <literal>KActions</literal>. For these events, there is the <literal>KStdAction</literal> class.</para>
<para>Each <literal>KStdAction</literal> is created in the following form:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
KStdAction::stdActionName(this, SLOT(receiver()), actionCollection());
</programlisting>
</informalexample>
<para>At the time this chapter was written, KDE provided the following actions that applications may share:</para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para><literal>aboutApp</literal>&mdash;Show the About dialog for your application. Required.<indexterm><primary>actions</primary><secondary>aboutApp</secondary></indexterm><indexterm><primary>aboutApp action</primary></indexterm></para></listitem>
<listitem><para><literal>aboutKDE</literal>&mdash;Show the About KDE dialog for your application. Also required.<indexterm><primary>actions</primary><secondary>aboutKDE</secondary></indexterm><indexterm><primary>aboutKDE action</primary></indexterm></para></listitem>
<listitem><para><literal>actualSize</literal>&mdash;View the document with no zoom.<indexterm><primary>actions</primary><secondary>actualSize</secondary></indexterm><indexterm><primary>actualSize action</primary></indexterm></para></listitem>
<listitem><para><literal>addBookmark</literal>&mdash;Add a bookmark for the current position.<indexterm><primary>actions</primary><secondary>addBookmark</secondary></indexterm><indexterm><primary>addBookmark action</primary></indexterm></para></listitem>
<listitem><para><literal>back</literal>&mdash;Move back in a list.<indexterm><primary>actions</primary><secondary>back</secondary></indexterm><indexterm><primary>back action</primary></indexterm></para></listitem>
<listitem><para><literal>close</literal>&mdash;Close the current window. Be aware that you're not terminating the entire application unless this is the only window open. This does not cause the document to close, unless this is the only view for it.</para></listitem>
<listitem><para><literal>configureToolbars</literal>&mdash;Show the Customize Toolbars dialog box.<indexterm><primary>actions</primary><secondary>configureToolbars</secondary></indexterm><indexterm><primary>configureToolbars action</primary></indexterm></para></listitem>
<listitem><para><literal>copy</literal>&mdash;Copy the data to the clipboard.<indexterm><primary>actions</primary><secondary>copy</secondary></indexterm><indexterm><primary>copy action</primary></indexterm></para></listitem>
<listitem><para><literal>cut</literal>&mdash;Cut the currently selected text to the clipboard.<indexterm><primary>actions</primary><secondary>Cut</secondary></indexterm><indexterm><primary>Cut action</primary></indexterm></para></listitem>
<listitem><para><literal>editBookmarks</literal>&mdash;Manage the list of bookmarks for the document.<indexterm><primary>actions</primary><secondary>editBookmarks</secondary></indexterm><indexterm><primary>editBookmarks action</primary></indexterm></para></listitem>
<listitem><para><literal>find</literal>&mdash;Open the Find dialog box.<indexterm><primary>actions</primary><secondary>find</secondary></indexterm><indexterm><primary>find action</primary></indexterm></para></listitem>
<listitem><para><literal>findNext</literal>&mdash;Try to search for another instance of the text selected in the Find dialog box.<indexterm><primary>actions</primary><secondary>findNext</secondary></indexterm><indexterm><primary>findNext action</primary></indexterm></para></listitem>
<listitem><para><literal>findPrev</literal>&mdash;Search again, but backward.<indexterm><primary>actions</primary><secondary>findPrev</secondary></indexterm><indexterm><primary>findPrev action</primary></indexterm></para></listitem>
<listitem><para><literal>firstPage</literal>&mdash;Go to the beginning of the document.<indexterm><primary>actions</primary><secondary>firstPage</secondary></indexterm><indexterm><primary>firstPage action</primary></indexterm></para></listitem>
<listitem><para><literal>fitToHeight</literal>&mdash;Zoom so that the full height of the document is visible.<indexterm><primary>actions</primary><secondary>fitToHeight</secondary></indexterm><indexterm><primary>fitToHeight action</primary></indexterm></para></listitem>
<listitem><para><literal>fitToPage</literal>&mdash;Zoom so that the entire document is visible.<indexterm><primary>actions</primary><secondary>fitToPage</secondary></indexterm><indexterm><primary>fitToPage action</primary></indexterm></para></listitem>
<listitem><para><literal>fitToWidth</literal>&mdash;Zoom so that the entire width of the document is visible.<indexterm><primary>actions</primary><secondary>fitToWidth</secondary></indexterm><indexterm><primary>fitToWidth action</primary></indexterm></para></listitem>
<listitem><para><literal>forward</literal>&mdash;Move forward in the list.<indexterm><primary>actions</primary><secondary>forward</secondary></indexterm><indexterm><primary>forward action</primary></indexterm></para></listitem>
<listitem><para><literal>goTo</literal>&mdash;Show a dialog, allowing the user to select a general position to go to.<indexterm><primary>actions</primary><secondary>goTo</secondary></indexterm><indexterm><primary>goTo action</primary></indexterm></para></listitem>
<listitem><para><literal>gotoLine</literal>&mdash;Allow the user to select a page from a dialog box.<indexterm><primary>actions</primary><secondary>gotoLine</secondary></indexterm><indexterm><primary>gotoLine action</primary></indexterm></para></listitem>
<listitem><para><literal>gotoPage</literal>&mdash;Show a dialog enabling the user to select a page to go to.<indexterm><primary>actions</primary><secondary>gotoPage</secondary></indexterm><indexterm><primary>gotoPage action</primary></indexterm></para></listitem>
<listitem><para><literal>help</literal>&mdash;Go to the main Help page.<indexterm><primary>actions</primary><secondary>help</secondary></indexterm><indexterm><primary>help action</primary></indexterm></para></listitem>
<listitem><para><literal>helpContents</literal>&mdash;Show the table of contents of Help.<indexterm><primary>actions</primary><secondary>helpContents</secondary></indexterm><indexterm><primary>helpContents action</primary></indexterm></para></listitem>
<listitem><para><literal>home</literal>&mdash;Go to the original position.<indexterm><primary>actions</primary><secondary>home</secondary></indexterm><indexterm><primary>home action</primary></indexterm></para></listitem>
<listitem><para><literal>keyBindings</literal>&mdash;Configure Key bindings.<indexterm><primary>actions</primary><secondary>keyBindings</secondary></indexterm><indexterm><primary>keyBindings action</primary></indexterm></para></listitem>
<listitem><para><literal>lastPage</literal>&mdash;Move to the end of the document.<indexterm><primary>actions</primary><secondary>lastPage</secondary></indexterm><indexterm><primary>lastPage action</primary></indexterm></para></listitem>
<listitem><para><literal>mail</literal>&mdash;Send this file via email.<indexterm><primary>actions</primary><secondary>mail</secondary></indexterm><indexterm><primary>mail action</primary></indexterm></para></listitem>
<listitem><para><literal>next</literal>&mdash;Go to the next page.<indexterm><primary>actions</primary><secondary>next</secondary></indexterm><indexterm><primary>next action</primary></indexterm></para></listitem>
<listitem><para><literal>openNew</literal>&mdash;Open a new window with an empty document.<indexterm><primary>actions</primary><secondary>openNew</secondary></indexterm><indexterm><primary>openNew action</primary></indexterm></para></listitem>
<listitem><para><literal>open</literal>&mdash;Open a file.<indexterm><primary>actions</primary><secondary>open</secondary></indexterm><indexterm><primary>open action</primary></indexterm></para></listitem>
<listitem><para><literal>openRecent</literal>&mdash;Return a <literal>KRecentFilesAction</literal> (a <quote>recently opened files</quote> list in the File menu).<indexterm><primary>actions</primary><secondary>openRecent</secondary></indexterm><indexterm><primary>openRecent action</primary></indexterm></para></listitem>
<listitem><para><literal>paste</literal>&mdash;Paste data into the document from the clipboard.<indexterm><primary>actions</primary><secondary>paste</secondary></indexterm><indexterm><primary>paste action</primary></indexterm></para></listitem>
<listitem><para><literal>preferences</literal>&mdash;Set preferences.<indexterm><primary>actions</primary><secondary>preferences</secondary></indexterm><indexterm><primary>preferences action</primary></indexterm></para></listitem>
<listitem><para><literal>print</literal>&mdash;Print the currently open file.<indexterm><primary>actions</primary><secondary>print</secondary></indexterm><indexterm><primary>print action</primary></indexterm></para></listitem>
<listitem><para><literal>printPreview</literal>&mdash;Preview how the document will look when printed.<indexterm><primary>actions</primary><secondary>printPreview</secondary></indexterm><indexterm><primary>printPreview action</primary></indexterm></para></listitem>
<listitem><para><literal>prior</literal>&mdash;Move to the previous page.<indexterm><primary>actions</primary><secondary>prior</secondary></indexterm><indexterm><primary>prior action</primary></indexterm></para></listitem>
<listitem><para><literal>quit</literal>&mdash;Closes all views for this document, not for the entire app.<indexterm><primary>actions</primary><secondary>quit</secondary></indexterm><indexterm><primary>quit action</primary></indexterm></para></listitem>
<listitem><para><literal>redisplay</literal>&mdash;Refresh the display.<indexterm><primary>actions</primary><secondary>redisplay</secondary></indexterm><indexterm><primary>redisplay action</primary></indexterm></para></listitem>
<listitem><para><literal>redo</literal>&mdash;Redo a change that was undone.<indexterm><primary>actions</primary><secondary>redo</secondary></indexterm><indexterm><primary>redo action</primary></indexterm></para></listitem>
<listitem><para><literal>replace</literal>&mdash;Run a Find and Replace action.<indexterm><primary>actions</primary><secondary>replace</secondary></indexterm><indexterm><primary>replace action</primary></indexterm></para></listitem>
<listitem><para><literal>reportBug</literal>&mdash;Show the Report a Bug dialog box. All programs should have this.<indexterm><primary>actions</primary><secondary>reportBug</secondary></indexterm><indexterm><primary>reportBug action</primary></indexterm></para></listitem>
<listitem><para><literal>revert</literal>&mdash;Destroy changes since the last save.<indexterm><primary>actions</primary><secondary>revert</secondary></indexterm><indexterm><primary>revert action</primary></indexterm></para></listitem>
<listitem><para><literal>save</literal>&mdash;Save the currently open file.<indexterm><primary>actions</primary><secondary>save</secondary></indexterm><indexterm><primary>save action</primary></indexterm></para></listitem>
<listitem><para><literal>saveAs</literal>&mdash;Save the currently open file under a new name.<indexterm><primary>actions</primary><secondary>saveAs</secondary></indexterm><indexterm><primary>saveAs action</primary></indexterm></para></listitem>
<listitem><para><literal>saveOptions</literal>&mdash;Save all settings to disk.<indexterm><primary>actions</primary><secondary>saveOptions</secondary></indexterm><indexterm><primary>saveOptions action</primary></indexterm></para></listitem>
<listitem><para><literal>selectAll</literal>&mdash;Select the entire document.<indexterm><primary>actions</primary><secondary>selectAll</secondary></indexterm><indexterm><primary>selectAll action</primary></indexterm></para></listitem>
<listitem><para><literal>showMenubar</literal>&mdash;Toggle the visibility of the menubar.<indexterm><primary>actions</primary><secondary>showMenubar</secondary></indexterm><indexterm><primary>showMenubar action</primary></indexterm></para></listitem>
<listitem><para><literal>showStatusbar</literal>&mdash;Show or hide the statusbar.<indexterm><primary>actions</primary><secondary>showStatusbar</secondary></indexterm><indexterm><primary>showStatusbar action</primary></indexterm></para></listitem>
<listitem><para><literal>showToolbar</literal>&mdash;Toggle the visibility for the toolbar.<indexterm><primary>actions</primary><secondary>showToolbar</secondary></indexterm><indexterm><primary>showToolbar action</primary></indexterm></para></listitem>
<listitem><para><literal>spelling</literal>&mdash;Show the Spell Check dialog box.<indexterm><primary>actions</primary><secondary>spelling</secondary></indexterm><indexterm><primary>spelling action</primary></indexterm></para></listitem>
<listitem><para><literal>undo</literal>&mdash;Undo the previous change.<indexterm><primary>actions</primary><secondary>undo</secondary></indexterm><indexterm><primary>undo action</primary></indexterm></para></listitem>
<listitem><para><literal>up</literal>&mdash;Move up a level in a hierarchy.<indexterm><primary>actions</primary><secondary>up</secondary></indexterm><indexterm><primary>up action</primary></indexterm></para></listitem>
<listitem><para><literal>whatsThis</literal>&mdash;Changes the cursor to the question arrow, enabling the user to click a widget.<indexterm><primary>actions</primary><secondary>whatsThis</secondary></indexterm><indexterm><primary>whatsThis action</primary></indexterm></para></listitem>
<listitem><para><literal>zoom</literal>&mdash;Show a Zoom dialog box, enabling users to select their zoom level.<indexterm><primary>actions</primary><secondary>zoom</secondary></indexterm><indexterm><primary>zoom action</primary></indexterm></para></listitem>
<listitem><para><literal>zoomIn</literal>&mdash;Increase the zoom for the document, usually by 10 percent increments.<indexterm><primary>actions</primary><secondary>zoomIn</secondary></indexterm><indexterm><primary>zoomIn action</primary></indexterm></para></listitem>
<listitem><para><literal>zoomOut</literal>&mdash;Decrease the zoom by 10 percent.<indexterm><primary>actions</primary><secondary>zoomOut</secondary></indexterm><indexterm><primary>ZoomOut action</primary></indexterm></para></listitem></itemizedlist>
<para>The standard actions provide their own icons, and the user can select those icons; the settings are set system-wide.</para>
<para>Some<indexterm><primary>actions</primary><secondary>openRecent</secondary></indexterm><indexterm><primary>openRecent action</primary></indexterm> special actions also exist, such as <literal>openRecent</literal> (which returns a <literal>KRecentFilesAction</literal>) rather than a <literal>KAction</literal>, <literal>showMenubar</literal>, <literal>showToolbar</literal>, and <literal>showStatusbar</literal>, which return <literal>KToggleAction</literal>.<indexterm><primary>actions</primary><secondary>showMenubar</secondary></indexterm><indexterm><primary>showMenubar action</primary></indexterm><indexterm><primary>actions</primary><secondary>showStatusbar</secondary></indexterm><indexterm><primary>showStatusbar action</primary></indexterm><indexterm><primary>actions</primary><secondary>showToolbar</secondary></indexterm><indexterm><primary>showToolbar action</primary></indexterm></para>
<para>These actions are automatically placed into the correct positions in the menus:</para>
<para><emphasis role="strong">File</emphasis><indexterm><primary>commands</primary><secondary>File menu</secondary></indexterm><indexterm><primary>File menu commands</primary></indexterm></para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>New</para></listitem>
<listitem><para>Open</para></listitem>
<listitem><para>Open Recent Separator)</para></listitem>
<listitem><para>Save</para></listitem>
<listitem><para>Save As</para></listitem>
<listitem><para>Revert (Separator)</para></listitem>
<listitem><para>Close (Separator)</para></listitem>
<listitem><para>Print (Separator)</para></listitem>
<listitem><para>Quit</para></listitem>
</itemizedlist>
<para><emphasis role="strong">Edit</emphasis><indexterm><primary>commands</primary><secondary>Edit menu</secondary></indexterm><indexterm><primary>Edit menu commands</primary></indexterm></para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>Undo</para></listitem>
<listitem><para>Redo (Separator)</para></listitem>
<listitem><para>Cut</para></listitem>
<listitem><para>Copy</para></listitem>
<listitem><para>Paste</para></listitem>
<listitem><para>Select All (Separator)</para></listitem>
<listitem><para>Find&hellip;</para></listitem>
<listitem><para>Find Next</para></listitem>
<listitem><para>Replace&hellip;</para></listitem>
</itemizedlist>
<para><emphasis role="strong">View</emphasis><indexterm><primary>commands</primary><secondary>View menu</secondary></indexterm><indexterm><primary>View menu commands</primary></indexterm></para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>Actual Size</para></listitem>
<listitem><para>Fit To Page</para></listitem>
<listitem><para>Fit To Page Width</para></listitem>
<listitem><para>Fit To Page Height (Separator)</para></listitem>
<listitem><para>Zoom In</para></listitem>
<listitem><para>Zoom Out</para></listitem>
<listitem><para>Zoom&hellip; (Separator)</para></listitem>
<listitem><para>Redisplay (Separator)</para></listitem>
</itemizedlist>
<para><emphasis role="strong">Go</emphasis><indexterm><primary>commands</primary><secondary>Go menu</secondary></indexterm><indexterm><primary>Go menu commands</primary></indexterm></para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>Up</para></listitem>
<listitem><para>Back</para></listitem>
<listitem><para>Forward</para></listitem>
<listitem><para>Home</para></listitem></itemizedlist>
<para><emphasis role="strong">Bookmarks</emphasis><indexterm><primary>commands</primary><secondary>Bookmarks menu</secondary></indexterm><indexterm><primary>Bookmarks menu commands</primary></indexterm></para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>Add Bookmark</para></listitem>
<listitem><para>Edit Bookmarks (Separator)</para></listitem>
<listitem><para>[Bookmarks]</para></listitem>
</itemizedlist>
<para><emphasis role="strong">Tools</emphasis><indexterm><primary>commands</primary><secondary>Tools menu</secondary></indexterm><indexterm><primary>Tools menu commands</primary></indexterm></para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>Spelling</para></listitem></itemizedlist>
<para><emphasis role="strong">Settings</emphasis><indexterm><primary>commands</primary><secondary>Settings menu</secondary></indexterm><indexterm><primary>Settings menu commands</primary></indexterm></para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>Show Menubar</para></listitem>
<listitem><para>Show Toolbar</para></listitem>
<listitem><para>Show Statusbar</para></listitem>
<listitem><para>[Show any other hideable elements] (Separator)</para></listitem>
<listitem><para>[Application-specific entries]</para></listitem>
<listitem><para>Save Options</para></listitem>
<listitem><para>Configure Key Bindings&hellip;</para></listitem>
<listitem><para>Configure [Appname]&hellip;</para></listitem>
</itemizedlist>
<para><emphasis role="strong">Help</emphasis><indexterm><primary>commands</primary><secondary>Help menu</secondary></indexterm><indexterm><primary>Help menu commands</primary></indexterm></para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>Contents&hellip; (Separator)</para></listitem>
<listitem><para>About [Application Name]&hellip;</para></listitem>
<listitem><para>About KDE&hellip;</para></listitem>
</itemizedlist>
<para>Keep in mind that KDE differentiates between <quote>Options</quote> and <quote>Configuration.</quote> Options are preferences only for this instance of the application. They are lost when the window is closed. Save Options makes them the default (and causes all other instances to inherit the options immediately). The configuration is relayed through all instances immediately and saved to disk when the OK button is pressed in the dialog.<indexterm><primary>options</primary><secondary>applications</secondary><tertiary>defined</tertiary></indexterm><indexterm><primary>configuration</primary><secondary>applications</secondary><tertiary>defined</tertiary></indexterm><indexterm><primary>applications</primary><secondary>configuration</secondary><tertiary>options/configuration comparison</tertiary></indexterm><indexterm><primary>applications</primary><secondary>options</secondary><tertiary>configuration/options comparison</tertiary></indexterm></para>
<para>The application name is all in lowercase; it's recommended that you use the same name you used as the first argument to the <literal>KAboutData</literal> constructor, as described in <link linkend="ch05">Chapter 5, <quote>KDE User Interface Compliance.</quote></link></para>
<para>The settings are checkable&mdash;toggled on and off with a check mark.</para>
</section>
<section id="ch06lev1sec2">
<title>Session Management</title>
<para>When <indexterm><primary>sessions</primary><secondary>session management</secondary></indexterm><indexterm><primary>managing</primary><secondary>sessions</secondary></indexterm>a user logs out from a KDE session, all running KDE applications are alerted of this event and are told to save and quit. When the user logs in again, those programs are restored and should go to the same state as they were in before.</para>
<para>Your <literal>main()</literal> function checks whether it is being restored; if so, it then triggers the restart.</para>
<para>In Listings 6.1&ndash;6.3, session management is shown.<indexterm><primary>listings</primary><secondary>session management code</secondary><tertiary>main source code example</tertiary></indexterm><indexterm><primary>sessions</primary><secondary>session management</secondary><tertiary>main source code example</tertiary></indexterm><indexterm><primary>managing</primary><secondary>sessions</secondary><tertiary>main source code example</tertiary></indexterm></para>
<example role="codelisting" label="6.1" id="ch06list01">
<title><literal>main.cpp</literal>: Example of Session Management</title>
<programlisting linenumbering="numbered">
 1: In main.cpp:
 2:
 3: #include "mykapp.h"
 4: #include &lt;kapp.h>
 5: #include &lt;dcopclient.h>
 6:
 7: int main(int argc, char **argv)
 8: {
 9:   // &hellip; KAboutData code here &hellip;
10:   KApplication app;
11:
12:   // register ourselves as a dcop client
13:   app.dcopClient()->registerAs(app.name());
14:
15:   // see if we are starting with session management
16:   if (app.isRestored())
17:      RESTORE(MyKApp)
18:   else
19:   {
20:      // no session.. just start up normally
21:      MyKApp *widget = new MyKApp;
22:      widget->show();
23:   }
24:
25:   return app.exec();
26: }<indexterm><primary>listings</primary><secondary>session management code</secondary><tertiary>main source code example</tertiary></indexterm><indexterm><primary>sessions</primary><secondary>session management</secondary><tertiary>main source code example</tertiary></indexterm><indexterm><primary>managing</primary><secondary>sessions</secondary><tertiary>main source code example</tertiary></indexterm>
</programlisting>
</example>
<example role="codelisting" label="6.2" id="ch06list02">
<title><literal>mykapp.h</literal>: Header File for Main Window</title>
<programlisting linenumbering="numbered">
 1: #include &lt;ktmainwindow.h><indexterm><primary>listings</primary><secondary>session management code</secondary><tertiary>header file example</tertiary></indexterm><indexterm><primary>sessions</primary><secondary>session management</secondary><tertiary>header file example</tertiary></indexterm><indexterm><primary>managing</primary><secondary>sessions</secondary><tertiary>header file example</tertiary></indexterm><indexterm><primary>header files</primary><secondary>session management</secondary></indexterm><indexterm><primary>files</primary><secondary>header</secondary><tertiary>session management</tertiary></indexterm>
 2:
 3: class MyKApp : public KTMainWindow
 4: {
 5:   // &hellip; Declaration of class &hellip;
 6:
 7: protected:
 8:   void saveProperties(KConfig *);
 9:   void readProperties(KConfig *);
10:
11:   // &hellip; Rest of Class declaration &hellip;
12: };
</programlisting>
</example>
<example role="codelisting" label="6.3" id="ch06list03">
<title><literal>mykapp.cpp</literal>: Source File for Main Window</title>
<programlisting linenumbering="numbered">
 1: void MyKApp::saveProperties(KConfig *config)<indexterm><primary>listings</primary><secondary>session management code</secondary><tertiary>source file example</tertiary></indexterm><indexterm><primary>sessions</primary><secondary>session management</secondary><tertiary>source file example</tertiary></indexterm><indexterm><primary>managing</primary><secondary>sessions</secondary><tertiary>source file example</tertiary></indexterm><indexterm><primary>source files</primary><secondary>session management</secondary></indexterm><indexterm><primary>files</primary><secondary>source</secondary><tertiary>session management</tertiary></indexterm>
 2: {
 3:   // config is where you write all the options to save.
 4:   // It's already opened and ready for your use.
 5: }
 6:
 7: void MyKApp::readProperties(KConfig *config)
 8: {
 9:   // config will have been opened for you, just
10:   // read what you saved in saveProperties(..)
11:   // and recover your program.
12: }
</programlisting>
</example>
<para>KEdit is a fine example of a simple but effective session management. In <link linkend="ch06list04">Listing 6.4</link>, its session management code is shown:<indexterm><primary>listings</primary><secondary>session management code</secondary><tertiary>KEdit</tertiary></indexterm><indexterm><primary>sessions</primary><secondary>session management</secondary><tertiary>KEdit</tertiary></indexterm><indexterm><primary>managing</primary><secondary>sessions</secondary><tertiary>KEdit</tertiary></indexterm><indexterm><primary>KEdit</primary><secondary>session management code</secondary></indexterm><indexterm><primary>editing</primary><secondary>KEdit</secondary><tertiary>session management code</tertiary></indexterm></para>
<example role="codelisting" label="6.4" id="ch06list04">
<title><literal>kedit.cpp</literal>: A Part of KEdit's Main Window Source File</title>
<programlisting linenumbering="numbered">
 1: void TopLevel::saveProperties(KConfig* config)
 2: {
 3:   // Test if document needs to be saved
 4:   // If empty AND isn't modified, no need to save.
 5:   if(location.isEmpty() &amp;!eframe->isModified())
 6:     return;
 7:
 8:   // Store the config filename
 9:   config->writeEntry("filename",name());
10:   // Store the state of modification, if it's modified,
11:   // we'll also store a temporary file elsewhere
12:   config->writeEntry("modified",eframe->isModified());
13:
14:   if(eframe->isModified())
15:   {
16:        QString tmplocation = kapp->tempSaveName(name());
17:        saveFile(tmplocation);
18:   }
19: }
20:
21: void TopLevel::readProperties(KConfig* config)
22: {
23:   QString filename = config->readEntry("filename","");
24:   int modified = config->readNumEntry("modified",0);
25:
26:   if(!filename.isEmpty()&amp;modified)
27:   {
28:      bool ok;
29:      QString fn = kapp->checkRecoverFile(filename,ok);
30:
31:      if(ok)
32:      { // Yes, there's a temporary file, and it's 'fn'
33:        openFile(fn,KEdit::OPEN_READWRITE);
34:        location = filename;
35:        eframe->setModified();
36:        setFileCaption();
37:      }
38:   }
39:   else if(!filename.isEmpty())
40:   { // No temp file, so we just open up the previously
41:     // opened file.
42:     openFile(filename,KEdit::OPEN_READWRITE);
43:     location = filename;
44:     eframe->setModified(false);
45:     setFileCaption();
46:   }
47: }<indexterm><primary>listings</primary><secondary>session management code</secondary><tertiary>KEdit</tertiary></indexterm><indexterm><primary>sessions</primary><secondary>session management</secondary><tertiary>KEdit</tertiary></indexterm><indexterm><primary>managing</primary><secondary>sessions</secondary><tertiary>KEdit</tertiary></indexterm><indexterm><primary>KEdit</primary><secondary>session management code</secondary></indexterm><indexterm><primary>editing</primary><secondary>KEdit</secondary><tertiary>session management code</tertiary></indexterm>
</programlisting>
</example>
<para>Note that the following methods have been declared and defined by KEdit itself:</para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para><literal>eframe->setModified(..);</literal>(line 12)</para></listitem>
<listitem><para><literal>saveFile(..);</literal>(line 17)</para></listitem>
<listitem><para><literal>openFile(..);</literal>(line 33)</para></listitem>
<listitem><para><literal>setFileCaption();</literal>(line 36)</para></listitem>
</itemizedlist>
<para>If your program does not need to open any files, you should at least store the state&mdash;the value in a calculator output, for example:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
void IntCalc::saveProperties(KConfig* config)
{
  // Store the value
  config->writeEntry("amount", theNumber);
}

void IntCalc::readProperties(KConfig* config)
{
  // Read the value, where "theNumber" is a
  // member variable
  theNumber = config->readNumEntry("theNumber",0);
}
</programlisting>
</informalexample>
</section>
<section id="ch06lev1sec3">
<title>The Standard KDE Icons</title>
<para>KDE <indexterm><primary>icons</primary></indexterm>provides its own set of original themable icons, as well as possibly one of the best icon engines of its kind. Using these icons makes theming them possible; it allows the user to select a set of icons that all programs use. Using your own icons would make your application appear out-of-place if the user uses nondefault icons. At times, however, it will become absolutely necessary to design your own icons&mdash;for example, application icons and special-function toolbar icons.</para>
<para>First, a word of note by Torsten Rahn, KDE's lead artist:</para>
<blockquote>
<para>Did<indexterm><primary>icons</primary><secondary>designing</secondary></indexterm><indexterm><primary>designing</primary><secondary>icons</secondary></indexterm> you ever see a traffic sign showing a photo-realistic train? Certainly not: traffic-signs were designed to make it easy to recognize them and get their meaning very fast. Therefore they are kept simple: They are very plain, symbolic, and consist of very few colors. Icons used in desktop environments have a similar aim: They should be designed in a way that makes it easy to get their message fast. On the other side the typical user wants to have a desktop that doesn't look ugly or too technical.</para>
</blockquote>
<para>You will need several icons for your application. These must be in the PNG (Portable Network Graphics) format.<indexterm><primary>icons</primary><secondary>PNG format</secondary></indexterm><indexterm><primary>formats</primary><secondary>PNG</secondary><tertiary>icons</tertiary></indexterm><indexterm><primary>PNG format</primary><secondary>icons</secondary></indexterm><indexterm><primary>Portable Network Graphics format</primary><see>PNG</see></indexterm><indexterm><primary>PNG format</primary><secondary>(Portable Network Graphics)</secondary></indexterm></para>
<para>For application icons, you should draw the following icon resolutions and color depths:<indexterm><primary>icons</primary><secondary>application</secondary><tertiary>specifications</tertiary></indexterm><indexterm><primary>application icons</primary><secondary>specifications</secondary></indexterm></para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>16&times;16 pixels, low color: required</para></listitem>
<listitem><para>32&times;32 pixels, low color: required</para></listitem>
<listitem><para>32&times;32 pixels, high color: recommended</para></listitem>
<listitem><para>48&times;48 pixels, high color: optional</para></listitem>
</itemizedlist>
<para>For your toolbars, you should use the following types:<indexterm><primary>icons</primary><secondary>toolbar</secondary><tertiary>specifications</tertiary></indexterm><indexterm><primary>toolbar icons</primary><secondary>specifications</secondary></indexterm></para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>16&times;16 pixels, low color: required</para></listitem>
<listitem><para>22&times;22 pixels, high color: required</para></listitem>
<listitem><para>32&times;32 pixels, high color: highly recommended</para></listitem>
</itemizedlist>
<para>Toolbar icons appear in three states: active, disabled, and default. Active is when they are highlighted, with a cursor over them. Disabled is <quote>grayed out,</quote> and default is just the standard icon. Be sure that these icons look good in all these states; the icons are generated by the libraries.<indexterm><primary>toolbar icons</primary><secondary>states</secondary></indexterm><indexterm><primary>states</primary><secondary>toolbar icons</secondary></indexterm></para>
<para>Note<indexterm><primary>icons</primary><secondary>color depth</secondary></indexterm><indexterm><primary>color</primary><secondary>icons</secondary><tertiary>color depth</tertiary></indexterm> that low color consists of 40 colors in a 6&times;7 table, with black appearing three times. In the following table, the colors are listed in their hexadecimal equivalents, and the same colors are shown in <link linkend="ch06fig01">Figure 6.1</link>:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
#303030 #585858 #808080 #a0a0a0 #c0c0c0 #dcdcdc
#400000 #004000 #000000 #404000 #004040 #000000
#800000 #008000 #000080 #808000 #008080 #800080
#c00000 #00c000 #0000c0 #c0c000 #00c0c0 #c000c0
#ff0000 #00ff00 #0000ff #ffff00 #00ffff #ff00ff
#ffc0c0 #c0ffc0 #c0c0ff #ffffc0 #c0ffff #ffc0ff
#ff8000 #c05800 #ffa858 #ffdca8 #ffffff #000000
</programlisting>
</informalexample>
<figure label="6.1" id="ch06fig01">
<title>High color should remain consistent with the low-color version, perhaps with a loss of dithering and smoother gradients.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/06fig01.gif" format="GIF"/>
</imageobject>
</mediaobject>
</figure>
<para>When installing icons, the Makefile will place them according to their name. There's a trick to naming your icons: ColordepthSize-Type-Name.png.<indexterm><primary>icons</primary><secondary>names</secondary></indexterm><indexterm><primary>names</primary><secondary>icons</secondary></indexterm></para>
<para>Colordepth may be <quote>lo</quote> or <quote>hi.</quote></para>
<para>Type <indexterm><primary>icons</primary><secondary>type</secondary></indexterm>may be <literal>app</literal>, <literal>device</literal>, <literal>action</literal>, <literal>filesystem</literal>, or <literal>mimetype</literal>. <literal>app</literal> is an application icon; <literal>device</literal> is most of those icons you find when you browse the /dev/ directory; <literal>action</literal> is toolbar and menubar icons (<literal>KAction</literal> icons); <literal>filesystem</literal> is for the folder icons and such; and <literal>mimetype</literal> is the icon for file types.</para>
<para>Name, of course, is just a short description of your icon.</para>
<para>For<indexterm><primary>icons</primary><secondary>designing</secondary></indexterm><indexterm><primary>designing</primary><secondary>icons</secondary></indexterm> example, KEdit's 16&times;16 low-color icon can be named lo16-app-kedit.png, and the name for a 32&times;32 pixel icon for a text document that Kedit opens may be lo32-mimetype-textdocument.png.</para>
<para>You should use only lowercase in these filenames.<indexterm><primary>icons</primary><secondary>names</secondary></indexterm><indexterm><primary>names</primary><secondary>icons</secondary></indexterm></para>
</section>
<section id="ch06lev1sec4">
<title>Internationalization</title>
<para>KDE<indexterm><primary>internationalization</primary><see>languages</see></indexterm><indexterm><primary>languages</primary><secondary>i18n() function</secondary></indexterm><indexterm><primary>functions</primary><secondary>i18n()</secondary></indexterm><indexterm><primary>i18n() function</primary></indexterm> is an international product and, as such, supports multiple languages. This is accomplished very easily, with calls to the function <literal>i18n()</literal>. This function accepts a string and returns the translated string. The default language is English. You also do not need to translate internal messages. Likewise, all messages that end up with the user should be translated. This includes error messages, dialog and menubar titles, tooltips, and so on.</para>
<para>Generally, the syntax is <literal>i18n</literal> (<literal>"</literal><emphasis><literal>My String</literal></emphasis><literal>"</literal>);<indexterm><primary>functions</primary><secondary>i18n()</secondary><tertiary>syntax</tertiary></indexterm><indexterm><primary>i18n() function</primary><secondary>syntax</secondary></indexterm><indexterm><primary>syntax</primary><secondary>i18n()</secondary></indexterm><indexterm><primary>languages</primary><secondary>i18n() function</secondary><tertiary>syntax</tertiary></indexterm></para>
<para>When your locale is set to <literal>en</literal> (for English), the preceding is equivalent to <literal>"</literal><emphasis><literal>My String</literal></emphasis><literal>"</literal>.</para>
<informalexample>
<programlisting linenumbering="unnumbered">
new QListViewItem(listview, "Item Number Six");
  // Wrong!
new QListViewItem(listview, i18n("Item Number Six"));
  // Right!
</programlisting>
</informalexample>
<para>This should be your course of action, even if you do not plan on internationalizing your software. Another person may volunteer, and increasing your audience is always a good thing.</para>
<note role="normal">
<para>Don't try to create garbled messages with <literal>i18n</literal>:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
i18n("Couldn't open " + file + ", please check the path and try again.");
</programlisting>
</informalexample>
<para>Translating such messages into other languages will not work very well, when word order issues come into play. A better idea is:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
i18n("Couldn't open %1, please check the path and try again.").arg(file);
</programlisting>
</informalexample>
</note>
<para>When you think your program is ready for translation, you can pick up a tool such as KBabel, create the proper message files, and include them with your application.</para>
<para>Remember to also translate documentation files.</para>
<para>Another source for information on the subject can be found at the KDE Translator's and Documenter's Web site: <ulink url="http://i18n.kde.org">http://i18n.kde.org</ulink>.<indexterm><primary>Web sites</primary><secondary>KDE Translator's and Documenter's Web site</secondary></indexterm><indexterm><primary>KDE Translator's and Documenter's Web site</primary></indexterm><indexterm><primary>languages</primary><secondary>i18n() function</secondary><tertiary>KDE Translator's and Documenter's Web site</tertiary></indexterm><indexterm><primary>functions</primary><secondary>i18n()</secondary><tertiary>KDE Translator's and Documenter's Web site</tertiary></indexterm><indexterm><primary>i18n() function</primary><secondary>KDE Translator's and Documenter's Web site</secondary></indexterm></para>
<para>Translation files (*.po), which can be generated with KBabel, are generally placed in the po/ directory of your package. Those .po files are produced by running the following:<indexterm><primary>translation files</primary></indexterm><indexterm><primary>languages</primary><secondary>translator files</secondary></indexterm></para>
<informalexample>
<programlisting linenumbering="unnumbered">
 xgettext -C -ki18n -kI18N_NOOP \ktranslate -x$KDEDIR/include/kde.pot *.cpp
</programlisting>
</informalexample>
<para>The program xgettext should be provided by the gettext package.</para>
<para>After the po file is produced, move it to the proper directory and open it in KBabel. Your file hierarchy should look like this:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
appname
  po
    fr
    de
    [&hellip;]
  doc
    fr
    de
    en
    [&hellip;]
  src<indexterm><primary>files</primary><secondary>translation</secondary></indexterm><indexterm><primary>translation files</primary></indexterm><indexterm><primary>languages</primary><secondary>translator files</secondary></indexterm>
</programlisting>
</informalexample>
</section>
<section id="ch06lev1sec5">
<title>Playing Sounds</title>
<para>There<indexterm><primary>sound</primary><secondary>playing</secondary></indexterm><indexterm><primary>playing</primary><secondary>sound</secondary></indexterm> should rarely be a need for playing a sound. Sounds should be used only in games, and they should never be required for the use of your program unless, of course, your program's purpose is to play sound. Do not play sounds in the event of an error; that is the purpose of <literal>KNotify</literal>, which will be discussed shortly.</para>
<para>Playing sound is a simple command:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
KAudioPlayer::play("squish.wav");
</programlisting>
</informalexample>
<para>You can also use this in a slot:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
QButton *button = new QButton(this);
KAudioPlayer *player = new KAudioPlayer("foo.wav", button);
connect(button, SIGNAL(clicked()), player, SLOT(play()));
</programlisting>
</informalexample>
<para>In this example, the file $KDEDIR/share/sounds/foo.wav is played whenever <literal>button</literal> is clicked.</para>
<para>You can also send absolute filenames, in which case it will ignore the KDEDIR/share/sounds path.</para>
<para>This is not a superbly fast class, because it plays sounds via DCOP. For true real-time sound, you should use MCOP. For more information on multimedia, see <link linkend="ch14">Chapter 14, <quote>Multimedia.</quote></link><indexterm><primary>sound</primary><secondary>playing</secondary></indexterm><indexterm><primary>playing</primary><secondary>sound</secondary></indexterm><indexterm><primary>sound</primary><seealso>multimedia</seealso></indexterm><indexterm><primary>multimedia</primary><seealso>sound</seealso></indexterm></para>
</section>
<section id="ch06lev1sec6">
<title>User Notifications</title>
<para><literal>KNotifyClient<indexterm><primary>classes</primary><secondary>KNotifyClient</secondary></indexterm><indexterm><primary>KNotifyClient class</primary></indexterm><indexterm><primary>notifications</primary><secondary>user</secondary></indexterm><indexterm><primary>users</primary><secondary>notifications</secondary></indexterm></literal> is the class for notifying the user when something special happened.</para>
<para>For example, if you are writing a KDE version of wget, the popular GNU utility to grab files off the Web, you would do this:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
#include &lt;knotifyclient.h>
[&hellip;]
KNotifyClient::event("done getting",i18n("The file is downloaded!"));
[&hellip;]
</programlisting>
</informalexample>
<para>And with your program, you would install a file named eventsrc to $KDEDATADIR/APP/eventsrc ($KDEDIR/share/apps/APPNAME/eventsrc). Continuing with our example, you would use the following eventsrc:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
[!Global!]
Name=kwget
Comment=KDE Web-Get

[done getting]
Name=Download Completion
Name[fr]=Completion de Telechargement
Comment=Download of File is Complete
Comment=Telechargement de Lime est Complete
default_sound=downloaddone.wav
default_presentation=1
nopresentation=0
level=1
</programlisting>
</informalexample>
<para>The <literal>presentation</literal> and <literal>nopresentation</literal> fields are produced by adding:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
None=0, Sound=1, Messagebox=2, Logfile=4, Stderr=8
</programlisting>
</informalexample>
<para><literal>nopresentation</literal> was originally created to prevent an infinite recursion situation with KWin calling <literal>KNotify</literal>, which opens a window, for which KWin calls <literal>KNotify</literal>. You should have very little need for it.</para>
<para>And the level field is produced by adding:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
None=0, Notification=1, Warning=2, Error=4, Catastrophe=8
</programlisting>
</informalexample>
<para>Logfile uses the key <literal>default_file</literal>, in the same format as <literal>default_sound</literal>.</para>
<para>Several systemwide handlers also exist, all defined in your own $KDEDIR/share/config directory: <literal>cannotopenfile, notification, warning, fatalerror, and catastrophe</literal>. A more complete list is availible in: KDEDIR/share/config/eventsrc<indexterm><primary>classes</primary><secondary>KNotifyClient</secondary></indexterm><indexterm><primary>KNotifyClient class</primary></indexterm><indexterm><primary>notifications</primary><secondary>user</secondary></indexterm><indexterm><primary>users</primary><secondary>notifications</secondary></indexterm></para>
<para>These can be called with</para>
<informalexample>
<programlisting linenumbering="unnumbered">
KNotifyClient::event("fatalerror", i18n("An internal error occurred,
opened files have been backed up, and this program will now quit");
</programlisting>
</informalexample>
</section>
<section id="ch06lev1sec7">
<title>Executing Other Programs</title>
<para>KDE<indexterm><primary>KRun class</primary><secondary>running applications</secondary></indexterm><indexterm><primary>classes</primary><secondary>KRun</secondary><tertiary>running applications</tertiary></indexterm><indexterm><primary>applications</primary><secondary>running</secondary><tertiary>KRun class</tertiary></indexterm><indexterm><primary>running</primary><secondary>applications</secondary><tertiary>KRun class</tertiary></indexterm> has the <literal>KRun</literal> class, a member of the KIO library. It is able to run executables and .desktop files (as produced by KDE).</para>
<para>The most useful members of this class are the static <literal>run()</literal> functions, shown in <link linkend="ch06list05">Listing 6.5</link>:<indexterm><primary>functions</primary><secondary>run()</secondary><tertiary>KRun class</tertiary></indexterm><indexterm><primary>run() functions</primary><secondary>KRun class</secondary></indexterm><indexterm><primary>static run() functions</primary></indexterm><indexterm><primary>listings</primary><secondary>static run() functions</secondary></indexterm></para>
<example role="codelisting" label="6.5" id="ch06list05">
<title>Static <literal>run</literal> Functions</title>
<programlisting linenumbering="numbered">
 1: #include &lt;krun.h>
 2:
 3: bool run(const KService&amp;_service,
 4:          const KURL::List&amp;_urls)
 5: bool run(const QString&amp;_exec,
 6:          const KURL::List&amp;_urls,
 7:          const QString&amp;_name = QString::null,
 8:          const QString&amp;_icon = QString::null,
 9:          const QString&amp;_mini_icon = QString::null,
10:          const QString&amp;_desktop_file = QString::null)
</programlisting>
</example>
<para>The first of these two static <literal>run</literal> functions allows you to execute services. Those that are available are in your $KDEDIR/share/services. To execute Konqueror, you can use <literal>KRun::run(KService(locate</literal>(<literal>"services"</literal>, <literal>"konqueror.desktop"</literal><literal>)), QStringList());</literal>.</para>
<para>This method is, in fact, preferable to just executing Konqueror and hoping that it will work. By filling the <literal>QStringList</literal> at the end, you can send arguments to Konqueror.</para>
<para>The second static method can be used to execute a program, like so:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
KRun::run("netscape", QStringList("http://www.kde.org"),
"Netscape", locate("icon", "locolor/32x32/apps/netscape.png"));
</programlisting>
</informalexample>
<para>It is still, of course, preferable to visit <ulink url="http://www.KDE.org">http://www.KDE.org</ulink> with Konqueror.<indexterm><primary>KRun class</primary><secondary>running applications</secondary></indexterm><indexterm><primary>classes</primary><secondary>KRun</secondary><tertiary>running applications</tertiary></indexterm><indexterm><primary>applications</primary><secondary>running</secondary><tertiary>KRun class</tertiary></indexterm><indexterm><primary>running</primary><secondary>applications</secondary><tertiary>KRun class</tertiary></indexterm></para>
<para>You can also open files with <literal>KRun</literal>. In the next example (see <link linkend="ch06list06">Listings 6.6</link> and <link linkend="ch06list07">6.7</link>), when the libraries are ready for their next command, the Open File button becomes re-enabled.<indexterm><primary>KRun class</primary><secondary>opening files</secondary></indexterm><indexterm><primary>classes</primary><secondary>KRun</secondary><tertiary>opening files</tertiary></indexterm><indexterm><primary>files</primary><secondary>opening</secondary><tertiary>KRun class</tertiary></indexterm><indexterm><primary>opening</primary><secondary>files</secondary><tertiary>applications;KRun class</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KRun class</secondary><tertiary>opening files examples</tertiary></indexterm></para>
<example role="codelisting" label="6.6" id="ch06list06">
<title><literal>runwalk.h</literal>: Open a File (Header)</title>
<programlisting linenumbering="numbered">
 1:
 2: #ifndef _RUNWALK_H
 3: #define _RUNWALK_H
 4:
 5: #include &lt;krun.h>
 6: #include &lt;qpushbutton.h>
 7: #include &lt;klineedit.h>
 8: Style Reference
 9: class RunWalk : public QWidget
10: {
11:  Q_OBJECT
12:  public:
13:   RunWalk();
14:  public slots:
15:   void slotDoneExec();
16:   void slotRun();
17:  private:
18:   QPushButton *pushme;
19:   KLineEdit *program;
20: };
21:
22: #endif
</programlisting>
</example>
<example role="codelisting" label="6.7" id="ch06list07">
<title><literal>runwalk.cpp</literal>: Open a File (Source).XXX</title>
<programlisting linenumbering="numbered">
 1: #include &lt;qlayout.h>
 2: #include "runwalk.h"
 3: #include &lt;klocale.h>
 4:
 5: RunWalk::RunWalk()
 6: {
 7:   QVBoxLayout *layout=new QVBoxLayout(this,0,2);
 8:   layout->setAutoAdd(true);
 9:   program=new KLineEdit("http://www.kde.org/",this);
10:   pushme=new QPushButton(i18n("Open File"),this);
11:   show();
12:
13:   connect(pushme, SIGNAL(clicked()), SLOT(slotRun()));
14: }
15:
16: void RunWalk::slotDoneExec()
17: {
18:   pushme->setEnabled(true);
19:   program->setEnabled(true);
20: }
21:
22: void RunWalk::slotRun()
23: {
24:   KRun *run=new KRun(KURL(program->text()));
25:   connect(run, SIGNAL(finished()), SLOT(slotDoneExec()));
26:   connect(run, SIGNAL(error()), SLOT(slotDoneExec()));
27:   pushme->setEnabled(false);
28:   program->setEnabled(false);
29: }
30:
31: int main(int argc, char **argv)
32: {
33:   KApplication app(argc, argv, "runwalk", true);
34:   RunWalk runwalk;
35:
36:   app.setMainWidget(&amp;runwalk);
37:   return app.exec();
38: }<indexterm><primary>KRun class</primary><secondary>opening files</secondary></indexterm><indexterm><primary>classes</primary><secondary>KRun</secondary><tertiary>opening files</tertiary></indexterm><indexterm><primary>files</primary><secondary>opening</secondary><tertiary>KRun class</tertiary></indexterm><indexterm><primary>opening</primary><secondary>files</secondary><tertiary>applications;KRun class</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KRun class</secondary><tertiary>opening files examples</tertiary></indexterm>
</programlisting>
</example>
</section>
<section id="ch06lev1sec8">
<title>Network Transparency</title>
<para>If <indexterm><primary>applications</primary><secondary>network transparency</secondary></indexterm><indexterm><primary>network transparency</primary><secondary>applications</secondary></indexterm>you want a program to be able to have the KDE sticker, it needs to be network transparent. Fortunately, this isn't all that difficult! The importance of such a functionality cannot be understated; more information on network transparency is also presented in <link linkend="ch07">Chapter 7, <quote>Further KDE Compliance.</quote></link></para>
<para>Generally, the only two classes that need to be worried about are <literal>KIO::Job</literal> and <literal>KIO::NetAccess</literal>. <literal>KIO</literal> is a namespace.</para>
<para>Remember that KDE would rather deal with URLs than with filenames. Both can be stored in a <literal>QString</literal>, but you should prefer a <literal>KURL</literal>, because it can do all the parsing for you.</para>
<para>In the following example (<link linkend="ch06list08">Listing 6.8</link>), the user has clicked the Open toolbar or menu item. The Open File window appears, and then the selected file opens.</para>
<para>You'll have to include kfiledialog.h, netaccess.h, and knotifyclient.h.<indexterm><primary>classes</primary><secondary>network transparency</secondary></indexterm><indexterm><primary>applications</primary><secondary>network transparency</secondary><tertiary>classes</tertiary></indexterm><indexterm><primary>network transparency</primary><secondary>applications</secondary><tertiary>classes</tertiary></indexterm></para>
<example role="codelisting" label="6.8" id="ch06list08">
<title>Opening a File, Network Transparently</title>
<programlisting linenumbering="numbered">
 1: // In this class, we have declared a QString file, which is the filename
 2: // of the local copy of our file. We also have a KURL url which contains
 3: // the local/remote location of the file that is opened
 4:
 5: // TODO: Test if there is already a file open, or, if the current file
 6: // has been edited
 7:
 8: url=KFileDialog::getOpenURL(0,
 9:     "*.txt|Text Files (*.txt)\n*.cpp|C++ Source Files (*.cpp)",this);
10:
11: if (!KIO::NetAccess::download(url, file))
12:     KNotifyClient::event("cannotopenfile"), return;
13:
14: // That's it! Now, we get to open the string "local" the standard way
15:
16: QFile f(file);
17: // TODO: read and open the file&hellip;.
</programlisting>
</example>
<para>When the user clicks Save, you want to store the file to the server, if necessary:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
// file and url have been declared, remember?
QFile f(file);
// [&hellip;] store data to file
f.close();

if (!KIO::NetAccess::upload(file, url))
    KNotifyClient::event("cannotopenfile"), return;
</programlisting>
</informalexample>
<para>Not that bad at all, is it?</para>
<para>What if the user has not selected a filename for this file yet? <link linkend="ch06list09">Listing 6.9</link> shows what to do in such a situation:<indexterm><primary>listings</primary><secondary>network transparency</secondary><tertiary>filenames</tertiary></indexterm><indexterm><primary>filenames</primary><secondary>network transparency</secondary></indexterm><indexterm><primary>names</primary><secondary>files</secondary><tertiary>network transparency</tertiary></indexterm></para>
<example role="codelisting" label="6.9" id="ch06list09">
<title>More Network Transparency Checks</title>
<programlisting linenumbering="numbered">
 1: if (url.isEmpty())
 2: {
 3:   url=KFileDialog::getSaveUrl(0,
 4:   "*.txt|Text Files (*.txt)\n*.cpp|C++ Source (*.cpp)", this)
 5:   // URL now contains where we want to save this to
 6:     file=url.path();
 7:   // This won't be useful if it's not a local file, but if it is a local  file
 8:   // we get to save directly into this!
 9:   if (!file.isLocalPath())
10:   // We must come up with a temporary file to save to (more info on this  shortly)
11:
12: [&hellip;]
</programlisting>
</example>
<para>Your<indexterm><primary>applications</primary><secondary>network transparency</secondary></indexterm><indexterm><primary>network transparency</primary><secondary>applications</secondary></indexterm> application should have two menu items: Save and Save As.</para>
<para>Save As asks you to save a file in another filename and format. Save just saves it under the currently selected filename; if that filename has not been selected, Save acts as Save As.<indexterm><primary>listings</primary><secondary>network transparency</secondary><tertiary>filenames</tertiary></indexterm><indexterm><primary>filenames</primary><secondary>network transparency</secondary></indexterm><indexterm><primary>names</primary><secondary>files</secondary><tertiary>network transparency</tertiary></indexterm></para>
<para><link linkend="ch06list10">Listing 6.10</link> is the full and complete code of those two methods; you should often be able to just plug this in with minimal changes. Just remember that <literal>KURL url</literal> and <literal>QString file</literal> have been declared.<indexterm><primary>listings</primary><secondary>network transparency</secondary><tertiary>complete example</tertiary></indexterm></para>
<example role="codelisting" label="6.10" id="ch06list10">
<title>Complete Network Transparency Example</title>
<programlisting linenumbering="numbered">
 1: #include &lt;ktempfile.h>
 2:
 3: void MainWindow::slotSaveAs()
 4: {
 5:   url=KFileDialog::getSaveUrl(0,
 6:   "*.txt|Text Files (*.txt)\n*.cpp|C++ Source (*.cpp)",
 7:     this)
 8:   file=url.path();
 9:
10:   if (!file.isLocalPath())
11:   {
12:     KTempFile temp;
13:     file=temp.name(); // Get somewhere local to write to
14:
15:     slotSave(); // write to that
16:     temp.unlink();
17:     return;
18:   }
19:   // As of here, the url will always be local, which means
20:   // that file contains the local path of the file to save!
21:   // So lets just save it!
22:   slotSave();
23: }
24:
25: void MainWindow::slotSave()<indexterm><primary>listings</primary><secondary>network transparency</secondary><tertiary>complete example</tertiary></indexterm>
26: {
27:   // Looks like there isn't a selected file yet!
28:   if (url.isEmpty() || file.isEmpty())
29:     slotSaveAs(), return;
30:
31:   // Lets save the file.
32:   QFile f(file);
33:
34:   // IO_Truncate purges the file so we start with a
35:   // clean slate
36:   if (!f.open(IO_WriteOnly | IO_Truncate))
37:     KNotifyClient::event("cannotopenfile"), return;
38:
39:   QTextStream t( &amp;f );
40:   // QDataStream may be more appropriate for some
41:   // purposes, check the QT documentation for all your
42:   // file-storing needs.
43:   t &lt;&lt; "The filename that was stored is " &lt;&lt; file &lt;&lt; '\n';
44:
45:   f.close();
46:
47:   // TODO: Set a flag, telling you that this file is<indexterm><primary>applications</primary><secondary>network transparency</secondary></indexterm><indexterm><primary>network transparency</primary><secondary>applications</secondary></indexterm>
48:   // currently saved.
49: }
50:
51: void MainWindow::slotOpen()
52: {
53:   if ( /* TODO: test if the currently opened file needs to be saved */ )
54:   { // User already has a file open! What does this
55:     // person want to do with this file?
56:     int result=KMessageBox::questionYesNo(this,
57:        i18n("You already have a file open! Would you"
58:             "like to save the currently "
59:             "opened file and open another?"),
60:        i18n("Continue?"));
61:
62:    if (result==KMessageBox::Yes)
63:      slotSave();
64:    else
65:      return;
66:   }
67:
68:   url=KFileDialog::getOpenURL(0,
69:     "*.txt|Text Files (*.txt)\n*.cpp|C++ Source(*.cpp)",
70:     this);
71:
72:   if (!KIO::NetAccess::download(url, file))
73:     KNotifyClient::event("cannotopenfile"), return;
74:
75:   QFile f(file);
76:   if (!f.open(IO_ReadOnly))
77:     KNotifyClient::event("cannotopenfile"), return;
78:
79:   QTextStream t( &amp;f );
80:   QString dataFromFile;
81:   t>>dataFromFile;
82:   // TODO: Do something with the data!
83:
84:   f.close();
85: }<indexterm><primary>applications</primary><secondary>network transparency</secondary></indexterm><indexterm><primary>network transparency</primary><secondary>applications</secondary></indexterm><indexterm><primary>listings</primary><secondary>network transparency</secondary><tertiary>complete example</tertiary></indexterm>
</programlisting>
</example>
</section>
<section id="ch06lev1sec9">
<title>User Friendliness</title>
<para>A <indexterm><primary>applications</primary><secondary>interfaces</secondary><tertiary>user friendliness</tertiary></indexterm><indexterm><primary>interfaces</primary><secondary>applications</secondary><tertiary>user friendliness</tertiary></indexterm><indexterm><primary>user-friendly applications</primary></indexterm>lot of software is available that's powerful and useful, but that fails in its ease of use. Before implementing a feature, think about how a user will react to it: Does it make sense? Is it easy to use? Can anyone figure it out without the use of a manual?</para>
<para>Before you release your program, give it to a friend who has not seen it before. If the friend asks you a question, you may have done something wrong.</para>
<para>Writing documentation is important, but remember that having users who do not need it at all is just as good (but it should still be provided).</para>
<para>In fact, before you start designing your user interface, take a look at the <quote>Interface Hall of Shame</quote> at <ulink url="http://www.iarchitect.com/mshame.htm">http://www.iarchitect.com/mshame.htm</ulink> to get a hint at what you may not realize is horrible. We all may be guilty of such a horror and not even be aware of it!<indexterm><primary>Web sites</primary><secondary>Interface Hall of Shame</secondary></indexterm><indexterm><primary>Interface Hall of Shame Web site</primary></indexterm></para>
<para>You may ask potential readers to not judge a book by its cover; asking the same of potential users will consistently give the same results: None. It is impossible for users to not judge a program's power by its <quote>looks.</quote> The moral is to keep a keen eye on making your program look good. Now, I'm not asking you to go too far. It's as simple as your placement of widgets. Do not spruce it up with color and icons; spruce it up with convenient placement of tools. Line up your widgets neatly and keep it organized.</para>
<note role="normal">
<para>About widget placement: use your own computer for a while and note where your cursor is. Hint: It's often on the right side of the screen. If you want a tool that the user will need to click often, put it on the right, if possible.</para>
</note>
<para>The following is a little tidbit that comes from the KDE Development lists (from an author I cannot remember): People tend to form a center valley with a mound of papers to the sides. To another person, this will look like complete chaos, but to the owner of this mess, it makes perfect sense. The reason is that the mound is generally organized with recently used papers nearest the valley and the old papers to the edges (where they may fall off the table into the circular file). In fact, it has been proven that people work most efficiently this way! On this note, remember to keep the most often used stuff nearest the user display&mdash;and the rare tools and data in the outliers. You may think that by increasing the size of the mound, you would increase the efficiency, but that just causes the mound's owner to be forced to rustle around in them more. Keep the front of the user interface simple, limited to the most often used tools. The menus and configuration dialog boxes should have the more rare tools.</para>
<para><link linkend="ch06fig02">Figure 6.2</link> is an example of an excellent user interface: Lotus WordPro '98. It has a little floating control center that is neatly organized, inobtrusive, and very iconic. It's just a context menu or a toolbar button away!<indexterm><primary>applications</primary><secondary>interfaces</secondary><tertiary>user friendliness</tertiary></indexterm><indexterm><primary>interfaces</primary><secondary>applications</secondary><tertiary>user friendliness</tertiary></indexterm><indexterm><primary>user-friendly applications</primary></indexterm></para>
<figure label="6.2" id="ch06fig02">
<title>Lotus WordPro '98 floating control panel.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/06fig02.gif" format="GIF"/>
</imageobject>
</mediaobject>
</figure>
</section>
<section id="ch06lev1sec10">
<title>Summary</title>
<para>The guidelines presented in this chapter are what cause KDE to be such a coherent and user-friendly environment. By correctly implementing session management and network transparency in addition to artistry, you can produce a KDE-guided application.</para>
<para>Pay attention to session management, which allows your software to be restarted in the same state that it was in at the time the user logged out. Be sure your application's network transparency is implemented with the <literal>KIO::NetAccess</literal> class. You also should create icons for your application and use them appropriately.</para>
<para>Follow the guidelines for alerting the user with <literal>KAudioPlayer</literal> and <literal>KNotifyClient</literal>.</para>
<para>Remember, too, that documentation is important for every KDE application. (See <link linkend="ch15">Chapter 15, <quote>Creating Documentation.</quote></link>)</para>
<para>By following the guidelines presented in this chapter, you can create a well-designed application.</para>
</section>
<section id="ch06lev1sec11">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question id="ch06que01"><para><link linkend="ch06ans01">Improve the program you wrote for Exercise 2 from <link linkend="ch05">Chapter 5</link>. Create a fully featured Edit menu (with Copy, Paste, Cut, Undo, and Redo) and support file saving and opening with <literal>KIO::NetAccess</literal>.</link></para></question></qandaentry>
<qandaentry>
<question id="ch06que02"><para><link linkend="ch06ans02">Use <literal>KRun</literal> to execute a program (and tell the user of its completion). Store the text of the <literal>KLineEdit</literal> for the sake of session management.</link></para></question></qandaentry>
</qandaset>
</section>
</chapter>
