<chapter label="16" role="chapter" id="ch16">
<title>Packaging and Distributing Code</title>
<para><emphasis>by David Sweet</emphasis></para>
<highlights>
<itemizedlist mark="bullet" spacing="compact">
<title>In This Chapter</title>
<listitem><para><emphasis role="strong"><link linkend="ch16lev1sec1">The Structure of a Package</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch16lev1sec2">Administrative Files</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch16lev1sec3">Distributing Your Application</link></emphasis></para></listitem>
</itemizedlist>
</highlights>
<para>By <indexterm><primary>packages</primary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary></indexterm>now you have probably become familiar with the standard form in which KDE applications and libraries are distributed. The source code is bound in a single directory in a gzipped tar file, and the program is made and installed with the commands <literal>./configure; make; make install</literal>. In this chapter, you learn how to create packages like this for your own applications.</para>
<para>The advantages to using this standard packaging method include</para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>An easy and familiar compilation and installation procedure for end users.</para></listitem>
<listitem><para>A simple way to construct makefiles and manage dependencies (including .moc files).</para></listitem>
<listitem><para>A convenient way to adapt your source code to the system on which it is being compiled. These advantages occur because of the use of Autoconf and Automake, as well as the hard work of Stephan Kulow <indexterm><primary>Kulow, Stephen</primary></indexterm>(who maintains the KDE packaging software) and other contributors. To use this packaging system, you need Autoconf version 2.13 or better and Automake version 1.4a or better. You will also need to have Perl installed.</para></listitem></itemizedlist>
<note role="tip">
<para>You can find out about Autoconf, Automake and Perl at the following URLs:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
http://sourceware.cygnus.com/autoconf/
http://sourceware.cygnus.com/automake/
http://www.perl.org
</programlisting>
</informalexample></note>
<para>After you've created a working package for your application, you'll want to distribute it and get the word out to potential users. This chapter will show you how.<indexterm><primary>packages</primary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary></indexterm></para>
<section id="ch16lev1sec1">
<title>The Structure of a Package</title>
<para>A <indexterm><primary>packages</primary><secondary>structure of</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>structure of</tertiary></indexterm>package contains several files in addition to your source code, such as makefiles, scripts, and sources for the makefiles and scripts. A typical layout is shown in <link linkend="ch16fig01">Figure 16.1</link>.</para>
<para>This layout is taken from the package kexample.tar.gz. In this chapter, you will examine it and develop it into a package for KSimpleApp, the application written in <link linkend="ch02">Chapter 2, <quote>A Simple KDE Application.</quote></link></para>
<para>The top-level directory of a package contains some administrative scripts, including the script configure, and a makefile. The script configure runs several tests to learn about the system before the software is compiled. These tests include checking for the appropriate versions of KDE and Qt; checking for the locations of KDE, Qt, and X; checking for the presence of various utility programs; and checking for various system-dependent behaviors of programs and library functions. The file Makefile is used by the <literal>make</literal> utility to build and install the software, to remove files not needed for distribution, and to regenerate automatically generated files when they are needed. The script configure is generated automatically by the Autoconf from a file called configure.in and Makefile is generated by configure from the file Makefile.in. You will see how to create these files later in the section <link linkend="ch16lev2sec1"><quote>Configuring the Top-Level Directory.</quote></link></para>
<figure label="16.1" id="ch16fig01">
<title>The layout of a typical KDE source code package.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/16fig01.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>There are two important subdirectories. One is given the name of your application in all lowercase letters (the subdirectory for KSimpleApp, for example, is <literal>ksimpleapp)</literal>, and the other is called <literal>po</literal>. The first subdirectory contains all the application's source code, and <literal>po</literal> holds translations of the string literals that are passed to the <literal>i18n()</literal> function.<indexterm><primary>packages</primary><secondary>structure of</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>structure of</tertiary></indexterm></para>
</section>
<section id="ch16lev1sec2">
<title>Administrative Files</title>
<para>Before<indexterm><primary>packages</primary><secondary>adminstrative files</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>administrative files</tertiary></indexterm><indexterm><primary>administrative files (packages)</primary></indexterm><indexterm><primary>files</primary><secondary>administrative files</secondary></indexterm> you starting building a package for KSimpleApp, you should be familiar with some of the files used by the packaging system. <link linkend="ch16table01">Table 16.1</link> gives a summary of files and their purposes.</para>
<table id="ch16table01" frame="topbot" label="16.1">
<title>Administrative Files in a KDE Package</title>
<tgroup cols="2" align="left" colsep="0" rowsep="0">
<colspec colname="c1"/>
<colspec colname="c2"/>
<thead valign="top">
<row rowsep="1">
<entry><emphasis>Filename</emphasis></entry>
<entry><emphasis>Description</emphasis></entry></row>
</thead>
<tbody valign="top">
<row>
<entry>configure<indexterm><primary>packages</primary><secondary>adminstrative files</secondary><tertiary>configure</tertiary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>administrative files</tertiary></indexterm><indexterm><primary>administrative files (packages)</primary><secondary>configure</secondary></indexterm><indexterm><primary>files</primary><secondary>administrative files</secondary><tertiary>configure</tertiary></indexterm><indexterm><primary>configure file</primary></indexterm></entry>
<entry>Configuration script used to configure the build environment.</entry></row>
<row>
<entry>configure.in<indexterm><primary>packages</primary><secondary>adminstrative files</secondary><tertiary>configure.in</tertiary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>administrative files</tertiary></indexterm><indexterm><primary>administrative files (packages)</primary><secondary>configure.in</secondary></indexterm><indexterm><primary>files</primary><secondary>administrative files</secondary><tertiary>configure.in</tertiary></indexterm><indexterm><primary>configure.in file</primary></indexterm></entry>
<entry>Source for the script configure. This is prepared by the maintainer (you!) and processed by Autoconf to create the script configure.</entry></row>
<row>
<entry>config.h<indexterm><primary>packages</primary><secondary>adminstrative files</secondary><tertiary>config.h</tertiary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>administrative files</tertiary></indexterm><indexterm><primary>administrative files (packages)</primary><secondary>config.h</secondary></indexterm><indexterm><primary>files</primary><secondary>administrative files</secondary><tertiary>config.h</tertiary></indexterm><indexterm><primary>config.h file</primary></indexterm></entry>
<entry>Holds the results of the tests run by the script configure. These results are specified by #define directives. You can include config.h in your source code to use these directives (thus, the results of the tests).</entry></row>
<row>
<entry>config.status<indexterm><primary>packages</primary><secondary>adminstrative files</secondary><tertiary>config.status</tertiary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>administrative files</tertiary></indexterm><indexterm><primary>administrative files (packages)</primary><secondary>config.status</secondary></indexterm><indexterm><primary>files</primary><secondary>administrative files</secondary><tertiary>config.status</tertiary></indexterm><indexterm><primary>config.status file</primary></indexterm></entry>
<entry>Script to remake the last successful build environment generated by the script configure.</entry></row>
<row>
<entry>config.cache<indexterm><primary>packages</primary><secondary>adminstrative files</secondary><tertiary>config.cache</tertiary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>administrative files</tertiary></indexterm><indexterm><primary>administrative files (packages)</primary><secondary>config.cache</secondary></indexterm><indexterm><primary>files</primary><secondary>administrative files</secondary><tertiary>config.cache</tertiary></indexterm><indexterm><primary>config.cache file</primary></indexterm></entry>
<entry>Stores results of tests run by the script configure so that the package can be reconfigured quickly (without rerunning previously successful tests).</entry></row>
<row>
<entry>config.log<indexterm><primary>packages</primary><secondary>adminstrative files</secondary><tertiary>config.log</tertiary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>administrative files</tertiary></indexterm><indexterm><primary>administrative files (packages)</primary><secondary>config.log</secondary></indexterm><indexterm><primary>files</primary><secondary>administrative files</secondary><tertiary>config.log</tertiary></indexterm><indexterm><primary>config.log file</primary></indexterm></entry>
<entry>Contains debugging output from the script configure. You can consult this file to figure out why a test has failed.</entry></row>
</tbody>
</tgroup>
</table>
<section id="ch16lev2sec1">
<title>Configuring the Top-Level Directory</title>
<para>To <indexterm><primary>packages</primary><secondary>top-level directories</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>top-level directories</tertiary></indexterm><indexterm><primary>top-level directories</primary><secondary>configuring</secondary></indexterm><indexterm><primary>directories</primary><secondary>top-level directories</secondary><tertiary>configuring</tertiary></indexterm><indexterm><primary>configuring</primary><secondary>directories</secondary><tertiary>top-level directories</tertiary></indexterm>convert the kexample package to a package for KSimpleApp, you first need to edit configure.in and Makefile.am.</para>
<para>The file configure.in contains several macros, each of which corresponds to a set of tests run by configure. Autoconf expands these macros when converting configure.in to the script configure. You need to modify two macros called <literal>AM_INIT_AUTOMAKE</literal> and <literal>AC_OUTPUT</literal>.</para>
<para>The first of these specifies the name and version number of the package. Call the package <literal>ksimpleapp</literal> and give it version number 1.0 by changing the line</para>
<informalexample>
<programlisting linenumbering="unnumbered">
AM_INIT_AUTOMAKE(kexample, 2.0pre) dnl searches for some needed programs
</programlisting>
</informalexample>
<para>to read</para>
<informalexample>
<programlisting linenumbering="unnumbered">
AM_INIT_AUTOMAKE(ksimpleapp, 1.0) dnl searches for some needed programs
</programlisting>
</informalexample>
<para>Next, tell Autoconf which directories to compile source code in. In this example, only one directory exists, <literal>ksimpleapp</literal>, so change the lines</para>
<informalexample>
<programlisting linenumbering="unnumbered">
AC_OUTPUT( \
       ./Makefile \

       kless/Makefile \
       )
</programlisting>
</informalexample>
<para>to read</para>
<informalexample>
<programlisting linenumbering="unnumbered">
AC_OUTPUT( \
         ./Makefile \

         ksimpleapp/Makefile \
         )<indexterm><primary>packages</primary><secondary>top-level directories</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>top-level directories</tertiary></indexterm><indexterm><primary>top-level directories</primary><secondary>configuring</secondary></indexterm><indexterm><primary>directories</primary><secondary>top-level directories</secondary><tertiary>configuring</tertiary></indexterm><indexterm><primary>configuring</primary><secondary>directories</secondary><tertiary>top-level directories</tertiary></indexterm>
</programlisting>
</informalexample>
<para>You also need to edit Makefile.am. This file is processed by Automake into Makefile.in, which is processed, in turn, into Makefile by Autoconf. Thankfully, this is a mostly transparent process. You will generally need to modify only one line in Makefile.am and then not worry about the other two files. The line to modify is</para>
<informalexample>
<programlisting linenumbering="unnumbered">
SUBDIRS = kless
</programlisting>
</informalexample>
<para>It should read</para>
<informalexample>
<programlisting linenumbering="unnumbered">
SUBDIRS = ksimpleapp
</programlisting>
</informalexample>
<para>The top-level directory is now configured. The changes you have made will be propagated when you type <emphasis role="strong"><literal>make Makefile.dist</literal></emphasis>, but don't do that yet! You need to make some changes to the subdirectory <literal>kless</literal>. First off, change its name:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
mv kless ksimpleapp
</programlisting>
</informalexample>
<para>The subdirectory <literal>kless</literal>, which you have renamed <literal>ksimpleapp</literal>, contains the source code, Makefile, and some support files for an application called <literal>kless</literal>.<indexterm><primary>packages</primary><secondary>top-level directories</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>top-level directories</tertiary></indexterm><indexterm><primary>top-level directories</primary><secondary>configuring</secondary></indexterm><indexterm><primary>directories</primary><secondary>top-level directories</secondary><tertiary>configuring</tertiary></indexterm><indexterm><primary>configuring</primary><secondary>directories</secondary><tertiary>top-level directories</tertiary></indexterm></para>
</section>
<section id="ch16lev2sec2">
<title>Configuring the Subdirectories</title>
<para>Now <indexterm><primary>packages</primary><secondary>subdirectories</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>subdirectories</tertiary></indexterm><indexterm><primary>subdirectories</primary><secondary>configuring</secondary></indexterm><indexterm><primary>directories</primary><secondary>subdirectories</secondary><tertiary>configuring</tertiary></indexterm><indexterm><primary>configuring</primary><secondary>directories</secondary><tertiary>subdirectories</tertiary></indexterm>prepare the subdirectory <literal>ksimpleapp</literal> for KSimpleApp:</para>
<orderedlist numeration="arabic" continuation="restarts" spacing="compact">
<listitem><para>Delete the files kless.cpp, kless.h, and configure.in.in&mdash;you won't be needing them.</para></listitem>
<listitem><para>Rename kless.desktop to ksimpleapp.desktop.</para></listitem>
<listitem><para>Copy the source code for KSimpleApp to this directory. The necessary files are ksimpleapp.h, ksimpleapp.cpp, and main.cpp. (These files are part of the source code from <link linkend="ch02">Chapter 2</link>.)</para></listitem>
<listitem><para>Rename the files lom-app-kless.png and los-app-kless.png to lom-app-ksimpleapp.png and los-app-ksimpleapp.png, respectively. You can use the kless icon instead of drawing your own just for this example. When you distribute your application, you should create your own icons according to the KDE style guidelines in <link linkend="ch06">Chapter 6, <quote>KDE Style Reference.</quote></link></para></listitem></orderedlist>
<para>Now you need to configure the file Makefile.am. This file is read by automake when you run make Makefile.dist. Automake produces the file Makefile.in from it (from which Autoconf produces Makefile, as discussed previously).<indexterm><primary>packages</primary><secondary>subdirectories</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>subdirectories</tertiary></indexterm><indexterm><primary>subdirectories</primary><secondary>configuring</secondary></indexterm><indexterm><primary>directories</primary><secondary>subdirectories</secondary><tertiary>configuring</tertiary></indexterm><indexterm><primary>configuring</primary><secondary>directories</secondary><tertiary>subdirectories</tertiary></indexterm></para>
<para>Makefile.am contains a list of variable assignments and standard make rules. The standard make rules are copied directly to Makefile.in and then to Makefile. The assigned variables have special names that tell Automake how to create Makefile.in. For example, value assigned to the variable bin_PROGRAMS is the name of the application being created. <link linkend="ch16list01">Listing 16.1</link> shows an edited version of the Makefile.am found in the subdirectory kexample/kless. It has been edited to build KSimpleApp. (The original file was well commented; these comments have been removed here for brevity.)</para>
<example role="codelisting" label="16.1" id="ch16list01">
<title>Makefile.am: An Automake Source File Used to Build KSimpleApp<indexterm><primary>listings</primary><secondary>Makefile.am</secondary></indexterm><indexterm><primary>Makefile.am file</primary></indexterm></title>
<programlisting linenumbering="numbered">
 1: INCLUDES= $(all_includes)
 2:
 3: bin_PROGRAMS =     ksimpleapp
 4:
 5: ksimpleapp_SOURCES = ksimpleapp.cpp main.cpp
 6:
 7: ksimpleapp_METASOURCES = AUTO
 8:
 9: ksimpleapp_LDFLAGS = $(all_libraries) $(KDE_RPATH)
10: ksimpleapp_LDADD = $(LIB_KDEUI)
11:
12: noinst_HEADERS = ksimpleapp.h
13:
14: messages:
15:     $(XGETTEXT) --c++ -ki18n -x $(includedir)/kde.pot \
16       $(ksimpleapp_SOURCES) &amp;&amp;mv messages.po ../po/ksimpleapp.pot
17:
18: kdelnkdir = $(kde_appsdir)/Utilities
19: kdelnk_DATA = ksimpleapp.desktop
10:
21: KDE_ICON = ksimpleapp<indexterm><primary>listings</primary><secondary>Makefile.am</secondary></indexterm><indexterm><primary>Makefile.am file</primary></indexterm>
</programlisting>
</example>
<para>The following variables should be assigned in Makefile.am.<indexterm><primary>packages</primary><secondary>subdirectories</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>subdirectories</tertiary></indexterm><indexterm><primary>subdirectories</primary><secondary>configuring</secondary></indexterm><indexterm><primary>directories</primary><secondary>subdirectories</secondary><tertiary>configuring</tertiary></indexterm><indexterm><primary>configuring</primary><secondary>directories</secondary><tertiary>subdirectories</tertiary></indexterm></para>
<para><literal>INCLUDES</literal>&mdash;(Line 1) Include paths passed to the C++ compiler. Set this to <literal>$(all_includes)</literal> to get the KDE, Qt, and X11 include paths. Add other paths as needed (for example, to locate include files for a custom or other third-party library).</para>
<para><literal>bin_PROGRAMS</literal>&mdash;(Line 3) The name of the binary to create. In this example, it is ksimpleapp.</para>
<para><literal>ksimpleapp_SOURCES</literal>&mdash;(Line 5) The names of all the source files separated by spaces. Use the name assigned to <literal>bin_PROGRAMS</literal> as the first part of this and other variables (see subsequent items in this table). (Actually, the name assigned to <literal>bin_PROGRAMS</literal> needs to be converted a bit; all characters except letters and numbers should be converted to underscores. For example, if <literal>bin_PROGRAMS</literal> were set to <literal>my-program</literal>, the <literal>SOURCES</literal> variable would be <literal>my_program_SOURCES</literal>.)</para>
<para><literal>ksimpleapp_METASOURCE</literal>&mdash;(Line 7) You should always set this to <literal>AUTO</literal>. Dependencies for *.moc files are automatically set up in <literal>Makefile</literal>. For this to work, you should include *.moc files in your C++ source code, the same as you've done throughout this book.</para>
<para><literal>ksimpleapp_LDFLAGS</literal>&mdash;(Line 9) A list of paths to search for libraries. Set this to <literal>$(all_libraries)</literal> to add the search paths for the necessary KDE, Qt, and X libraries.</para>
<para><literal>ksimpleapp_LADD</literal>&mdash;(Line 10) A list of libraries to link to. Setting this to <literal>$(LIB_KDEUI)</literal> links ksimpleapp to libkdeui, as well as to all the other libraries necessary to compile a basic KDE application. If you need libkfile, libkimgo, libkio, or libkab, you should  add the variables&mdash;<literal>$(LIB_KFILE)</literal>, <literal>$(LIB_KIMGIO)</literal>, <literal>$(LIB_KIO)</literal>, or <literal>$(LIB_KAB)</literal>&mdash;to this line. Be sure to separate the variable names with a space and place libraries in reverse order of dependence. For example, if library1 depends on library2, place library1 first in the list.<indexterm><primary>packages</primary><secondary>subdirectories</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>subdirectories</tertiary></indexterm><indexterm><primary>subdirectories</primary><secondary>configuring</secondary></indexterm><indexterm><primary>directories</primary><secondary>subdirectories</secondary><tertiary>configuring</tertiary></indexterm><indexterm><primary>configuring</primary><secondary>directories</secondary><tertiary>subdirectories</tertiary></indexterm></para>
<para><literal>noinst_HEADERS</literal>&mdash;(Line 12) The header files listed here should not be installed along with the application.</para>
<para><literal>kdelnkdir</literal>&mdash;(Line 18) The directory in which to install the ksimpleapp.desktop file. (Recall that the *.kdelnk files of KDE 1.x have been replaced with *.desktop files in KDE 2.0; this explains the name of this variable.)</para>
<para><literal>kdelnk_DATA</literal>&mdash;(Line 19) The name of the .desktop file to install.</para>
<para><literal>KDE_ICON</literal>&mdash;(Line 21) The root of the icon names. The icon names are <literal>lo32-app- ksimpleapp.png</literal> and <literal>lo16-app-ksimpleapp.png</literal>. The root is <literal>ksimpleapp</literal>. The prefixes are <literal>app</literal> for application, <literal>lom</literal> for <quote>low color, medium sized,</quote> and <literal>los</literal> for <quote>low color, small sized.</quote></para>
<para>The last part of Makefile.am, which I haven't mentioned yet, is the target messages. This target (lines 14 and 15) follows the standard makefile conventions and is carried through unchanged by Automake and Autoconf to the final Makefile. When you run <literal>make messages</literal>, the string literals that have been passed to the function <literal>i18n()</literal> are extracted from all files listed in <literal>$(ksimpleapp_SOURCES)</literal> to the file <literal>../po/ksimpleapp.pot</literal>. This file serves as a template for creating translations of the string literals. The option <literal>-x $(includedir)/kde.pot</literal> says to ignore strings that have been previously translated for global use by KDE applications. See <link linkend="ch07">Chapter 7, <quote>Further KDE Compliance,</quote></link> for information on how to create and use translation (<literal>*.po</literal>) files.<indexterm><primary>packages</primary><secondary>subdirectories</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>subdirectories</tertiary></indexterm><indexterm><primary>subdirectories</primary><secondary>configuring</secondary></indexterm><indexterm><primary>directories</primary><secondary>subdirectories</secondary><tertiary>configuring</tertiary></indexterm><indexterm><primary>configuring</primary><secondary>directories</secondary><tertiary>subdirectories</tertiary></indexterm></para>
</section>
<section id="ch16lev2sec3">
<title>Updating Administration Files</title>
<para>You <indexterm><primary>packages</primary><secondary>adminstrative files</secondary><tertiary>updating</tertiary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>administrative files</tertiary></indexterm><indexterm><primary>administrative files (packages)</primary><secondary>updating</secondary></indexterm><indexterm><primary>files</primary><secondary>administrative files</secondary><tertiary>updating</tertiary></indexterm><indexterm><primary>updating</primary><secondary>administrative files</secondary></indexterm>may now update the administration files. First, make sure that the environment variables <literal>KDEDIR</literal> and <literal>QTDIR</literal> are set appropriately to the root KDE and Qt directories. Change directories to the top-level directory and type</para>
<informalexample>
<programlisting linenumbering="unnumbered">
<emphasis role="strong">make -f Makefile.dist</emphasis>
<emphasis role="strong">./configure</emphasis>
</programlisting>
</informalexample>
<para>This performs the updates. You can now compile the application with <literal>make</literal>.</para>
</section>
<section id="ch16lev2sec4">
<title>Creating Shared Libraries</title>
<para>The<indexterm><primary>packages</primary><secondary>shared libraries</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>shared libraries</tertiary></indexterm><indexterm><primary>shared libraries</primary><secondary>creating</secondary></indexterm><indexterm><primary>libraries</primary><secondary>shared libraries</secondary><tertiary>creating</tertiary></indexterm> KDE package-management system you have been reading about makes the creation of shared libraries quite simple. To do this, create a subdirectory and copy the library's source code into it. Next, copy the file Makefile.am from the kless directory and modify it the same as you did for <literal>ksimpleapp</literal>, except for two things:</para>
<orderedlist numeration="arabic" continuation="restarts" spacing="compact">
<listitem><para>Instead of assigning a value to the variable <literal>bin_PROGRAMS</literal>, set the variable <literal>lib_ LTLIBRARIES</literal>. For example:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
lib_LTLIBRARIES  = libkplotw.la
</programlisting>
</informalexample>
<para>tells automake that you are interested in creating a library called libkplotw.la.</para></listitem>
<listitem><para>Add some linker flags:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
libkplotw_la_LDFLAGS = -version-info 0:2:0 $(all_libraries) -no-undefined
</programlisting>
</informalexample>
<para>Notice that an underscore has been substituted for the period in <literal>libkplotw.la</literal>. The option <literal>-version-info a:b:c</literal> says to create a library with the version number (a-c).c.b For example, this library would be created as <literal>libkplotw.so.0.0.2</literal>. The option <literal>-no-undefined</literal> says that no external symbols are needed by this library (it is needed to create a shared library).<indexterm><primary>packages</primary><secondary>shared libraries</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>shared libraries</tertiary></indexterm><indexterm><primary>shared libraries</primary><secondary>creating</secondary></indexterm><indexterm><primary>libraries</primary><secondary>shared libraries</secondary><tertiary>creating</tertiary></indexterm></para></listitem></orderedlist>
</section>
<section id="ch16lev2sec5">
<title>Using Test Results</title>
<para>You <indexterm><primary>packages</primary><secondary>test results</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>test results</tertiary></indexterm>can use the results of the tests run by the script configure in a source-code file by including the file config.h with the following statement:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
#include &lt;config.h>
</programlisting>
</informalexample>
<para>Then do either of the following:</para>
<itemizedlist mark="none" spacing="compact">
<listitem><para>Examine the macros defined in this file with preprocessor directives.</para></listitem>
<listitem><para>Use the macros directly.</para></listitem></itemizedlist>
<para>The file config.h is created automatically by the script configure after the tests are run.</para>
<para>Let's examine the second method.</para>
<para>Add the statement <literal>#include &lt;config.h></literal> to the file ksimpleapp.cpp and change the following line:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
text = new QLabel (i18n("Hello!"), this);
</programlisting>
</informalexample>
<para>to the lines</para>
<informalexample>
<programlisting linenumbering="unnumbered">
QString qs (i18n("Hello from "));
qs = qs + VERSION +"!";
text = new QLabel (qs, this);
</programlisting>
</informalexample>
<para>The identifier <literal>VERSION</literal> is a macro defined in config.h by the statement</para>
<informalexample>
<programlisting linenumbering="unnumbered">
#define VERSION "1.0"
</programlisting>
</informalexample>
<para>The string <quote>1.0</quote> comes, ultimately, from your declaration of the version in the call to <literal>AM_INIT_AUTOMAKE()</literal> in the file configure.in.</para>
<para>Other macros are defined that tell about the build environment. The file config.h in well commented and describes the purpose of each macro.<indexterm><primary>packages</primary><secondary>test results</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>test results</tertiary></indexterm></para>
</section>
<section id="ch16lev2sec6">
<title>Make Targets</title>
<para>The <indexterm><primary>packages</primary><secondary>make targets</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>make targets</tertiary></indexterm><indexterm><primary>make targets</primary></indexterm>makefiles that are generated by Automake/Autoconf contain several make targets that help make the development cycle more efficient. Several commonly used targets are listed in <link linkend="ch16table02">Table 16.2</link>.</para>
<table id="ch16table02" frame="topbot" label="16.2">
<title>Commonly Used Targets Included in Autogenerated Makefiles<indexterm><primary>makefiles</primary><secondary>targets</secondary></indexterm><indexterm><primary>files</primary><secondary>makefiles</secondary><tertiary>targets</tertiary></indexterm><indexterm><primary>targets (makefiles)</primary></indexterm></title>
<tgroup cols="2" align="left" colsep="0" rowsep="0">
<colspec colname="c1"/>
<colspec colname="c2"/>
<thead valign="top">
<row rowsep="1">
<entry><emphasis>Target</emphasis></entry>
<entry><emphasis>Description</emphasis></entry></row>
</thead>
<tbody valign="top">
<row>
<entry><literal>all</literal><indexterm><primary>all target</primary></indexterm></entry>
<entry>Build the entire package. This is the default target (that is, it is assumed if no target is specified).</entry></row>
<row>
<entry><literal>install</literal><indexterm><primary>install target</primary></indexterm></entry>
<entry>Install the package. The target all is made if it hasn't been already.</entry></row>
<row>
<entry><literal>uninstall</literal><indexterm><primary>uninstall target</primary></indexterm></entry>
<entry>Remove the package.</entry></row>
<row>
<entry><literal>clean</literal><indexterm><primary>clean target</primary></indexterm></entry>
<entry>Remove the build results (*.o files, executables, and so on) but not configuration results (config.cache, and so on).</entry></row>
<row>
<entry><literal>distclean</literal><indexterm><primary>distclean target</primary></indexterm></entry>
<entry>Preparing the package for distribution removes both build results and results of configuration. You can still rebuild the package without having Automake, Perl, and Autoconf installed.</entry></row>
<row>
<entry><literal>maintainer-clean</literal><indexterm><primary>maintainer-clean target</primary></indexterm></entry>
<entry>Removes even more than <literal>distclean</literal>. You'll need to have Automake, Perl, and Autoconf to rebuild after making this target.</entry></row>
</tbody>
</tgroup>
</table>
<para>The targets <literal>all</literal>, <literal>install</literal>, and <literal>uninstall</literal> will be used by end users and generally, the others will be used only by the maintainer(s) of the package.<indexterm><primary>packages</primary><secondary>make targets</secondary></indexterm><indexterm><primary>code</primary><secondary>packages</secondary><tertiary>make targets</tertiary></indexterm><indexterm><primary>make targets</primary></indexterm><indexterm><primary>makefiles</primary><secondary>targets</secondary></indexterm><indexterm><primary>files</primary><secondary>makefiles</secondary><tertiary>targets</tertiary></indexterm><indexterm><primary>targets (makefiles)</primary></indexterm></para>
</section>
</section>
<section id="ch16lev1sec3">
<title>Distributing Your Application</title>
<para>A few<indexterm><primary>packages</primary><secondary>distribution</secondary></indexterm><indexterm><primary>distribution</primary><secondary>packages</secondary></indexterm><indexterm><primary>code</primary><secondary>distribution</secondary></indexterm><indexterm><primary>distribution</primary></indexterm> things remain to be done before you distribute your code. You should provide information about the application in text files and clean up the directories.</para>
<section id="ch16lev2sec7">
<title>Informative Text Files</title>
<para>The <indexterm><primary>packages</primary><secondary>distribution</secondary><tertiary>informative text files</tertiary></indexterm><indexterm><primary>code</primary><secondary>distribution</secondary><tertiary>informative text files</tertiary></indexterm><indexterm><primary>distribution</primary><secondary>informative text files</secondary></indexterm>Linux Software Map is a project that keeps track of Linux software via small index files (see <ulink url="http://www.execpc.com/lsm/">http://www.execpc.com/lsm/</ulink>). These index files are also used by the KDE project to keep track of KDE software. When you upload your file, you should upload an LSM, as the index file is called, along with your package.</para>
<para><link linkend="ch16list02">Listing 16.2</link> presents an LSM file for the KSimpleApp package. You may copy and edit this file to describe any packages you might create.</para>
<example role="codelisting" label="16.2" id="ch16list02">
<title><literal>ksimpleapp-1.0.lsm</literal>: An LSM File for the KSimpleApp Package<indexterm><primary>listings</primary><secondary>ksimpleapp-1.0.lsm</secondary></indexterm><indexterm><primary>ksimpleapp-1.0.lsm listing</primary></indexterm></title>
<programlisting linenumbering="numbered">
 1: Begin3
 2: Title:        KSimpleApp
 3: Version:    1.0.0
 4: Entered-date:    19MAR2000
 5: Description:    A simple KDE application
 6: Keywords:    simple KDE Qt
 7: Author:         David Sweet &lt;dsweet@kde.org>
 8: Maintained-by:  David Sweet &lt;dsweet@kde.org>
 9: Primary-site:    ftp://ftp.kde.org/pub/kde/unstable/apps/
10: Home-Page:    http://www.kde.org/~dsweet/KDE/KSimpleApp
11: Original-site:    None
12: Platforms:    KDE 2.0
13: Copying-policy: GPL
14: End<indexterm><primary>packages</primary><secondary>distribution</secondary><tertiary>informative text files</tertiary></indexterm><indexterm><primary>code</primary><secondary>distribution</secondary><tertiary>informative text files</tertiary></indexterm><indexterm><primary>distribution</primary><secondary>informative text files</secondary></indexterm><indexterm><primary>listings</primary><secondary>ksimpleapp-1.0.lsm</secondary></indexterm><indexterm><primary>ksimpleapp-1.0.lsm listing</primary></indexterm></programlisting>
</example>
<para>Most fields in this file are self-explanatory. The <literal>Primary-site:</literal> field (line 9) is often a directory on <ulink url="ftp.kde.org">ftp.kde.org</ulink>. You should look in pub/kde/unstable/apps for a subdirectory that is appropriate for your application. The <literal>Primary-site:</literal> may also be on your own server. (The URLs listed here are for demonstration purposes only, and, so, are not active.) The <literal>Copying-policy:</literal> field (line 13) is important to include. Common licenses are GPL, LGPL, BSD, and Artistic.</para>
<para>The LSM file should be included in the top-level directory of the package and uploaded as a separate file to whichever site you choose to upload to. (See the section <link linkend="ch16lev2sec9"><quote>Uploading and Announcing Software</quote></link> for more information.)</para>
<para>In the top-level directory, you should also include files called README and INSTALL. README should introduce the software and tell the user miscellaneous information that doesn't fit in other places. INSTALL gives the user instructions for installing the software. You should modify the standard INSTALL file that is included in the kexample package.<indexterm><primary>packages</primary><secondary>distribution</secondary><tertiary>informative text files</tertiary></indexterm><indexterm><primary>code</primary><secondary>distribution</secondary><tertiary>informative text files</tertiary></indexterm><indexterm><primary>distribution</primary><secondary>informative text files</secondary></indexterm></para>
</section>
<section id="ch16lev2sec8">
<title>Cleaning Up</title>
<para>Before <indexterm><primary>packages</primary><secondary>distribution</secondary></indexterm><indexterm><primary>archives</primary><secondary>creating</secondary></indexterm><indexterm><primary>compressed archives</primary><secondary>creating</secondary></indexterm> distributing your application, you should copy the entrire directory to a directory with a name similar to ksimpleapp-1.0. That is, the name should be (<emphasis>application name</emphasis>)-(<emphasis>version number</emphasis>). It is good to make a copy so that you don't break (or have to remake) your development version.</para>
<para>Now, in the new directory, type</para>
<informalexample>
<programlisting linenumbering="unnumbered">
<emphasis role="strong">make maintainer-clean; make -f Makefile.dist dist.</emphasis>
</programlisting>
</informalexample>
<para>This removes any file that the user does not need to build the software&mdash;including Makefile.dist.</para>
<para>Next, tar and gzip the entire directory, like so:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
<emphasis role="strong">cd ..</emphasis>
<emphasis role="strong">tar -cvf ksimpleapp-1.0.tar ksimpleapp-1.0</emphasis>
<emphasis role="strong">gzip ksimpleapp-1.0.tar</emphasis>
</programlisting>
</informalexample>
<para>Again, the form of the name for the archive is important. Having a standard style makes it easier to figure out what is inside a package.</para>
<para>Before uploading the package, you should copy the tar.gz archive to a temporary directory and try to unpack, compile, and install it with the following:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
gzip -d ksimpleapp-1.0.tar.gz
tar -xvf ksimpleapp-1.0.tar
cd ksimpleapp-1.0
./configure
make
make install
</programlisting>
</informalexample>
<para>Better yet, you should take it to a different computer and try it out.<indexterm><primary>packages</primary><secondary>distribution</secondary><tertiary>compressed archives</tertiary></indexterm><indexterm><primary>code</primary><secondary>distribution</secondary><tertiary>compressed archives</tertiary></indexterm><indexterm><primary>distribution</primary><secondary>compressed archives</secondary></indexterm></para>
</section>
<section id="ch16lev2sec9">
<title>Uploading and Announcing Software</title>
<para>If<indexterm><primary>packages</primary><secondary>distribution</secondary><tertiary>uploads</tertiary></indexterm><indexterm><primary>code</primary><secondary>distribution</secondary><tertiary>uploads</tertiary></indexterm><indexterm><primary>distribution</primary><secondary>uploads</secondary></indexterm><indexterm><primary>packages</primary><secondary>distribution</secondary><tertiary>software announcements</tertiary></indexterm><indexterm><primary>code</primary><secondary>distribution</secondary><tertiary>software announcements</tertiary></indexterm><indexterm><primary>distribution</primary><secondary>software announcements</secondary></indexterm><indexterm><primary>uploading</primary><secondary>software</secondary></indexterm><indexterm><primary>announcing software</primary></indexterm> you are distributing GPL KDE software, you may upload it to <ulink url="ftp://upload.kde.org/Incoming">ftp://upload.kde.org/Incoming</ulink>.Packages uploaded here are made available for download on over one hundred KDE FTP mirror sites around the world (see <ulink url="http://www.kde.org/mirrors.html">http://www.kde.org/mirrors.html</ulink> for a list of these mirrors).</para>
<note role="caution">
<para>Please don't upload this sample package to upload.kde.org or any other site for testing purposes&mdash;or for any other reason. Thanks.</para></note>
<para>Be sure to upload both the .tar.gz file and a copy of the LSM file (don't gzip or tar this copy of the LSM file).</para>
<para>Now you are ready to announce the release of your software! One announcement will be made automatically on the <literal>kde-announce</literal> mailing list. This is done automatically in response to your upload to the Incoming directory and is based on your LSM.</para>
<para>Another good place to announce your software is at Freshmeat, <ulink url="http://www.freshmeat.net">http://www.freshmeat.net</ulink>. <indexterm><primary>Freshmeat Web site</primary></indexterm><indexterm><primary>Web sites</primary><secondary>Freshmeat</secondary></indexterm>This is a popular place for posting and finding out about new, free software.</para>
<para>If your software works on Linux (which it should if you are writing with KDE), you can announce its release on the USENET newsgroup <literal>comp.os.linux.announce</literal>. This is a moderated newsgroup, so your post won't appear immediately. Be sure to read <ulink url="http://www.cs.helsinki.fi/u/mjrauhal/linux/cola-submit.html">http://www.cs.helsinki.fi/u/mjrauhal/linux/cola-submit.html</ulink> before posting. It gives some rules and tips for posting to this list.</para>
<para>And now, back to work! You have to get the next version out.<indexterm><primary>packages</primary><secondary>distribution</secondary><tertiary>uploads</tertiary></indexterm><indexterm><primary>code</primary><secondary>distribution</secondary><tertiary>uploads</tertiary></indexterm><indexterm><primary>distribution</primary><secondary>uploads</secondary></indexterm><indexterm><primary>packages</primary><secondary>distribution</secondary><tertiary>software announcements</tertiary></indexterm><indexterm><primary>code</primary><secondary>distribution</secondary><tertiary>software announcements</tertiary></indexterm><indexterm><primary>distribution</primary><secondary>software announcements</secondary></indexterm><indexterm><primary>uploading</primary><secondary>software</secondary></indexterm><indexterm><primary>announcing software</primary></indexterm></para>
</section>
</section>
<section id="ch16lev1sec4">
<title>Summary</title>
<para>End users and developers alike appreciate being able to easily install an application. End users have downloaded the software intending to use it; they don't want to spend lots of time compiling. Developers probably won't want to spend lots of time playing with your code until they've seen it work and are convinced that it is interesting enough to hack at. Using the KDE packaging system presented in this chapter simplifies the creation of software packages that are easy to compile and install.</para>
<para>For more information about <literal>autoconf</literal> and <literal>automake</literal>, please see the GNU info pages included with the distribution (you can browse info pages with KHelpCenter) or look at the following Web sites:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
http://sourceware.cygnus.com/autoconf/ and
http://sourceware.cygnus.com/automake/
</programlisting>
</informalexample>
</section>
</chapter>
