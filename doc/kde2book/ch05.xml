<chapter label="5" role="chapter" id="ch05">
<title>KDE User Interface Compliance</title>
<para><emphasis>by David Sweet</emphasis></para>
<highlights>
<itemizedlist mark="bullet" spacing="compact">
<title>In This Chapter</title>
<listitem><para><emphasis role="strong"><link linkend="ch05lev1sec1">The KDE Document-Centric Interface</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch05lev1sec2">Helping the User Use Your Application</link></emphasis></para></listitem>
<listitem><para><emphasis role="strong"><link linkend="ch05lev1sec3">Standard Dialog Boxes</link></emphasis></para></listitem>
</itemizedlist>
</highlights>
<para>KDE <indexterm><primary>UI compliance</primary></indexterm>User Interface (UI) compliance is, in some sense, what the KDE project is all about. KDE applications should be written so that they all look and work in similar ways. This makes it easier for users to learn new applications. To comply with the KDE UI style, you need to learn to use the KDE widgets, which are provided specifically for this purpose, and actions, a concept new to KDE 2.0.</para>
<para><emphasis>Actions</emphasis> are objects (instances of the C++ class <literal>KAction</literal> or one of its subclasses) that represent the commands a user can issue to your application. Actions can be represented on a menubar as menu entries or on a toolbar as icons. When your application's response to a certain action changes, it changes, logically, for all representations of the action, with minimal programming effort. This chapter explains actions in more detail.<indexterm><primary>UI compliance</primary></indexterm></para>
<section id="ch05lev1sec1">
<title>The KDE Document-Centric Interface</title>
<para>Take<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary></indexterm><indexterm><primary>document-centric user interface</primary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>UI compliance</secondary><see>UI compliance</see></indexterm> a look at <link linkend="ch05fig01">Figure 5.1</link>. It shows a prototypical example (KWrite) of a document-centric user interface. This sort of interface is used by applications on all the well-known desktops: KDE, CDE, GNOME, Windows, MacOS, OS/2, BeOS, and so on. The KDE incarnation (as well as others) of the interface includes a menubar, one or more toolbars, a statusbar, and a client area, as you have already learned in <link linkend="ch02">Chapter 2, <quote>A Simple KDE Application.</quote></link> KDE offers standard widgets that draw and manage all these, except for the client area. The client area varies, depending on what information is being presented.</para>
<figure label="5.1" id="ch05fig01">
<title>KWrite offers a good example of a document-centric user interface.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig01.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>More detailed standards govern the use of these widgets than those that are presented in this chapter. For example, <link linkend="ch06">Chapter 6, <quote>KDE Style Reference,</quote></link> discusses where to place common and application-specific menubar and toolbar entries. The techniques involved in laying out the menubar and toolbar are discussed in the following sections of this chapter.<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary></indexterm><indexterm><primary>document-centric user interface</primary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary></indexterm></para>
<section id="ch05lev2sec1">
<title>The Menubar and the Toolbar</title>
<para>The menubar and the toolbar are often discussed together because they provide access to all your applications' functions. Typically, in fact, the toolbar offers a subset of the menubar's functions.</para>
<section id="ch05lev3sec1">
<title>The Menubar</title>
<para>The <indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>menubars</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>menubars</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>menubars</tertiary></indexterm><indexterm><primary>menubars</primary></indexterm>menubar lists all the functions available to the user and categorizes them under a small number of headings. There are standard menu headings, such as File, Edit, and Help, and also standard menu entries, such as Open&hellip;, Save&hellip; and Quit.</para>
<para>To access the menu entries' functions, the user selects a menu either by first clicking the heading with the mouse or by typing the key combination of Alt and a specially designated letter in the heading (such as the F in File to open the menu). Then the menu entry can be chosen by clicking it with the mouse or by pressing a specially designated letter (indicated by an underline in the entry text). Menu entries can also be accessed by an accelerator. This is a key combination of Ctrl+(some key) that activates a function directly, bypassing the pull-down menu. For example, Ctrl+S saves a document. Accelerators are available whenever the focus is somewhere in the main window. Only the most commonly used functions have accelerators associated with them.</para>
<para>Menubar entries are one UI representation of actions, discussed in the next section, <quote>Creating and Manipulating Actions.</quote> You will rarely, if ever, need to access the menubar widget directly.<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>menubars</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>menubars</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>menubars</tertiary></indexterm><indexterm><primary>menubars</primary></indexterm></para>
</section>
<section id="ch05lev3sec2">
<title>The Toolbar</title>
<para>Toolbars<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>toolbars</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>toolbars</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>toolbars</tertiary></indexterm><indexterm><primary>toolbars</primary></indexterm> give quick access to frequently used functions listed in the menus on the menubar, such as Open, Save, Print, and so on. The user accesses these functions via buttons, line editors, or menus attached to buttons.</para>
<para>Unlike the menubar, more than one toolbar can be created. Each toolbar can be used to collect a different set of functions. Certain sets of functions may be appropriate only at certain times; therefore, toolbars can be hidden and shown (as needed) by the application or by the user.</para>
<para>Toolbar buttons are another UI representation of actions (discussed in the next section), like menubar entries. Toolbars can offer more functionality than a simple button-click, however, so you may need to access the toolbar widget (called <literal>KToolBar</literal>) from time to time. An example is given in the discussion in the <quote>Custom Actions</quote> section, later in this chapter.<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>toolbars</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>toolbars</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>toolbars</tertiary></indexterm><indexterm><primary>toolbars</primary></indexterm></para>
</section>
</section>
<section id="ch05lev2sec2">
<title>Creating and Manipulating Actions</title>
<para>Actions <indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>actions</tertiary><see>actions</see></indexterm><indexterm><primary>document-centric user interface</primary><secondary>actions</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>actions</tertiary><see>actions</see></indexterm><indexterm><primary>actions</primary></indexterm>are an elegant new addition to the KDE API. Using them means that it will take less time and effort to lay out, set up, and modify your user interface, and much of your user interface will, quite naturally, follow the KDE standards.</para>
<para>The <indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>KAction class</tertiary></indexterm><indexterm><primary>actions</primary><secondary>KAction class</secondary></indexterm><indexterm><primary>KAction class</primary></indexterm><indexterm><primary>classes</primary><secondary>KAction</secondary></indexterm>action concept is realized in the class <literal>KAction</literal>. This class holds descriptive information about the action and contains methods for adding the action to a widget, such as the toolbar or menubar, and for modifying the action. An action is described by some short text, an icon, an accelerator key combination, and a slot that should be called when the user requests that the action be performed (for example, by clicking the corresponding toolbar button). The text is displayed as the menu entry text if the action is represented as a menubar entry and as ToolTip text if the action is represented as a toolbar button. (Actions can have multiple representations; that is, they can appear both in a menu and a toolbar.) The icon is displayed next to the entry in the menu and on the toolbar button. The accelerator key combination activates the action whenever the user presses it.</para>
<para>For example, saving a file is a familiar action. It can be initiated by choosing File, Save, by clicking the toolbar button that looks like a floppy disk, or by pressing the key combination Ctrl+S. This action can be created in the following way:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
KAction *saveaction = new KAction ("Save&hellip;", "save",, Ctrl+S, this,
                                   SLOT(slotSaveFile()),this, "save_action");
</programlisting>
</informalexample>
<para>However, this particular action is one of a set of standard actions that can be created in a more convenient manner, as discussed in the next section.<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>KAction class</tertiary></indexterm><indexterm><primary>actions</primary><secondary>KAction class</secondary></indexterm><indexterm><primary>KAction class</primary></indexterm><indexterm><primary>classes</primary><secondary>KAction</secondary></indexterm></para>
<note role="normal">
<para>The action is created on the heap with the <literal>new</literal> operator because you want actions to persist so that they can continue to process user commands even after the method that creates them finishes (such as widgets).</para>
</note>
<section id="ch05lev3sec3">
<title>Standard Actions</title>
<para>Some <indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>standard actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary></indexterm><indexterm><primary>KStdAction class</primary></indexterm><indexterm><primary>classes</primary><secondary>KStdAction</secondary></indexterm><indexterm><primary>standard actions</primary><secondary>KStdAction class</secondary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary><tertiary>KStdAction class</tertiary></indexterm>actions need to be defined again in many KDE applications. These actions should all be represented in the UI in the same way, therefore their representations are defined by a subclass of <literal>KAction</literal> called <literal>KStdAction</literal>. Some standard actions are Open, Save, and Quit. (The standard actions are listed in their entirety in <link linkend="ch06">Chapter 6</link>.) Each of these actions can be created with a static convenience method, such as</para>
<informalexample>
<programlisting linenumbering="unnumbered">
KStdAction::open ( this, SLOT (slotOpen()), actionCollection() );
</programlisting>
</informalexample>
<para>This method returns a pointer to an action. This action's parent is <literal>actionCollection()</literal>.<indexterm><primary>actionCollection() function</primary></indexterm><indexterm><primary>functions</primary><secondary>actionCollection</secondary></indexterm> Take a look at <link linkend="ch05list01">Listing 5.1</link> and then I'll explain how <literal>actionCollection()</literal> works. <link linkend="ch05list01">Listings 5.1</link> and <link linkend="ch05list02">5.2</link> create a top-level widget called <literal>KStdActionsDemo</literal> that shows how to handle the standard actions in the, well, standard way.<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>standard actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary></indexterm><indexterm><primary>KStdActionsDemo widget</primary></indexterm><indexterm><primary>standard actions</primary><secondary>KStdActionsDemo widget</secondary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary><tertiary>KStdActionsDemo widget</tertiary></indexterm></para>
<example role="codelisting" label="5.1" id="ch05list01">
<title>kstdactionsdemo.cpp: Class Declaration for <literal>KStdActionsDemo<indexterm><primary>KStdActionsDemo widget</primary><secondary>kstdactionsdemo.cpp class declaration</secondary></indexterm><indexterm><primary>standard actions</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.cpp class declaration</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary><tertiary>KStdActionsDemo widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.cpp class declaration</tertiary></indexterm><indexterm><primary>kstdactionsdemo.cpp file (KStdActionsDemo widget)</primary></indexterm><indexterm><primary>declaring widget classes</primary><secondary>KStdActionsDemo widget</secondary></indexterm></literal></title>
<programlisting linenumbering="numbered">
 1: #include &lt;stdio.h>
 2: 
 3: #include &lt;qpopupmenu.h>
 4: #include &lt;qstringlist.h>
 5: 
 6: #include &lt;kapp.h>
 7: #include &lt;kmenubar.h>
 8: #include &lt;kiconloader.h>
 9: #include &lt;kaction.h>
10: #include &lt;kstdaction.h>
11: 
12: #include "kstdactionsdemo.moc"
13: 
14: KStdActionsDemo::KStdActionsDemo (const char *name) : KTMainWindow (name)
15: {
16: 
17:   //File menu
18:   KStdAction::openNew ( this, SLOT (slotNew()), actionCollection() );
19:   KStdAction::open ( this, SLOT (slotOpen()), actionCollection() );
20:   KStdAction::save ( this, SLOT (slotSave()), actionCollection() );
21: 
22:   recent = 
23:     KStdAction::openRecent ( 0, 0, actionCollection());
24:   recent->addURL (KURL("file:/samplepath/samplefile.txt"));
25:   recent->addURL (KURL("http://www.kde.org/sampleurl.html"));
26: 
27:   connect ( recent, SIGNAL (urlSelected (const KURL &amp;)),
28:         this, SLOT (slotRecent (const KURL &amp;)) );
29: 
30:   KStdAction::quit (kapp, SLOT (closeAllWindows()), actionCollection());
31: 
32:   //Edit menu
33:   KStdAction::cut ( this, SLOT (slotCut()), actionCollection() );
34:   KStdAction::copy ( this, SLOT (slotCut()), actionCollection() );
35:   KStdAction::paste ( this, SLOT (slotCut()), actionCollection() );
36:   
37: <indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>standard actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary></indexterm><indexterm><primary>KStdActionsDemo widget</primary><secondary>kstdactionsdemo.cpp class declaration</secondary></indexterm><indexterm><primary>standard actions</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.cpp class declaration</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary><tertiary>KStdActionsDemo widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.cpp class declaration</tertiary></indexterm><indexterm><primary>kstdactionsdemo.cpp file (KStdActionsDemo widget)</primary></indexterm><indexterm><primary>declaring widget classes</primary><secondary>KStdActionsDemo widget</secondary></indexterm>
38:   createGUI();
39: 
40:   QLabel *dummyclientarea = new QLabel (this);
41:   dummyclientarea->setBackgroundColor (Qt::white);
42:   setView (dummyclientarea);
43: }
44: 
45: 
46: 
47: void
48: KStdActionsDemo::slotNew()
49: {
50:   printf ("File->New\n");
51: }
52: 
53: void
54: KStdActionsDemo::slotOpen()
55: {
56:   printf ("File->Open\n");
57: }
58: 
59: void
60: KStdActionsDemo::slotSave()
61: {
62:   printf ("File->Save\n");
63: }
64: 
65: void
66: KStdActionsDemo::slotCut()
67: {
68:   printf ("Edit->Cut\n");
69: }
70: 
71: void
72: KStdActionsDemo::slotCopy()
73: {<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>standard actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary></indexterm><indexterm><primary>KStdActionsDemo widget</primary><secondary>kstdactionsdemo.cpp class declaration</secondary></indexterm><indexterm><primary>standard actions</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.cpp class declaration</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary><tertiary>KStdActionsDemo widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.cpp class declaration</tertiary></indexterm><indexterm><primary>kstdactionsdemo.cpp file (KStdActionsDemo widget)</primary></indexterm><indexterm><primary>declaring widget classes</primary><secondary>KStdActionsDemo widget</secondary></indexterm>
74:   printf ("Edit->Copy\n");
75: }
76: 
77: void
78: KStdActionsDemo::slotPaste()
79: {
80:   printf ("Edit->Paste\n");
81: }
82: 
83: void
84: KStdActionsDemo::slotRecent (const KURL &amp;url)
85: {
86:   printf ("Open recent file \%s\"\n",
87:       (const char *) url.url());
88: }<indexterm><primary>KStdActionsDemo widget</primary><secondary>kstdactionsdemo.cpp class declaration</secondary></indexterm><indexterm><primary>standard actions</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.cpp class declaration</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary><tertiary>KStdActionsDemo widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.cpp class declaration</tertiary></indexterm><indexterm><primary>kstdactionsdemo.cpp file (KStdActionsDemo widget)</primary></indexterm><indexterm><primary>declaring widget classes</primary><secondary>KStdActionsDemo widget</secondary></indexterm>
</programlisting>
</example>
<para>Lines 18&ndash;23 and 30&ndash;35 create several of the standard actions using <literal>KStdAction</literal>. All these actions will appear on the menubar and toolbar.</para>
<para>Each of these actions has as its parent <literal>actionCollection()</literal>. This method (a member of <literal>KTMainWindow</literal>) returns a pointer to an instance of <literal>QActionCollection</literal> (don't look for this class in your Qt documentation just yet&mdash;the Qt classes related to actions are in the KDE CVS module kdelibs/qk right now, but they will appear in Qt sometime after version 2.1); an object that is created once per instance of <literal>KTMainWindow</literal> holds and serves to group your applications' actions. All the actions in this group are referenced by the method <literal>createGUI()</literal>, the method that <quote>plugs</quote> (this is action lingo) the actions into their correct spots on the menubar and toolbar.<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>standard actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary></indexterm></para>
<para>When you create the Recent Files menu (which lies under the File menu), pass <literal>0L</literal> instead of the usual <quote>receiver, slotname</quote> pair. This tells <literal>KStdAction</literal> not to connect a slot to the action's signal called <literal>activate()</literal>&mdash;that's the default signal to which slots are connected when calling the <literal>KStdAction</literal> convenience methods. Instead, connect to the signal <literal>urlSelected (const KURL &amp;)</literal>(see lines 27 and 28). This signal is part of the class <literal>KRecentFilesAction</literal>, the type of the object returned by <literal>KStdAction::openRecent()</literal>. The <literal>const KURL &amp;</literal> argument of this signal tells which of the URLs the user chose.</para>
<para>On lines 24 and 25, two URLs are added to the recent files menu so that you can try out the menu in this example. You should add URLs to this after a file is saved. Be sure to save a pointer to the <literal>KRecentFilesAction</literal> so that you can do so.<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>standard actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary></indexterm></para>
<note role="tip">
<para>The standard action <literal>KStdAction::openNew()</literal> <indexterm><primary>openNew() function</primary></indexterm><indexterm><primary>functions</primary><secondary>openNew()</secondary></indexterm>should be connected to a slot that creates a new document. (The method name is slightly misleading. <literal>"new()"</literal> would be better, but <literal>new</literal> is a C++ keyword and, thus, not a valid method name.)</para>
</note>
<example role="codelisting" label="5.2" id="ch05list02">
<title>kstdactionsdemo.h: Class Definition for <literal>KStdActionsDemo<indexterm><primary>KStdActionsDemo widget</primary><secondary>kstdactionsdemo.h class definition</secondary></indexterm><indexterm><primary>standard actions</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.h class definition</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary><tertiary>KStdActionsDemo widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.h class definition</tertiary></indexterm><indexterm><primary>kstdactionsdemo.h file (KStdActionsDemo widget)</primary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KStdActionsDemo widget</secondary></indexterm></literal></title>
<programlisting linenumbering="numbered">
 1: #ifndef __KSTDACTIONSDEMO_H__
 2: #define __KSTDACTIONSDEMO_H__<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>standard actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary></indexterm>
 3: 
 4: #include &lt;ktmainwindow.h>
 5: #include &lt;kurl.h>
 6: 
 7: class KRecentFilesAction;
 8: 
 9: /**
10:  * KStdActionsDemo
11:  * Demonstrate how to use standard actions on the menubar and toolbar.
12:  **/
13: class KStdActionsDemo : public KTMainWindow
14: {
15:   Q_OBJECT
16:  public:<indexterm><primary>KStdActionsDemo widget</primary><secondary>kstdactionsdemo.h class definition</secondary></indexterm><indexterm><primary>standard actions</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.h class definition</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary><tertiary>KStdActionsDemo widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.h class definition</tertiary></indexterm><indexterm><primary>kstdactionsdemo.h file (KStdActionsDemo widget)</primary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KStdActionsDemo widget</secondary></indexterm>
17:   /**
18:    * Create some of the standard actions and connect them to
19:    *  slots.
20:    **/
21:   KStdActionsDemo (const char *name=0);
22: 
23:  public slots:
24:   void slotOpen ();
25:   void slotNew ();
26:   void slotSave ();
27:   void slotRecent (const KURL &amp;);
28:   void slotCut ();
29:   void slotCopy ();
30:   void slotPaste ();
31: 
32:  protected:
33:   KRecentFilesAction *recent;
34: };
35: 
36: #endif<indexterm><primary>KStdActionsDemo widget</primary><secondary>kstdactionsdemo.h class definition</secondary></indexterm><indexterm><primary>standard actions</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.h class definition</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary><tertiary>KStdActionsDemo widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KStdActionsDemo widget</secondary><tertiary>kstdactionsdemo.h class definition</tertiary></indexterm><indexterm><primary>kstdactionsdemo.h file (KStdActionsDemo widget)</primary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KStdActionsDemo widget</secondary></indexterm>
</programlisting>
</example>
<para>The following <literal>main()</literal> function does a bit more than create and display the <literal>KStdActionsDemo</literal> widget. It also shows another standard piece of a KDE <literal>main()</literal> function, the specification of application information via the class <literal>KAboutData</literal>. The following information is passed to the <literal>KAboutData</literal> constructor:<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>standard actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary></indexterm></para>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>Application name&mdash;<quote>kstdactionsdemo</quote></para></listitem>
<listitem><para>Application's <quote>given name</quote>&mdash;<quote>KstdActionsDemo</quote></para></listitem>
<listitem><para>Version string&mdash;<quote>1.0</quote></para></listitem>
<listitem><para>Short description&mdash;Demonstrate standard actions</para></listitem>
<listitem><para>License identifier&mdash;<literal>KAboutData::License_GPL</literal> (LGPL, BSD, and Artistic)</para></listitem>
<listitem><para>Copyright string&mdash; <quote>&copy;2000, Joe Developer</quote> (you should use this format exactly, substituing the appropriate information)</para></listitem>
<listitem><para>Long description&mdash;(see <link linkend="ch05list03">Listing 5.3</link> for this string)</para></listitem>
<listitem><para>Application home page</para></listitem></itemizedlist>
<para>(The macro <literal>I18N_NOOP()</literal> marks the enclosed strings for translation. Translation is discussed in detail in <link linkend="ch07">Chapter 7</link>, <quote>Further KDE Compliance.</quote> I have mentioned the <literal>I18N_NOOP()</literal> macro here to emphasize the importance of its use when specifying application information.)</para>
<para>The method <literal>addAuthor()</literal> <indexterm><primary>addAuthor() function</primary></indexterm><indexterm><primary>functions</primary><secondary>addAuthor()</secondary></indexterm>adds some information about the application's author. You may&mdash;and should&mdash;call this method multiple times if the application has multiple authors.</para>
<para>The information passed to <literal>KAboutData</literal> is used to create a standard About box that can be activated by choosing Help, About (application name) from the standard Help menu, so your long description should be informative.<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>standard actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary></indexterm></para>
<note role="normal">
<para>Be sure to tell the user what the application does and/or what type of data it operates on in the long description.</para>
</note>
<para><literal>KAboutData</literal> is also used by the standard bug report submission dialog that appears in the standard Help menu. The application you create here, KStdActionsDemo, has the standard Help menu (it is created by <literal>createGUI()</literal>).</para>
<example role="codelisting" label="5.3" id="ch05list03">
<title>main.cpp: A <literal>main()</literal> Function Suitable for Testing <literal>KStdActionsDemo<indexterm><primary>KStdActionsDemo widget</primary><secondary>,main() function</secondary></indexterm><indexterm><primary>standard actions</primary><secondary>KStdActionsDemo widget</secondary><tertiary>main() function</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary><tertiary>KStdActionsDemo widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KStdActionsDemo widget</secondary><tertiary>main() function</tertiary></indexterm><indexterm><primary>mian() function</primary><secondary>KStdActionsDemo widget</secondary></indexterm><indexterm><primary>functions</primary><secondary>main()</secondary><tertiary>KStdActionsDemo widget</tertiary></indexterm></literal>
</title>
<programlisting linenumbering="numbered">
 1: #include &lt;kaboutdata.h>
 2: #include &lt;kcmdlineargs.h>
 3: #include &lt;klocale.h>
 4: #include &lt;kapp.h>
 5: 
 6: #include "kstdactionsdemo.h"
 7: 
 8: int
 9: main (int argc, char *argv[])
10: {
11:    
12:   KAboutData aboutData( "kstdactionsdemo",
13:                         I18N_NOOP("KstdActionsDemo"), "1.0", 
14:                         I18N_NOOP("Demonstrate standard actions"),
15:                         KAboutData::License_GPL,
16:                         "(c) 2000, Joe Developer",
17:                         I18N_NOOP("Demonstrate how to use standard"
18:                         " actions on the menubar and toolbar."),
19:                         "http://www.sleepyprogrammers.com/~jdevel/kstdact/" );
20: 
21:   aboutData.addAuthor("Joe Developer", 0, "jdevel@sleepprogrammers.com",
22:                       "http://www.sleepyprogrammers.com/~jdevel/");
23: 
24:   KCmdLineArgs::init( argc, argv, &amp;aboutData );
25: 
26:   KApplication kapplication;
27:   KStdActionsDemo *kstdactionsdemo = new KStdActionsDemo;
28:   kapplication->setMainWidget(kstdactionsdemo);
29:   kstdactionsdemo->show();
30:   return kapplication.exec();
31: }<indexterm><primary>KStdActionsDemo widget</primary><secondary>,main() function</secondary></indexterm><indexterm><primary>standard actions</primary><secondary>KStdActionsDemo widget</secondary><tertiary>main() function</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary><tertiary>KStdActionsDemo widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KStdActionsDemo widget</secondary><tertiary>main() function</tertiary></indexterm><indexterm><primary>mian() function</primary><secondary>KStdActionsDemo widget</secondary></indexterm><indexterm><primary>functions</primary><secondary>main()</secondary><tertiary>KStdActionsDemo widget</tertiary></indexterm>
</programlisting>
</example>
<para>See <link linkend="ch05fig02">Figure 5.2</link> for a screen shot of <literal>KStdActionsDemo</literal>.<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>standard actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>standard actions</secondary></indexterm></para>
<figure label="5.2" id="ch05fig02">
<title>Screen shot of <literal>KStdActionsDemo</literal>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig02.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
</section>
<section id="ch05lev3sec4">
<title>Custom Actions</title>
<para>The <indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm>standard actions certainly won't be all the actions you'll need for all your applications; in this section you'll see how to create custom actions and incorporate them into your application's UI.</para>
<para>Listings 5.4&ndash;5.7 present <literal>KCustomActions</literal>, a top-level widget that demonstrates how to use a few custom actions.</para>
<example role="codelisting" label="5.4" id="ch05list04">
<title>kcustomactions.h: Class Declaration for <literal>KCustomActions<indexterm><primary>KCustomActions widget</primary><secondary>kcustomactions.h class declaration</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.h class declaration</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.h class declaration</tertiary></indexterm><indexterm><primary>declaring widget classes</primary><secondary>KCustomActions widget</secondary></indexterm><indexterm><primary>kcustomactions.h file (KCustomActions widget)</primary></indexterm></literal></title>
<programlisting linenumbering="numbered">
 1: #ifndef __KCUSTOMACTIONS_H__
 2: #define __KCUSTOMACTIONS_H__
 3: 
 4: #include &lt;ktmainwindow.h>
 5: 
 6: class KToggleAction;
 7: class KRadioAction;
 8: 
 9: /**
10:  * KCustomActions
11:  * Create custom actions for the menubar and toolbars.
12:  **/
13: class KCustomActions : public KTMainWindow
14: {
15:   Q_OBJECT
16:  public:
17:   /**
18:    * Construct the menubar and toolbars and fill
19:    *  them with interesting things.
20:    **/
21:   KCustomActions (const char *name=0);
22: 
23:  public slots:
24:   void slotMyEntry();
25:   void slotLoadPage (const QString &amp;url);
26:   void slotRectangle ();
27:   void slotPencil ();
28: 
29: 
30:  protected:
31:   KToggleAction *checkable;
32:   KRadioAction *rectangle, *pencil;
33: };
34: 
35: #endif<indexterm><primary>KCustomActions widget</primary><secondary>kcustomactions.h class declaration</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.h class declaration</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.h class declaration</tertiary></indexterm><indexterm><primary>declaring widget classes</primary><secondary>KCustomActions widget</secondary></indexterm><indexterm><primary>kcustomactions.h file (KCustomActions widget)</primary></indexterm>
</programlisting>
</example>
<para>As in <literal>KStdActionsDemo</literal>, you declare a constructor, some slots to respond to the actions, and classwide pointers (lines 31 and 32) to some actions. Here you use two new action types: <literal>KToggleAction</literal> and <literal>KRadioAction</literal>. They are discussed following <link linkend="ch05list05">Listing 5.5</link>.<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm></para>
<example role="codelisting" label="5.5" id="ch05list05">
<title>kcustomactions.cpp: Class Definition for <literal>KCustomActions<indexterm><primary>KCustomActions widget</primary><secondary>kcustomactions.cpp class definition</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.cpp class definition</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.cpp class definition</tertiary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KCustomActions widget</secondary></indexterm><indexterm><primary>kcustomactions.cpp file (KCustomActions widget)</primary></indexterm></literal></title>
<programlisting linenumbering="numbered">
  1: #include &lt;stdio.h>
  2: 
  3: #include &lt;qpopupmenu.h>
  4: #include &lt;qkeycode.h>
  5: 
  6: #include &lt;kmenubar.h>
  7: #include &lt;ktoolbar.h>
  8: #include &lt;kiconloader.h>
  9: #include &lt;kaction.h>
 10: #include &lt;kstdaction.h>
 11: #include &lt;kapp.h>
 12: 
 13: #include "kcustomactions.moc"
 14: 
 15: //Widget IDs for URLToolBar
 16: const int URLLabel =0,
 17:           URLCombo=1;
 18: KCustomActions::KCustomActions (const char *name) : KTMainWindow (name)
 19: {
 20:   new KAction ("Specia&amp;l", CTRL+Key_L, 0L, 0L, 
 21:                actionCollection(), "special");
 22:   KStdAction::quit (kapp, SLOT(closeAllWindows()), actionCollection());
 23: 
 24:   KStdAction::home (0L, 0L, actionCollection());
 25: 
 26:   new KAction ("My &amp;Entry", 0,
 27:                this, SLOT (slotMyEntry()), actionCollection(),
 28:                "my_entry");<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm><indexterm><primary>KCustomActions widget</primary><secondary>kcustomactions.cpp class definition</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.cpp class definition</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.cpp class definition</tertiary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KCustomActions widget</secondary></indexterm><indexterm><primary>kcustomactions.cpp file (KCustomActions widget)</primary></indexterm>
 29:  
 30:   checkable = new KToggleAction ("My Checkable Entry", 0,
 31:                                  actionCollection(), "my_checkable_entry");
 32:  
 33:   KAction *grayentry =
 34:     new KAction ( "My &amp;Gray Entry", "flag",
 35:                   0, 0L, 0L, actionCollection(),
 36:                   "my_gray_entry" );
 37:   grayentry->setEnabled (false);
 38: 
 39:   //Create toolbox.
 40: 
 41:   rectangle =
 42:     new KRadioAction ("Rectangle select", 
 43:                       "rectangle_select", 0,
 44:                       this, SLOT (slotRectangle()),
 45:                       actionCollection(), "rectangle");
 46:    rectangle->setExclusiveGroup ("tools");
 47: 
 48:   pencil =
 49:     new KRadioAction ("Pencil", 
 50:                       "pencil", 0,
 51:                       this, SLOT (slotPencil()),
 52:                       actionCollection(), "pencil");
 53:   pencil->setExclusiveGroup ("tools");
 54: 
 55:   rectangle->setChecked(true);
 56: 
 57:   createGUI();
 58:   toolBar("toolBoxToolBar")->setBarPos (KToolBar::Left);
 59: 
 60: 
 61:   //Create second toolbar.
 62: 
 63:   QLabel *label = new QLabel ("URL:" toolBar("URL:,ToolBar");
 64: <indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm><indexterm><primary>KCustomActions widget</primary><secondary>kcustomactions.cpp class definition</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.cpp class definition</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.cpp class definition</tertiary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KCustomActions widget</secondary></indexterm><indexterm><primary>kcustomactions.cpp file (KCustomActions widget)</primary></indexterm>
 65:   toolBar("URLToolBar")->
 66:     insertWidget (URLLabel, label->sizeHint().width(), label);
 67: 
 68:   int indexcombo =
 69:     toolBar("URLToolBar")->
 70:     insertCombo (QString("http://www.kde.org"),
 71:                  URLCombo, true,
 72:                  SIGNAL (activated (const QString &amp;)),
 73:                  this, SLOT (slotLoadPage (const QString &amp;)));
 74: 
 75:   toolBar("URLToolBar")->setItemAutoSized (indexcombo);
 76: 
 77: 
 78: 
 79:   QLabel *dummyclientarea = new QLabel (this);
 80:   dummyclientarea->setBackgroundColor (Qt::white);
 81:   setView (dummyclientarea);
 82: 
 83: }
 84: 
 85: void
 86: KCustomActions::slotMyEntry()
 87: {
 88:   printf ("Custom->My Entry\n");
 89: }
 90: 
 91: void
 92: KCustomActions::slotLoadPage(const QString &amp;url)
 93: {
 94:   printf ("Load page: [%s]\n", (const char *)url);
 95: }
 96: 
 97: void
 98: KCustomActions::slotRectangle ()
 99: {
100:   if (rectangle->isChecked())
101:     printf ("Use rectangle select tool\n");
102: }
103: 
104: void
105: KCustomActions::slotPencil ()
106: {
107:   if (pencil->isChecked())
108:     printf ("Use pencil select tool\n");
109: }<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm><indexterm><primary>KCustomActions widget</primary><secondary>kcustomactions.cpp class definition</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.cpp class definition</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.cpp class definition</tertiary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KCustomActions widget</secondary></indexterm><indexterm><primary>kcustomactions.cpp file (KCustomActions widget)</primary></indexterm>
</programlisting>
</example>
<para>You create three menus in <literal>KCustomActions</literal>: the File menu, the Go menu (another standard menu), and a menu called Custom. Because a customized menu contains a set of application-specific functions, you need to create each of the corresponding actions <quote>by hand</quote> using <literal>KAction</literal>. You also create three differently styled toolbars.</para>
<para>The File and Go menus have predefined, KDE-wide layouts, so the actions on these menus will be put in their proper order in the menus and on the main toolbar, but you can also add application-specific entries to these menus. This is demonstrated with the action called Special created on lines 20 and 21. In the statement on lines 20 and 21, you describe the action with the <literal>KAction</literal> constructor, but you don't specify on which menu this action belongs.</para>
<para>The layout of nonstandard actions is specified in a separate file called kcustomactionsui.rc. This file is specified as the argument to and read by the <literal>createGUI()</literal> method (line 57). The method <literal>createGUI()</literal> merges this file, an XML file (given in <link linkend="ch05list06">Listing 5.6</link>) with a global XML layout file, thereby merging your custom action layout with the global one to create a single layout for your application.<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm></para>
<example role="codelisting" label="5.6" id="ch05list06">
<title>kcustomui.rc: XML File Describing the Layout of the <literal>KCustomActions</literal> UI<indexterm><primary>KCustomActions widget</primary><secondary>kcustomui.rcp class file</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomui.rc file</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomui.rc file</tertiary></indexterm><indexterm><primary>kcustomui.rc file (KCustomActions widget)</primary></indexterm></title>
<programlisting linenumbering="numbered">
 1: &lt;!DOCTYPE kpartgui>
 2: &lt;kpartgui name=kmenubardemo>
 3: &lt;MenuBar>
 4:   &lt;Menu name=file>&lt;text>&amp;File&lt;/text>
 5:     &lt;Action name=special/>
 6:   &lt;/Menu>
 7:   &lt;Menu name=custom>&lt;text>&amp;Custom&lt;/text>
 8:     &lt;Action name=my_entry/>
 9:     &lt;Action name=my_checkable_entry/>
10:     &lt;Action name=my_gray_entry/>
11:   &lt;/Menu>
12: &lt;/MenuBar>
13: &lt;ToolBar name=mainToolBar>
14:   &lt;Action name=my_gray_entry/>
15: &lt;/ToolBar>
16: &lt;ToolBar name=toolBoxToolBar>
17:   &lt;Action name=rectangle/>
18:   &lt;Action name=pencil/>
19: &lt;/ToolBar>
20: &lt;ToolBar name=URLToolBar/>
21: &lt;/kpartgui><indexterm><primary>KCustomActions widget</primary><secondary>kcustomui.rcp class file</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomui.rc file</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomui.rc file</tertiary></indexterm><indexterm><primary>kcustomui.rc file (KCustomActions widget)</primary></indexterm>
</programlisting>
</example>
<para>The file in <link linkend="ch05list06">Listing 5.6</link> is used to specify where actions should be placed on the menus and toolbars, using a predefined set of XML tags.</para>
<para>XML <indexterm><primary>XML (Extensible Markup Language)</primary></indexterm><indexterm><primary>Extensible Markup Language</primary><see>XML</see></indexterm>stands for eXtensible Markup Language, a subset of SGML created to simplify the storage and transmission across platforms of structured data. The words in angle brackets (such as <literal>&lt;MenuBar></literal>) are called tags, and they usually come in pairs, such as: <literal>&lt;MenuBar>&hellip;&lt;/MenuBar></literal>. The pair serves to delimit the beginning and the end of a section. In the case of the <literal>&lt;MenuBar>&hellip;&lt;/MenuBar></literal> tags, the information between the tags describes the layout of the menubar.<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm> <indexterm><primary>XML (Extensible Markup Language)</primary></indexterm></para>
<note role="normal">
<para>XML files<indexterm><primary>XML (Extensible Markup Language)</primary></indexterm> may remind you of HTML. That's because they both are types of SGML, the Standard Generalized Markup Language. All SGML files use tags in angle brackets for markup and have a similar markup format.</para>
</note>
<para>Some of the tags have <emphasis>attributes</emphasis><indexterm><primary>attributes</primary></indexterm>, which are of the form</para>
<informalexample>
<programlisting linenumbering="unnumbered">
<emphasis>attributename</emphasis>="<emphasis>attributevalue</emphasis>"
</programlisting>
</informalexample>
<para>For example, <literal>name=custom</literal> is an attribute of the <literal>&lt;Menu></literal> tag used in <link linkend="ch05list06">Listing 5.6</link>.</para>
<para>Finally, some tags do not come in pairs because no more information is needed to describe them than what is given in their tag name and/or tag attributes. Such a tag in <link linkend="ch05list06">Listing 5.6</link> is <literal>&lt;Action name="</literal><emphasis><literal>actionname</literal></emphasis><literal>"/></literal>. <link linkend="ch05table01">Table 5.1</link> shows a list of the tags that are available for use in creating these KDE GUI XML files. (The file type is specified by the tag <literal>&lt;!DOCTYPE kpartgui></literal>. The name comes from the fact that these documents originated in the KParts component architecture. (See <link linkend="ch12">Chapter 12, <quote>Creating and Using Components (KParts)</quote></link> for more information on KParts).<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm><indexterm><primary>XML (Extensible Markup Language)</primary><secondary>tags</secondary></indexterm><indexterm><primary>tags</primary><secondary>XML (Extensible Markup Language)</secondary></indexterm></para>
<table id="ch05table01" frame="topbot" label="5.1">
<title>XML Tags Used by kpartgui Files</title>
<tgroup cols="2" align="left" colsep="0" rowsep="0">
<colspec colname="c1"/>
<colspec colname="c2"/>
<thead valign="top">
<row rowsep="1">
<entry><emphasis>Tag/Tag Pair</emphasis></entry>
<entry><emphasis>Use/Content</emphasis></entry>
</row>
</thead>
<tbody>
<row>
<entry><literal>&lt;MenuBar>&lt;/MenuBar></literal><indexterm><primary>MenuBar tag (XML)</primary></indexterm></entry>
<entry>Description of the menubar</entry>
</row>
<row>
<entry><literal>&lt;Menu name=name>&lt;/Menu></literal><indexterm><primary>Menu tag (XML)</primary></indexterm></entry>
<entry>Description of a menu named <emphasis><literal>name</literal></emphasis> (<emphasis><literal>name</literal></emphasis> is not displayed)</entry></row>
<row>
<entry><literal>&lt;text>&lt;/text></literal><indexterm><primary>text tag (XML)</primary></indexterm></entry>
<entry>Menu title to display in the menubar</entry>
</row>
<row>
<entry><literal>&lt;ToolBar name="</literal><emphasis><literal>name</literal></emphasis><literal>">&lt;/ToolBar></literal><indexterm><primary>ToolBar tag (XML)</primary></indexterm></entry>
<entry>Description of the toolbar named <emphasis><literal>name</literal></emphasis> (<emphasis><literal>name</literal></emphasis> is not displayed)</entry>
</row>
<row>
<entry><literal>&lt;Action name="</literal><emphasis><literal>name</literal></emphasis><literal>"/></literal><indexterm><primary>Action tag (XML)</primary></indexterm></entry>
<entry>Put an action on a menu or toolbar. This tag falls between <literal>&lt;Menu>&lt;/Menu></literal>tags or <literal>&lt;ToolBar>&lt;/ToolBar></literal>tags. The string <emphasis><literal>name</literal></emphasis> is the same string that is passed as the last argument to the KAction constructor.<indexterm><primary>XML (Extensible Markup Language)</primary><secondary>tags</secondary></indexterm><indexterm><primary>tags</primary><secondary>XML (Extensible Markup Language)</secondary></indexterm></entry></row>
</tbody>
</tgroup>
</table>
<para>Now back to <literal>KCustomActions</literal>. The action called <literal>"special"</literal> is described on line 5 of <link linkend="ch05list06">Listing 5.6</link> with</para>
<informalexample>
<programlisting linenumbering="unnumbered">
&lt;Action name="special"/>
</programlisting>
</informalexample>
<para>and created on lines 21 and 22 of <link linkend="ch05list05">Listing 5.5</link>. Notice that the string <literal>special</literal> is used in both places. The method <literal>createGUI()</literal> uses this string to match actions to their corresponding XML tags. This action will be inserted in the File menu in the proper place according to the KDE UI standard because you have placed the action tag inside the tags <literal>&lt;Menu name="file">&lt;/Menu></literal>. The <literal>name</literal> identifier used here is defined in the global XML KDE UI description file. You should take a look at this file to see which menus are available and what names they are given. The file is $KDEDIR/share/config/ui/ui_standards.rc.</para>
<para>The next menu, called Custom, contains three entries. It is shown in <link linkend="ch05fig03">Figure 5.3</link>. The first entry, called My Entry, is created in lines 27&ndash;29 of <link linkend="ch05list05">Listing 5.5</link>.<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm></para>
<figure label="5.3" id="ch05fig03">
<title>The Custom menu shows checkable and disabled menu entries.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig03.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>The second entry is called a checkable entry because it may or may not have a check mark placed next to it. Checkable menu entries are created with <literal>KToggleAction</literal> (see lines 31 and 32). The user may toggle a frequently changed option by selecting the corresponding entry from a menu. The check mark indicates whether the option is on or off. You do not specify a slot in the call to the <literal>KToggleAction</literal> constructor because there is no event to which to respond. When you need to know whether the option is on or off, you can check the value returned by <literal>checkable->isChecked()</literal>.</para>
<para>The last entry in the Custom menu is a disabled entry (see lines 34&ndash;48). The entry is marked as disabled by calling <literal>setEnabled (false)</literal>, as shown on line 38. Using disabled entries lets the user see all the functions that are included in the application, even if they aren't currently appropriate or usable. For example, a commonly disabled entry in the File menu is Save. This entry would be disabled (and displayed in a different style that would indicate to the user that it is disabled) until a document is actually opened (perhaps even until the document is changed).<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm></para>
<note role="normal">
<para>Historically, disabled menu entries were shown in gray type instead of black. Today, displays have 24-bit color and GUIs are highly configurable and themeable; therefore, disabled entries, although still visually distinguishable from enabled entries, are often styled in a way that is not simply gray (for example, KDE uses a semi-transparent effect by default).</para></note>
<para>Lines 41&ndash;58 create a <quote>toolbox</quote> toolbar. This toolbar contains a set of radio buttons representing different tools that can be used to edit the document. You have created a rectangle-select tool button and a pencil tool button. The nature of radio buttons is that only one button can be pressed down at a time (that is, the user can use only one tool at a time).</para>
<para>You can create radio buttons with <literal>KRadioAction</literal>. Each time you create one of these buttons, you insert it into a group with the method <literal>setExclusiveGroup</literal> <literal>(</literal><emphasis><literal>"name"</literal></emphasis><literal>)</literal> <indexterm><primary>setExclusiveGroup() function</primary></indexterm><indexterm><primary>functions</primary><secondary>setExclusiveGroup()</secondary></indexterm>(see lines 46 and 53 of <link linkend="ch05list05">Listing 5.5</link>). You can use any <emphasis><literal>name</literal></emphasis> you like, just be sure to use the same <emphasis><literal>name</literal></emphasis> for every button in a single radio-button group.</para>
<para>These<indexterm><primary>KCustomActions widget</primary><secondary>toolbars</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>toolbars</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>toolbars</primary><secondary>KCustomActions widget</secondary></indexterm> toolbox buttons are placed on a separate toolbar that is named <literal>toolBoxToolBar</literal> on line 13 of <link linkend="ch05list06">Listing 5.6</link>.<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm></para>
<note role="tip">
<para>You can lay out multiple toolbars with your XML KDE UI file and <literal>createGUI()</literal>.</para>
</note>
<para>The toolbox is moved to the left side of the window (a common place to find a toolbox) on line 51 of <link linkend="ch05list05">Listing 5.5</link>. When you need to access the toolbar widget directly, as done here, use the <literal>KTMainWindow</literal> method <literal>toolBar (</literal><emphasis><literal>name</literal></emphasis><literal>)</literal>, which returns a pointer to the toolbar named <emphasis><literal>name</literal></emphasis>. The identifier <emphasis><literal>name</literal></emphasis> is the same one used to declare the toolbar in the XML GUI file; therefore, on line 16 of <link linkend="ch05list06">Listing 5.6</link>, you see the toolbox toolbar declared with</para>
<informalexample>
<programlisting linenumbering="unnumbered">
&lt;ToolBar name="toolBoxToolBar">
</programlisting>
</informalexample>
<para>and on line 58 of <link linkend="ch05list05">Listing 5.5</link>, the same toolbar is referenced with</para>
<informalexample>
<programlisting linenumbering="unnumbered">
toolBar("toolBoxToolBar")
</programlisting>
</informalexample>
<para>The final toolbar, the URL toolbar, holds a text label and a combobox. <link linkend="ch05fig04">Figure 5.4</link> shows all the toolbars. Because text display and text entry aren't really actions, there are no corresponding <literal>KAction</literal> subclasses. So how do you make the toolbar?</para>
<figure label="5.4" id="ch05fig04">
<title>Three types of toolbars are created by KCustomActions.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig04.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>One answer is to create your own subclasses of <literal>KAction</literal>&mdash;perhaps <literal>KTextLabelAction</literal> and <literal>KComboAction</literal>&mdash;and create the toolbar with an XML UI file and <literal>createGUI()</literal>. This method, although a little extra work, provides your application with more configurability.<indexterm><primary>KCustomActions widget</primary><secondary>toolbars</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>toolbars</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>toolbars</primary><secondary>KCustomActions widget</secondary></indexterm></para>
<para>The simpler method is to create them by directly accessing the <literal>KToolBar</literal> widget (the now old-fashioned way). After setting up the UI with a call to <literal>createGUI()</literal>, add the extra URL toolbar. This toolbar has <emphasis>id=2</emphasis> and the corresponding <literal>KToolBar</literal> widget is created with the first call to the method <literal>toolBar()</literal> on line 52 of <link linkend="ch05list05">Listing 5.5</link>. Lines 55&ndash;75 insert two widgets, the static text label (<literal>a QLabel</literal>), and the combobox into the toolbar. See the <literal>KToolBar</literal> documentation for details of these methods.<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm></para>
<example role="codelisting" label="5.7" id="ch05list07">
<title>kcustomactions.h: The Class Definition for <literal>KCustomActions<indexterm><primary>KCustomActions widget</primary><secondary>kcustomactions.h class definition</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.h class definition</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.h class definition</tertiary></indexterm><indexterm><primary>kcustomactions.h file (KCustomActions widget)</primary></indexterm></literal>
</title>
<programlisting linenumbering="numbered">
 1: #ifndef __KCUSTOMACTIONS_H__
 2: #define __KCUSTOMACTIONS_H__
 3: 
 4: #include &lt;ktmainwindow.h>
 5: 
 6: class KToggleAction;
 7: class KRadioAction;
 8: 
 9: /**
10:  * KcustomActions
11:  * Create custom actions for the menubar and toolbars.
12:  **/
13: class KCustomActions : public KTMainWindow
14: {
15:   Q_OBJECT
16:  public:
17:   /**
18:    * Construct the menubar and toolbars and fill
19:    *  them with interesting things.
20:    **/
21:   KCustomActions (const char *name=0);
22: 
23:  public slots:
24:   void slotMyEntry();
25:   void slotLoadPage (const QString &amp;url);
26:   void slotRectangle ();
27:   void slotPencil ();
28: 
29: 
30:  protected:
31:   KToggleAction *checkable;
32:   KRadioAction *rectangle, *pencil;
33: };
34: 
35: #endif<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm><indexterm><primary>KCustomActions widget</primary><secondary>kcustomactions.h class definition</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.h class definition</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KCustomActions widget</secondary><tertiary>kcustomactions.h class definition</tertiary></indexterm><indexterm><primary>kcustomactions.h file (KCustomActions widget)</primary></indexterm>
</programlisting>
</example>
<para><link linkend="ch05list07">Listing 5.7</link> declares the constructor, slots to process actions, and variables to keep track of actions (lines 31 and 32). For example, in <literal>slotRectangle()</literal> on line 100 of <link linkend="ch05list05">Listing 5.5</link>, refer to the object <literal>rectangle</literal> to see whether the slot was called in response to the user choosing this tool or deselecting it by choosing another tool.</para>
<para>The following <literal>main()</literal> function can be used to try out <literal>KCustomActions</literal>. (For simplicity, you have not created an instance of <literal>KAboutData</literal>. However, you always should for any application you intend to distribute.)</para>
<example role="codelisting" label="5.8" id="ch05list08">
<title>main.cpp: A <literal>main()</literal> Function Suitable for Testing <literal>KCustomActions<indexterm><primary>KCustomActions widget</primary><secondary>main() function</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>main() function</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KCustomActions widget</secondary><tertiary>main() function</tertiary></indexterm><indexterm><primary>main() function</primary><secondary>KCustomActions widget</secondary></indexterm><indexterm><primary>functions</primary><secondary>main()</secondary><tertiary>KCustomActions widget</tertiary></indexterm></literal></title>
<programlisting linenumbering="numbered">
 1: #include &lt;kapp.h>
 2: 
 3: #include "kcustomactions.h"
 4: 
 5: int
 6: main (int argc, char *argv[])
 7: {
 8:   KApplication kapplication (argc, argv, "kcustomactions");
 9:   KCustomActions  *kcustomactions = new KCustomActions;
10: 
11:   kcustomactions->show();
12:   return kapplication.exec();
13: }<indexterm><primary>document-centric user interface</primary><secondary>actions</secondary><tertiary>custom actions</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary></indexterm><indexterm><primary>KCustomActions widget</primary><secondary>main() function</secondary></indexterm><indexterm><primary>custom actions</primary><secondary>KCustomActions widget</secondary><tertiary>main() function</tertiary></indexterm><indexterm><primary>actions</primary><secondary>custom actions</secondary><tertiary>KCustomActions widget</tertiary></indexterm><indexterm><primary>listings</primary><secondary>KCustomActions widget</secondary><tertiary>main() function</tertiary></indexterm><indexterm><primary>main() function</primary><secondary>KCustomActions widget</secondary></indexterm><indexterm><primary>functions</primary><secondary>main()</secondary><tertiary>KCustomActions widget</tertiary></indexterm>
</programlisting>
</example>
</section>
</section>
<section id="ch05lev2sec3">
<title>The Statusbar</title>
<para>The<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>status bars</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>status bars</primary></indexterm> statusbar gives the user information about what the application is doing, what it has just completed, or what it might do if the user asks it to perform a task. Let's look at two examples: Konqueror and KWrite.</para>
<section id="ch05lev3sec5">
<title>Konqueror</title>
<para>Figure<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>status bars</secondary><tertiary>Konqueror status bar</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>status bars</primary><secondary>Konqueror status bar</secondary></indexterm><indexterm><primary>Konqueror status bar</primary></indexterm> 5.5 shows Konqueror just after pressing Enter in the line editor in the toolbar. The statusbar indicates what Konqueror is doing&mdash;loading the page at <quote>8.0 KB/s.</quote> It also says what it has done: loaded 94% of the page so far. When the loading is complete, the statusbar says Document: Done.</para>
<figure label="5.5" id="ch05fig05">
<title>konqueror has loaded 94% of the KDE home page and is loading at a rate of 8.0 KB/s.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig05.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>Also, when the user passes the mouse cursor over a link, the statusbar displays the full URL pointed to by the link. This shows to what page the link would bring the user.<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>status bars</secondary><tertiary>Konqueror status bar</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>status bars</primary><secondary>Konqueror status bar</secondary></indexterm><indexterm><primary>Konqueror status bar</primary></indexterm></para>
</section>
<section id="ch05lev3sec6">
<title>KWrite</title>
<para>The<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>status bars</secondary><tertiary>KWrite status bar</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>status bars</primary><secondary>KWrite status bar</secondary></indexterm><indexterm><primary>KWrite status bar</primary></indexterm> statusbar used in KWrite contains status indicators that are always present at the right side of the statusbar (see <link linkend="ch05fig01">Figure 5.1</link>). They tell the user whether the file needs saving (the asterisk indicates <quote>yes</quote>), whether the user is in insert or overwrite mode, and which line and column the cursor is on.</para>
<para>Now create your own example. Listings 5.9&ndash;5.11 present code for KStatusBarDemo, an application that demonstrates <literal>KStatusBar</literal>.</para>
<example role="codelisting" label="5.9" id="ch05list09">
<title>kstatusbardemo.h: Contains the Class Declaration for <literal>KStatusBarDemo</literal>, a Subclass of <literal>KTMainWindow<indexterm><primary>KStatusBarDemo widget</primary><secondary>kstatusbardemo.h class declaration</secondary></indexterm><indexterm><primary>listings</primary><secondary>KStatusBarDemo widget</secondary><tertiary>kstatusbardemo.h class declaration</tertiary></indexterm><indexterm><primary>kstatusbardemo.h file</primary><secondary>KStatusBarDemo widget</secondary></indexterm><indexterm><primary>declaring widget classes</primary><secondary>KStatusBarDemo widget</secondary></indexterm></literal></title>
<programlisting linenumbering="numbered">
 1: #ifndef __KSTATUSBARDEMO_H__
 2: #define __KSTATUSBARDEMO_H__
 3: 
 4: #include &lt;ktmainwindow.h>
 5: 
 6: class QPopupStatus;
 7: 
 8: /**
 9:  * KStatusBarDemo
10:  * Demonstrates functions of KStatusBar.
11:  **/
12: class KStatusBarDemo : public KTMainWindow
13: {
14:   Q_OBJECT
15:  public:
16:   /**
17:    * Construct the statusbar and fill it with interesting things.
18:    **/
19:   KStatusBarDemo (const char *name=0);
20: 
21:  public slots:
22:   void slotChangeMode ();
23: 
24:  protected:
25:   bool mode;
26: 
27: };
28: 
29: #endif<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>status bars</secondary><tertiary>KWrite status bar</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>status bars</primary><secondary>KWrite status bar</secondary></indexterm><indexterm><primary>KWrite status bar</primary></indexterm><indexterm><primary>KStatusBarDemo widget</primary><secondary>kstatusbardemo.h class declaration</secondary></indexterm><indexterm><primary>listings</primary><secondary>KStatusBarDemo widget</secondary><tertiary>kstatusbardemo.h class declaration</tertiary></indexterm><indexterm><primary>kstatusbardemo.h file</primary><secondary>KStatusBarDemo widget</secondary></indexterm><indexterm><primary>declaring widget classes</primary><secondary>KStatusBarDemo widget</secondary></indexterm>
</programlisting>
</example>
<example role="codelisting" label="5.10" id="ch05list10">
<title>main.cpp: Contains a <literal>main()</literal> Function That Creates and Executes <literal>kstatusbardemo</literal>, an Application Based on <literal>KStatusBarDemo<indexterm><primary>KStatusBarDemo widget</primary><secondary>main() function</secondary></indexterm><indexterm><primary>listings</primary><secondary>KStatusBarDemo widget</secondary><tertiary>main() function</tertiary></indexterm><indexterm><primary>main() function</primary><secondary>KStatusBarDemo widget</secondary></indexterm><indexterm><primary>functions</primary><secondary>main()</secondary><tertiary>KStatusBarDemo widget</tertiary></indexterm></literal></title>
<programlisting linenumbering="numbered">
 1: #include &lt;kapp.h>
 2: 
 3: #include "kstatusbardemo.h"
 4: 
 5: int
 6: main (int argc, char *argv[])
 7: {
 8:   KApplication kapplication  (argc, argv, "kstatusbardemo");
 9:   KStatusBarDemo *kstatusbardemo = new KStatusBarDemo;
10: 
11:   kstatusbardemo->show();
12:   return kapplication.exec();
13: }<indexterm><primary>KStatusBarDemo widget</primary><secondary>main() function</secondary></indexterm><indexterm><primary>listings</primary><secondary>KStatusBarDemo widget</secondary><tertiary>main() function</tertiary></indexterm><indexterm><primary>main() function</primary><secondary>KStatusBarDemo widget</secondary></indexterm><indexterm><primary>functions</primary><secondary>main()</secondary><tertiary>KStatusBarDemo widget</tertiary></indexterm>
</programlisting>
</example>
<para>The statusbar in this example is a simple one. There are two areas: one for a general status message and one for a mode indicator (similar to the INS/OVT indicator used by KWrite).</para>
<example role="codelisting" label="5.11" id="ch05list11">
<title>kstatusbardemo.cpp: Contains the Class Definition for <literal>KStatusBarDemo<indexterm><primary>KStatusBarDemo widget</primary><secondary>kstatusbardemo.cpp class definition</secondary></indexterm><indexterm><primary>listings</primary><secondary>KStatusBarDemo widget</secondary><tertiary>kstatusbardemo.cpp class definition</tertiary></indexterm><indexterm><primary>kstatusbardemo.cpp file</primary><secondary>KStatusBarDemo widget</secondary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KStatusBarDemo widget</secondary></indexterm></literal></title>
<programlisting linenumbering="numbered">
 1: #include &lt;kstatusbar.h>
 2: #include &lt;kapp.h><indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>status bars</secondary><tertiary>KWrite status bar</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>status bars</primary><secondary>KWrite status bar</secondary></indexterm><indexterm><primary>KWrite status bar</primary></indexterm>
 3: #include &lt;kstdaction.h>
 4: #include &lt;kaction.h>
 5: 
 6: #include "kstatusbardemo.moc"
 7: 
 8: //Status bar IDs.
 9: const int StatusBarMain = 0, StatusBarMode = 1;
10: 
11: KStatusBarDemo::KStatusBarDemo (const char *name) : KTMainWindow (name)
12: {
13:   KStdAction::quit (kapp, SLOT(closeAllWindows()), actionCollection());
14:   new KAction ("&amp;Change Mode", 0,
15:                this, SLOT (slotChangeMode()), actionCollection(),
16:                "change_mode");
17: 
18:   createGUI();
19: 
20:   statusBar()->
21:     insertItem ("Current status of application",
22:                 StatusBarMain, 1);
23:   statusBar()->insertItem (" Mode2 ", StatusBarMode);
24:   statusBar()->changeItem (" Mode1 ", StatusBarMode);
25:   mode=true;
26: 
27:   statusBar()->message ("Application is ready!", 2000);
28:   <indexterm><primary>KStatusBarDemo widget</primary><secondary>kstatusbardemo.cpp class definition</secondary></indexterm><indexterm><primary>listings</primary><secondary>KStatusBarDemo widget</secondary><tertiary>kstatusbardemo.cpp class definition</tertiary></indexterm><indexterm><primary>kstatusbardemo.cpp file</primary><secondary>KStatusBarDemo widget</secondary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KStatusBarDemo widget</secondary></indexterm>
29:   QLabel *dummyclientarea = new QLabel (this);
30:   dummyclientarea->setBackgroundColor (Qt::white);
31:   setView (dummyclientarea);
32: }
33: 
34: 
35: void
36: KStatusBarDemo::slotChangeMode ()
37: {
38:   
39:   if (mode)
40:     {
41:       statusBar()->changeItem (" Mode2 ", StatusBarMode);
42:       mode=false;
43:     }
44:   else
45:     {
46:       statusBar()->changeItem (" Mode1 ", StatusBarMode);
47:       mode=true;
48:     }
49: 
50: }<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>status bars</secondary><tertiary>KWrite status bar</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>status bars</primary><secondary>KWrite status bar</secondary></indexterm><indexterm><primary>KWrite status bar</primary></indexterm><indexterm><primary>KStatusBarDemo widget</primary><secondary>kstatusbardemo.cpp class definition</secondary></indexterm><indexterm><primary>listings</primary><secondary>KStatusBarDemo widget</secondary><tertiary>kstatusbardemo.cpp class definition</tertiary></indexterm><indexterm><primary>kstatusbardemo.cpp file</primary><secondary>KStatusBarDemo widget</secondary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KStatusBarDemo widget</secondary></indexterm>
</programlisting>
</example>
<para>In the <literal>KStatusBarDemo</literal> constructor, you first create a simple menubar containing an entry that will be used to change the mode displayed by the mode indicator. This is done in lines 14&ndash;16 of <link linkend="ch05list10">Listing 5.10</link>. See <link linkend="ch05fig06">Figure 5.6</link> for a screen shot. (The call to <literal>create GUI()</literal> on Line 18 looks for a file called kstatusbardemoui.rc in the directory $KDEDIR/share/kstatusbardemo. This file is available on the Web site.)</para>
<para>The mode indicator should take up a fixed amount of the statusbar and be positioned on the far right. The main message area should take up the rest of the statusbar. To partition the statusbar in this way, the mode indicator is created with a <emphasis><literal>stretch</literal></emphasis> value&mdash;the third argument to <literal>insertItem()</literal>&mdash;of 0, meaning to use as little space as possible (see line 23), and the main message area is created with a <emphasis><literal>stretch</literal></emphasis> value of 1.</para>
<figure label="5.6" id="ch05fig06">
<title><literal>KStatusBarDemo</literal> displays a message that disappears in two seconds.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig06.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>When the <emphasis><literal>stretch</literal></emphasis> value is nonzero, it tells <literal>KStatusBar</literal> to apportion the statusbar width among the various items in amounts proportional to <emphasis><literal>stretch</literal></emphasis>. When <emphasis><literal>stretch</literal></emphasis> is zero, <literal>KStatusBar</literal> always uses the width of the text field with which the item is created. On line 23 the mode indicator is created with the text <literal>Mode2</literal> because this is the longer of the two possible text strings that this field will hold. In general, when the item you are inserting has a <emphasis><literal>stretch</literal></emphasis> value of zero, you should always call <literal>insertItem()</literal> with the longest text string that field will hold to be certain that there will be enough space to fit any of the text strings.</para>
<para>The method <literal>KStatusBar::message()</literal> (see line 27) displays a temporary message on top of the entire statusbar. The message <quote>Application is ready!</quote> remains visible for two seconds. The second argument tells how long, in milliseconds, the message will be visible. After it disappears, the items placed in the statusbar with <literal>insertItem()</literal>appear.<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>status bars</secondary><tertiary>KWrite status bar</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>status bars</tertiary></indexterm><indexterm><primary>status bars</primary><secondary>KWrite status bar</secondary></indexterm><indexterm><primary>KWrite status bar</primary></indexterm></para>
</section>
</section>
<section id="ch05lev2sec4">
<title>Content Area</title>
<para>The <indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>content areas</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>content areas</primary></indexterm>look and function of the content area varies from application to application. The goal in designing the content area is to convey some of or all the information contained in the document (where <quote>document</quote> is somewhat loosely defined) to the user. If all the information cannot be displayed, the user should be able to browse or search for more. You may also want to allow the user to change (edit) the document. The style and complexity of this portion of the interface is strongly influenced by the character of the document being presented. But always remember to keep it simple.</para>
<para>Next, you see how some common applications implement their content areas.<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>content areas</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>content areas</primary></indexterm></para>
<section id="ch05lev3sec7">
<title>Text Editor</title>
<para>KWrite<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>content areas</secondary><tertiary>KWrite</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>content areas</primary><secondary>KWrite</secondary></indexterm><indexterm><primary>KWrite</primary><secondary>content area</secondary></indexterm><indexterm><primary>text editor</primary><see>KWrite</see></indexterm> deals with the most obvious of documents&mdash;a text file. It displays an empty (usually white) rectangle with a blinking text-insertion cursor (and I-shaped cursor). The user types and sees the typed characters appear as text in the window. The user can edit the text using standard keys (Arrows, Backspace, Delete, and so on). When the text becomes too large for the window, a horizontal or vertical scrollbar appears (whichever is necessary), giving access to the unseen portions of the document. KWrite can be seen in <link linkend="ch05fig01">Figure 5.1</link>.</para>
<para>KWrite uses a custom-made widget for displaying and editing its documents. KDE applications can use either the <literal>KEdit</literal> or <literal>QMultiLineEdit</literal> class for displaying and editing text in their client areas.<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>content areas</secondary><tertiary>KWrite</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>content areas</primary><secondary>KWrite</secondary></indexterm></para>
</section>
<section id="ch05lev3sec8">
<title>File Manager/Browser</title>
<para>Figure<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>content areas</secondary><tertiary>Konqueror</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>content areas</primary><secondary>Konqueror</secondary></indexterm><indexterm><primary>Konqueror</primary><secondary>content area</secondary></indexterm> 5.7 shows Konqueror displaying the contents of a directory, which is the <quote>document</quote> in this case. The user uses the scrollbars to see more of the directory. The user edits the "document" by adding, deleting, or renaming files or subdirectories.</para>
<figure label="5.7" id="ch05fig07">
<title>One document displayed and edited with <literal>konqueror</literal> is a directory.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig07.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>Of course, Konqueror also allows navigation between documents. If you click a folder, you see its contents. If you click an HTML file, you see it rendered. FTP sites can be displayed, navigated, and so on, just like local directories. If you click a PostScript file, you will see it rendered (in the same client area, but by a different application, KGhostView), and so on. Konqueror's view is so powerful because it displays information using components&mdash;embedded applications&mdash;so that, in principle, any URL can be handled within Konqueror if a component is available to display it.<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>content areas</secondary><tertiary>Konqueror</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>content areas</primary><secondary>Konqueror</secondary></indexterm><indexterm><primary>Konqueror</primary><secondary>content area</secondary></indexterm></para>
</section>
<section id="ch05lev3sec9">
<title>Personal Information Manager</title>
<para>The<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>content areas</secondary><tertiary>KOrganizer</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>content areas</primary><secondary>KOrganizer</secondary></indexterm><indexterm><primary>KOrganizer</primary><secondary>content area</secondary></indexterm> KOrganizer client area consists of three parts and is shown in <link linkend="ch05fig08">Figure 5.8</link>. On the left are the calendar and the To-Do list. On the right is the list of appointments for a given day. The calendar is used to navigate to different days and the navigator is placed to the left, as is customary. The To-Do list is presumably placed here to keep it always in view because it may contain more urgent information.</para>
<para>KOrganizer uses <literal>QSplitter</literal> <indexterm><primary>QSplitter</primary></indexterm>to divide the left side from the right side. The vertical frame drawn by <literal>QSplitter</literal> can be dragged from left to right to change the layout of the client area.<indexterm><primary>UI compliance</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>document-centric user interface</primary><secondary>content areas</secondary><tertiary>KOrganizer</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>document-centric interface</secondary><tertiary>content areas</tertiary></indexterm><indexterm><primary>content areas</primary><secondary>KOrganizer</secondary></indexterm><indexterm><primary>KOrganizer</primary><secondary>content area</secondary></indexterm></para>
<figure label="5.8" id="ch05fig08">
<title><literal>KOrganizer</literal> extends the idea of a document to an appointment book.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig08.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
</section>
</section>
</section>
<section id="ch05lev1sec2">
<title>Helping the User Use Your Application</title>
<para>Although<indexterm><primary>UI compliance</primary><secondary>help</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>help</secondary></indexterm><indexterm><primary>help</primary></indexterm> you want to try to design an interface that is intuitive, you must accept that sometimes a user just won't get it. For this reason there are ways to provide users with help in varying degrees of detail. The ToolTip provides a few words to nudge a user who is stuck, statusbar messages give a little more information, the <quote>What's This?</quote> gives a newer user a more useful explanation of a UI element, and Help files give full explanations of the program for users at all levels.<indexterm><primary>UI compliance</primary><secondary>help</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>help</secondary></indexterm><indexterm><primary>help</primary></indexterm></para>
<section id="ch05lev2sec5">
<title>ToolTips, What's This?, and More</title>
<para><link linkend="ch05list12">Listings<indexterm><primary>UI compliance</primary><secondary>help</secondary><tertiary>ToolTips</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>help</primary><secondary>ToolTips</secondary></indexterm><indexterm><primary>Tooltips</primary></indexterm> 5.12</link> and <link linkend="ch05list13">5.13</link> show how to provide the four types of help just discussed: ToolTips, statusbar messages, What's This? help, and a Help file. This program, <literal>KHelpers</literal>, creates an empty client area and provides the user with helpful information about it.</para>
<example role="codelisting" label="5.12" id="ch05list12">
<title>khelpers.h: Contains a Class Declaration for <literal>KHelpers</literal>, a Subclass of <literal>KTMainWindow<indexterm><primary>KHelpers widget</primary><secondary>khelpers.h class declaration</secondary></indexterm><indexterm><primary>listings</primary><secondary>KHelpers widget</secondary><tertiary>khelpers.h class declaration</tertiary></indexterm><indexterm><primary>khelpers.h file (KHelpers widget)</primary></indexterm><indexterm><primary>declaring widget classes</primary><secondary>KHelpers</secondary></indexterm></literal></title>
<programlisting linenumbering="numbered">
 1: #ifndef __KHELPERS_H__
 2: #define __KHELPERS_H__
 3: 
 4: #include &lt;ktmainwindow.h>
 5: 
 6: class QPopupMenu;
 7: 
 8: /**
 9:  * KHelpers
10:  * Demonstrates functions of KMenuBar and QPopupMenu.
11:  **/
12: class KHelpers : public KTMainWindow
13: {
14:   Q_OBJECT
15:  public:
16:   /**
17:    * Construct the menubar and fill it with interesting things.
18:    **/
19:   KHelpers (const char *name=0);
20: 
21:  public slots:
22:   /**
23:    * Provide help on menu entries in the statusbar.
24:    **/
25:   void slotMenuEntryHelp (int);
26:
27:   /**
28:    * View a specific HTML Help file.
29:    **/
30:   void slotSpecialHelp();
31: 
32:  protected:
33:   int idfilenew, idfileopen, idfilesave, idfilequit;
34: };
35: 
36: #endif<indexterm><primary>KHelpers widget</primary><secondary>khelpers.h class declaration</secondary></indexterm><indexterm><primary>listings</primary><secondary>KHelpers widget</secondary><tertiary>khelpers.h class declaration</tertiary></indexterm><indexterm><primary>khelpers.h file (KHelpers widget)</primary></indexterm><indexterm><primary>declaring widget classes</primary><secondary>KHelpers</secondary></indexterm>
</programlisting>
</example>
<para><literal>KHelpers</literal> is derived from <literal>KTMainWindow</literal>, which manages the menu and client area. The client area is just an empty <literal>QLabel</literal>, created on line 52 in <link linkend="ch05list13">Listing 5.13</link>.</para>
<example role="codelisting" label="5.13" id="ch05list13">
<title>khelpers.cpp: Contains a Class Definition for <literal>KHelpers<indexterm><primary>KHelpers widget</primary><secondary>khelpers.cpp class definition</secondary></indexterm><indexterm><primary>listings</primary><secondary>KHelpers widget</secondary><tertiary>khelpers.cpp class definition</tertiary></indexterm><indexterm><primary>khelpers.cpp file (KHelpers widget)</primary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KHelpers</secondary></indexterm></literal></title>
<programlisting linenumbering="numbered">
 1: #include &lt;stdio.h>
 2: <indexterm><primary>UI compliance</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>help</primary><secondary>Tooltips</secondary></indexterm><indexterm><primary>Tooltips</primary></indexterm>
 3: #include &lt;qpopupmenu.h>
 4: #include &lt;qToolTip.h>
 5: #include &lt;qwhatsthis.h>
 6: 
 7: #include &lt;kapp.h>
 8: #include &lt;kstddirs.h>
 9: #include &lt;kmenubar.h>
10: 
11: #include "khelpers.moc"
12: 
13: const int HelpMessageTime = 2000;
14: 
15: KHelpers::KHelpers (const char *name) : KTMainWindow (name)
16: {
17:   QPopupMenu *file = new QPopupMenu;
18: 
19:   idfilenew = 
20:     file->insertItem ("&amp;New");
21:   idfileopen =
22:     file->insertItem ("&amp;Open&hellip;");
23:   idfilesave =
24:     file->insertItem ("&amp;Save");
25:   idfilequit =
26:     file->insertItem ( "&amp;Quit", kapp, SLOT (closeAllWindows()) );
27: 
28:   connect ( file, SIGNAL (highlighted (int)),
29:             this, SLOT (slotMenuEntryHelp (int)) );
30: 
31:   menuBar()->insertItem ("&amp;File", file);
32: 
33: 
34:   QPopupMenu *help = 
35:     helpMenu ("KHelpers\n"
36:               "Copyright (C) 2000 By Joe Developer\n\n"
37:               "KHelpers demonstrates a few of the ways "
38:               "that your application can provide help to a user.");
39: <indexterm><primary>UI compliance</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>help</primary><secondary>Tooltips</secondary></indexterm><indexterm><primary>Tooltips</primary></indexterm><indexterm><primary>KHelpers widget</primary><secondary>khelpers.cpp class definition</secondary></indexterm><indexterm><primary>listings</primary><secondary>KHelpers widget</secondary><tertiary>khelpers.cpp class definition</tertiary></indexterm><indexterm><primary>khelpers.cpp file (KHelpers widget)</primary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KHelpers</secondary></indexterm>
40:   help->insertSeparator();
41:   help->insertItem ( "Help on a special topic", this,
42:                      SLOT (slotSpecialHelp()) );
43: 
44:   menuBar()->insertItem ("&amp;Help, help");
45: 
46:   //Create the statusbar.
47:   statusBar();
48: 
49:   QLabel *clientarea = new QLabel (this);
50:   clientarea->setBackgroundColor (Qt::white);
51: 
52:   QToolTip::add (clientarea, "Functionless client area");
53:   QWhatsThis::add (clientarea, "This client area doesn't do anything.");
54:   
55: 
56:   setView (clientarea);
57: 
58:   clientarea->setFocus();
59: 
60: }
61: 
62: <indexterm><primary>KHelpers widget</primary><secondary>khelpers.cpp class definition</secondary></indexterm><indexterm><primary>listings</primary><secondary>KHelpers widget</secondary><tertiary>khelpers.cpp class definition</tertiary></indexterm><indexterm><primary>khelpers.cpp file (KHelpers widget)</primary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KHelpers</secondary></indexterm>
63: void
64: KHelpers::slotMenuEntryHelp (int id)
65: {
66: 
67:   if (id==idfilenew)
68:     statusBar()->message("Create a new document.", HelpMessageTime);
69:   else if (id==idfileopen)
70:     statusBar()->message("Open a file.", HelpMessageTime);
71:   else if (id==idfilesave)
72:     statusBar()->message("Save the current document.", HelpMessageTime);
73:   else if (id==idfilequit)
74:     statusBar()->message("Quit the application.", HelpMessageTime);
75: 
76: }
77: 
78: void
79: KHelpers::slotSpecialHelp()
80: {
81:   QString helpfilename (kapp->name());
82:   helpfilename += "/specialhelp.html";
83: 
84:   kapp->invokeHTMLHelp (helpfilename, "");
85: }<indexterm><primary>UI compliance</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>help</primary><secondary>Tooltips</secondary></indexterm><indexterm><primary>Tooltips</primary></indexterm><indexterm><primary>KHelpers widget</primary><secondary>khelpers.cpp class definition</secondary></indexterm><indexterm><primary>listings</primary><secondary>KHelpers widget</secondary><tertiary>khelpers.cpp class definition</tertiary></indexterm><indexterm><primary>khelpers.cpp file (KHelpers widget)</primary></indexterm><indexterm><primary>defining widget classes</primary><secondary>KHelpers</secondary></indexterm>
</programlisting>
</example>
<para>The <literal>main()</literal> function in <link linkend="ch05list14">Listing 5.14</link> can be used to compile <literal>KHelper</literal> into an executable.</para>
<example role="codelisting" label="5.14" id="ch05list14">
<title>main.cpp: Contains a <literal>main()</literal> Function That Creates and Executes <literal>KHelpers</literal>, an Application Based on <literal>KHelpers<indexterm><primary>KHelpers widget</primary><secondary>main() function</secondary></indexterm><indexterm><primary>listings</primary><secondary>KHelpers widget</secondary><tertiary>main() function</tertiary></indexterm><indexterm><primary>main() function</primary><secondary>KHelpers widget</secondary></indexterm><indexterm><primary>funcitons</primary><secondary>main()</secondary><tertiary>KHelpers widget</tertiary></indexterm></literal></title>
<programlisting linenumbering="numbered">
 1: #include &lt;kapp.h> 
 2. #include "khelpers.h"
 3:  
 4: int
 5: main (int argc, char *argv[])
 6:  {
 7:    KApplication kapplication (argc, argv, "khelpers");
 8:    KHelpers *khelpers = new KHelpers;
 9:  
10:    khelpers->show();
11:    return kapplication.exec();
12: }<indexterm><primary>KHelpers widget</primary><secondary>main() function</secondary></indexterm><indexterm><primary>listings</primary><secondary>KHelpers widget</secondary><tertiary>main() function</tertiary></indexterm><indexterm><primary>main() function</primary><secondary>KHelpers widget</secondary></indexterm><indexterm><primary>funcitons</primary><secondary>main()</secondary><tertiary>KHelpers widget</tertiary></indexterm>
</programlisting>
</example>
<para>This program demonstrate four types of user help: ToolTips, statusbar messages, What's This?, and Help file access.</para>
<para>ToolTips are short messages that give a text name or a description of a widget. They appear after the user has held the mouse pointer over a widget for a second or so. The text is usually only a few words. The message <literal>Open a file</literal>, for example, might appear over the toolbar button that performs that task. The messages appear in frameless windows. They disappear after the user moves the mouse pointer, and they won't reappear again until the pointer has left the widget and then returned and stayed motionless. See <link linkend="ch05fig09">Figure 5.9</link> for a screen shot of the <literal>KHelpers</literal> window with the ToolTip displayed.<indexterm><primary>UI compliance</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>help</primary><secondary>Tooltips</secondary></indexterm><indexterm><primary>Tooltips</primary></indexterm></para>
<figure label="5.9" id="ch05fig09">
<title><literal>KHelpers</literal> gives ToolTip help on the client area.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig09.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>In <literal>KHelpers</literal>, you add a ToolTip to the client area widget using the static method <literal>QToolTip::add()</literal> in line 52.</para>
<figure label="5.10" id="ch05fig10">
<title><literal>KHelpers</literal> also gives What's This? help on the client area.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig10.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>What's This? help messages are longer than ToolTips&mdash;up to three paragraphs. They explain in more detail the function of a widget. They are often used to explain elements of dialog boxes (see <link linkend="ch08">Chapter 8, <quote>Using Dialog Boxes</quote></link>, for a discussion of dialog boxes).</para>
<para>You attach a What's This? help message to the client area in much the same way as you attach the ToolTip. Use the static function <literal>QWhatsThis::add()</literal> <indexterm><primary>add() function</primary></indexterm><indexterm><primary>functions</primary><secondary>add()</secondary></indexterm>(line 53). To view the message, the user selects What's This? from the Help menu and then clicks the widget of interest. If a widget can accept the keyboard focus, Shift+F1 displays the What's This? message for the widget with focus. See <link linkend="ch05fig10">Figure 5.10</link> for a screen shot of <literal>KHelpers</literal> displaying What's This? help on the client area.</para>
<para>When short messages are not enough and users want to learn how to use your application, they can read the documentation. Documentation is provided in HTML format and is accessible through the standard Help menu entry, Contents. A standard format is used for the HTML documentation, which is described in <link linkend="ch15">Chapter 15, <quote>Creating Documentation</quote></link>. A standard directory also exists for the documentation. These and other standard directories are discussed in <link linkend="ch07">Chapter 7</link>.<indexterm><primary>UI compliance</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>help</primary><secondary>Tooltips</secondary></indexterm><indexterm><primary>Tooltips</primary></indexterm></para>
<para>To create the standard Help menu, use the method <literal>KTMainWindow::helpMenu()</literal>,<indexterm><primary>helpMenu() function</primary></indexterm><indexterm><primary>functions</primary><secondary>helpMenu()</secondary></indexterm> as shown on lines 34&ndash;38. You should always use the standard Help menu. You will see that entries have been added to it after adding a separator. This is fine as long as the standard entries are there first.</para>
<para>The returned menu has five menu entries:</para>
<orderedlist numeration="arabic" continuation="restarts" spacing="compact">
<listitem><para>Contents</para>
<para>Starts KHelpCenter, which displays the HTML documentation for <literal>KHelpers</literal>.</para></listitem>
<listitem><para>What's This</para>
<para>Enter <quote>What's This?</quote> mode.</para></listitem>
<listitem><para>About <literal>khelpers</literal></para>
<para>Displays the text passed as the first parameter to <literal>helpMenu()</literal>. In general, <literal>khelpers</literal> will be replaced with the application's name.</para></listitem>
<listitem><para>About KDE</para>
<para>Displays a standard dialog box describing KDE.</para></listitem>
<listitem><para>Report bug</para>
<para>Report a bug to <ulink url="http://bugs.kde.org">http://bugs.kde.org</ulink>.</para></listitem></orderedlist>
<para>To this menu, you append the entry to get <quote>special help.</quote> Sometimes elements of the UI need special explanation. To demonstrate how to view help on specific topics, add this <quote>special help</quote> entry and load the Help file in <literal>slotSpecialHelp()</literal>.<indexterm><primary>slotSpecialHelp() function</primary></indexterm><indexterm><primary>functions</primary><secondary>slotSpecialHelp()</secondary></indexterm></para>
<para>The Help file is loaded for viewing on line 84. Help files for <literal>KHelpers</literal> are stored in the subdirectory <literal>khelpers</literal> in the standard Help file directory, so you construct the path <literal>khelpers/ specialhelp.html</literal>. Of course, you also need to create the HTML documentation and place it there if you want to view it. Creating documentation is covered in <link linkend="ch15">Chapter 15</link>. (Trying to view the documentation will give an error because the file will not be found.)<indexterm><primary>UI compliance</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>help</secondary><tertiary>Tooltips</tertiary></indexterm><indexterm><primary>help</primary><secondary>Tooltips</secondary></indexterm><indexterm><primary>Tooltips</primary></indexterm></para>
</section>
</section>
<section id="ch05lev1sec3">
<title>Standard Dialog Boxes</title>
<para>KDE <indexterm><primary>UI compliance</primary><secondary>standard dialog boxes</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>standard dialog boxes</secondary></indexterm><indexterm><primary>standard dialog boxes</primary></indexterm><indexterm><primary>dialog boxes</primary><secondary>standard dialog boxes</secondary></indexterm>offers several dialog boxes for common tasks, as described in <link linkend="ch05table02">Table 5.2</link>.</para>
<table id="ch05table02" frame="topbot" label="5.2">
<title>Dialog Boxes Available for Common Tasks</title>
<tgroup cols="2" colsep="0" rowsep="0" align="left">
<colspec colname="c1"/>
<colspec colname="c2"/>
<thead valign="top">
<row rowsep="1">
<entry><emphasis>Dialog Box</emphasis></entry>
<entry><emphasis>Task</emphasis></entry></row>
</thead>
<tbody valign="top">
<row>
<entry><literal>KFileDialog</literal></entry>
<entry>Selecting a file</entry></row>
<row>
<entry><literal>KFontDialog</literal></entry>
<entry>Selecting a font</entry></row>
<row>
<entry><literal>KColorDialog</literal></entry>
<entry>Selecting a color</entry></row>
<row>
<entry><literal>KMessageBox</literal></entry>
<entry>Displaying a short message</entry></row>
</tbody>
</tgroup>
</table>
<para>Other dialog boxes are available, but they are more complex or more specialized and thus are discussed elsewhere (see <link linkend="ch06">Chapters 6</link>, <link linkend="ch08">8</link>, and <link linkend="ch10">10</link>).</para>
<para>Using these dialog boxes makes it easier to perform the common tasks of requesting file names, fonts, and so on from the user. More importantly, it makes providing answers to these questions for your application the same as for any other. Thus, if you use these dialog boxes, the user will have less new material to learn to use your application.<indexterm><primary>UI compliance</primary><secondary>standard dialog boxes</secondary></indexterm><indexterm><primary>GUIs</primary><secondary>standard dialog boxes</secondary></indexterm><indexterm><primary>standard dialog boxes</primary></indexterm><indexterm><primary>dialog boxes</primary><secondary>standard dialog boxes</secondary></indexterm></para>
<para>In the following program (<link linkend="ch05list15">Listing 5.15</link>), named kstandarddialogs by the call to <literal>KApplication</literal> on line 10, you see how easily the dialog boxes previously listed can be used. They all provide static methods for retrieving precisely the information you are interested in without instantiating the class, but they may also be subclassed so that their functionality can be altered or extended.<indexterm><primary>UI compliance</primary><secondary>standard dialog boxes</secondary><tertiary>sample application</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>standard dialog boxes</secondary><tertiary>sample application</tertiary></indexterm><indexterm><primary>standard dialog boxes</primary><secondary>sample application</secondary></indexterm><indexterm><primary>dialog boxes</primary><secondary>standard dialog boxes</secondary><tertiary>sample application</tertiary></indexterm></para>
<example role="codelisting" label="5.15" id="ch05list15">
<title>main.cpp: Contains a <literal>main()</literal> Function That Demonstrates Various KDE and Qt Dialog Boxes<indexterm><primary>listings</primary><secondary>KStandardDialogs main.cpp</secondary></indexterm><indexterm><primary>main.cpp file (KstaqndardDialogs)</primary></indexterm></title>
<programlisting linenumbering="numbered">
 1: #include &lt;kapp.h>
 2: #include &lt;kfiledialog.h>
 3: #include &lt;kfontdialog.h>
 4: #include &lt;kcolordlg.h>
 5: #include &lt;kmessagebox.h>
 6: 
 7: int
 8: main (int argc, char *argv[])
 9: {
10:   KApplication kapplication (argc, argv, "kstandarddialogs");
11: 
12:   if (KMessageBox::
13:       warningContinueCancel (0, "Are you sure you want to see this demo?",
14:                              "Demo program", "See demo") ==
15:       KMessageBox::Cancel)
16:     exit (0);
17: 
18:   QString filename = KFileDialog::getOpenFileName ();
19: 
20:   if (filename != "")
21:     {
22:       QString message;
23:       message.sprintf ("The file you selected was \"/home/dsweet/KDE/BOOK/CH05/KStandardDialogs/main.cpp\,   // \>%s\".",
24:                        (const char *)filename);
25:       
26:       KMessageBox::information (0, message, "File selected");
27:     }
28: <indexterm><primary>listings</primary><secondary>KStandardDialogs main.cpp</secondary></indexterm><indexterm><primary>main.cpp file (KstaqndardDialogs)</primary></indexterm>
29:   QFont qfont;
30:   if (KFontDialog::getFont (qfont))
31:     {
32:       QString message;
33:       message.sprintf ("Sorry, but you selected \%d point %s\"",
34:                        qfont.pointSize(),
35:                        (const char *) qfont.family());
36: 
37: 
38:       KMessageBox::sorry (0, message, "Font selected");
39:     }
40: 
41:   QColor qcolor;
42:   if (KColorDialog::getColor (qcolor))
43:     {
44:       QString message;
45:       message.sprintf ("Oh no! The color you selected "
46:                        "was (R,G,B)=(%d,%d,%d).",
47:                        qcolor.red(), qcolor.green(), qcolor.blue());
48:       
49:       KMessageBox::error (0, message, "Error:  Color selected");
50:     }      
51:   
52:  return 0;
53: }<indexterm><primary>listings</primary><secondary>KStandardDialogs main.cpp</secondary></indexterm><indexterm><primary>main.cpp file (KstaqndardDialogs)</primary></indexterm>
</programlisting>
</example>
<para>You have used all these dialog boxes from <literal>main()</literal>. No need exists to create a main widget or even start the application. All these dialog boxes are modal, which means that they have their own local event loops. (Before you can display a window, you still need to create a <literal>KApplication</literal> so that it can perform some initialization, however.)<indexterm><primary>UI compliance</primary><secondary>standard dialog boxes</secondary><tertiary>sample application</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>standard dialog boxes</secondary><tertiary>sample application</tertiary></indexterm><indexterm><primary>standard dialog boxes</primary><secondary>sample application</secondary></indexterm><indexterm><primary>dialog boxes</primary><secondary>standard dialog boxes</secondary><tertiary>sample application</tertiary></indexterm></para>
<para>Each of the dialog boxes, except for <literal>KMessageBox,</literal> works in basically the same way. You can call a static method to start the dialog box and you are given back the object selected by the user.</para>
<para><literal>KFileDialog</literal> <indexterm><primary>UI compliance</primary><secondary>standard dialog boxes</secondary><tertiary>KFileDialog</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>standard dialog boxes</secondary><tertiary>KFileDialog</tertiary></indexterm><indexterm><primary>standard dialog boxes</primary><secondary>KFileDialog</secondary></indexterm><indexterm><primary>dialog boxes</primary><secondary>standard dialog boxes</secondary><tertiary>KFileDialog</tertiary></indexterm><indexterm><primary>KFileDialog</primary></indexterm><indexterm><primary>file dialog boxes</primary><secondary>KFileDialog</secondary></indexterm>has three static methods that you will often find useful:</para>
<itemizedlist mark="none" spacing="compact">
<listitem><para><literal>getOpenFileName()</literal>&mdash;Ask<indexterm><primary>getOpenFileName() function</primary></indexterm><indexterm><primary>functions</primary><secondary>getOpenFileName()</secondary></indexterm> for the name of a file to open.</para></listitem>
<listitem><para><literal>getSaveFileName()</literal>&mdash;Ask<indexterm><primary>getSaveFileName() function</primary></indexterm><indexterm><primary>functions</primary><secondary>getSaveFileName()</secondary></indexterm> for the name of a file to save.</para></listitem>
<listitem><para><literal>getExistingDirectory()</literal>&mdash;Ask<indexterm><primary>getExistingDirectory() function</primary></indexterm><indexterm><primary>functions</primary><secondary>getExistingDirectory()</secondary></indexterm> for the name of a directory.</para></listitem>
</itemizedlist>
<para>These methods return a <literal>QString</literal> containing the filename or an empty string if no filename was chosen (that is, the user clicked the Cancel button). See line 18 for usage and <link linkend="ch05fig11">Figure 5.11</link> for a screen shot of the file selector dialog box.<indexterm><primary>UI compliance</primary><secondary>standard dialog boxes</secondary><tertiary>KFileDialog</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>standard dialog boxes</secondary><tertiary>KFileDialog</tertiary></indexterm><indexterm><primary>standard dialog boxes</primary><secondary>KFileDialog</secondary></indexterm><indexterm><primary>dialog boxes</primary><secondary>standard dialog boxes</secondary><tertiary>KFileDialog</tertiary></indexterm><indexterm><primary>KFileDialog</primary></indexterm><indexterm><primary>file dialog boxes</primary><secondary>KFileDialog</secondary></indexterm></para>
<note role="normal">
<para>To use <literal>KFileDialog</literal> you must link your program with <literal>-lkfile</literal>. The other dialog boxes covered here are in part of the standard libraries.</para>
</note>
<figure label="5.11" id="ch05fig11">
<title>KStandardDialogs uses <literal>KFileDialog</literal> to let the user choose a file.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig11.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para>The<indexterm><primary>UI compliance</primary><secondary>standard dialog boxes</secondary><tertiary>KFontDialog</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>standard dialog boxes</secondary><tertiary>KFontDialog</tertiary></indexterm><indexterm><primary>standard dialog boxes</primary><secondary>KFontDialog</secondary></indexterm><indexterm><primary>dialog boxes</primary><secondary>standard dialog boxes</secondary><tertiary>KFontDialog</tertiary></indexterm><indexterm><primary>KFontDialog</primary></indexterm><indexterm><primary>font dialog boxes</primary><secondary>KFontDialog</secondary></indexterm> method <literal>KFontDialog::getFont()<indexterm><primary>getFont() function</primary></indexterm><indexterm><primary>functions</primary><secondary>getFont()</secondary></indexterm></literal>, used on line 30, takes a <literal>QFont</literal> object as an argument and fills it with the font chosen by the user. If the user cancels the operation, <literal>getFont()</literal> returns the constant <literal>Qt::Rejected</literal>. See <link linkend="ch05fig12">Figure 5.12</link> for a screen shot of the font selector dialog box.</para>
<para>The color selector works just like the font selector. The method<literal> KFontDialog::getColor()</literal>, <indexterm><primary>getColor() function</primary></indexterm><indexterm><primary>functions</primary><secondary>getColor()</secondary></indexterm>used on line 42, takes a <literal>QColor</literal> object as an argument and fills it with the color chosen by the user. The method returns <literal>Qt::Rejected</literal> if the user clicks the Cancel button (see <link linkend="ch05fig13">Figure 5.13</link>).</para>
<figure label="5.12" id="ch05fig12">
<title>KStandardDialogs uses <literal>KFontDialog</literal> to let the user choose a font.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig12.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<figure label="5.13" id="ch05fig13">
<title>KStandardDialogs uses <literal>KColorDialog</literal> to let the user choose a color.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig13.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<para><literal>KMessageBox<indexterm><primary>UI compliance</primary><secondary>standard dialog boxes</secondary><tertiary>KMessageBox</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>standard dialog boxes</secondary><tertiary>KMessageBox</tertiary></indexterm><indexterm><primary>standard dialog boxes</primary><secondary>KMessageBox</secondary></indexterm><indexterm><primary>dialog boxes</primary><secondary>standard dialog boxes</secondary><tertiary>KMessageBox</tertiary></indexterm><indexterm><primary>KMessageBox</primary></indexterm><indexterm><primary>font dialog boxes</primary><secondary>KMessageBox</secondary></indexterm></literal> can display several types of messages:</para>
<informalexample>
<programlisting linenumbering="unnumbered">
KMessageBox::warningContinueCancel()<indexterm><primary>warningContinueCancel() function</primary></indexterm><indexterm><primary>functions</primary><secondary>warningContinueCancel()</secondary></indexterm>
</programlisting>
</informalexample>
<para>Displays a warning dialog box and gives the user the option to continue with the operation or cancel it. The final argument to this method is the text string that will be placed on the Continue button. In this sample program, you ask users whether they would really like to see the demo, and you put See Demo on the Continue button.</para>
<figure label="5.14" id="ch05fig14">
<title><literal>KMessageBox::warningContinueCancel()</literal> displays this style dialog box.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig14.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<informalexample>
<programlisting linenumbering="unnumbered">
KMessageBox::information()<indexterm><primary>information() function</primary></indexterm><indexterm><primary>functions</primary><secondary>information()</secondary></indexterm>
</programlisting>
</informalexample>
<para>Tells the user something informative, but not related to an error (see <link linkend="ch05fig15">Figure 5.15</link>)</para>
<figure label="5.15" id="ch05fig15">
<title><literal>KMessageBox::information()</literal> displays this style dialog box.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig15.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<informalexample>
<programlisting linenumbering="unnumbered">
KMessageBox::sorry()<indexterm><primary>sorry() function</primary></indexterm><indexterm><primary>functions</primary><secondary>sorry()</secondary></indexterm>
</programlisting>
</informalexample>
<para>Tells the user that some requested action is not allowed (see <link linkend="ch05fig16">Figure 5.16</link>).<indexterm><primary>UI compliance</primary><secondary>standard dialog boxes</secondary><tertiary>KMessageBox</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>standard dialog boxes</secondary><tertiary>KMessageBox</tertiary></indexterm><indexterm><primary>standard dialog boxes</primary><secondary>KMessageBox</secondary></indexterm><indexterm><primary>dialog boxes</primary><secondary>standard dialog boxes</secondary><tertiary>KMessageBox</tertiary></indexterm><indexterm><primary>KMessageBox</primary></indexterm><indexterm><primary>font dialog boxes</primary><secondary>KMessageBox</secondary></indexterm></para>
<figure label="5.16" id="ch05fig16">
<title><literal>KMessageBox::sorry()</literal> displays this style dialog box.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig16.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
<informalexample>
<programlisting linenumbering="unnumbered">
KMessageBox::error()<indexterm><primary>error() function</primary></indexterm><indexterm><primary>functions</primary><secondary>error()</secondary></indexterm>
</programlisting>
</informalexample>
<para>Tells the user that some error has occurred in the execution of a task (see <link linkend="ch05fig17">Figure 5.17</link>).<indexterm><primary>UI compliance</primary><secondary>standard dialog boxes</secondary><tertiary>KMessageBox</tertiary></indexterm><indexterm><primary>GUIs</primary><secondary>standard dialog boxes</secondary><tertiary>KMessageBox</tertiary></indexterm><indexterm><primary>standard dialog boxes</primary><secondary>KMessageBox</secondary></indexterm><indexterm><primary>dialog boxes</primary><secondary>standard dialog boxes</secondary><tertiary>KMessageBox</tertiary></indexterm><indexterm><primary>KMessageBox</primary></indexterm><indexterm><primary>font dialog boxes</primary><secondary>KMessageBox</secondary></indexterm>
</para>
<figure label="5.17" id="ch05fig17">
<title><literal>KMessageBox::error()</literal> displays this style dialog box.</title>
<mediaobject>
<imageobject>
<imagedata fileref="graphics/05fig17.gif" format="GIF"/></imageobject>
</mediaobject>
</figure>
</section>
<section id="ch05lev1sec4">
<title>Summary</title>
<para>This chapter covered many things. You learned how to create a menubar, toolbars, and a statusbar. You learned about various types of content areas, how to program simple drag-and-drop, how to give users help on your application, and how to use standard dialog boxes.</para>
<para>The menubar, toolbars, and the statusbar look and functionality is provided&mdash;and constrained&mdash;by the KDE widgets <literal>KMenuBar</literal>, <literal>KToolBar</literal>, and <literal>KStatusBar</literal>. Using these will automatically give you much of the KDE look and feel.</para>
<para>You can give help at three levels. The simplest, shortest messages come from ToolTips or statusbar messages. Longer descriptions (about three paragraphs at most) come from What's This? help. These are useful for explaining complicated widgets or dialog boxes. And, when all else fails, the user can read the full program documentation.</para>
<para>KDE and Qt provide dialog boxes for common tasks, such as requesting a filename, a font, a color, and displaying messages. Using these dialog boxes is not only easier than writing your own, it makes the method of answering these common questions the same in your application as in others.</para>
</section>
<section id="ch05lev1sec5">
<title>Exercises</title>
<qandaset defaultlabel="number">
<qandaentry>
<question id="ch05que01"><para><link linkend="ch05ans01">Use <literal>KStatusBar::insertWidget()</literal> to insert the KDE widget of your choice into the statusbar. Is the widget appropriate for the statusbar? What information does it convey to the user?</link></para></question>
</qandaentry>
<qandaentry>
<question id="ch05que02"><para><link linkend="ch05ans02">Create a document-centric application that has <literal>QMultiLineEdit</literal> as its client area. Be sure to use <literal>KMenuBar</literal>, <literal>KToolBar</literal>, and <literal>KStatusBar</literal>. Include New and Quit on the File menu and New on the toolbar. Put the line number into the statusbar. (You will need to refer to the Qt documentation for <literal>QMultiLineEdit</literal> for this exercise.)</link></para></question></qandaentry>
</qandaset>
</section>
</chapter>
