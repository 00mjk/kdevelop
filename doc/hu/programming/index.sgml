<!DOCTYPE LINUXDOC PUBLIC "-//GMD//DTD linuxdoc//EN">
<linuxdoc>
<book>
<titlepag>
<title>A KDevelop Programozói Kézikönyv
<subtitle>The User Guide to C++ Application Design for the K Desktop Environment (KDE) with the KDevelop IDE, Version
1.2</subtitle></title>
<author>
<name>Ralf Nolden <htmlurl url="mailto:Ralf.Nolden@post.rwth-aachen.de" name = "<Ralf.Nolden@post.rwth-aachen.de>">
<inst>The KDevelop Team
<date>Version 1.2 , March 21, 2000
<abstract>
This handbook itself is part of the KDevelop Integrated Development Environment and is therefore also licensed under the GNU General
Public License; see <ref id="Copyright" name="Copyright"> for more information.
</abstract>

<toc>

<chapt>Bevezetõ
<p>
As Unix Systems are becoming more and more popular to even beginners working with computer machines due to its advantages in regards of
stability and functionality, most are somehow disappointed, because those applications don't have a consistent look and each one
behaves different from another. With KDE, developers have an almost perfect way to create first-class applications for Unix desktop
systems to get a wider user community by the mere quality their applications have to offer. Therefore, KDE becomes more and more
popular as a base for programming design, and developers want to take advantage of the possibilities that the system has to offer.


<sect>What you should know already
<p>
For making the best use of this programming handbook, we assume that you already know about the C++ programming language; if not, you
should make yourself familiar with that first. Information about C++ is available through various sources either in printed form at
your local bookstore or by tutorials found on the Internet. Knowledge about the design of Graphical User Interfaces is not required, as
this handbook tries to cover the application design for KDE programs, which also includes an introduction into the <idx/Qt/ toolkit as well
as the <idx/KDE libraries/ and the design of User Interfaces. Also, you should have made yourself comfortable with KDevelop by reading
<htmlurl url="../index.html" name="The User Manual to KDevelop">, which contains a descriptive review of the functionality provided by
the IDE.

<sect>About this Handbook
<p>
This handbook has been written to give developers an introduction into KDE application development by using the KDevelop
Integrated Development Environment.

The following chapters therefore give an introduction on how to create projects, explains the sourcecodes already generated and shows
how to extend the given sources on various topics such as <idx/toolbar/s, menu bars and view areas.

Then the dialogeditor is discussed in detail, explaining how widgets are created and covers widget properties settings in detail
for all provided widgets.

Finally, you will learn about several topics that will complete your knowledge in regards of project design and helps you work out
additional issues besides coding such as adding <idx/API/ documentation and extending online-manuals.

<bf/In the next chapter/

we'll take a look at the <idx/Qt/ and <idx/KDE libraries/, showing basic concepts and why things are the way they are.
Also, we will discuss how to create the tutorial applications provided with the <idx/Qt/ toolkit by using KDevelop, so beginners can already
see first results with a few steps, and thereby will learn how to make use of some of KDevelop's best features.

<bf/In the following chapters/ you will learn:
<itemize>
<item>how to create an application with the KAppWizard,
<item>what the project skeleton already provides,
<item>what the code already created means,
<item>how to create your own views,
<item>how to extend your application's functionality by dialog, menu bars and <idx/toolbar/s
<item>how to make your application user friendly by providing help functions and
<item>how to write <idx/SGML/ online documentation.
</itemize>


<sect>Additional Information
<p>
Additional information about <idx/Qt//KDE programming is available by various sources:

<itemize>
<item><em/Programming with <idx/Qt// by Matthias Kalle Dalheimer, published by O'Reilly (see <url url="http://www.oreilly.com" >, covering
almost all aspects of the <idx/Qt/ GUI toolkit and contains examples as well.
<item><htmlurl url="../index.html" name="The User Manual to KDevelop">, provided with the KDevelop IDE,
<item><em/Online-Reference/ to the <idx/Qt/-library, provided with your copy of the <idx/Qt/ toolkit in
HTML and available as PostScript on <url url="http://www.troll.no">
<item>On the Internet, see
  <itemize>
  <item>the Troll Tech web site at <url url="http://www.troll.no">,
  <item>the KDE web site at <url url="http://www.kde.org">,
  <item>the KDE developer web site at <url url="http://developer.kde.org">
  <item>the KDevelop home page at <url url="http://www.kdevelop.org">
  </itemize>
</itemize>

Additionally, you should look for help by subscribing to the various mailing lists, whose addresses are available on the mentioned
web sites, and on the Usenet newsgroups dedicated to users of KDE and Unix Systems as well as about the C and C++ programming language.

For obtaining help about the KDevelop IDE, you should send requests to our mailinglist at <htmlurl
url="mailto:kdevelop@fara3.cs.uni-potsdam.de" name="kdevelop@fara3.cs.uni-potsdam.de">. Mind that the KDevelop team is dedicated to
provide the means to enable you to program applications and therefore is not intended as a technical support team in cases where the
applications you're developing don't work due to implementation errors or misconfigurations of your operating system. By this, we ask
all users to take advantage of the mailinglist in any case you're running into problems with the use of the IDE itself, as well as for
bug reports and suggestions for improving the functionality of the development environment.

<chapt>A KDE és a <idx/Qt/ Könyvtárak
<p>
The Norwegian company Troll Tech (<url url="http://www.troll.no">) provides a so-called GUI toolkit, named <idx/Qt/. Thereby, GUI means
"<bf/G/raphical <bf/U/ser <bf/I/nterface", and therefore, <idx/Qt/-based applications represent themselves with buttons, windows etc,
allowing user input by visualizing the functions an application provides. Such a toolkit is needed for developing graphical
applications that run on the X-Window interface on Unix Systems, because X does not contain a pre-defined user interface itself.
Although other toolkits are also available to create User Interfaces, <idx/Qt/ offers some technical advantages that make application design
very easy. Additionally, the <idx/Qt/ toolkit is also available for Microsoft Windows systems, which allows developers to provide their
applications for both platforms.

The KDE Team (<url url="http://www.kde.org">) joined together with the goal to make using Unix
Systems more friendly, and decided to use the <idx/Qt/ toolkit for the development of a window manager on X-Window, plus a variety of tools
included with the KDE packages. The K Desktop Environment therefore contains the window manager <em/kwm/, the file manager <em/kfm/ and
the launch panel <em/kpanel/ as the main components plus a variety of first-class utilities and applications. After KDE was out, a lot
of developers turned their eyes towards the new environment and what it has to offer them. The <idx/KDE libraries/ are providing essential
methods and classes that make all applications designed with them look similar and consistent, so the user has the great advantage that
he only has to get accustomed with an application's specific usage, not with handling dialogs or buttons. Also, KDE programs integrate
themselves into the desktop and are able to interact with the file manager via <idx/drag'n drop/, offer session management and many more,
if all features offered by the <idx/KDE libraries/ are used.

Both, the <idx/Qt/ toolkit and the <idx/KDE libraries/, are implemented in the C++ programming language; therefore applications that make use of
these libraries are also mostly written in C++. In the following chapter, we'll make a short trip through the libraries to see what
already is provided and how <idx/Qt/ and <idx/KDE applications/ are created in general.

<sect>The <idx/Qt/ GUI Toolkit
<p>
As said, the <idx/Qt/ library is a toolkit that offers graphical elements that are used for creating GUI applications and are needed for
X-Window programming. Additionally, the toolkit offers:

<itemize>
<item>A complete set of classes and methods ready to use even for non-graphical programming issues,
<item>A good solution towards user interaction by virtual methods and the signal/slot mechanism,
<item>A set of predefined GUI-elements, called "widgets", that can be used easily for creating the visible elements
<item>Additional completely pre-defined dialogs that are often used in applications such as progress and file dialogs.
</itemize>

Therefore knowing the <idx/Qt/ classes is very essential, even if you only want to program KDE-applications. To have an impression on the
basic concept how GUI-applications are constructed and compiled, we'll first have a look at a sample <idx/Qt/-only program; then we'll extend
it to a KDE program.

<sect1>The first <idx/Qt/ Application
<p>
As usual, programs in C++ have to contain a <tt/main()/ function, which is the starting point for application execution. As we want
them to be graphically visible in windows and offering user interaction, we first have to know, how they can show themselves to the
user. For an example, we'll have a look at the first tutorial included with the <idx/Qt/ Online Reference Documentation and explain the basic
execution steps; also why and how the application window appears:

<tscreen><code>
#include <qapplication.h>
#include <qpushbutton.h>

int main( int argc, char **argv )
{
QApplication a( argc, argv );

QPushButton hello( "Hello world!" );
hello.resize( 100, 30 );

a.setMainWidget( &amp;hello );
hello.show();
return a.exec();
}
</code></tscreen>

This application merely paints a window containing a button with "Hello world" as its text. As for all <idx/Qt/-based applications, you first
have to create an instance of the class <tt/<cdx/QApplication//, represented by <tt/a/.

Next, the program creates an instance of the class <tt/QPushButton/ called <tt/hello/,  this will be the button. The constructor of
<tt/hello/ gets a string as a parameter, which is the contents of the widget visible as the buttons text.

Then the <tt/resize()/ method is called on the <tt/hello/ button. This changes the default size a widget (which is in this
case the QPushButton) has when created to the length of 100 pixels and the height of 30 pixels. Finally, the <tt/setMainWidget()/
method is called for <tt/a/ and the <tt/show()/ method for <tt/hello/. The <tt/<cdx/QApplication// is finally executed by <tt/a.exec()/,
enters the main event loop and waits until it has to return an integer value to the overlaying Operating System signaling that the
application is exited.

<sect1>The Reference Documentation for <idx/Qt/
<p>
Now, let's have a quick look at the reference documentation of the <idx/Qt/ library. To do this, start KDevelop and select "<idx/Qt/-library" from
the "Help"-menu in the menubar. The documentation browser opens and shows you the start page of the <idx/Qt/ reference. This will be your
first place to get information about <idx/Qt/, it's classes and the available functions they provide. Also, the above program is the first
that is included in the tutorials section. To get to the classes we want to have a look at, <tt/<cdx/QApplication// and <tt/QPushButton/,
select "Alphabetical Class List" and search for the according names. Follow either of them to have a look at the <idx/class documentation/.

For <tt/<cdx/QApplication//, you will see the constructor and all other methods that this class provides. If you follow a link, you will get
more information about the usage and meaning of the methods, which is very useful when you sometimes can't detect the correct use or
want to have an example. This also counts for the KDE library documentation, which uses a similar documentation type; therefore this is
almost all you have to know about using the class-references with the documentation browser.

<sect1>Interpretation of the Sample
<p>
Starting with <tt/<cdx/QApplication//, you will find all the methods used in our first example:

<itemize>
<item>the constructor <tt/<cdx/QApplication/()/,
<item>the <tt/setMainWidget()/ method and
<item>the <tt/exec()/ method.
</itemize>

The interpretation why we use these methods is very simple:

<enum>
<item>first create an instance of the class <tt/<cdx/QApplication// with the constructor, so we can make use of the GUI elements provided by
<idx/Qt/,
<item>create a widget which will be the contents of our program window,
<item>set the widget as the main widget for <tt/a/,
<item>execute the <tt/a/ instance of <tt/<cdx/QApplication//.
</enum>

The second object of our program is the pushbutton, an instance of the class <tt/QPushButton/. From the two constructors given to
create an instance, we used the second: this accepts a text, which is the label contents of the button; here, it is the string "Hello
world!". Then we called the <tt/resize()/ method to change the size of the button according to it's contents- the button has to be
larger to make the string completely visible.

But what about the <tt/show()/ method ?  Now, you see that like most other widgets, <tt/QPushButton/ is based on a single-inheritance-
here, the documentation says, <em/Inherits/ <tt/<cdx/QButton//.  Follow the link to the <tt/<cdx/QButton// class. This shows you a lot of other
methodss that are inherited by QPushButton, which we'll use later to explain the signal/slot mechanism. Anyway, the <tt/show()/ method
is not listed, therefore, it must be a method that is provided by inheritance as well. The class that <tt/<cdx/QButton// inherits, is
<tt/<cdx/QWidget//. Just follow the link again, and you will see a whole bunch of methods that the <tt/<cdx/QWidget// class provides; including the
<tt/show()/ method. Now we understand what was done in the sample with the button:

<enum>
<item>create an instance of <tt/QPushButton/, use the second constructor to set the buttons text,
<item>resize the widget to it's contents,
<item>set the widget as the main widget of the <tt/<cdx/QApplication// instance <tt/a/,
<item>tell the widget to display itself on the screen by calling <tt/show()/, an inherited method from <tt/<cdx/QWidget//.
</enum>

After calling the <tt/exec()/ method, the application is visible to the user, showing a window with the button showing "Hello world!".
Now, GUI programs behave somewhat differently than procedural applications. The main thing here is that the application enters a
so-called "main event loop". This means that the program has to wait for user actions and then react to it, also that for a <idx/Qt/
application, the program has to be in the main event loop to start the event handling. The next section tells you in short what this
means to the programmer and what <idx/Qt/ offers to process user events.

(For already advanced users: The button has no parent declared in the constructor, therefore it is a top-level widget alone and runs in
a local event loop which doesn't need to wait for the main event loop, see the <tt/<cdx/QWidget// <idx/class documentation/ and <htmlurl
url="../kde_libref/index.html" name="The KDE Library Reference Guide">)

<bf/Summary:/

A <idx/Qt/ application always has to have one instance of the class <tt/<cdx/QApplication//. This provides that we can create windows that are the
graphical representation of programs to the user and allow interaction. The window contents itself is called a "Main Widget", meaning
that all graphical elements are based on the class <tt/<cdx/QWidget// and can be any type of widget that fits the needs of the application to
communicate with the user. Therefore, all user elements somehow have to inherit <tt/<cdx/QWidget// to be visible.

<sect1>User Interaction<label id="User Interaction">
<p>
After reading the last sections, you should already know:
<itemize>
<item>What the <idx/Qt/-library provides in terms of GUI applications,
<item>how a program using <idx/Qt/ is created and
<item>where and how to find information about classes that you want to use with the documentation browser
</itemize>

Now we'll turn to give the application "life" by processing user events. Generally, the user has two ways to interact with a program:
the mouse and the keyboard. For both ways, a graphical user interface has to provide methods that detect actions and methods that do
something as a reaction to these actions.

The Window system therefore sends all interaction events to the according application. The <cdx/QApplication/ then sends them to the active
window as a <tt/<cdx/QEvent// and the widgets themselves have to decide what to do with them. A widget receives the event and processes
<tt/<cdx/QWidget//::event(<cdx/QEvent/*)/, which then decides which event has been executed and how to react; event() is therefore the main event
handler. Then, the <tt/event()/ function passes the event to so-called event filters, that determine what happened and what to do with
the event. If no filter signs responsible for the event, the specialized event handlers are called. Thereby we can decide between:

<bf/a) Keyboard events --TAB and Shift-TAB keys:/

changes the keyboard input focus from the current widget to the next widget in the focus order. The focus can be set to widgets by
calling <tt/setFocusPolicy<ncdx/setFocusPolicy()/()/ and process the following event handlers:

<itemize>
<item><tt/virtual void focusInEvent<ncdx/focusInEvent()/ ( <cdx/QFocusEvent/ * )/
<item><tt/virtual void focusOutEvent<ncdx/focusOutEvent()/ ( <cdx/QFocusEvent/ * )/
</itemize>

<bf/b) all other keyboard input:/
<itemize>
<item><tt/virtual void keyPressEvent<ncdx/keyPressEvent()/ ( <cdx/QKeyEvent/ * )/
<item><tt/virtual void keyReleaseEvent<ncdx/keyReleaseEvent()/ ( <cdx/QKeyEvent/ * )/
</itemize>

<bf/c) mouse movements:/
<itemize>
<item><tt/virtual void mouseMoveEvent ( <cdx/QMouseEvent/ * )/
<item><tt/virtual void enterEvent ( <cdx/QEvent/ * )/
<item><tt/virtual void leaveEvent ( <cdx/QEvent/ * )/
</itemize>

<bf/d) mouse button actions:/
<itemize>
<item><tt/virtual void mousePressEvent ( <cdx/QMouseEvent/ * )/
<item><tt/virtual void mouseReleaseEvent ( <cdx/QMouseEvent/ * )/
<item><tt/virtual void mouseDoubleClickEvent ( <cdx/QMouseEvent/ * )/
</itemize>

<bf/e) window events containing the widget:/
<itemize>
<item><tt/virtual void moveEvent ( <cdx/QMoveEvent/ * )/
<item><tt/virtual void resizeEvent ( <cdx/QResizeEvent/ * )/
<item><tt/virtual void closeEvent ( <cdx/QCloseEvent/ * )/
</itemize>


Note that all event functions are virtual and protected; therefore you can re-implement the events that you need in your own
widgets and specify how your widget has to react. <tt/<cdx/QWidget// also contains some other virtual methods that can be useful in your
programs; anyway, it is sufficient to know about <tt/<cdx/QWidget// very well generally.

<sect1>Object Interaction by Signals and Slots
<p>
Now we're coming to the most obvious advantages of the <idx/Qt/ toolkit: the signal/slot mechanism. This offers a very handy and useful
solution to object interaction, which usually is solved by <tt/callback/ functions for X-Window toolkits. As this communication
requires a strict programming and sometimes makes user interface creation very difficult (as referred by the <idx/Qt/ documentation and
explained in <em/Programming with <idx/Qt// by K.Dalheimer), Troll Tech invented a new system where objects can emit signals that can be
connected to methods declared as slots. For the C++ part of the programmer, he only has to know some things about this mechanism:

<enum>
<item>the class declaration of a class using signals/slots has to contain the <tt/Q_OBJECT/ macro at the beginning (without the
semicolon); and have to be derived from the <tt/QObject/ class,
<item>a signal can be emitted by the keyword <tt/emit/, e.g. <tt/emit signal(parameters);/ from within any member function
of a class that allows signals/slots,
<item>all signals used by the classes that are not inherited have to be added to the class declaration by a <tt/signals:/ section,
<item>all methods that can be connected with a signal are declared in sections with the additional keyword <tt/slot/, e.g.
<tt/<bf/public/ slots:/ within the class declaration,
<item>the meta-object compiler <tt/moc/ has to run over the header file to expand the macros and to produce the implementation (which
is not needed to know.). The output files of <tt/moc/ are compiled as well by the C++ compiler.
</enum>

Another way to use signals without deriving from <tt/QObject/ is to use the <tt/QSignal/ class- see the reference documentation for
more information and example usage. In the following, we assume you're deriving from <tt/QObject/.


This way, your class is able to send signals anywhere and to provide slots that signals can connect to. By using the signals, you don't
have to care about who's receiving it- you just have to emit the signal and whatever slot you want to connect to it can react to the
emission. Also the slots can be used as normal methods during implementation.

Now, to connect a signal to a slot, you have to use the <tt/connect()/ methods that are provided by <tt/QObject/ or, where available,
special methods that objects provide to set the connection for a certain signal.


<sect2>Sample Usage
<p>
To explain the way how to set up object-interaction, we'll take our first example again and extend it by a simple connection:

<tscreen><code>
#include <qapplication.h>
#include <qpushbutton.h>

int main( int argc, char **argv )
{
QApplication a( argc, argv );

QPushButton hello( "Hello world!" );
hello.resize( 100, 30 );

a.setMainWidget( &amp;hello );

connect(&amp;hello, SIGNAL( clicked() ), &amp;a, SLOT( quit() ));

hello.show();
return a.exec();
}
</code></tscreen>

You see, the only addition to give the button more interaction is to use a <tt/connect()/ method:
<tt/connect(&amp;hello, SIGNAL( clicked() ), &amp;a, SLOT( quit() ));/ is all you have to add. What is the meaning now ? The class
declaration of <tt/QObject/ says about the <tt/connect()/ method:

<tt/bool connect ( const QObject * sender, const char * signal, const QObject * receiver, const char * member )/

This means, you have to specify a QObject instance pointer that is the sender of the signal, meaning that it can emit this signal as
first parameter; then you have to specify the signal that you want to connect to. The last two parameters are the receiver object that
provides a slot, followed by the member function which actually <em/is/ the slot that will be executed on signal emission.

By using signals and slots, your program's objects can interact with each other easily without explicitely depending on the type of
the receiver object. You will learn more about using this mechanism for productive usage later in this handbook. More information about
the Signals/Slot mechanism can also be found in <htmlurl url="../kde_libref/index.html" name="The KDE Library Reference Guide"> and the
<idx/Qt/ online reference.

<sect>What KDE provides
<p>
<sect1>The KDE 1.1.x libraries
<p>
For the time of this writing and due to the fact that KDevelop uses KDE 1.1, I'm referring to the state of the <idx/KDE libraries/ at that
release. The main <idx/KDE libraries/ you'll be using for creating your own <idx/KDE applications/ are:

<itemize>
<item>the KDE-Core library, containing all classes that are non-visible elements and provide functionality your application may use.
<item>the KDE-UI library, containing user interface elements like menu bars, <idx/toolbar/s and the like,
<item>the KFile library, containing the file selection dialogs,
</itemize>

Additionally, for specific solutions KDE offers the following libraries:

<itemize>
<item>the KHTMLW library, offering a complete HTML-interpreting widget that is used by various programs like <idx/KDEHelp/, KFM, KDevelop,
<item>the KFM library, allowing to use the KDE file manager from within your application.
<item>the KAb library, the KAddressBook. Provides address-book access for e.g. email applications
<item>the KSpell library, offering widgets and functionality to integrate the use of Ispell, the common spell-checker, in applications
like editors; used for the KEdit application.
</itemize>

Next, we'll have a look at what is needed to turn our first <idx/Qt/ application into a KDE one.

<sect1>Example KDE Application
<p>
In the following, you will see that writing a KDE application is not much more difficult than a <idx/Qt/ application. For the use of KDE's
features, you just have to use some other classes, and you're almost done. As an example, we'll discuss the changed version of the <idx/Qt/
example from above:

<tscreen><code>
#include <kapp.h>
#include <qpushbutton.h>

int main( int argc, char **argv )
{
KApplication a( argc, argv );

QPushButton hello( "Hello world!" );
hello.resize( 100, 30 );

a.setTopWidget( &amp;hello );

connect(&amp;hello, SIGNAL( clicked() ), &amp;a, SLOT( quit() ));

hello.show();
return a.exec();
}
</code></tscreen>

You see that first we have changed from <tt/<cdx/QApplication// to <tt/<cdx/KApplication//. Further, we had to change the previously used
<tt/setMainWidget()/ method to <tt/setTopWidget/, which <tt/<cdx/KApplication// uses to set the main widget. That's it ! Your first KDE
application is ready- you only have to tell the compiler the KDE include path and the linker to link in the KDE-Core library with
-lkdecore.

As you now know what at least the main() function provides generally and how an application gets visible and allows user and object
interaction, we'll go on with the next chapter, where our first application is made with KDevelop- there you can also test everything
which was mentioned before and see the effects.

What you should have looked into additionally until now is the reference documentation for <idx/Qt/, especially the <tt/<cdx/QApplication//,
<tt/<cdx/QWidget// and <tt/QObject/ class and the KDE-Core library documentation for the <tt/<cdx/KApplication// class. The <htmlurl
url="../kde_libref/index-3.html" name="KDE Library Reference"> handbook also covers a complete description about the invocation of the
<tt/<cdx/QApplication// and <tt/<cdx/KApplication// constructors including command-line argument processing.

<chapt>Új alkalmazások létrehozása<label id="Creating new Applications">
<p>
The KAppWizard, or also called the KDE Application Wizard, is intended to let you start working on new projects with KDevelop.
Therefore, all your projects are first created by the wizard; then you can start building them and extend the already provided source
skeleton. KAppWizard also allows to choose between several project types according to your project's goals:

<itemize>
<item>Normal KDE Application: includes source code for a complete frame structure of a standard KDE application with support for the
Document-View-Controller model, a menubar, <idx/toolbar/ and statusbar as well as a set of standard documentation based on <idx/SGML/, KDE-links
and application icons. This is the application type usually needed for a new KDE project.
<item>Mini KDE Application: contains the same general structure as the Normal KDE Application type but with the difference that the
application's code only provides a widget as a window.
<item>Normal <idx/Qt/ Application: works like the normal KDE application by it's code with the difference that the project is based on the <idx/Qt/
library only and doesn't contain KDE support. This is intended for projects that have to be portable to Windows platforms or that don't
want to require <idx/KDE libraries/ by the end-user.
<item>C Application: Is based on the C compiler only and runs in a console.
<item>C++ Application: Is based on the C++ compiler only and runs in a console like the C application, therefore doesn't require
X-Window.
<item>Custom project: creates an empty project without any sourcecode. This is intended for already existing projects to port
to KDevelop or for projects where you want to start from scratch. Mind that you have to take care for makefiles and configure scripts
all by yourself.
</itemize>

In this chapter we'll see how the KAppWizard can be invoked and what has to be done to generate a KDE application project. This will
also be the initial step of our coverage, where we will create the initial version of a sample project. For all other project types the
steps are usually the same, just you may not have certain options available.

<sect>Invoking KAppWizard and Project Generation
<p>
<sect1>Starting KAppWizard and the First Page
<p>
To start with your first KDE application, open KDevelop. Then select "New..." from the "Project"-menu. The KAppWizard starts, and you
see a tree on the first page, containing the project types. When a type is selected, you see a preview how it will look like after the
initial build process. Choose the KDE subtree, Normal type. Then press the "Next" button on the bottom of the first wizard page. This
will switch to the next page, where you have to set the general project options.

<sect1>The Generate Settings Page
<p>
For our sample application, we choose the project name <tt/KScribble/; therefore insert this in the field "Projectname". Then select
the directory you want to have your project build in; the default is your home directory. You can enter the path manually or you can as
well press the button on the right to select the directory by a dialog.

Next, you have to enter the Version number. For the first version, set this to <tt/0.1/. It is usual to number new applications that are
in development for the first release lower than 1, and as the initial version will only contain the standard framework, we'll name this
the 0.1 version.

Finally, add your name to the "Author" field and your email address. You can leave all other options to their default settings.

To give you some information about all other options, you can press the right mouse button over the options, and you will get a quick-help
window that describes the option's purpose.

These are:
<itemize>
<item><bf/generate sources and headers:/  generates the application source code
<item><bf/GNU-Standard-Files:/  adds a copy of the GNU-General Public License to the project as well as some standard files for user
information when distributing the package.
<item><bf/User-Documentation:/ the user handbook in <idx/SGML/, already prepared for your project.
<item><bf/<idx/API/-Documentation:/ creates an initial HTML documentation set for the <bf/A/pplication <bf/P/rogramming <bf/I/nterface.
<item><bf/lsm-File:/ the Linux Software Map, used by distribution sites and contains short information about the project's purpose and
requirements.
<item><bf/<idx/.kdelnk/-File: / a KDE link that will install your application in the "Applications" tree of the KDE-Panel.
<item><bf/Program-Icon: / an Icon that represents your project and can be used to create a link on the desktop.
<item><bf/Mini-Icon: / a Mini-version of the program icon that represents your application besides its name in the KDE-Panel and is
shown in your application's dialogs and main-window in the left upper corner.
</itemize>

Now we'll switch to the next page by pressing the "Next" button again to set the template for the header files of your project.


<sect1>The Header and Source Templates
<p>
The header template page allows you to automatically include a preface for your header files, containing the filename, the construction
date, the year of the copyright, also your name and your email address. You don't have to change those uppercase parts yourself, as
KAppWizard does this automatically and stores the template for this project, so it can be used later again for creating new files.

The second part of the default header template contains a license information. By default, your project is set under the GNU General
Public License, which is also included in the package. This license is used to protect your source code against any person that just
copies your sources for his own purpose. The General Public License offers you this license for free and thereby protects your rights
as the author, and is common for distributing free software. To get more information about the license, you should read the COPYING
file in the base directory of your new project later which is a copy of the GPL and ships with your application already.

Anyway, you may want to choose another license or another header template you're already using for your projects. Therefore you can
either edit the given default template directly. To do this, you're given the template in an editing window. To clear the default page,
select "New", to use another template, select "Load...", which lets you choose the template file.

When you're done, go to the next page by entering "Next". This is the template page for your source files and is generally the same as
the header template page. The only difference is that this template is used for your implementation files.

<sect1>Creating the Project
<p>

Now that you've set all options for <em/KScribble/, select "Next" and press the "Generate" button on the bottom of the wizard window.
If the button is not available, you haven't set all options correctly. To correct any errors, step back in the Wizard with "Back".

Then you'll see what KAppWizard does- he copies all templates to your project directory and creates the new project. After KAppWizard
is finished, the "Cancel" button changes to an "Exit" button to leave the wizard.

After this last step, you're finished with creating a new project. KDevelop then loads it and the tree-views let you browse through the
project's files and classes.


In the next section, we'll discuss how to build and run your first version of <em/KScribble/ and how the source code is organized.

<sect>The First Build
<p>
After our project is generated, we'll first make a trip through the source code to get a general understanding how the application frame
works. This won't only help to get started but we'll know where to change what in later steps.

When opening the LFV (Logical File Viewer) page on the tree-view, you see some folders that already sort the project files relevant to
the developer. The first two folders are "Header" and "Sources". The Header-folder therefore logically contains all header files of the
project, the Sources-folder all sourcecodes. All other folders are of no interest right now, so we'll turn back here later to see what
they contain.

The two folders then contain the following files:

<bf/Headers:/
<itemize>
<item><bf/kscribble.h :/ contains the class declaration for the class <bf/KScribbleApp/.
<item><bf/kscribbledoc.h :/ contains the class declaration for the class <bf/KScribbleDoc/.
<item><bf/kscribbleview.h :/ contains the class declaration for the class <bf/KScribbleView/.
<item><bf/resource.h :/ contains a macro collection for the menu-ID's
</itemize>

<bf/Sources:/
<itemize>
<item><bf/kscribble.cpp :/ contains the implementation of the class <bf/KScribbleApp/.
<item><bf/kscribbledoc.cpp :/ contains the implementation of the class <bf/KScribbleDoc/.
<item><bf/kscribbleview.cpp :/ contains the implementation of the class <bf/KScribbleView/.
<item><bf/main.cpp :/ contains the <bf/main()/ function implementation.
</itemize>

Before diving into the sources, we'll let KDevelop build and run our new application. To do this, select "Make" from the "Build"-menu
or hit the according button on the <idx/toolbar/. The output window opens from the bottom of KDevelop and lets you see what <tt/make/ does by
the messages it gives us:

<tscreen><code>
1   Making all in docs
2   make[1]: Entering directory `/home/rnolden/Tutorial/kscribble1/kscribble/docs'
3   Making all in en
4   make[2]: Entering directory `/home/rnolden/Tutorial/kscribble1/kscribble/docs/en'
5   make[2]: Nothing to be done for `all'.
6   make[2]: Leaving directory `/home/rnolden/Tutorial/kscribble1/kscribble/docs/en'
7   make[2]: Entering directory `/home/rnolden/Tutorial/kscribble1/kscribble/docs'
8   make[2]: Nothing to be done for `all-am'.
9   make[2]: Leaving directory `/home/rnolden/Tutorial/kscribble1/kscribble/docs'
10  make[1]: Leaving directory `/home/rnolden/Tutorial/kscribble1/kscribble/docs'
11  make[1]: Entering directory `/home/rnolden/Tutorial/kscribble1/kscribble'
12  g++ -DHAVE_CONFIG_H -I. -I. -I.. -I/opt/kde/include -I/usr/lib/qt/include  -I/usr/X11R6/include    -O0 -g -Wall  -c
    kscribbleview.cpp
13  g++ -DHAVE_CONFIG_H -I. -I. -I.. -I/opt/kde/include -I/usr/lib/qt/include  -I/usr/X11R6/include    -O0 -g -Wall  -c
    kscribbledoc.cpp
14  g++ -DHAVE_CONFIG_H -I. -I. -I.. -I/opt/kde/include -I/usr/lib/qt/include  -I/usr/X11R6/include    -O0 -g -Wall  -c 		
    kscribble.cpp
15  g++ -DHAVE_CONFIG_H -I. -I. -I.. -I/opt/kde/include -I/usr/lib/qt/include  -I/usr/X11R6/include    -O0 -g -Wall  -c
    main.cpp
16  /usr/bin/moc ./kscribble.h -o kscribble.moc.cpp
17  g++ -DHAVE_CONFIG_H -I. -I. -I.. -I/opt/kde/include -I/usr/lib/qt/include  -I/usr/X11R6/include    -O0 -g -Wall  -c
    kscribble.moc.cpp 		
18  /usr/bin/moc ./kscribbledoc.h -o kscribbledoc.moc.cpp
19  g++ -DHAVE_CONFIG_H -I. -I. -I.. -I/opt/kde/include -I/usr/lib/qt/include  -I/usr/X11R6/include    -O0 -g -Wall  -c
    kscribbledoc.moc.cpp
20  /usr/bin/moc ./kscribbleview.h -o kscribbleview.moc.cpp
21  g++ -DHAVE_CONFIG_H -I. -I. -I.. -I/opt/kde/include -I/usr/lib/qt/include  -I/usr/X11R6/include    -O0 -g -Wall  -c
    kscribbleview.moc.cpp

22  /bin/sh ../libtool --silent --mode=link g++  -O0 -g -Wall   -o kscribble -L/opt/kde/lib  -L/usr/X11R6/lib -rpath /opt/kde/lib
    -rpath /usr/X11R6/lib kscribbleview.o kscribbledoc.o kscribble.o main.o kscribble.moc.o kscribbledoc.moc.o kscribbleview.moc.o
    -lkfile -lkfm -lkdeui -lkdecore -lqt -lXext -lX11

23  make[1]: Leaving directory `/home/rnolden/Tutorial/kscribble1/kscribble'
</code></tscreen>
<p>
As you see, we've put line numbers in front of each line, which won't appear in your output; it just makes it easier to describe what
happened during the build now. First of all, <tt/make/ works recursively. That means, it starts from the directory it is invoked in and
then goes into the subdirectories first, returns and processes the next directory. Finally, the directory it was started is processed
and <tt/make/ finishes. Therefore, <tt/make/ started in the main project directory containing the sources first. In line 1 and 2, you
see how the <tt/make/ process goes into the <tt/docs/ directory, then into the <tt/en/ subdirectory. As there isn't anything to do, it
leaves these directories until it returns to the source-directory <tt/kscribble/ in line 11. Then, the real work starts: <tt/make/
invokes the compiler, here <tt/g++/ to compile the source-file <tt/kscribbleview.cpp/. The macro <tt/-DHAVE_CONFIG_H/ says that the file
<tt/config.h/ should be used. This is a file containing macros for the specific platform and application and is located in the main
project directory. The following <tt/-I/ commands add the include path where <tt/g++/ can find the includes it needs. These are the
current directory, the main project directory (by <tt/-I../) and the include path for the KDE, <idx/Qt/ and X11 library header files. The
directories for these include files were determined by the <tt/configure/ script and set in the Makefiles, therefore, the compiler
knows where these are located. Finally, <tt/-O0/ sets the optimization to zero (no optimization), <tt/-g/ enables debugging, <tt/-Wall/
sets the compiler warnings to <tt/all/ and <tt/-c/ tells the compiler to produce an object file, so only compile the file.

This is done for the other source files of our project as well in lines 13-15. Obviously, our sources are compiled, but instead of
linking the object files of the sources to the final binary, we see some other commands. In line 16, you see that the program "moc" is
called to process the header file  <tt/kscribble.h/, with its output in <tt/kscribble.moc.cpp/. Then, in line 17, this source file is
compiled as well. The same happens with the other project header files until line 21. Now, as the <idx/Qt/ toolkit contains the signal/slot
mechanism, but still stays a C++ implementation, you're using certain keywords that are not originally C++ language, such as the
<tt/signals:/ and <tt/slots:/ declaration in your classes. This gives you the ability to easily allow object communication for all
class objects that inherit the class <tt/QObject/, so you can avoid the usual callback pointer functions. Therefore, the application
needs the sources that implement this functionality, and that is why <tt/moc/ is called. <tt/Moc/ is the Meta Object Compiler of the <idx/Qt/
toolkit and builds the implementation for signals and slots mechanisms by parsing the header file and producing a source output that
has to be compiled in the binary. As KDevelop projects use <tt/automoc/ to determine, which header file needs to be processed, you
don't have to take care for any call on <tt/moc/ and the C++ compiler on the moc output files. Just remember the rules that make a
class use the signals and slots- inheritance from <tt/QObject/ or any class that inherits <tt/QObject/ itself, inclusion of the
<tt/Q_OBJECT/ macro (without semicolon !) at the beginning of the class declaration and the declarations for signals and slots.

Finally, your binary is built by the compiler. The output binary is called <tt/kscribble/, the linker includes the path for the KDE and
X11 libraries and links the sources against the libraries <tt/kfile, kfm, kdeui, kdecore, qt, Xext/ and <tt/X11/. Then you're done and
make exits.

<sect>The Source Skeleton
<p>

To gain a concept of how a KDE application works, we'll first have a very close look at the source skeleton already provided by the
Application Wizard. As we already saw, we're having a set of source and header files that build the initial code for the application
and make it ready-to-run. Therefore, the easiest way to explain the code is to follow the implementation line by line as it is
processed during executing the program until it enters the main event loop and is ready to accept user input. Then, we'll have a look
at the functionality that enables user interaction and how certain things work. This is probably the best way to explain the framework
and, as it is similar to almost all <idx/KDE applications/, will enable you to read source codes from other projects as well; additionally,
you will know where to change what part of the code to make your applications behave the way they are designed for.

<sect1>The <tt/main()/ Function<label id="The main() Function">
<p>
As the application begins its execution with entering the <tt/main()/ function, this will be the start for our code examination. The
<tt/main()/ function of <em/KScribble/ is implemented in the file <tt/main.cpp/ and can also be found using the Class Browser by
selecting the "Globals" folder, sub-folder "Functions":

<tscreen><code>
1  #include "kscribble.h"
2
3  int main(int argc, char* argv[]) {
4    KApplication app(argc,argv,"KScribble");
5
6    if (app.isRestored())
7    {
8       RESTORE(KScribbleApp);
9    }
10   else
11   {
12      KScribbleApp* kscribble = new KScribbleApp;
13      kscribble->show();
14      if(argc > 1){
15        kscribble->openFile(argv[1]);
16      }
17    }
18    return app.exec();
19  }
</code></tscreen>

Now, what happens first is the usual creation of a <tt/<cdx/KApplication// object, which gets our application name <em/KScribble/ as a third
parameter. When creating a new <tt/<cdx/KApplication//, a new <tt/<cdx/KConfig// instance is created as well which is connected to a configuration
file in $HOME/.kde/share/config/appname + rc which stores all information we want to use when starting application windows. The name we
passed the constructor of <tt/app/ will be used as the window title later.

Despite of the example code for turning the first <idx/Qt/ application into a KDE one, the following code is somewhat different. After the
<tt/<cdx/KApplication// object is present, we're testing if the application is started by the session management of <tt/kwm/ or manually by
the user. This can be found out when calling <tt/isRestored()/ on the <tt/app/ object, which returns <tt/true/ for session management
and <tt/false/ for a normal start.

As session management is a main feature of <idx/KDE applications/ and widely used by the framework but a lot more to explain, we'll follow
the <tt/else{}/ section first; then we'll come back and explain the session functionality in a later step.

<sect1>User Application Start
<p>
The <tt/else{}/ section now creates an instance of the class <tt/KScribbleApp/ in line 12. This object is called to show itself in line
13 as usual; line 14 determines if a command-line argument has been passed and, as this is usually the name of a file, calls the
<tt/kscribble/ object to open it with <tt/openFile()/.

Note that we didn't call the method <tt/setTopWidget(kscribble)/ for our application- this is already done by the class that <tt/KScribbleApp/
inherits. Now we'll have a look at our <tt/KScribbleApp/ object- what is it and what does it provide already ?  The only thing we know
until now is that it has to be a Widget to represent the user interface in the main window. Let's turn to the class implementation of
<tt/KScribbleApp/, which can be found in the file <tt/kscribble.cpp/ or by a click on the class icon in the Class Browser. As the
instance is created by the constructor.
First of all, we see that it inherits the class <tt/<cdx/KTMainWindow//, which is a part of the <tt/kdeui/ library. This class itself
inherits <tt/<cdx/QWidget//, so, as usual, we have a normal widget as the top-level window. <tt/<cdx/KTMainWindow// contains a lot of functionality
that the class <tt/KScribbleApp/ makes use of. It provides a menubar, <idx/toolbar/, statusbar and session management support. The only thing
we have to do when sub-classing <tt/<cdx/KTMainWindow// is to create all the objects we need and create another widget that is managed by our
<tt/<cdx/KTMainWindow// instance as the main view in the center of the window; usually this is the place where the user works like a
text-editing view.

<sect2>The Constructor
<p>
Let's have a look at the code for the constructor and see how the instance is created:

<tscreen><code>
1   KScribbleApp::KScribbleApp()
2   {
3     config=kapp->getConfig();
4	
5
6     ///////////////////////////////////////////////////////////////////
7     // call inits to invoke all other construction parts
8     initMenuBar();
9     initToolBar();
10    initStatusBar();
11    initKeyAccel();
12    initDocument();
13    initView();
14
15    readOptions();
16
17    ///////////////////////////////////////////////////////////////////
18    // disable menu and toolbar items at startup
19    disableCommand(ID_FILE_SAVE);
20    disableCommand(ID_FILE_SAVE_AS);
21    disableCommand(ID_FILE_PRINT);
22
23    disableCommand(ID_EDIT_CUT);
24    disableCommand(ID_EDIT_COPY);
25    disableCommand(ID_EDIT_PASTE);
26  }
</code></tscreen>

We see that our config instance of <tt/<cdx/KConfig// now points to the applications configuration, so we can operate
with the configuration file entries later.

Then, all parts of the application that are needed are created by their according member functions that are specific to our main
window:

<itemize>
<item><bf/initMenuBar():/  constructs the menubar,
<item><bf/initToolBar():/  constructs the <idx/toolbar/,
<item><bf/initStatusBar():/ creates the statusbar,
<item><bf/initKeyAccel():/  sets all keyboard accelerator<nidx/accelerator/s for our application by the global and application specific keyboard
configuration
<item><bf/initDocument():/ creates the document object for the application window
<item><bf/initView():/      creates the main widget for our view within the main window
<item><bf/readOptions():/  reads all application specific settings from the configuration file and initializes the rest of the
application such as the recent file list, the bar positions and the window size.
</itemize>

Finally, we disable some commands that the user can do, because they should not be available in the current application state.
As we now have a general overview how the application window is created, we will look into the details of how the user elements are
constructed by following the above methods.

<sect2>The Menubar
<p>
As shown above, the menubar of <em/KScribble/ is created by the method <tt/initMenuBar()/. There, we create a set of
<tt/<cdx/QPopupMenu//s that pop up if the user selected a menuentry. Then, we insert them into the menubar and connect to the entries.

First, we create our <tt/recent_file_menu/, which will contain the names of the last 5 opened files. We have to do this first, because
this menu is inserted into the <tt/file_menu/. Then we add the connection directly- we just retrieve the signal that is emitted by the
menuentry with its entry number and call the <tt/slotFileOpenRecent( int )/, which then calls the right file from the recent file list
to be opened.

Then we create our "File"-menu. This will be the menu that will be visible in the menubar. The standard actions are then inserted into
the popup-menu one by one- first the commands for creating a new file, open a file, close a file etc., finally "E&amp;xit" to close the
application. All menu entries have to be created in the order as they appear later, so we have to keep an eye on which we want to have
at what place. As an example, we look at the following entries:

<tscreen><verb>
file_menu->insertItem(Icon("fileopen.xpm"), i18n("&amp;Open..."), ID_FILE_OPEN );
file_menu->insertItem(i18n("Open &amp;recent"), recent_files_menu, ID_FILE_OPEN_RECENT );
</verb></tscreen>

The first one inserts the "Open..." entry. As we want to have it with an icon, we use the <tt/insertItem()/ method with the icon's
name. To understand the icon loading process, we need to know what or where <tt/Icon()/ is declared- in fact, it is a macro provided by
the class <tt/<cdx/KApplication//:

<tscreen><verb>
#define Icon(x) kapp->getIconLoader()->loadIcon(x)
</verb></tscreen>
Additionally, it uses the following macro internally to get access to the application object:
<tscreen><verb>
#define kapp KApplication::getKApplication()
</verb></tscreen>

This means that the <tt/<cdx/KApplication// object already contains an Icon loader instance- we only have to get access to it; then it will
load the according icon. As our icons are all from the <idx/KDE libraries/, we don't have to take care for anything else- they are installed
on the system automatically, therefore we also don't have to include them into our application package to use them.

After the icon parameter (which is optional), we insert the menuentry name by <tt/i18n("&amp;Open...")/.  There, we have to watch two
things: first, the entry is inserted with the <tt/i18n()/ method. Like the <tt/Icon()/ entry, it is a macro defined in <tt/<cdx/kapp.h// as
well and calls the <tt/KLocale/ object of <tt/<cdx/KApplication// to translate the entry to the currently used language:

<tscreen><verb>
#define i18n(X) KApplication::getKApplication()->getLocale()->translate(X)
</verb></tscreen>

Hereby, it should be mentioned that one could think "I don't want to use macros"- you can do that in most cases. But here it is
immanent to use <tt/i18n()/ because for internationalization the according language files have to be build. As this build process
depends on the <tt/i18n/ string, you have to use the macro.

As you might have already guessed, the ampersand within menu entries is later interpreted as a line under the following letter in the
menuentry. This allows fast access to the menu command via the keyboard when the user presses the <tt/Alt/-key in conjuction with the
underlined letter.

Finally, we're giving the menuentry an ID, which is an integer value by which we can find the entry later. To keep
an overview over the used values, these are defined by macros and are collected in the file <tt/resource.h/ within your project. For
consistency, these macros are all uppercase and begin with ID_, then the menu name followed by the entry. This makes it very easy to
remember the sense of each entry anywhere within the code, so you don't have to turn to the menubar implementation again to look up the
entries.

The second example entry shows another variant of the <tt/insertItem()/ method. Here, we add  the recent_files_menu popup menu as a
menuitem. This means, that the entry shows itself with the given string "Open recent", followed by a right arrow. On selection, the
recent file popup menu appears and the user can choose the last file.

Last but not least there are a lot of other ways to insert menu items- the framework keeps this as simple as possible. More information
can be obtained in the <idx/Qt/ documentation about the <tt/<cdx/QMenuData// class.

Now, after we created the popup menus <tt/file_menu, edit_menu/ and <tt/view_menu/, we have to include a "Help"-menu as well. We could
do this like the others as well, but the <tt/<cdx/KApplication// class offers a nice and quick method to cover this:

<tscreen><verb>
help_menu = kapp->getHelpMenu(true, i18n("KScribble\n" VERSION ));
</verb></tscreen>

This is all we have to do to get a help menu that contains an entry for the help contents with the F1 keyboard shortcut<nidx/shortcuts/, an about-box
for the application and an about-box for the KDE (which can be disabled by calling <tt/getHelpMenu(false,...);/).  The contents for our
applications about-box is set with the <tt/i18n()/ string again- VERSION takes the macro that is defined for the project version number
in the file <tt/config.h/, so we don't have to change this every time manually when we want to give out a new release. Feel free to add
any information about your application here, e.g. your name, email address, copyright and the like.

Now we only have to insert the pop-ups into the menubar. As <tt/<cdx/KTMainWindow// already constructs a menubar for us, we just insert them
by calling <tt/menuBar()->insertItem();/.

What is left to do is to connect the menu-entries with the methods they will execute. Therefore, we connect each popup menu by its
signal <tt/activated( int )/ to a method <tt/commandCallback( int )/, which contains a <tt/switch/ statement that calls the according
methods for the menu entries. Additionally, we connect the pop-ups by their signal <tt/highlighted( int )/ to provide statusbar help on
each entry. Whenever the user moves his mouse or <idx/keyboard focus/ to an entry, the statusbar then shows the according help message.

After we finished with the menubar, we can continue with the <idx/toolbar/ in the following section. Mind that an instance of a
<tt/<cdx/KTMainWindow// can only have one menubar visible at a time; therefore if you want to construct several menu bars, you have to create
them separately with instances of <tt/<cdx/KMenuBar// and set one of them by the according methods of <tt/<cdx/KTMainWindow// as the current
menubar. See the <idx/class documentation/ of <tt/<cdx/KMenuBar// for more detailed information about how to extend the features, also see <ref
id="Configuring Menubars and Toolbars" name="Menüsorok és Eszközsorok Konfigurálása">.

<sect2>The Toolbar
<p>
The creation of <idx/toolbar/s now is even simpler than that of menubars. As <tt/<cdx/KTMainWindow// already provides <idx/toolbar/s, which are created
by the first insertion, you are free to create several ones. Just add the buttons for the functions you want to provide:

<tscreen><verb>
toolBar()->insertButton(Icon("filenew.xpm"), ID_FILE_NEW, true, i18n("New File") );
</verb></tscreen>

This adds a left-aligned button with the icon "filenew.xpm" with the according ID to the <idx/toolbar/. The third parameter decides if the
button should be enabled or not; by default we set this to <tt/true/, because our <tt/disableCommand()/ methods at the end of the
constructor do this for us automatically for both menu and <idx/toolbar/ entries. Finally, the last parameter is uses as a so-called
"Quick-Tip"- when the user moves the mouse pointer over the button so that it gets highlighted, a small window appears that contains a
short help message, whose contents can be set here.

Finally, all <idx/toolbar/ buttons are connected to our <tt/commandCallback()/ method again by their signal <tt/clicked()/. On the signal
<tt/pressed()/, we let the user receive the according help message in the statusbar.

<bf/Additional Information:/

As <idx/toolbar/s are created using the class <tt/<cdx/KToolBar//, you should have a look at the according documentation. With
<tt/<cdx/KToolBar//, a lot of things needed in a <idx/toolbar/ can be realized such as delayed pop-ups if your button wants to pop up a menu
when the button keeps being pressed or even widgets like combos. Also, by default, the <idx/toolbar/ fills the complete width of the
window, which makes it look nice for using a single bar. When using more than one, you should also think about setting the bar
size to end at the most right button, so other bars can be displayed in the same row below the menubar. We will discuss certain
techniques about designing and extending <idx/toolbar/s in section <ref id="Configuring Menubars and Toolbars" name="Menüsorok és
Eszközsorok Konfigurálása">.

<sect2>The Statusbar
<p>
The statusbar is, as well as the other bars, already provided by the <tt/<cdx/KTMainWindow// instance, so we just have to insert our items as
we want to. By default, the framework contains only one entry that displays statusbar help. For a lot of applications this may not
last; then you would add the entries you need for displaying e.g. coordinates and the like.

Also, an application can only have one statusbar at a time like a menubar. If you want to construct several ones, you should create
them separately and set the current bar by the according method of <tt/<cdx/KTMainWindow//.  The statusbar also offers to insert widgets,
which can be used to produce nice habits for displaying progress-bars like KDevelop does. Refer to the <idx/class documentation/ of
<tt/KStatusBar/.

<sect2>Keyboard Accelerators
<p>
With reaching the method <tt/initKeyAccel()/, we already constructed the standard items of an application main window- the menubar,
<idx/toolbar/ and statusbar. Indeed, we didn't set any keyboard accelerator<nidx/accelerator/s by which advanced users that only want
to work with the keyboard have a quick access to certain commands that are used most often during work with our program. To do this, we
could have inserted the accelerator<nidx/accelerator/ keys by the insertion of the menu-items for example, but KDE offers a good
solution to construct and maintain keyboard accelerator<nidx/accelerator/s. A lot of users want to have them configurable on one hand
and on the other standard accelerator<nidx/accelerator/s should be the same over all applications. Therefore, the KDE control center
offers configuring standard keyboard accelerator<nidx/accelerator/s globally by using the <tt/<cdx/KAccel// class. Additionally, the
<idx/KDE libraries/ contain a widget that lets users configure application specific keyboard shortcut<nidx/shortcuts/s easily. As the
application framework only uses menu-items that have standard actions such as "New" or "Exit", these are set by the method
<tt/initKeyAccel()/. Standard actions just have to be connected, for your application specific keyboard values, you have to insert them
first by specifying the keyboard accelerator<nidx/accelerator/ name and then connect them. As our accelerator<nidx/accelerator/s are
all present in the menubar, we have to change the accelerator<nidx/accelerator/s for the popup entries. Finally we call
<tt/readSettings()/, which reads the current settings from the root window of KDE containing the configuration of standard
accelerator<nidx/accelerator/s, then the settings for accelerator<nidx/accelerator/s specified in the application's config file. When
we're going further into our example project, we will also talk about how to configure our application specific
accelerator<nidx/accelerator/s by a configuration dialog, see <ref id="Configuring Menubars and Toolbars" name="Menüsorok és
Eszközsorok Konfigurálása"> for that part of the development process.

<sect2>The Document-View Model
<p>
The next two member function calls, <tt/initDocument()/ and <tt/initView()/, are finally building the part that the application windows
are supposed to provide to the user: an interface to work with data that the application is supposed to manipulate; and that is also
the reason why the application framework contains three classes, an <tt/*App/, <tt/*View/ and <tt/*Doc/ class. To understand, why this
structure is helpful, we'll look a bit aside the actual code and introduce some theory, then we'll switch to the program again to see
how the KDevelop frameworks support such a model.

Basically, all what has been explained about the framework is that we need an application instance that contains a main window. This
window is responsible to provide the basic interface for the user- it contains the menubar, <idx/toolbar/s and statusbar and the event
controlling for user interaction. Also, it contains an area, that is described as a "view". Now, the purpose of a view is generally, to
display the data that the user can manipulate, e.g. a part of a text file. Although the text file is probably larger than the view is
able to display on the screen, it offers the user to go to the part that he wants to see (therefore it is a view), and there the user
can as well change the data of the file contents. To give the programmer a better way to separate parts of the application by code, the
Document-View Model has been invented. Although not a standard, it provides a structure how an application should work:

<itemize>
<item> The application contains a controller object,
<item> a View object that displays the data the user works with
<item> and a Document object that actually contains the data to manipulate.
</itemize>

Back to the example of working with a text file- there, this model would work the way that the Document would read the file contents and
provides methods to change the data as well as to save the file again. The view then processes the events that the user produces by the
keyboard and the mouse and uses the document object's methods to manipulate the document data.

Finally, the controller object is responsible for user interaction by providing the document and the view objects as well as the
interfaces to send commands like opening and saving. Additionally, certain methods of the view object can be provided by commands that
can be accessed via keyboard accelerator<nidx/accelerator/s or the mouse on menubars and <idx/toolbar/s.

This Document-View model has some advantages- it separates the program's code more object-oriented and by this offers more flexibility
in general, e.g. the same document object could be displayed by two views at the same time; either by a new view in a new window or by
tiling the current one that then contains two view object that build the actual window view region.

Now, if you're coming from MS-Windows systems you may have some experience with that- the MFC already provide a document model that is
ready to use. For KDE and <idx/Qt/ applications, things are a bit different. <idx/Qt/ is a powerful toolkit as it provides the most
needed classes, widgets etc. But there wasn't any intention to take care of the document-view model, and as KDE is inheriting <idx/Qt/,
there weren't any tendencies to introduce such a model either. This somehow has its reason in the fact that usually X-applications
don't work with an MDI (Multiple Document Interface).  Each main window is responsible for its data and that reduces the need of a
document model to the fact that methods to work on documents are always implied into widgets. The only exception from this currently is
the <em/KOffice/ project that is intended to provide a complete office suite of applications like a word processor, a spreadsheet etc.
Technically, this is realized by two changes two the normal usage of <idx/Qt/ and KDE:

<itemize>
<item>KOffice uses KOM and the free MICO implementation of CORBA for object communication,
<item>the KOffice applications use a document-view model to allow all applications to work with any KOffice data objects
</itemize>

But as KDevelop currently targets on using the current libraries of KDE 1.1.x and <idx/Qt/ 1.4x, we can't use this model by default-
this will come in further releases of a KDE 2, which will (hopefully) contain two new major changes in relation to the current
situation:
<enum>
<item>an MDI interface for <cdx/KTMainWindow/
<item>the KOM libraries that provide a document model
</enum>

Therefore, the current way for application developers can be to either implement all needed document methods within their view or to
try to reproduce a document model by themselves. KDevelop therefore contains such a reproduction by providing the needed classes and
the basic methods that are generally used for a Document-View model with the application frameworks for <idx/Qt/ and KDE.

Back to the code, you now can imagine the purpose of the two methods we mentioned at the beginning of this section: the
<tt/initDocument()/ and <tt/initView()/ functions. The <tt/initDocument()/ constructs the document object that represents the
application window data and initializes the basic attributes like setting the modification bit that indicates if the data currently
used has been changed by the user. Then, the <tt/initView()/ method constructs the <tt/*View/ widget, connects it to the document and
calls the <tt/setView()/ method of <tt/<cdx/KTMainWindow// to tell the <tt/*App/ window to use the <tt/*View/ widget as it's center view.

For the developer, it is important to know that during the development process he has to:

<itemize>
<item>re-implement the virtual methods for mouse and keyboard events provided by <tt/<cdx/QWidget// in the <tt/*View/ object to provide the
means to manipulate data,
<item>re implement the <tt/paintEvent()/ of <tt/<cdx/QWidget// in the <tt/*View/ object to repaint() the view after changes,
<item>complete the implementation for printing the document via the printing method of the <tt/*View/ object,
<item>add the serialization for the <tt/*Doc/ object to provide file loading and saving,
<item>add the document data structure implementation to the <tt/*Doc/ object that is representing the document data logically in the
memory.
<item>add any methods that have to be accessible by the user via accelerator<nidx/accelerator/ keys and menus/<idx/toolbar/s.
</itemize>


<sect2>Application Configuration
<p>
Now, after we created all instances of the <tt/<cdx/KTMainWindow// instance of our application to create the first window, we have to
initialize certain values that influence the look of the program. For this, we call <tt/readOptions()/, which gets all values and calls
the methods needed to set the according attributes. The KDE-Core library contains the class <tt/<cdx/KConfig// that provides a good
possibility to store values in configuration files as well as to read them in again. Also, as each <tt/<cdx/KApplication// instance
creates it's resource file already, we only have to access this file and create our values. As <tt/<cdx/KConfig// provides us the file
object, we have to use the class <tt/<cdx/KConfigBase// to read and write all entries. As writing is very easy to do with
<tt/writeEntry()/ methods, reading depends on the attribute type which we want to initialize. Generally, an entry in the configuration
file contains a value name and a value. Values that belong together in some context can be collected in groups, therefore we have to
set the group name before we access the value afterwards; the group has to be set only once for reading a set of attributes that are in
the same group. Let's have a look at what we want to read in:

<tscreen><code>
1   void KScribbleApp::readOptions()
2   {
3
4      config->setGroup("General Options");
5
6      // bar status settings
7      bool bViewToolbar = config->readBoolEntry("Show Toolbar", true);
8      view_menu->setItemChecked(ID_VIEW_TOOLBAR, bViewToolbar);
9      if(!bViewToolbar)
10       enableToolBar(KToolBar::Hide);
11
12     bool bViewStatusbar = config->readBoolEntry("Show Statusbar", true);
13     view_menu->setItemChecked(ID_VIEW_STATUSBAR, bViewStatusbar);
14     if(!bViewStatusbar)
15       enableStatusBar(KStatusBar::Hide);
16
17     // bar position settings
18     KMenuBar::menuPosition menu_bar_pos;
19     menu_bar_pos=(KMenuBar::menuPosition)config->readNumEntry("MenuBar Position", KMenuBar::Top);
20
21     KToolBar::BarPosition tool_bar_pos;
22     tool_bar_pos=(KToolBar::BarPosition)config->readNumEntry("ToolBar Position", KToolBar::Top);
23
24     menuBar()->setMenuBarPos(menu_bar_pos);
25     toolBar()->setBarPos(tool_bar_pos);
26
27     // initialize the recent file list
28     recent_files.setAutoDelete(TRUE);
29     config->readListEntry("Recent Files",recent_files);
30
31     uint i;
32     for ( i =0 ; i < recent_files.count(); i++){
33       recent_files_menu->insertItem(recent_files.at(i));
34     }
35
36     QSize size=config->readSizeEntry("Geometry");
37     if(!size.isEmpty())
38       resize(size);
39   }
</code></tscreen>

As we have seen in one of the above code parts, the first action our constructor does was:

<tscreen><verb>
config=kapp->getConfig();
</verb></tscreen>

which sets the <tt/<cdx/KConfig// pointer <tt/config/ to the application configuration. Therefore, we don't have to care for the location of
the configuration file. Indeed, the file is, according to the KDE File System Standard (KDE FSS), located in
<tt>&dollar;HOME/.kde/share/config/</tt>; we will have a closer look about the KDE FSS in a later step when we're setting installation
locations for project files. As the config file is placed in the user's home directory, each user has it's own appearance of his
application except for values that are located in a system wide configuration file that can optionally be created and installed by the
programmer in the KDE directory. But, although this could help in some cases, we should avoid any dependency of our application towards
the existing of file entries. Therefore, all read methods provided by <tt/<cdx/KConfigBase// allow to add a default value to be used
when the entry doesn't exist. Another thing important to a programmer is that the configuration file is stored in plain text, and this
is for some reasons as well as you have to watch some criteria:

<itemize>
<item>the user is able change the configuration file by a plain text editor
<item>if the user wants to change values by hand, the entries should be very transparent to determine their purpose
<item>for entries that have to be saved, but are critical in terms of security like passwords, you have to look for a proper solution
to ensure the security.
</itemize>

Now that we know the basics, we're going to analyze the code. As said, we only have to use our config pointer to access the values.
First, in line 4, we set the current group to "General Options". This indicates that the values used are somewhat general attributes
for the application. Then we read the values for the <idx/toolbar/ and statusbar- these have to be saved when the application closes to
restore their status again when the user restarts the program. As the bars can only be on or off, we use a boolean value, therefore,
our method is <tt/readBoolEntry()/. The process is identical for both bars, so we only have a look at the lines 7-10 to watch what's
happening for the <idx/toolbar/. First, we read the value into the temporary variable <tt/bViewToolbar/ at line 7. The value name in
the file is "Show Toolbar" and, if the value is not present (which would be the case the first time the application starts), the
default value is set to <tt/true/. Next, we set the checkmark for the menuentry for en-/disabling the <idx/toolbar/ by this value: we
call <tt/setItemChecked()/ on the view menu, entry <tt/ID_VIEW_TOOLBAR/ with our attribute. Finally, we set the <idx/toolbar/ to use
the value. By default, the <idx/toolbar/ is visible, therefore, we only have to do something if <tt/bViewToolbar/ is <tt/false/. With
<tt/enableToolBar()/ (line 10) we're setting the bar to hide itself if it is disabled.

Next, we have to read the bar positions. As the user might have changed the bar position by dragging a bar with the mouse to another
view area, these have to be saved as well and their status restored. Looking at the classes <tt/<cdx/KToolBar// and
<tt/<cdx/KMenuBar//, we see that the bar positions can be:

<tscreen><verb>
enum BarPosition {Top, Left, Bottom, Right, Floating, Flat}
</verb></tscreen>

As this value has been written in a numeric value, we have to read it with <tt/readNumEntry()/ and convert it to a position value. With
<tt/setMenuBarPos()/ and <tt/setBarPos()/ we tell the bars where to show up.

Now you probably have noticed that our "File" menu contains a menu for recently used files. The filenames are stored in a list of
strings, which has to be saved on application closing and now has to be read in to restore the menu. First, we initialize the list with
the entries stored by using the <tt/readListEntry()/. Then, in a <tt/for-/loop, we create a menu entry for each list item.

Finally, we only have to take care for the geometry of our window. We read in the appearance by a <tt/QSize/ variable containing an x
and y value for width and height of the window. As the window is initialized by <tt/<cdx/KTMainWindow//, we don't have to take care for
a default value and only will use <tt/resize()/ if the entry is not empty.

What is left to explain on application construction is that we initially have to disable available user commands that shouldn't be
available if some instances don't match the needed criteria. These are file saving and operations that are using the clipboard. During
the application's lifetime, we have to take care of these several times, but which is quite easy. The framework only gives us two
methods to enable/disable menubar and <idx/toolbar/ items with one method call at the same time.

<sect2>Executing
<p>
During the past section, we have only monitored what happens during the constructor call of our <tt/KScribbleApp/ instance providing us
the main window. After returning to the <tt/main()/ function, we have to call <tt/show()/ to display the window. What is different from
any <tt/<cdx/KApplication// or <tt/<cdx/QApplication// here is that when we're using <tt/<cdx/KTMainWindow// as the instance for our
main widget, we don't have to set it with <tt/setMainWidget()/. This is done by <tt/<cdx/KTMainWindow// itself and we don't have to
take care of that.
The only thing left then is to interpret the command-line. We get the command-line option and ask, if <tt/int argc/ is > 1, which
indicates that the user called our application with <tt/kscribble filename_to_open/. Our window is then asked to open the file by it's
name and calls <tt/openDocumentFile()/ with the filename.

The last line of the <tt/main()/ function does the known job: it executes the application instance and the program enters the event
loop.

Now, in section <ref id="The main() Function" name="The main() Function">, we started to separate the execution process by
<tt/if( app.isRestored() )/ and described the usual invocation process. The following now gives an introduction to session
management and how our application makes use of this.

<sect1>Invocation by Session Management
<p>
As we said, the <tt/main()/ function tests, if the application is invoked by the session manager. The session manager is responsible to
save the current status of all open application windows on the user's desktop and has to restore them when the user logs in the next
time, which means that the application is not started by the user but automatically invoked. The part of the code which is executed
was:
<tscreen><verb>
6    if (app.isRestored())
7    {
8       RESTORE(KScribbleApp);
9    }
</verb></tscreen>

In <ref id="The main() Function" name="The main() Function">, we stated that we test the invocation by asking
<tt/app.isRestored()/. Then line 8 gets executed. It looks like a simple statement, but in fact this will result in a complex execution
process which we want to follow in this section.

RESTORE() itself is a macro provided by <tt/<cdx/KTMainWindow//. It expands to the following code:

<tscreen><verb>
if (app.isRestored()){
  int n = 1;
  while (KTMainWindow::canBeRestored(n)){
    (new KScribbleApp)->restore(n);
    n++;
  }
}
</verb></tscreen>

This will restore all application windows of the class <tt/KScribbleApp/ by creating the instances and calling <tt/restore()/ to the
new window. It is important to realize that if your application uses several different widgets that inherit <tt/<cdx/KTMainWindow//, you have
to expand the macro and determine the type of the top widgets by using <tt/<cdx/KTMainWindow/::classNameOfToplevel(n)/ instead of the class
<tt/KScribbleApp/.
The <tt/restore()/ method then reads the part of the session file that contains the information about the window. As <tt/<cdx/KTMainWindow//
stores all of this for us, we don't have to care for anything else. Only information that belong to our specific instance of
<tt/KScribbleApp/ has to be found then. Usually this would be a temporary file that we created to store the document or other
initialization that we might need. To get to this restoration information, we only have to overwrite two virtual methods of
<tt/<cdx/KTMainWindow//, <tt/saveProperties()/ and <tt/readProperties()/. The information we have to save on session end is if the currently
opened document is modified or not and the filename. If the file is modified, we will get a temporary filename to save it to. On
session beginning, this information now is used to restore the document contents:

<tscreen><verb>
void KScribbleApp::readProperties(KConfig*)
{
  QString filename = config->readEntry("filename","");
  bool modified = config->readBoolEntry("modified",false);
  if( modified ){
    bool b_canRecover;
    QString tempname = kapp->checkRecoverFile(filename,b_canRecover);

    if(b_canRecover){
      doc->openDocument(tempname);
      doc->setModified();
      QFileInfo info(filename);
      doc->pathName(info.absFilePath());
      doc->title(info.fileName());
      QFile::remove(tempname);
    }
  }
  else if(!filename.isEmpty()){
  doc->openDocument(filename);
  }
  setCaption(kapp->appName()+": "+doc->getTitle());
}		
</verb></tscreen>
Here, the line <tt/kapp->checkRecoverFile()/ seems a bit strange, as <tt/b_canRecover/ is not initialized. This is done by the method
which sets it to <tt/true/, if there is a recover file. As we only saved a document in a recover file if it was modified, we set the
modified bit directly to indicate that the information hasn't been saved to the belonging file. Also we have to take care that the
recover file has another filename than the original file which was opened. Therefore, we have to reset the filename and path to the old
filename. Finally, we have the information we wanted to recover and we can delete the temporary file by the session manager.

<bf/Summary:/

During this chapter, you got to know how the application starts either by normal user invocation or by the session manager. We went
through the code to learn how the parts of the visual interface of the application are constructed as well as how to initialize
attributes by configuration file entries. Now you can execute the framework application to test these functions and see how the
program window reacts.

<sect>Additional Contents of KDevelop Projects
<p>
Besides the source code provided, KDevelop projects contain a lot of other additional parts that are of interest to the developer. These
are:
<itemize>
<item>a program icon
<item>a program mini-icon
<item>a <idx/.kdelnk/ file
<item>a sample <idx/SGML/-documentation file
<item>a set of <idx/API/-documentation generated from the framework source
</itemize>

Except the <idx/API/-documentation, these elements of the project will be installed together with the application binary. As the project
framework has to be as open as possible, you have to adapt these parts towards your project goals. These are first to edit the icons
provided. This will give your application a unique identifier by which the user can determine your application visually in window
manager menus. The <idx/.kdelnk/ file then is a file that installs your application into <tt/kpanel/ in the <tt/Applications/ menu. This has
to be edited by setting the installation path which will be discussed later in this handbook. Finally, the documentation that you will
provide to the user is written in <idx/SGML/. This makes it very easy to create several different output from the same source. By default,
KDevelop offers to create a set of HTML files from this source, for KDE-projects this will automatically use the <tt/<idx/ksgml2html//
program to add a consistent KDE look and feel to the documentation. In a later section, we will see how the <idx/SGML/ source is edited and
what we have to watch for installation on the end-user.

Finally, the <idx/API/ (Application Programming Interface) documentation allows you and other developers to quickly get into the code and use
the classes without having to guess what purpose each class is for. We will learn how to extend the <idx/API/ documentation in a later step,
for now it lasts to know that the documentation is generated by the <tt/<idx/KDoc// program, which processes the header files and creates the
HTML output, therefore all documentation is placed in the headers.

<chapt>Alkalmazás-nézet tervezése
<p>
When developing an application with a graphical user interface, the main work takes place in providing a so-called "view" for the
application. A view generally is a widget that displays the data of a document and provides methods to manipulate the document
contents. This can be done by the user via the events he emits by the keyboard or the mouse; more complex operations are often
processed by <idx/toolbar/s and menubars which interact with the view and the document. The statusbar then provides information about the
document, view or application status. As an example, we look at how an editor is constructed and where we can find which part.

An editor generally is supposed to provide an interface to view and/or change the contents of a text document for the user. If you
start <em/KEdit/, you see the visual interface as the following:

<itemize>
<item>The menubar: providing complex operations as well as opening, saving and closing files and exiting the application.
<item>The <idx/toolbar/: offers icons which allow quicker access for most needed functions,
<item>The statusbar: displays the status of the cursor position by the current row and column,
<item>The view in the center of the window, displaying a document and offering a cursor connected to the keyboard and the mouse
to operate on the data.
</itemize>

Now it's easy to understand, that a view is the most unique part of the application and the design of the view decides about the
usability and acceptability of an application. This means that one of the first steps in development is to determine the purpose of the
application and what kind of view design would match best to allow any user to work with the application with a minimum of work
learning how to handle the user interface.

For some purposes like text editing and displaying HTML files, views are provided by the <idx/Qt/ and <idx/KDE libraries/; we will discuss certain
aspects of these high-level widgets in the next section. But for most applications new widgets have to be designed and implemented. It
is that what makes a programmer also a designer and where his abilities on creativity are asked. Nevertheless, you should watch for
intuitivity first. Remember that a lot of users won't accept an application that isn't

<itemize>
<item>graphically nice,
<item>offering a lot of features,
<item>easy to handle,
<item>fast to learn how to use it.
</itemize>
Needless to say that stability is a major design goal. Nobody can prevent bugs, but a minimum can be reached at least by clever design
goals and wide use of object-oriented design. C++ makes programming a joy if you know how to exploit it's capabilities- inheritance,
information hiding and reusablitity of already existing code.

When creating a KDE or <idx/Qt/ project, you always have to have a view that inherits <tt/<cdx/QWidget//, either by direct inheritance or because
the library widget you want to use inherits <tt/<cdx/QWidget//. Therefore, the Application Wizard already constructed a view that is an
instance of a class <tt/&lt;yourapp&gt;View/, which inherits <tt/<cdx/QWidget// already. The application creates your view in the method
<tt/initView()/, where an instance is created and connected to the main widget as it's view with <tt/KTMainWidget::setView()/.

This chapter therefore describes how to use library widgets for creating views of KDE or <idx/Qt/ applications that are generated with
KDevelop, then we're looking at the libraries and what kind of views are already offered.

<sect>Using Library Views
<p>
When your application design has been set up, you first should look for already existing code that will make your life a lot easier. A
part of this search is to look for a widget that can be used as a view or at least as a part of it; either directly or by inheritance.
The KDE and <idx/Qt/ libraries already contain a set of widgets that can be used for this purpose. To use them, you have two options:

<enum>
<item> remove the new view class and create an instance of a library widget; then set this as the view,
<item> change the inheritance of the provided view class to the class of the library widget to use.
</enum>

In either way, it is important to know that if the application framework is currently not linked against the library that contains the
widget, the linker will fail. After you decided to use a certain widget, look for the library to link to; then open
"Project"->"Options" from the KDevelop menubar. Switch to the "Linker Options" page and look for the checkmarks indicating the
libraries that are currently used. If the library of your view widget is already checked, you can leave the project options untouched
and start doing the necessary changes due to your choice. If not, and the linker options offer to add the library by a check box,
check it and press "OK" to leave the project options dialog again. In any other case, add the library in the edit line below with the
<tt/-l/ option. For libraries that your application has to search for before preparing the Makefiles by the <tt/configure/ script on
the end-user machine, add the according search macro to the <tt/configure.in/ file located at the root directory of your project and
add the macro to the edit line. Mind that you have to run "Build"->"Autoconf and automake" and "Build"->"Configure" before the
Makefiles contain the correct expansion for the library macro.

Also, if the include files for the library to add are not in the current include path (which can be seen by the <tt/-I/ options in the
output window on "Make"), you have to add the path to the Project Options dialog -"Compiler Options" page with the <tt/-I/
option or the according automake macro at the edit line for "Additional Options".

<sect1><idx/Qt/ Views
<p>
Looking at the first page of the <idx/Qt/ online documentation, you will find a link to "Widget Screenshots" where you can have a look at
how the widgets <idx/Qt/ contains look like. These are ready to use and can be combined together to form complex widgets to create
application views or dialogs. In the following, we'll discuss some of these which are very usable for creating application views, but
keep in mind that the <idx/KDE libraries/ sometimes contain other widgets for the same purpose; those will be reviewed in the next section.

Here are a set of hints for what purpose you could use which <idx/Qt/ component:
<enum>
<item>if your view area isn't big enough to display all your data, the user must be enabled to scroll over the document with bars on
the left and bottom of the view. For this, <idx/Qt/ provides the class <tt/QScrollView/, which offers a scrollable child area. As explained,
you could inherit your own widget from <tt/QScrollView/ or use an instance to manage your document's view widget.
<item>to create a ScrollView yourself, inherit the View widget from <tt/<cdx/QWidget// and add vertical and horizontal <tt/QScrollBar/s.
(this is done by KDE`s KHTMLView widget).
<item>for text processing, use <tt/QMultiLineEdit/. This class provides a complete text editor widget that is already capable to cut,
copy and paste text and is managed by a scrollview.
<item>use <tt/QTableView/ to display data that is arranged in a table. As <tt/QTableView/ is managed by scrollbars as well, it offers a
good solution for table calculation applications.
<item>to display two different widgets or two widget instances at the same time, use <tt/QSplitter/. This allows to tile views by
horizontal or vertical dividers. Netscape's Mail window is a good example how this would look like- the main view is separated by a
splitter vertically, the right window then is divided again horizontally.
<item><tt/QListView/ displays information in a list and tree. This is useful for creating file trees or any other hierarchical
information you want to interact with.
</enum>

You see that <idx/Qt/ alone offers a whole set of widgets which are ready to use so you don't have to invent new solutions if these match
your needs. The sideffect when using standard widgets is that users already know how to handle them and only have to concentrate on
the displayed data.

<sect1>KDE Views
<p>
The <idx/KDE libraries/ were invented to make designing applications for the K Desktop Environment easier and capable of more functionality
than what <idx/Qt/ alone is offering. To see what's available, we have a look at the documentation tree in KDevelop. You see that the KDE
libraries start with <tt/kdecore/, which is a base for all <idx/KDE applications/. Then,<tt/kdeui/ offers user interface elements. This is
where we will find some useful things first. For creating new applications, the <tt/kdeui/ library offers:

<enum>
<item><tt/<cdx/KTabListBox//: offers a multi-column list box where the user can change the rows with <idx/drag'n drop/.
<item><tt/<cdx/KTreeList//: inherited from <tt/<cdx/QTableView//, offering a collapsible tree. This could be used instead of
<tt/QListView/. In KDE 2.0, this class will disappear.
<item><tt/<cdx/KEdit//: the base classes for the <em/KEdit/ application offered with KDE. This could be used instead of
<tt/<cdx/QMultiLineEdit//.
<item><tt/<cdx/KNewPanner//: manage two child widgets like <tt/<cdx/QSplitter//. In KDE 2.0, this class will disappear.
</enum>

The <tt/khtmlw/ library on the other hand offers a complete HTML-interpreting widget that is ready to use. It is scrollable already,
so you don't even have to take care for that. A possible use could be to integrate it as a preview widget for an HTML editor; used by
applications such as KFM, <idx/KDEHelp/ and KDevelop to display HTML files.


<sect>Creating your own Views<label id="Creating your own Views">
<p>
Now that you have a general overview of what is already provided, you may notice that for a lot of purposes already existing widgets
can be used or combined together. KMail is an example as well as KDevelop itself makes use of library view components to display data.

For applications that use a special file format or have to deal with graphics, you are probably forced to create your own view widget
to allow data manipulation. This is realized in our sample by the class <tt/KScribbleView/, already providing a base for a view area.

The inheritance from <tt/<cdx/QWidget// is necessary to overwrite the virtual methods to process user events, this is probably the most work
besides providing popup menus for easier access of certain functions. Also it is likely that you have to implement a set of slots which
can be accessed by <idx/toolbar/ buttons or menu bar commands to connect to as well as methods to manipulate variables such as e.g. a painter
color.

For completeness, we will repeat the necessary methods:

<bf/a) Keyboard events --TAB and Shift-TAB keys:/

changes the keyboard input focus from the current widget to the next widget in the focus order. The focus can be set to widgets by
calling <tt/setFocusPolicy<ncdx/setFocusPolicy()/()/ and process the following event handlers:

<itemize>
<item><tt/virtual void focusInEvent<ncdx/focusInEvent()/ ( <cdx/QFocusEvent/ * )/
<item><tt/virtual void focusOutEvent<ncdx/focusOutEvent()/ ( <cdx/QFocusEvent/ * )/
</itemize>

<bf/b) all other keyboard input:/
<itemize>
<item><tt/virtual void keyPressEvent<ncdx/keyPressEvent()/ ( <cdx/QKeyEvent/ * )/
<item><tt/virtual void keyReleaseEvent<ncdx/keyReleaseEvent()/ ( <cdx/QKeyEvent/ * )/
</itemize>

<bf/c) mouse movements:/
<itemize>
<item><tt/virtual void mouseMoveEvent<ncdx// ( <cdx/QMouseEvent/ * )/
<item><tt/virtual void enterEvent<ncdx/enterEvent()/ ( <cdx/QEvent/ * )/
<item><tt/virtual void leaveEvent<ncdx/leaveEvent()/ ( <cdx/QEvent/ * )/
</itemize>

<bf/d) mouse button actions:/
<itemize>
<item><tt/virtual void mousePressEvent<ncdx/mousePressEvent()/ ( <cdx/QMouseEvent/ * )/
<item><tt/virtual void mouseReleaseEvent<ncdx/mouseReleaseEvent()/ ( <cdx/QMouseEvent/ * )/
<item><tt/virtual void mouseDoubleClickEvent<ncdx/mouseDoubleClickEvent()/ ( <cdx/QMouseEvent/ * )/
</itemize>

<bf/e) window events containing the widget:/
<itemize>
<item><tt/virtual void moveEvent<ncdx/moveEvent()/ ( <cdx/QMoveEvent/ * )/
<item><tt/virtual void resizeEvent<ncdx/resizeEvent()/ ( <cdx/QResizeEvent/ * )/
<item><tt/virtual void closeEvent<ncdx/closeEvent()/ ( <cdx/QCloseEvent/ * )/
</itemize>

When re-implementing these functions, you should watch certain issues to avoid implementation mistakes that will make it almost
impossible to change the widget's behavior afterwards:

<enum>
<item>declare your virtual methods as <bf/virtual/ as well and keep the access to protected. This allows code-reuse by inheritance and
is consistent.
<item>don't hard-code any event-processing which should be made configurable. This counts most for keyboard events which should be
realized with keyboard accelerator<nidx/accelerator/s if any function is called. This even counts for text processing ! (Imagine that a lot of users are
familiar with their favorite editor's behavior. If this is configurable, they can use the behavior they like and are used to)
<item>forward popup menu highlighting signals to the main widget to enable statusbar help
</enum>

<chapt>Menüsorok és Eszközsorok Konfigurálása<label id="Configuring Menubars and Toolbars">
<p>
Menubars and <idx/toolbar/s are one of the most important parts of an application to provide methods to work with a document structure. As a
general rule, you should make all functions available by the menubar. Those methods that should not be available at a current stage of
the application process should be disabled.

Further, an application can only contain one menubar, but several <idx/toolbar/s. Toolbars on the other hand should contain only the most
frequently used commands by pixmap icons or provide quick access methods like combos to select values.

<sect>How does it work ?
<p>
Each entry, may it be a menuentry or a <idx/toolbar/ item, has a resource ID which is an integer value. As these values can't be used twice,
those are set by macros, where the numeric values are replaced by a descriptive ID name that can be used in your sources then.

All resource ID's are collected in the file <tt/resource.h/, where you can keep an overview over the used values. Anyway, the compiler
will inform you if you've used a value twice for constructing entries. Also, the resource file should contain all menu accelerator<nidx/accelerator/s by
IDK macro replacements. An example:

<code>
(resource.h)

#define ID_VIEW_TOOLBAR             12010


(kscribble.cpp)

// menu entry Toolbar in the "view" menubar menu
view_menu->insertItem(i18n("&amp;Toolbar"), ID_VIEW_TOOLBAR);

</code>

This inserts the entry Toolbar to the View popup menu of the menubar in the kscribble application. The resource ID's name is held to
contain the menu name and the action's name visible. The ampersand is set in front of the letter that functions as a keyboard
accelerator<nidx/accelerator/ and the entry itself is embraced by the i18n() internationalization macro.

On activating the menu item, the commandCallback() switch is called with the ID number. There, you have to add an according comparator
value with the method you want to execute on activating the menuentry:

<code>
    case ID_VIEW_TOOLBAR:
    	slotViewToolBar();
    	break;
</code>

<comment>Note: you don't have to use the ID system. If no ID is given, the menu gets numbered automatically. The KDevelop framework
uses this as it allows accessing menu and <idx/toolbar/ ID's to create <tt/switch/ statements that select the slot to call on
<tt/activated()/ for menus, <tt/clicked()/ for <idx/toolbar/ buttons. The connection can also be made directly using the provided methods of
the classes providing menus and <idx/toolbar/s.</comment>

<sect>Adding a new menu
<p>
A new menubar is added to an application by the following:

<enum>
<item>add a pointer to the new menu in the App-class header
<item>call the constructor of <tt/<cdx/QPopupMenu// to the pointer in <tt/initMenuBar()/ at the location where your menubar should appear
later.
<item>insert the according menu-items into the popup menu and set their resource ID's in the resource file
<item>add connects for <tt/commandCallback()/ and <tt/statusCallback()/ to the menu at the end of <tt/initMenuBar()/
<item>add the methods you want to call by the menu-entries in the header and implementation file.
<item>add the switch statements for the entries to the <tt/commandCallback()/ and <tt/statusCallback()/ methods
</enum>


<sect>Integrating Toolbar buttons
<p>
Toolbar buttons can be added like menu-entries with the difference that the used method is <tt/insertButton()/ and takes a button
pixmap and tool-tip text instead of a menu text.

The icons you want to use can be loaded by <tt/KIconLoader/, where <tt/<cdx/KApplication// offers the macros <tt/ICON()/ and <tt/Icon()/ to
access the icon loader and load the icon. These macros take the filename of the pixmap as their parameter to load the icon from the KDE
file system in a certain order (see <tt/KIconLoader/ for the search order).

The <idx/KDE libraries/ also offer a set of <idx/toolbar/ buttons that can be used for standard actions. In cases where they don't meet your needs,
you will have to paint your own pixmaps. KDevelop supports this by selecting "New" from the "File" menu, then select Pixmap as the file
type. Usually you will place your <idx/toolbar/ pixmaps in a project subdirectory "<idx/toolbar/" and install them into your application specific
<idx/toolbar/ directory.

<sect>Configuring Statusbars
<p>
The KDevelop projects already make use of the statusbar by providing statusbar messages for menu-entries and <idx/toolbar/ buttons. When
adding a menuentry, also add your status message in the method <tt/statusCallback()/.

<tt/statusCallback()/ uses the method <tt/slotStatusHelpMsg()/ to display a statusbar message for two seconds. When executing a
command, you should use the method <tt/slotStatusMsg()/ at the beginning with the string describing what your application does; before
a return or method end, you should reset the statusbar message with a "Ready." string calling the same method.


<sect>Keyboard Accelerator Configuration
<p>
A very professional thing you should always add to your application are keyboard accelerator<nidx/accelerator/s. Those are mainly used by experienced
users that want to work fast with their applications and are willing to learn shortcut<nidx/shortcuts/s. For this, the <idx/KDE libraries/ provide the class
<tt/<cdx/KAccel//, which provides the keyboard accelerator<nidx/accelerator/ keys and access to global configured standard keyboard accelerator<nidx/accelerator/s.

By default, frame applications generated by KDevelop only use standard keyboard accelerator<nidx/accelerator/s such as F1 for accessing online-help,
Ctrl+N for New File etc. You should look for the keyboard accelerator<nidx/accelerator/s already set in <tt/<cdx/KAccel// first before adding a new
accelerator<nidx/accelerator/.

If your application contains a lot of accelerator<nidx/accelerator/s, you should make them configurable by an Options-menu; either it could be combined
with other application configuration in a <tt/<cdx/QWidget// or stand alone. The KDE library already provides a <tt/KKeyChooser/ for use
in tab dialogs, whereas <tt/KKeyDialog/ provides a ready-to use key-configuration dialog.

See the following classes for more information:

<tt/<cdx/KAccel//(<cdx/kdecore/), <tt/<cdx/KKeyChooser//, <tt/<cdx/KKeyDialog// (<cdx/kdeui/)

<chapt>A dialógusszerkesztõ: Ahol a dialógusok készülnek
<p>
<sect>What the Dialogeditor provides
<p>
The built-In dialogeditor of KDevelop is designed to help you construct widgets and dialogs that fit your application's purpose and
reduces the time rapidly to extend the GUI of your application. The only limitation for now is that the dialogeditor does not support
geometry management that is provided by <idx/Qt/; therefore the dialogs are static in their size and this may lead to certain circumstances
where e.g. the label width is not long enough to support the full length of a translation.

On the other hand, the current state of the editor in conjunction with KDevelop's project management offers the fastest way to create
full-featured applications for the K Desktop Environment.


<sect><idx/Qt/ and KDE Widgets
<p>
Currently provided widgets are:

<bf/QT-Widgets:/
<itemize>
<item><bf/<cdx/QWidget// - a widget that can be specified by yourself and can contain other widgets as well. This allows creating a widget
hierarchy within your dialog.
<item><bf/<idx/QLabel// - a label that represents text information on the widget. Use <idx/QLabel/ e.g. in front of lineedits to signal what the
purpose of the line-edit is or which variable e.g. a combo box allows to set.
<item><bf/QPushButton/ - a button that allows to e.g. call another dialog like QFileDialog for selecting a filename.
<item><bf/QCheckBox/ - a check box for e.g. enabling/disabling options. QCheckBox is widely used for configuration dialogs.
<item><bf/QLCDNumber/ - displays numbers in LCD style. Often used for clocks.
<item><bf/QRadioButton/ - like QCheckBox often used to let the user set any options. QRadioButton specializes the options setting when more
of them depend on each other, e.g. you have three radio-buttons, but you want the user to choose one of three offered options. See
<tt/<cdx/QButtonGroup// for additional information.
<item><bf/<cdx/QComboBox// - a combo box lets the user set a value by selecting it from a
drop-down menu or by inserting the value, if the box is write enabled.
<item><bf/QListBox/ - provides a single-column list of items that can be scrolled.
<item><bf/QListView/ - creates a multi-column list view that can be used to display e.g. file trees etc. in tree and table view.
<item><bf/QMultiLineEdit/ - offers a multi-line editor.
<item><bf/QProgressBar/ - displays the progress of an action that takes a longer time to be finished.
<item><bf/QSpinBox/ - allows choosing numeric values by up- and down buttons or insertion if write enabled.
<item><bf/QSlider/ - sets a value in a program-defined range by a slider.
<item><bf/QScrollBar/ - indicates the range of a value and sets the current value by a slider as well as up- and down buttons; often
used for widgets whose contents is larger than the actually visible view area. By using the scrollbar, the visible area can be changed
to another part of the widgets' contents.
<item><bf/QGroupBox/ - provides a group box frame with title to indicate that child widgets within the box belong together.
</itemize>

<bf/KDE-Widgets:/
<itemize>
<item><bf/KColorButton/ - a pushbutton displaying a selected color. On a button press, the KDE Color dialog is shown where the user can
select another color. Often used for drawing applications or in any case where color values can be set.
<item><bf/KCombo/ - similar to <tt/<cdx/QComboBox//. Lets the user choose a value by a drop-down list box.
<item><bf/KDatePicker/ - a complete widget to get a date value by the user.
<item><bf/KDateTable/ - a calendar table to select a date of a month. Used by <tt/KDatePicker/ to build the date picker dialog.
<item><bf/KKeyButton/ - a button to select a key value. If the button is selected, it gets activated. Pressing a keyboard button will
change the key value for the button which can be used to configure key-bindings.
<item><bf/KLed/ - and LED (Light Emitting Diode) widget to display a certain state.
<item><bf/KLedLamp/ - and LED lamp that also supports click actions
<item><bf/KProgress/ - similar to <tt/QProgressBar/, <tt/KProgress/ supports certain other values.
<item><bf/KRestrictedLine/ - a <tt/QLineEdit/ that only accepts certain user input. This can be used to restrict access to certain data
by password dialogs.
<item><bf/KSeparator/ - a separator widget to be used in all cases where <idx/KDE applications/ require a separator to provide a unique look.
Often used in dialogs to separate logical parts where <tt/QGroupBox/ doesn't fit.
<item><bf/KTreeList/ - a collapsible list view to display trees similar to <tt/QListView/.
</itemize>

<sect>Properties of <idx/Qt/ supported Widgets
<p>

The following chapter gives a complete overview over the currently supported widgets of the <idx/Qt/ toolkit. To achieve a better
understanding of the properties, these are separated to their inheritance. As all of them inherit <tt/<cdx/QWidget//, this class is described
first. All <tt/<cdx/QWidget// properties are available for all other widgets as well, so these are not listed for them again. For widget groups
that inherit an abstract subclass of <tt/<cdx/QWidget// as their base-class, the base-classes' properties are listed first (though this class does
not provide a widget in the dialogeditor itself). Then the widget properties for the available widget of the group contains the
properties that are specific to it. For a better understanding the inheritance tree of the available widgets is listed below:

<itemize>
<item><ref id="QWidget" name="QWidget">
	<itemize>
		<item><ref id="QButton" name="QButton"> (abstract)
			<itemize>
			<item><ref id="QCheckBox" name="QCheckBox">
			<item><ref id="QPushButton" name="QPushButton">
			<item><ref id="QRadioButton" name="QRadioButton">
			</itemize>
		<item><ref id="QComboBox" name="QComboBox">
		<item><ref id="QFrame" name="QFrame"> (abstract for now)
			<itemize>
			<item><ref id="QGroupBox" name="QGroupBox">
			<item><ref id="QLCDNumber" name="QLCDNumber">
			<item><ref id="QLabel" name="QLabel">
			<item><ref id="QProgressBar" name="QProgressBar">
			<item><ref id="QScrollView" name="QScrollView"> (abstract for now)
				<itemize>
				<item><ref id="QListView" name="QListView">
				</itemize>
			<item><ref id="QSpinBox" name="QSpinBox">
			<item><ref id="QTableView" name="QTableView"> (abstract)
				<itemize>
				<item><ref id="QListBox" name="QListBox">
				<item><ref id="QMultiLineEdit" name="QMultiLineEdit">
				</itemize>
			</itemize>
		<item><ref id="QLineEdit" name="QLineEdit">
		<item><ref id="QScrollBar" name="QScrollBar">
		<item><ref id="QSlider" name="QSlider">
	</itemize>
</itemize>

<sect1><cdx/QWidget/ Properties <label id="QWidget">
<p>
<tt/<cdx/QWidget// is the base class for almost all widgets in <idx/Qt/ and KDE. Therefore widgets that inherit <tt/<cdx/QWidget// will allow to use the same
settings in most cases.

<itemize>
<item><bf/Appearance:/
  <itemize>
  <item><bf/BgColor:/ Background color of the widget
  <item><bf/BgMode:/ Background mode of the widget
  <item><bf/BgPalColor:/ Color pallette for the background
  <item><bf/BgPixmap:/ filename for a background pixmap
  <item><bf/Cursor:/ Cursor over the widget
  <item><bf/Font:/ Font for the widget
  <item><bf/MaskBitmap:/ filename for a masking bitmap.
  </itemize>
<item><bf/C++ Code:/
  <itemize>
  <item><bf/AcceptsDrops:/ if set to true, the widget item will accept drops by <idx/drag'n drop/ mechanisms (<idx/Qt/ <idx/drag'n drop/
protocol, not KDE 1.x !)
   <item><bf/Connections:/ connects the item's signals to slots
  <item><bf/FocusProxy:/ the item that gives its focus to this widget.
  <item><bf/HasFocus:/ sets if the item has the focus by default. Mind that only one item per dialog can have this value as true
  <item><bf/ResizeToParent:/ resizes the widget to its parent's size (not visible in editing mode)
  <item><bf/VarName:/ Variable name of the item. Change this to names that describe the item's purpose.
  </itemize>
<item><bf/General:/
  <itemize>
  <item><bf/IsEnabled:/ sets if the widget will accept user events
  <item><bf/IsHidden:/ sets the item to be visible(false) or hidden(true)
  <item><bf/Name:/ sets the name of the widget. Mind that the name is different from the VarName in C++ Code.
  </itemize>
<item><bf/Geometry:/
  <itemize>
  <item><bf/Height:/ height of the item
  <item><bf/IsFixedSize:/
  <item><bf/MaxHeight:/ maximum value for Height
  <item><bf/MaxWidth:/ maximum value for Width
  <item><bf/MinHeight:/ minimum value for Height
  <item><bf/MinWidth:/ minimum value for Width
  <item><bf/SizeIncX:/ pixel steps for resize actions to X direction
  <item><bf/SizeIncY:/ pixel steps for resize actions to Y direction
  <item><bf/Width:/ width of the item
  <item><bf/X:/ position horizontal, counted from the left corner
  <item><bf/Y:/ position vertical, counted up to down
  </itemize>
</itemize>


<sect1><cdx/QButton/ inherited widgets <label id="QButton">
<p>
<tt/<cdx/QButton// is an abstract widget class that provides properties common to buttons.

Inherits <ref id="QWidget" name="QWidget">

Inherited by <ref id="QCheckBox" name="QCheckBox">, <ref id="QPushButton" name="QPushButton"> and <ref id="QRadioButton"
name="QRadioButton"> inherit <tt/<cdx/QButton//.


<itemize>
<item><bf/Appearance:/
  <itemize>
  <item><bf/setPixmap:/ sets the pixmap filename to use
  </itemize>
<item><bf/General:/
  <itemize>
  <item><bf/setText:/ the text on labels, buttons and boxes, also pre-set text for lineedits.
  <item><bf/setAutoRepeat:/ if enabled, the clicked() signal is emitted at regular intervals while the button is down. No effect on
  toggle buttons.
  <item><bf/setAutoResize:/ Enables auto-resizing if TRUE. When auto-resize is enabled, the button will resizes itself
  whenever the contents changes.
  </itemize>
</itemize>
<p>

<sect2>QCheckBox Properties <label id="QCheckBox">
<p>
Inherits <ref id="QWidget" name="QWidget"> and <ref id="QButton" name="QButton">

<itemize>
<item><bf/General:/
  <itemize>
  <item><bf/isChecked: (setChecked)/ defines is the checkbox is set checked on construction
  </itemize>
</itemize>
<p>

<sect2>QPushButton Properties <label id="QPushButton">
<p>
Inherits <ref id="QWidget" name="QWidget"> and <ref id="QButton" name="QButton">

<itemize>
<item><bf/General:/
  <itemize>
  <item><bf/isAutoDefault: (setAutoDefault)/ the auto-default button becomes the default push button if it receives the keyboard input focus.
  <item><bf/isDefault: (setDefault)/ there can be only one default button and it is only allowed to use in a dialog (see <tt/QDialog/). The
  default button emits <tt/clicked()/ if the user presses the Enter key.
  <item><bf/isMenuButton: (setIsMenuButton)/ tells the button to draw
  a menu indication triangle if enabled. The menu has to be inserted separately.
  <item><bf/isToggleButton::(setToggleButton)/ makes a push button a toggle button, so the button has a similar state as check
  boxes.
  <item><bf/isToggledOn: (setOn)/ (public slot) switches a toggle button on.
  </itemize>
</itemize>
<p>

<sect2>QRadioButton Properties <label id="QRadioButton">
<p>
Inherits <ref id="QWidget" name="QWidget"> and <ref id="QButton" name="QButton">

<itemize>
<item><bf/General:/
  <itemize>
  <item><bf/isChecked: (setChecked)/ defines is the radio button is set checked on construction
  </itemize>
</itemize>
<p>

<sect1><cdx/QComboBox/ Properties <label id="QComboBox">
<p>
Inherits <ref id="QWidget" name="QWidget">

( no additional properties for now)
<p>


<sect1>QFrame inherited widgets <label id="QFrame">
<p>
Inherits <ref id="QWidget" name="QWidget">

For now only used as an abstract class.

<itemize>
<item><bf/Appearance:/
  <itemize>
  <item>Margin (setMargin): sets the margin, which is the distance from the innermost pixel of the frame and the outermost pixel of the
  contents.
  </itemize>
</itemize>
<p>

<sect2>QGroupBox Properties <label id="QGroupBox">
<p>
Inherits <ref id="QWidget" name="QWidget"> and <ref id="QFrame" name="QFrame">

<itemize>
<item><bf/General:/
  <itemize>
  <item><bf/Title: (setTitle)/ sets the group box title that is displayed in the box frame.
  </itemize>
</itemize>
<p>

<sect2>QLCDNumber Properties  <label id="QLCDNumber">
<p>
Inherits <ref id="QWidget" name="QWidget"> and <ref id="QFrame" name="QFrame">

<itemize>
<item><bf/General:/
  <itemize>
  <item><bf/NumDigits:(setNumDigits)/ sets the number of digits displayed in QLCDNumber
  <item><bf/Value: (display)/ (public slot) sets the initial value for QLCDNumber
  </itemize>
</itemize>
<p>


<sect2><idx/QLabel/ Properties  <label id="QLabel">
<p>
Inherits <ref id="QWidget" name="QWidget"> and <ref id="QFrame" name="QFrame">

<itemize>
<item><bf/Appearance:/
  <itemize>
  <item>Margin (setMargin): sets the margin, which is for <idx/QLabel/ the distance from the frame to the first letter of the label text,
  depending on the alignment of the label.
  </itemize>
<item><bf/C++ Code: /
  <itemize>
  <item><bf/Buddy: (setBuddy)/ sets the buddy widget of the label.
  </itemize>
<item><bf/General:/
  <itemize>
  <item><bf/Text: (setText)/ sets the label text.
  <item><bf/isAutoResize: (setAutoResize)/ if TRUE, the label will resize itself if the contents changes. The top left corner is not
  moved.
  </itemize>
</itemize>
<p>


<sect2>QProgressBar Properties  <label id="QProgressBar">
<p>
Inherits <ref id="QWidget" name="QWidget"> and <ref id="QFrame" name="QFrame">

<itemize>
<item><bf/General:/
  <itemize>
  <item><bf/TotalSteps: (setTotalSteps)/ (public slot) sets the total steps of the progress bar. During the iteration of your action to
  display the progress, you have to call setProgress(int) to advance the progress step displayed to (int).
  </itemize>
</itemize>
<p>
			
<sect2>QScrollView <label id="QScrollView">
<p>
Inherits <ref id="QWidget" name="QWidget"> and <ref id="QFrame" name="QFrame">

Inherited by <ref id="QListBox" name="QListBox">
(abstract for now)

Provides a scrollable widget that manages the display of a child widget by a vertical and horizontal scrollbar.

<sect3>QListView<label id="QListView">
<p>
Inherits <ref id="QWidget" name="QWidget">, <ref id="QFrame" name="QFrame"> and <ref id="QListView" name="QListView">

Provides a list view to display hierarchical data either in a table or a tree. Manages itself by scrollbars through <ref
id="QScrollView" name="QScrollView">.

<itemize>
<item><bf/Appearance:/
	<itemize>
	<item><bf/ListViewFont:/ (setFont()) Sets the font of the ListView items
	<item><bf/ListViewPalette:/ (setPalette()) Sets the palette of the list view items
	<item><bf/TreeStepSize:/ (setTreeStepSize(int)) Offset of pixels of a child item to its parent item
	<item><bf/hScrollBarMode:/ Scrollbar mode provided by <ref id="QScrollView" name="QScrollView"> for the horizontal scrollbar
	<item><bf/isAllColumnsShowFocus:/ (setAllColumnsShowFocus(bool)) displays focus on all columns of an item.
	<item><bf/isMultiSelection:/ enables multi-selection of list items
	<item><bf/isRootDecorated:/ enables the + and - decoration to open and close trees
	<item><bf/vScrollBarMode:/Scrollbar mode provided by <ref id="QScrollView" name="QScrollView"> for the vertical scrollbar
	</itemize>
<item><bf/General:/
	<itemize>
	<item><bf/Entries:/ lets you insert a list of entries that are pre-set as QListViewItems.
	<item><bf/isAutoUpdate:/
	</itemize>
</itemize>

<sect2>QSpinBox Properties <label id="QSpinBox">
<p>
Inherits <ref id="QWidget" name="QWidget"> and <ref id="QFrame" name="QFrame">

<itemize>
<item><bf/General:/
  <itemize>
  <item><bf/MaxValue:/  the maximum value the user can choose
  <item><bf/MinValue:/  the minimum value the user can choose
  <item><bf/Prefix:/
  <item><bf/Suffix:/
  <item><bf/Value:/     the pre-set value when the widget is shown
  <item><bf/isWrapping:/
  </itemize>
</itemize>
<p>

<sect2>QTableView inherited widgets <label id="QTableView">
<p>
Inherits <ref id="QWidget" name="QWidget">, <ref id="QFrame" name="QFrame"> and <ref id="QTableView" name="QTableView">

Inherited by <ref id="QListBox" name="QListBox"> and <ref id="QMultiLineEdit" name="QMultiLineEdit">
<p>

<sect3>QListBox Properties <label id="QListBox">
<p>
Inherits <ref id="QWidget" name="QWidget">, <ref id="QFrame" name="QFrame"> and <ref id="QTableView" name="QTableView">

<itemize>
<item><bf/General:/
  <itemize>
  <item><bf/isAutoBottomScrollBar: (setAutoBottomScrollBar)/
  <item><bf/isAutoScroll: (setAutoScroll)/
  <item><bf/isAutoScrollBar: (setAutoScrollBar)/
  <item><bf/isAutoUpdate: (setAutoUpdate)/
  <item><bf/isBottomScrollBar: (setBottomScrollBar)/
  <item><bf/isDragSelect: (setDragSelect)/
  <item><bf/isSmoothScrolling: (setSmoothScrolling)/
  </itemize>
<item><bf/Geometry:/
  <itemize>
  <item><bf/setFixedVisibleLines:/ sets a fixed height for the widget so that the given number of text lines are displayed using the
  current font.
  </itemize>
</itemize>
<p>

<sect3>QMultiLineEdit Properties <label id="QMultiLineEdit">
<p>
Inherits <ref id="QWidget" name="QWidget">, <ref id="QFrame" name="QFrame"> and <ref id="QTableView" name="QTableView">

<itemize>
<item><bf/General:/
  <itemize>
  <item><bf/Text: (setText) / (public slot) sets the text of the widget.
  <item><bf/isAutoUpdate: (setAutoUpdate)/ used to avoid flicker during large changes; the view is not updated if disabled.
  <item><bf/isOverWriteMode: (setOverwriteMode) /(public slot) sets overwrite enabled or disabled.
  <item><bf/isReadOnly: (setReadOnly)/ (public slot) sets the widget text to read only; disables text input.
  <item><bf/isTextSelected: (selectAll)/(public slot) marks the whole text selected
  </itemize>
<item><bf/Geometry:/
  <itemize>
  <item><bf/setFixedVisibleLines:/ sets a fixed height for the widget so that the given number of text lines are displayed using the current font.
  </itemize>
</itemize>
<p>


<sect1>QLineEdit Properties <label id="QLineEdit">
<p>
Inherits <ref id="QWidget" name="QWidget">

<itemize>
<item><bf/General:/
<itemize>
<item><bf/CursorPosition: (setCursorPosition)/ sets the default cursor position.
<item><bf/MaxLength: (setMaxLength) / sets the maximum string length
<item><bf/Text: (setText) / (public slot) sets the contents displayed on construction
<item><bf/hasFrame: (setFrame) / draws the line edit within a two-pixel frame if enabled.
<item><bf/isTextSelected: (selectAll) / (public slot) sets the text to be selected.
</itemize>
</itemize>
<p>

<sect1>QScrollBar Properties <label id="QScrollBar">
<p>
Inherits <ref id="QWidget" name="QWidget"> and <tt/QRangeControl/.

<itemize>
<item><bf/General:/
<itemize>
<item><bf/MaxValue:/ sets the maximum slider value; used in constructor (optional)
<item><bf/MinValue:/ sets the minimum slider value; used in constructor (optional)
<item><bf/Orientation: (setOrientation)/ sets the orientation of the scrollbar to horizontal or vertical.
<item><bf/Value: / sets the initial value of the scrollbar in the constructor (optional)
<item><bf/isTracking: (setTracking)/ if enabled, the scrollbar emits <tt/valueChanged()/ whenever the bar is dragged; otherwise only on
mouse release.
</itemize>
</itemize>
<p>

<sect1>QSlider Properties <label id="QSlider">
<p>
Inherits <ref id="QWidget" name="QWidget"> and <tt/QRangeControl/.

<itemize>
<item><bf/General:/
<itemize>
<item><bf/MaxValue:/ sets the maximum slider value; used in constructor (optional)
<item><bf/MinValue:/ sets the minimum slider value; used in constructor (optional)
<item><bf/Orientation: (setOrientation)/ sets the orientation of the slider to horizontal or vertical.
<item><bf/Value: (setValue)/ (public slot) uses <tt/QRangeControl::setValue()/ to set the value.
<item><bf/isTracking:(setTracking)/ if enabled, the slider emits <tt/valueChanged()/ whenever the slider is dragged; otherwise only on
mouse release.
</itemize>

</itemize>
<p>

<sect>Properties of KDE supported Widgets
<p>

<itemize>
<item><ref id="QWidget" name="QWidget">
	<itemize>
	<item><ref id="QButton" name="QButton"> (abstract)
		<itemize>
		<item><ref id="QPushButton" name="QPushButton">
  		<itemize>
  		<item><ref id="KColorButton" name="KColorButton">
  		<item><ref id="KKeyButton" name="KKeyButton">
  		</itemize>		
		</itemize>
	<item><ref id="QComboBox" name="QComboBox">
		<itemize>
		<item><ref id="KCombo" name="KCombo">
		</itemize>
	<item><ref id="QFrame" name="QFrame"> (abstract for now)
 		<itemize>
 		<item><ref id="KDatePicker" name="KDatePicker">
 		<item><ref id="KLedLamp" name="KLedLamp">
 		<item><ref id="KProgress" name="KProgress">
 		<item><ref id="KSeparator" name="KSeparator">
 		<item><ref id="QTableView" name="QTableView"> (abstract)
 			<itemize>
 			<item><ref id="KDateTable" name="KDateTable">
 			<item><ref id="KTreeList" name="KTreeList">
 			</itemize>
 		</itemize>
 	<item><ref id="QLineEdit" name="QLineEdit">
 		<itemize>
 		<item><ref id="KRestrictedLine" name="KRestrictedLine">
 		</itemize>
	</itemize>
	<item><ref id="KLed" name="KLed">
</itemize>

<sect1>KColorButton<label id="KColorButton">
<p>

Inherits <ref id="QPushButton" name="QPushButton">

<itemize>
<item>General
	<itemize>
	<item><bf/DisplayedColor (setColor())/ the displayed color on the button
	</itemize>
</itemize>

<sect1>KKeyButton<label id="KKeyButton">
<p>

<sect1>KCombo<label id="KCombo">
<p>

Inherits: <ref id="QComboBox" name="QComboBox">

<itemize>
<item>General
	<itemize>
	<item><bf/Entries/ the string list of entries displayed in the combo box
	<item><bf/Text/ the text displayed in the combo box currently
	<item><bf/isAutoResize/ resizes the combo box to the current item
	</itemize>
</itemize>

<sect1>KDatePicker<label id="KDatePicker">
<p>

<itemize>
<item>Appearance
	<itemize>
	<item><bf/FontSize/ the font size for the date picker
	</itemize>
</itemize>
	
<sect1>KLedLamp<label id="KLedLamp">
<p>

<sect1>KProgress<label id="KProgress">
<p>

<sect1>KSeparator<label id="KSeparator">
<p>

<itemize>
<item>General
	<itemize>
	<item><bf/Orientation/ sets the orientation of the separator to horizontal or vertical; default is horizontal
	</itemize>
</itemize>

<sect1>KDateTable<label id="KDateTable">
<p>

<sect1>KTreeList<label id="KTreeList">
<p>

<itemize>
<item>Appearance
	<itemize>
	<item><bf/TreeListBgColor/
	<item><bf/TreeListPalette/
	<item><bf/isBottomScrollbar/
	<item><bf/isScrollBar/
	<item><bf/isShowItemText/
	<item><bf/isSmoothScrolling/
	<item><bf/isTreeDrawing/
	</itemize>
<item>General
	<itemize>
	<item><bf/Entries/
	<item><bf/isAutoUpdate/
	</itemize>
</itemize>



<sect1>KRestrictedLine<label id="KRestrictedLine">
<p>

<sect1>KLed<label id="KLed">
<p>

Inherits <ref id="QWidget" name="QWidget">

<itemize>
<item>Appearance
	<itemize>
	<item><bf/LedColor: (setColor())/ sets the displayed LED color
	</itemize>
</itemize>
	
	
<sect>Constructing a new Dialog
<p>
Constructing a new dialog is very easy if you already have experience with graphical construction applications. KDevelop offers to
create a widget visually and displays the look as it will be shown to the user directly. Further, you can have a preview of your widget
by selecting "Preview" from the "View" menu.

To begin constructing a dialog or any other widget, switch to the Dialogeditor and select "New" from the "File" menu. Select "Qt/KDE Dialgo (*.kdevdlg)
from the New File dialog and enter the dialog filename. Construct your dialog and when you´re finished, select "Generate all Sources" from the "Build"-menu.

Then enter all needed information to the appearing dialog. Those are:

<enum>
<item>The Dialog inheritance. This is necessary because any widget is at least derived from <tt/<cdx/QWidget//. Besides the widget types
provided by <idx/Qt/, you can inherit e.g. form an abstract base class you constructed yourself within your project. In this case, select
"custom" and enter the header file path to the line edit below.
<item>The Dialog name. This sets the class name of the generated dialog. Select a classname that is descriptive for what the dialog
does; in cases of inheritance from <tt/QDialog/, you may enter a name that ends with <tt/Dlg/ to remember yourself it's a dialog.
Naming convention should match that of KDE and <idx/Qt/: Use uppercase letters for your classname. For e.g. a grid-size selection dialog, you
would enter <tt/GridSizeDlg/.
<item>The generated filenames. Those are preset when entering the dialog name, but can be changed afterwards. If you want to use other
filenames, the naming convention should also match that of KDE and <idx/Qt/: the filenames are all lowercase and contain the classname to
remember what class is kept where. The data file that has to be set will later contain the generated code that will build up your
dialog. You should not edit this file manually afterwards; use the implementation file for any additions towards dialog construction
code and method implementations.
</enum>

The dialog will then show itself as a widget with a grid. As the dialogeditor uses the grid to snap any child widgets to the geometry,
you can change the grid size with the "Grid Size" entry in the "View" menu, if the preset values don't match your needs.

Then select the "Widgets" tabulator on the left pane and press the button for the widget item you want to add to the main widget. It
directly appears on the main widget's left upper corner and gets selected by a resizable frame. Then move or resize the widget with the
mouse. The cursor will change to indicate which action can be done at the current position.

After having finished the construction, select "Generate Files" from the "Build" menu or hit the according <idx/toolbar/ button. The files
will then be generated at the preset location and included into your project sources. A rebuild or make will compile all generated
files within your project and you can add the according constructor call to the application to invoke the dialog or widget. For KDE
projects, all widget properties that will be visible later, e.g. label texts, are set with the <tt/i18n()/ macro of <tt/<cdx/kapp.h// to
support internationalization. Therefore you should do a "Make Messages and merge" when finished with construction and implementation.

When creating a dialog or widget, you should watch the following guidelines:
<itemize>
<item>Always try to be consistent! This is probably the most important rule when constructing GUI elements. Mind that the user will
only accept an application that is easy to understand no matter how complex it's purpose may be.
<item>Add help wherever you can by tool-tips, What's this..? help or Quick-help. This allows getting direct information about the
purpose of the GUI elements.
<item>watch the <bf/<idx/keyboard focus// !  The generator does not take care of that- this has to be watched when constructing any widget;
otherwise you have to reorder your initialization code by hand which is a very unthankful job. The <idx/keyboard focus/ on any widget means
the oder on which items get the keyboard input focus when the user presses the tab and shift+tab button. It would be very annoying if
the focus changes everywhere but not to the next widget visible below or to the right of the current widget. Therefore start
constructing your widget top down from left to right to ensure the consistency of the focus.
</itemize>

<sect>Setting Widget Properties
<p>
<nidx/widget properties/<nidx/dialogeditor/<nidx/properties window/
Widget properties can be set easily with the properties window entries. When a widget gets selected, the properties window
automatically updates to the properties of the current widget. As all widgets are derived from <tt/<cdx/QWidget//, you can set the
<tt/<cdx/QWidget// properties plus an amount of properties that are specific to the selected widget. Properties can be:

<itemize>
<item>Integer values, such as the geometry of a widget or the font size
<item>Boolean values to enable/disable certain parameters of the widget. Set with combos containing true and false
<item>enumerable values of a widget, e.g. the palette. Set with combos containing all possible values
<item>Color values for e.g. the displayed color. Set with the KDE Color Dialog
<item>Font values for e.g. labels. Be careful to set Font values other than the default because this may prevent KDE from updating the
font. Set with the KDE Font Dialog
<item>File names for e.g. background pixmaps. Do not use gif images here as these may get
unsupported by further <idx/Qt/ versions > 1.42
</itemize>

<sect>Integrating the Dialog
<p>
Whenever you created a widget, you probably want to add it to the project to execute the action it is designed for. As a widget can be
constructed for several purposes, we will watch for two cases: a <tt/<cdx/QWidget// inherited widget and a <tt/QDialog/ one.

<sect1><tt/<cdx/QWidget// inherited
<p>
Let's say you created a widget that will be part of the main view. If it fills the whole view area, you have to add an instance pointer
to the header declaration of your <tt/<cdx/KTMainWindow// instance replacing the currently set view widget. Then change the code in the
<tt/initView/ method to set this widget the main view. Additionally, you could remove the View class of the generated project, but mind
that the document instance and the App instance depends on the view class. In this case, it is technically a much better way to create
a mini-KDE application and construct your <tt/<cdx/KTMainWindow// instance yourself.

More often the widget is intended to be a part of the view area, which means it is combined with other widgets. This can be done by
using one of the following classes that provide a divider to separate two widgets:

<enum>
<item><tt/QSplitter/
<item><tt/KPanner/
<item><tt/KNewPanner/
</enum>

If the main view shall contain more than two widgets, you have to use another instance of the divider as one of the two managed widgets
by the first one. Then add the according widgets to each panner and set the first panner the view area.

<sect1><tt/QDialog/ inherited
<p>
If your widget inherits <tt/QDialog/, it is probably intended to change one or more values; often this is used to set the application
preferences. To invoke the dialog, you have to add a slot to the <tt/App/ class by adding the method declaration and the implementation
body. Then add the constructor call to the method as well as a call to <tt/show()/ or <tt/exec()/ the dialog. Finally, you should take
care for processing the results of the dialog; this can either be done by the dialog who changes values of the parent widget itself or
by retrieving the values from the dialog (which would make your dialog a lot more reusable in other projects). Mind that you should call
<tt/delete/ if you called the dialog instance with <tt/new/ to avoid memory leaks.

Finally, you have to connect a menuentry (with according statusbar help) to the new slot invoking the dialog; optionally a keyboard
accelerator<nidx/accelerator/ and a <idx/toolbar/ icon. For this, add a resource ID to the file <tt/resource.h/ with a define. Then add
an according menuentry to one of the popup menus already present in the menubar or create a new popup to add your menuentry. The
menuentry consists of:

<itemize>
<item>an optional icon pixmap. Call this with the <tt/Icon("iconname.xpm")/ macro of <tt/<cdx/KApplication// to use the provided
<tt/KIconLoader/ instance.
<item>the menuentry name. Add this with the <tt/i18n("&amp;entryname")/ macro of <tt/<cdx/KApplication// to allow
internationalization. The ampersand should be in front of the letter that will be displayed underlined to access the entry directly by
keyboard acceleration.
<item>the member instance to call. Normally this would be the <tt/this/ pointer.
<item>the member slot to call. Use <tt/SLOT(yourmethod()/ to call the slot on the signal <tt/activated()/.
<item>the accelerator<nidx/accelerator/ key. This should be set to zero as this is done by an entry in <tt/initKeyAccel()/ where you
have to introduce an accelerator<nidx/accelerator/ key together with the slot to call. Then call <tt/changeMenuAccel()/ to change the
menu item's accelerator<nidx/accelerator/. This will make it configurable by a key-chooser dialog later. For standard actions, use the
enumerable values given by <tt/<cdx/KAccel//. <item>the menu ID as set in <tt/resource.h/
</itemize>


<chapt>Nyomtatás támogatása
<p>
<ncdx/QPrinter/<ncdx/QPainter/<ncdx/QPrintdialog/<nidx/printing/
Az ön által megírt alkalmazások általában támogatják a nyomtatást, hogy a felhasználó, az általa létrehozott dokumentumhoz nyomtatott formában is
hozzáférhessen; erre persze csak azoknak a programoknak van szükségük, amelyekkel kinyomtatható dolgokat lehet létrehozni,
pl szöveget, vagy képet. Ilyenkor szükség van egy felületre, amit a <idx/Qt/ könyvtár biztosít két osztály használatával:
a <tt/QPrintDialog/ osztály hozza létre a nyomtatás dialógust, a <tt/QPainter/ osztály pedig általában az elemek (widget)
tartalmának megrajzolásában játszik szerepet többek között. Ugyanúgy, mint ahogyan egy alkalmazás nézet-osztálya felel a dokumentum megjelenítéséért, ugyanúgy játszik ez is szerepet a nyomtatásban.

<sect>The <idx/Qt/ Print Dialog
<p>
A <idx/Qt/ dialógus a <tt/qprintdialog.h/ -en belül használható. Amikor ön KDE keretalkalmazást használ, akkor a nézet-osztály már
használja ezt, így önnek csak ki kell egészítenie  <tt/print()/ eljárás implementációját, a <tt/QPrinter/ osztály használatával.

<sect>A QPainter osztály
<p>
A nyomtató képességeitõl függetlenül, ön nyugodtan használhatja a <tt/Qprinter/ által biztosított <tt/QPainter/ osztályt a dokumentum nyomtatóra küldéséhez,
ugyanúgy, mint amikor egy elemet (widget) rajzol. Nehézség csak akkor támadhat, amikor implementálnia kell a nyomtatandók útvonalát.
<chapt>Segítség-Súgó funkciók
<p>
Az fejlesztési folyamat  fontos része, hogy a felhasználónak minden olyan segítséget biztosítsunk, ami csak lehetséges. A legtöbb fejlesztõ
késlekedik ezzel, de jusson eszébe, hogy nem feltétlenül Unix szakemberek a felhasználók. Lehet, hogy a szoftverhasználat sötét
oldalát ismerik csak, amelyik azzal kecsegtet, hogy a felhasználónak semmiféle segédeszközre nicsen szüksége az alkalmazás megismeréséhez.
Ezért a KDE és a <idx/Qt/ minden olyan eszközt biztosít, amely egy alkalmazást tökéletessé tesz a felhasználók szemében azzal, hogy
használható segítséget nyújt. Ezek a funkciók a következõk lehetnek egy alkalmazáson belül:

<itemize>
<item>Eszköztippek
<item>Gyorssegély
<item>Állapotsor súgó
<item>"Mi ez...?" gombok
</itemize>

Mindemellet, az alkalmazásnak a szokásos F1 gomb lenyomására is biztosítania kell egy HTML alapú kézikönyvet.  

A KDevelop úgy biztosít minden fajta segítséget, ahogyan azt egy, az alkalmazásvarázslóval készített KDE keretalkalmazás is támogatja.
Ez a fejezet abban fog önnek segíteni, hogy hogyan kell ezeket súgófunkciókat beépíteni a készülõ alkalmazásba.

Alkalmazásának fejlesztése közben próbáljon meg következetes lenni abban, amit csinál; tehát tegye meg a szükséges lépéseket
már a kód írása közben. Ezzel megelõzheti azt, hogy késõbb kelljen keresgélnie és kitalálnia, hogy mit is csinál az
alkalmazás, vagy hogy az adott kódrész mire is való pontosan.

<sect>Eszköztippek
<p>
A segítségnyújtás igen egyszerû módja az eszköztippek alkalmazása. Ezek azok a kis segédüzenetek, amelyek akkor bukkannak elõ,
 amikor az egérmutató elhalad egy olyan elem felett, amelyik támogatja ezt a funkciót, és eltûnnek akkor, amikor az egérmutató elhagyja azokat.Az eszköztipp legelterjedtebb alkalmazási módja az, amikor az <idx/eszköztár/s
-nál alkalmazzák õket õket, ahol a lehetõ legkisebb helyet szabad csak foglalniuk, hiszen az <idx/eszköztár/ak, tartalmának megjelenítésének szempontjából
többféleképpen is beállítható: a szöveg a gombon, a gomb jobb oldalán, a gomb alatt van, vagy csak szöveg található. Ennek
beállítására lehetõséget lehet adni a felhasználónak, de ez persze nem kötelezõ. A szöveg mindenféleképpen eszköztippként jelenik meg és az <idx/eszköztár/
általában gombokból, vagy más elemekbõl áll, mint pl. sorszerkesztõk és (!!!combo boxes!!!) Részletes útmutatásért nézze meg a <tt/<cdx/KToolBar// osztály útmutatóját, amely a KDE-UI könyvtárban található.

Példaként lássuk az "Új állomány" gombot egy hétköznapi alkalmazásban:

<tscreen><verb>
toolBar()->insertButton(Icon("filenew.xpm"), ID_FILE_NEW, true, i18n("New File") );
</verb></tscreen>
<ncdx/toolBar()/<nidx/KToolBar/
Itt a <tt/i18n("New File")/ rész tartalmazza az elemtipp üzenetet. Ezt az <tt/<cdx/kapp.h// biztosította i18n() makróval csatoltuk,
hogy az elemtipp további nyelvekre is lefordítható legyen.

A <idx/Qt/ által biztosított <tt/QToolTip/ és <tt/<cdx/QToolTipGroup// osztályok segítségével bármely elemhez kapcsolhatunk elemtippet.

Egy példa erre:

<tscreen><verb>
QToolTip::add( yourwidget, i18n("your Tip") );
</verb></tscreen>
További információért nézze meg a <idx/Qt/-online súgóját, a <tt/<cdx/QToolTip// osztályt.


<sect>Gyorssegély hozzáadása
<p>
A gyorssegély ablakok szintén jó példái a segítségnyújtásnak. A felhasználó úgy juthat segítséghez, hogy a
jobb egérgombbal rákattint az elemre, és az elõreugró menübõl kiválasztja a Gyorssegélyt. Tehát a gyorssegély valahol a
részletes kézikönyv és az eszköztipp fogalma között helyezkedik el - a dokumentáció túl részletezõ, az eszköztipp pedig
túlságosan szûkszavú lenne. Hogy lássa hogyan mûködik a gyorssegély, nyisson meg egy dialógust a KDevelopban, és kattintson a jobb egérgombbal valamelyik párbeszédelemen.
Ezután válassza a Gyorssegély menüpontot és máris megjelenik a segítség egy szöveges üzenet formájában. Emellett az üzenetek tartalmazhatnak URL hivatkozásokat valamely weblapra (természetesen a kézikönyvre is),
valamint formázhatóak színekkel és különbözõ betûtípusokkal.

Hogy használható legyen a gyorssegély, a forrásállományhoz adja hozzá a segítséget tartalmazó <tt/<cdx/kquickhelp.h// állományt. Mivel
a <tt/<cdx/KQuickHelp// osztály a KDE-UI könyvtár része, ezért valószínüleg az ön alkalmazása is használja azt; ha mégsem, akkor projektjének
linker flagjeit állítsa be a kdeui használatára.

Egy példa:

<tscreen><verb>
KQuickHelp::add( yourwidget, i18n("your Tip") );
</verb></tscreen>

amely majdnem ugyanaz, mint QToolTip-nél. Mikor a KDevelop dialógusszerkesztõjével készít dialógust, akkor a Gyorssegélyt és az Eszköztippeket az implementációs
állományhoz adja hozzá, Ne pedig az adat-forrásállományhoz, hiszen a dialogusszerkesztõ ezt minden alkalommal frissíti, amikor ön az elemet szerkeszti.

A <tt/<cdx/KQuickHelp// osztály, tagek használatával biztosítja a szöveg formázását. Lehetõvé teszi hiperlinkek, internet protokolok,
színek, betûtípusok és méretek használatát. További információért nézze meg a <htmlurl url="../kde_libref/index.html" name="KDE Library Reference Guide"> -ot és
a <tt/<cdx/KQuickTip//-hez járó  <idx/osztály-dokumentációt/ -t.

<sect>Az állapotsor súgó
<p>
Mivel a KDeveloppal létrehozott keretalkalmazások tartalmaznak állapotsort, ezért általában használnak állapotsor üzeneteket is, szinte az
összes menühöz és <idx/eszköztár/ elemhez. Az állapotsori súgóüzenet egy rövid üzenet, amely kicsit részletezi az elemtippet, vagy pedig
helyettesíti azt a menüsor elemek fölött, és amelyik (mint ahogy a neve is utal rá) megjelenik az állapotsorban, ha a felhasználó belép egy menübe és
kijelöl egy menüpontot; tehát minden menüpont kapcsolatban áll a jelével <tt/highlighted(int)/ (signal), ami a <tt/statusCallback(int)/ eljárás,
amelyik kiválasztja a megfelelõ üzenetet egy döntéshelyzetben. Mikor menüpontot, vagy <idx/eszköztár/ elemet ad hozzá már létezõ menükhöz,
az eljárásba vegye bele annak az eseménynek a leírását, amelyet a felhasználó elindithat a menüpont, vagy gomb megnyomásával.

Példa:

<tscreen><verb>
    case ID_FILE_NEW:
 	  	slotStatusHelpMsg(i18n("Új dokumentum létrehozása"));
 	  	break;
</verb></tscreen>

Ez megjeleníti az állapotsori üzenetet a <tt/slotStatusHelpMsg()/ eljárás meghívásával, a megfelelõ üzenetet kiíratva, amikor a felhasználó
kiemel egy menüt, vagy egy <idx/eszköztár/ elemet az id ID_FILE_NEW-val, ami a <tt/statusCallback()/ eljáráshoz kapcsolódik.
Az eszköztárak ehhez az eljáráshoz kapcsolódnak a <tt/pressed(int)/ jellel, ami megengedi a felhasználónak, hogy egy <idx/eszköztár/
gomb megnyomása után elmozdítsa az egeret, ha mégsem akarja végrehajtatni a parancsot. A <tt/<cdx/KToolBar// is biztosít egy <tt/highlighted(int, bool)/ jelet,
ami az üzenet megjelenítésére használható a beállított jel helyett, ha a felhasználó  egy gombora állítja az egeret.


<sect>A "Mi ez...?" gomb
<p>
A <idx/"mi ez...?"/ gomb hasonlóképpen nyújt segítséget, mint a Gyorssegély<nidx/KQuickHelp/ , azonban a felhasználó a itt
munkaterület egy adott elemérõl, vagy egy <idx/eszköztár/ elemrõl tudakozódhat. Ezt az <idx/eszköztár/ -ban helyezik el, és
akkor aktiválódik, amikor a felhasználó rákattint. Ekkor a kurzor egy olyan kérdõjeles nyillá változik, amilyen maga a gomb is.
A felhasználó rákattinthat bármelyik látható elemre és megjelenik egy súgó ablak. Gyakorlásképpen
próbálja ezt ki a KDevelopban, hogy meglássa hogyan is viselkedik a "Mi ez...?" gomb.

A "Mi ez...?" gomb hozzáadásához tegye a következõket: 

<enum>
<item>a <tt/qwhatsthis.h/ -t "include"-olja bele a forráskódba
<item>adjon hozzá egy private elemet <tt/<cdx/QWhatsThis// whats_this, vagy más néven az Ön <tt/<cdx/KTMainWindow// leszármazott osztály
deklarációjához
<item>adjon meg egy erõforrásazonosítót (resource id) a 'mi ez' nyomógomjához a <tt/resource.h/ fájlban, pl. <tt/#define ID_HELP_WHATS_THIS
10100/
<item>az Ön <idx/eszköztár/at létrehozó eljárásában (általában <tt/initToolBar()/ a neve) adja meg ott, ahol ki akarja rajzoltatni a gombot, a
következõket:
<tscreen><verb>
  whats_this = new QWhatsThis;
  QToolButton *btnwhat = whats_this->whatsThisButton(toolBar());
  QToolTip::add(btnwhat, i18n("What's this...?"));
  toolBar()->insertWidget(ID_HELP_WHATS_THIS, btnwhat->sizeHint().width(), btnwhat);
  btnwhat->setFocusPolicy(QWidget::NoFocus);
</verb></tscreen>
<ncdx/setFocusPolicy()/
<item>végül írja hozzá a kívánt üzeneteket a következõképpen:
<tscreen><verb>
whats_this->add(class_tree, i18n("Class Viewer\n\n"
                        "Az osztályböngészõ megmutatja az aktuális projektállományok minden"
                        "osztályát, eljárását és változóját, valamint átválthatunk vele a"
                        "deklarációkra és implementációkra. A jobb egérgombbal elõreugró menü"
                        "sokkal célirányosabb használatot tesz lehetõvé."));
</verb></tscreen>
</enum>
	


<chapt>A dokumentáció kiterjesztése <idx/SGML/ segítségével
<p>
Due to the fact that projects often lack a complete set of user documentation, all KDevelop projects contain a pre-build handbook that
can be easily adapted; therefore fulfilling another goal of KDE: providing enough online-help to support users that are not familiar
with an application. This chapter therefore introduces you on how to extend the provided documentation template and what you have to do
to make it available to the user.

<sect>Why SGML ?
<p>
<idx/SGML/ (Standard Generalized Markup Language) itself is a language with which one can write specifications of a markup language,
but not a markup language itself. The specification for that markup language is called a DTD (Document Type Definition) which contains
the structure of a document and the valid tags to use. Then, an SGML system provides a set of replacement files that translate the DTD
tags into the desired output - and this is the way it works. The most used output is probably HTML to provide online help through
web-browsers in a time where Internet standards are available even on single-desktop systems. KDE makes extensive use of HTML
documentation by it's <idx/KDEHelp/ application where all <idx/KDE applications/ are listed and give access to their user manuals as
well as by a helpmenu where the user can access the online-help directly from within the application.

Now, KDE (and therefore KDevelop) use the SGML-Tools 1.x package (see <url url="http://www.sgmltools.org">), which was formerly known
as the LinuxDoc package. It contains a DTD called <tt/LinuxDoc/, and a set of mapping files for various output transformations and the
necessary tools that actually do the replacement of <tt/LinuxDoc/ tags. The LinuxDoc DTD is based on the Qwertz DTD which itself was
written to provide a good mapping (replacement of tags) especially for the &latex; text system, therefore is very usable to produce a
good printed output. The package then got it's name from the usage for writing documentation for the LDP (Linux Documentation Project)
and has only changed it's name due to the fact that it is an sgml-system that does not necessarily have a direct connection with the
Linux project but can be used on any Unix-System; you can as well write your own DTD and mappings if you ever like to.

In the meantime, another DTD as been made up to fit the same purpose: the "DocBook DTD". DocBook has obviously some advantages over the
LinuxDoc DTD mostly in providing better tags and mappings for tables and the inclusion of graphics, but that is possible with LinuxDoc
as well. The SGML-Tools therefore switched to provide support for the DocBook DTD in the 2.x version series, which also includes a
converter to produce a DocBook sgml from a LinuxDoc master.

The current state of KDE development is that we're still using the LinuxDoc DTD for some reasons:
<list>
<item>writing LinuxDoc documentation is easy
<item>installing the SGML-Tools 1.x for using LinuxDoc is even much easier
<item>KDE provides an additional tool called <tt/ksgml2html/ which adds the KDE documentation style to the output produced by the
SGML-Tools' 1.x <tt/sgml2html/ converter to produce HTML output.
</list>

I personally have encountered that while writing the KDevelop handbooks using the LinuxDoc DTD is very easy and lasts for the
requirements I need for writing the documentation. The learning curve is very high, so you will be a sgml-tools/LinuxDoc DTD guru
within days and that will save you a lot of time to work yourself into any formatting system such as &tex; for printed output for your
documentation or a markup language for HTML output.

One major reason for still using the sgml-tools 1.x is that most distributions ship with the package and all additional tools you need
for other output formats. This makes the installation as easy as possible and the writing itself isn't very complicated as you will
see. The output formats you can achieve witht the sgml-tools are:

<itemize>
<item>HTML output, with KDE look'n feel when using <tt/ksgml2html/ additionally
<item>plain text
<item>GNU info,
<item>Lyx format
<item>&tex;, DVI, PostScript and PDF format
<item>Rich Text Format (RTF)
</itemize>


<sect>What the Documentation already contains
<p>
When creating a KDevelop project, the subdirectory <tt>docs/en</tt> already contains the english <tt/index.sgml/ documentation file and
the already produced output HTML files. Those are already included into the project as well as their installation destination is preset
to the KDE HTML directory. The documentation is already adapted to your project name, version number and the programmer's information.
Further, the output covers the index.html file containing the table of contents (which is opened by KDE Help when the user requests
help); an installation introduction and a copyright information with regards to the GPL license.

Therefore, when extending the documentation, you only have to add the information that is specifically to your project. Mind that for
KDE projects you have to run "Make Doc-Handbook" from the "Project" menu again after the project is created. The index.sgml file is
again processed by <tt/<idx/ksgml2html// and the KDE-Style is added to the HTML output. Open the <tt>docs/en</tt> directory in the RFV
and add the <tt/logotp3.gif/ file to the project by the context-menu; then set the file properties correctly to install the logo file
into the same location the HTML files will go - to <tt>$(kde_htmldir)/en/&lt;your_project&gt;/logotp3.gif</tt>.

<sect>Writing SGML Documentation
<p>
This section has been added because SGML (or to be more precise: the LinuxDoc DTD) still seems to be difficult for beginners that want
to write documentation. When looking at some KDE applications, I have seen some that contain an sgml file which is the template - but
the author went over to edit the html output instead of the sgml file. This results in problems that translators have - if they want to
provide documentation for your application in their native language, they will have to edit each file as well in HTML and this makes it
impossible to reuse the documetation for other formats not only in the english version but all internationalized versions as well. You
see that this is very short-thinking and a bad situation; personally I think that this results from the author's knowledge of HTML but
not of SGML. As most will try to avoid learning a new formatting language, they will use the HTML output as the template that they
edit. If you once find out how easy (and useful) SGML with LinuxDoc is, you will know that it's worth to learn a few more tags that
built the SGML formatting.

The following sections will therefore introduce you to the most important parts of an LinuxDoc sgml file and how to extend your
documentation.

<sect1>The DTD Declaration
<p>
An SGML file, whatever DTD it may use, always has to start with the DTD declaration. This tells the SGML parser about which DTD to use.
Therefore, the first tag (a bracketed expression like &lt;yourtag&gt; your contents &lt;/yourtag&gt;) is always the DOCTYPE:

<verb>
&lt;!doctype linuxdoc system&gt;
</verb>

That tells your sgml formatter that it shall use the LinuxDoc DTD.

<sect2>The Document Structure
<p>
Now, when using the LinuxDoc, the next tag is the start tag for the document style type. The LinuxDoc DTD offers a whole set of types
that you can select from, dependent on the purpose of your document or it's legth. Available formats are:

<itemize>
<item><tt/&lt;notes&gt;/ for short explanations
<item><tt/&lt;article&gt;/ for writing articles with abt. 10-20 pages (suggested). This is used by the templates of KDevelop and most KDE
applications.
<item><tt/&lt;report&gt;/ for articles that are longer than an &lt;article&gt; type
<item><tt/&lt;book&gt;/ for writing large books - the KDevelop handbooks have been written using this document type
<item><tt/&lt;slides&gt;/ for slideshows. This is useful for presentations. You will use &latex; as output format in most cases, of
course.
<item><tt/&lt;letter&gt;/ for normal letters
<item><tt/&lt;telefax&gt;/ for a telefax
<item><tt/&lt;manpage&gt;/ for a manpage
</itemize>

Mind that these are only describing how the document structure will look like in general - not the actual output. As mentionend, the
KDevelop default generated template is using the &lt;article&gt; structure. This is used by most applications except KDevelop itself
which uses the &lt;book&gt; format. In the HTML output this doesn't really matter much - but for &latex; e.g. this makes much difference.
The handbooks are really "books" with separate pages for each chapter as the main difference.

What follows is that the end of the sgml file must have an end-tag for the document structure type - for &lt;article&gt; this would be
&etago;article&gt;.

<sect1>Titlepages
<p>
Now, after the document structure follows a section that describes all entries usually found on a titlepage. The predefined template
doesn't use this explicitely but only sets the information for <tt/&lt;title&gt;/, <tt/&lt;author&gt;/ and <tt/&lt;date&gt;/ as this
lasts for most purposes. Especially when using a <tt/&lt;book&gt;/ structure, you probably want to define a complete titlepage. The
following lists the according tags for this, taken from the sgml source of this handbook:

<code>
&lt;!doctype linuxdoc system&gt;
&lt;book&gt;
&lt;titlepag&gt;
&lt;title&gt;The KDevelop Programming Handbook
&lt;subtitle&gt;The User Guide to C++ Application Design for the K Desktop Environment (KDE) with the KDevelop IDE, Version 1.2
&lt;author&gt;
&lt;name&gt;Ralf Nolden &lt;htmlurl url="mailto:Ralf.Nolden@post.rwth-aachen.de"
                                   name = "&lt;Ralf.Nolden@post.rwth-aachen.de&gt;"&gt;
&lt;inst&gt;The KDevelop Team
&lt;date&gt;Version 1.2 , March 21, 2000
&lt;abstract&gt;
This handbook itself is part of the KDevelop Integrated Development Environment
and is therefore also licensed under the GNU General Public License;
see &lt;ref id="Copyright" name="Copyright"&gt; for more information.
&etago;abstract&gt;
</code>

This covers all a normal titlepage usually contains. The <tt/&lt;author&gt;/ tag can also include a <tt/&lt;thanks&gt;/ tag to insert
some thanks to co-authors, lecturers etc. <tt/&lt;inst&gt;/ represents the institute or company for which the author wrote the
documentation; you could also use your team-name here like I did. <tt/&lt;abstract&gt;/ now covers an short description that is placed
on the titlepage as well. This is somewhat annoying on a printed version where this section would be printed on the back of the title
page where the copyright notice etc. are collected; this can be changed for &latex; output when editing the &tex; file.

<sect1>Indices
<p>
The LinuxDoc DTD defines a set of tags for various indices as they occur in usual documents. Those are:

<itemize>
<item>&lt;toc&gt; for the table of contents
<item>&lt;lof&gt; for the list of figures
<item>&lt;lot&gt; for the list of tables
</itemize>

The according start-tags don't necessarily require an end-tag; they're inserted just after the titlepage before the actual beginning of
the document with the according sections or chapters.

Now, when it comes to indexing keywords for an index that is placed at the end of the document, you are provided four different tags;
two which leave the indexed phrase within the page and two for index entries that are not displayed:

<list>
<item>&lt;idx&gt; for a normal index entry
<item>&lt;cdx&gt; for a true-type index entry
<item>&lt;nidx&gt; for an index entry not appearing in the text document
<item>&lt;ncdx&gt; as before for a tt-index entry
</list>

These tags are ignored by all backends (the tool that does the mapping of the sgml-tags to their document format) except
<tt/sgml2latex/, which generates an index file <tt/index.idx/ that can be turned to a &tex;-index with <tt/makeindex index.idx/. The
index itself can be inserted into the &tex; output file afterwards with <tt/\printindex/. I patched my mapping for the &latex; output to do
this automatically (but still don't know how to include the index into the table of contents...).

<sect1>The Document Contents
<p>
Now, after explaining most details of the general structure, we're coming to the actual document contents. Dependent on the document
structure type, has to start with a <tt/&lt;sect&gt;/ tag, when using <tt/&lt;book&gt;/ you have to start with <tt/&lt;chapt&gt;/
for the chapters.

After the start tag, you can structurize each chapter with <tt/&lt;sect1&gt;/, <tt/&lt;sect2&gt;/ etc. up to the allowed level of
sub-sections (4).

The chapter start tag is followed by the chapter's title. There, you have the additional choice to use <tt/&lt;title&gt;/ and
&etago;title&gt; for the chapter's title (optional). Now, afte the title of the chapter, you have to add a &lt;p&gt; tag to actually
start with the subsection's contents. Within that, you have almost all means to format your document with list, enumerations,
itemizations and description lists. Further, quotations, code snippets and the like can be inserted by tags; see you <tt/sgmltools/
documentation guide for a complete list. What you should look for is the "special characters" section. This contains all valid
replacements for characters that are different from the usual alphabet like brackets, slashes and symbols like trademark etc. With the
given tags you can structurize your text contents as you application documentation requires.

<sect>How to call Help in Dialogs
<p><nidx/help functions/
Calling help in dialogs is often done by adding a Help-button; then you add a slot that is called when the button gets pressed. Within
the slot implementation, call


<tscreen><verb>
kapp->invokeHTMLHelp( QString aFilename, QString aTopic );
</verb></tscreen>

where <tt/aFilename/ is the the filename to be called within your HTML documentation directory of the application; e.g index-3.html.
<tt/aTopic/ then is the topic that is to be called. The hash prefix is automatically added; just enter the chapter you want to have on
this page, actually this would be a subsection's name.


<chapt>Osztály dokumentáció a <idx/KDoc/ segítségével
<p>
A dokumentálás egyik fontos része, egy részletes súgó hozzácsatolása az osztály felületekhez. A <tt/<idx/KDoc// -al létrehozott HTML <idx/class documentation/ (osztálydokumentáció)
segítí önt és a többi programozót abban, hogy könnyebben használhassák ezeket az osztályokat. A KDevelop teljeskörûen támogatja
a <tt/idx/KDoc// használatát a KDE-könyvtár dokumentálásánál, akárcsak az ön által már dokumentált alkalmazás-szerkezeteket.
A meglevõ kódok megismeréséhez, jó elolvasni a beépített online dokumentációt.  A következõkben leírást olvashat arról, hogy hogyan
juthat hozzá az <idx/API/ dokumentációjához, hogy hol segíti önt a KDevelop, és hogy milyen speciális függelékeket biztosít még a <tt/<idx/KDoc// ezeken kívül.

<sect>Hogyan használjuk a KDevelop dokumentációs képességeit
<p>
Miután létrehozott egy projektet, válassza a "Make <idx/API/-Doc" -ot a "Projekt" menübõl, hogy elkészítse a <idx/API/ dokumentációt.
Így elkészül a fejléc állomány, és a HTML formátumú kimenet. Ezután bármikor hozzáférhet a dokumentációhoz, ha kiválasztja a súgó menübõl az "<idx/API/-Documentation" -t, vagy az
odavágó könyv-szimbólumot a dokumentációs fában, a "Jelenlegi projekt" útvonalon.

A KDE-hez és az <idx/Qt/ online-idx/class documentation/ -hoz már megvannak a dokumentáció kereszthivatkozásai, így könnyen követheti az
inheritance-t az inheritance áttekintõvel. Ez nagymértékben segítheti ismerkedését a KDE-vel és a <idx/Qt/ dokumentációval.


<sect>Osztály- és Tagdokumentáció hozzáadása (member)
<p>
A KDevelop minden eszközt biztosít a kód automatikus hozzáadásához, és a közvetlen dokumentálást is támogatja. Amikor az
Osztálygenerátort a "Projekt"->"Új osztály"  kiválasztásával használja, adjon meg részletes leírást a dokumentációs mezõben.
Így a dokumentáció bekerül az osztály fejlécébe.

Mikor osztálytag-funkciót, vagy attributumot csatol a <idx/classtools/ (osztálykellék) segítségével, akkor csatolja a tag
dokumentációját az odavágó dokumentációs mezõbe.

Azt is gondolhatja persze, hogy a dokumentálás nem különösebben fontos része a fejlesztési folyamatnak. Gondoljon azonban arra, hogy
ahogyan a projekt mérete nõ és egyre több ember kapcsolódik be a fejlesztésbe, akkor a <idx/class documentation/ (osztály-dokumentáció) a legjobb módja annak, hogy idõt spóroljunk.
Ha a fejlesztõnek az eljárás nevébõl kell kitalálnia annak funkcióját, akkor a nevek félreértelmezése miatt könnyen elõfordulhat, hogy az eljárás teljesen
mást csinál, mint amire a neve esetleg utal és amit fejlesztõ vár. Ezért fordítson kellõ gondot a dokumentálásra és
frissítse azt olyan gyakran, ahogyan az lehetséges.

Mindamellett, a dokumentáció nem tartozik a projekthez, és nincs nemzetköziesítési támogatottsága sem. Ezért
 minden <idx/API/ dokumentációt angolul kell megadni, hogy a nemzetközi fejlesztõi csoportok dolgozhassanak ezekkel a forrásokkal.

Amennyiben kézzel szeretné a dokumentációt hozzáadni a fejlécállományhoz, akkor adja a dokumentációt <bf/above/ az eljáráshoz, vagy az osztályhoz
C-comment stílusban, azzal a különbséggel, hogy az elsõ sornak itt perjellel és kettõ csillaggal kell kezdõdnie.

Példa:

<tscreen><verb>
  /** engedélyezi a menüket/eszköztár ikonokat
  	*/
  void enableCommand(int id_);
</verb></tscreen>


<sect>Különleges függelékek:
<p>
<bf/NOTE:/ Ennek a fejezetnek a dokumentációja az <idx/KDoc/ leírásából származik, amit Sirtaj S. Kang <htmlurl
url="mailto:taj@.kde.org" name="taj@.kde.org">), az <idx/KDoc/ szerzõje írt az <idx/KDoc/ -hoz;  Copyright (c) 1997

A dokumentáció a következõk elegye: 

<itemize>
<item>Normál szöveg. A bekezdéseket legalább egy üres sorral kell elválasztani egymástól.

<item>az ív szövege
<code>
&lt;pre&gt;
.....kód töredékek....
&lt;/pre&gt;
</code>
<item>Az ív különbözõ függelékei:
<tscreen><verb>
@tagname [tag parameters]
</verb></tscreen>
</itemize>


Érvényes függelékek mindenféle forráskódhoz:

<itemize>
<item>Osztályok
<tscreen><verb>
  @short [a szöveg egy mondata]
    Az osztály rövid leírása
  @author [a szöveg egy mondata]
    Az osztály szerzõje
  @version [a szöveg egy mondata]
    Osztályverzó (Én általában azt a RCS/CVS "Id" függelékben állítom be)
  @see [hivatkozás(ok) osztályokra, eljárásokra] 	
    Hivatkozás más, kapcsolódó dokumentációkra
</verb></tscreen>

<item>Eljárások

<tscreen><verb>
  @see
    lsd. mint fent
  @return [egy mondat]
    Egymondatos leírás a return értékrõl
  @param [param név azonosító] [param leírás]
    Irja le a paramétert. A param leírás sokféle sor között lehet,
    de mindig üres sorra végzõdik a megjegyzés végénél, vagy egy 
    másik param elejénél. Ezért  a paraméterek jó ha a dokumentum 
    végén szerepelnek.
</verb></tscreen>

<item>Constants, Enums, Properties
<tscreen><verb>
  @see
    mint fent
</verb></tscreen>
<item>ALSO <tt/@ref/
		A "@ref" metafüggelék, mint a javadoc formatum alapja, ugyanabban a formátumban van, mint a @see, azzal a különbséggel, hogy bárhol elõfordulhat a dokumentációban.
(az összes többi függeléknek a saját sorában kell lennie).
</itemize>


<chapt>Nemzetköziesítés
<p>
<sect>Mi az a i18n ?
<p>
Az i18n egy nemzetköziesítési rendszer, amit egy alkalmazás, vagy projekt nemzetköziesített változatához szoktak ajánlani. 
Az alkalmazásokkal ugyanis az a baj, hogy csak azt a nyelvet támogatják, amelyiken megírták õket; ez észrevehetõ a 
cimkéken, a menükben és több helyen is a program használata közben. A nemzetköziesítés célja, hogy alkalmazásokat és könyvtár-funkciókat biztosítson a 
felhasználók anyanyelvén; így az eredeti nyelv nem gátolja többé a felhasználót az alkalmazás kihasználásában, és 
kényelmesebbé is teszi azt.  

<sect>Hogyan támogatja a KDE a nemzetköziesítést 
<p>
A KDE-nek, mint az egyik legkorszerûbb asztali környezetnek, számos célja közül az egyik legfontosabb az, hogy a felhasználóknak alkalmazásokat biztosítson 
anyanyelvükön. Valamint, hogy egyszerûbbé tegye a fejlesztõk számára azt, hogy alkalmazásaikat bármelyik támogatott nyelven terjeszteni tudják. 

Technikailag ez már megvalósult az <idx/KDE File System/ Standard-al, amely lokális támogatást nyújt a nyelveknek a
dokumentációs terminológiában, és elõsegíti az alkalmazások nemzetköziesítését a <tt/KLocale/ KDE-mag könyvtár használatával. Ez az osztály 
felel minden nyelvi megjelenésért, amely beállításra kerül a KDE Control Centerben.

A fejlesztõnek mindössze két dolgot kell ismernie ahhoz, hogy alkalmazása kihasználja ezt a tulajdonságot:

<enum>
<item>Vegye bele a forráskódba a <tt/cdx/kapp.h// -ot, ha valahol látható szöveg van az alkalmazásában, pl. a forrás állományokban szerepel a
<idx/QLabel/s.
<item>amennyiben látható szöveget állít be, akkor azt csatolja a <tt/<cdx/kapp.h// által biztosított <tt/i18n()/ makróval, hogy a fordítás lehetõvé váljon
<item>amennyiben helyszíni objektumhoz kell hozzáférnie, használja a <tt/<cdx/kapp.h// által biztosított <tt/klocale/ makrót. 
</enum>

Tulajdonképpen ez minden, amire a kód írása közben figyelnie kell. Tartsa még szem elõtt azt is, hogy a <tt/<cdx/KConfig// által használt configurációs szövegrészeket nem kell nemzetköziesítenie, 
mert egyrészrõl ez nem lényeges, másrészrõl pedig ezek nem olvasnak be értékeket. 

<sect>Nyelv hozzáadása a projekthez 
<p>
A KDevelop megkönnyíti a fejlesztõk életét azzal, hogy anyanyelvi támogatást nyújt alkalmazásaikhoz. Amikor 
új KDE projektet hoz létre, akkor a projekt fõkönyvtárába bekerül egy <tt/po/ nevû könyvtár. A programgenerálás befejeztével 
ide kerül az ön által létrehozott <em/&lt;application&gt;/.pot állomány. A .pot állomány ekkora már minden olyan szövegrészt tartalmaz, amelyet az i18n() makróval állítottak be, így 
önnek már csak a saját kódját kell beírnia a makró használatával. Idõrõl idõre, végre kell hajtania egy 
"Projekt"->"Üzenetek készítése és beágyazása"-t, ami magától frissíti .pot állományt a megfelelõ makrók segítségével.
<nidx/"Project"-menu/<nidx/PO-files/<nidx/translations/<ncdx/KLocale/

Egy nyelv, projekthez való hozzáadásához válassza a "Projekt"->"Fordítási állomány hozzáadása"-t, ami megnyitja a nyelvválasztás dialógust. Válassza ki a 
kívánt nyelvet és nyomjon OK-t. Ezzel a megfelelõ <em/&lt;lang&gt;/.po állomány bekerül a <tt/po/ könyvtárba. Ezután kezdje el 
lefordítani a .po állományt úgy, hogy kiválasztja azt a po könyvtárból a Real File Viewer-ben, vagy az LFV-bõl a "Fordítások" útvonalon. Ha telepítette a 
<idx/KTranslator/ -t, akkor az megnyitja az állományt a "Kellékek" ablakban, egyébként pedig szövegállományként a fejléc/forrás 
ablakban lesz szerkeszthetõ.   
A <idx/KTranslator/ folyamatosan kutatja a már létezõ fordításokat az ön helyi KDE installációjában, így nagymértékben megkönnyíti a munkát, 
mert a meglevõ fordítások így felhasználhatók. 

A kézzel történõ szerkesztéshez néhány példa:
<tscreen><verb>
#: kscribble.cpp:619
msgid "Opens an existing document"
msgstr ""
</verb></tscreen>

A fentiek azt mutatják, hogy a szövegrészlet a <tt/kscribble.cpp/ állomány 619. sorából lett kinyerve. A <tt/<cdx/msgid// és a <tt/<cdx/msgstr// függelékek, 
amelyek információt hordoznak a fordításhoz; a <tt/<cdx/msgstr// fogja a lefordított szövegrészt tartalmazni.  Figyelnie kell még a ESCAPE szekvenciákra, 
mint a \n vagy \t, melyeknek szintén bele kell kerülnie a fordításba. Egy német fordítás tehát így nézne ki:

<tscreen><verb>
#: kscribble.cpp:619
msgid "Opens an existing document"
msgstr "Öffnet ein existierendes Dokument"
</verb></tscreen>

Ez minden, amire a fordításnál figyelnie kell; miután elkészült, mentse el az állományt. A make, po könyvtárban történõ furttatásakor, az 
üzenetállományok feldolgozásra kerülnek, és hiba jelentkezhet, amennyiben a szövegrészeket nem fordította elég következetesen; pl. ESCAPE szekvenciák hiányoznak. 
Ha ez történik, akkor javítsa ki a hibát és gyõzõdjön meg arról, hogy a make hiba nélkül fut.

Ezen kívül legyen óvatos a szövegrészeken belül található '&' jel fordításával. Az '&' jel utáni betûk az ALT-al együtt használva
gyorsbillentyûk<nidx/accelerator/s, amelyek segítik a menüsorhoz való hozzáférést, vagy az elõreugró elemek megjelenését, hogy a <idx/keyboard focus/
gyorsabban válthasson át a kiválasztott elemre. Ha ugyanaz a gyosbillentyû<nidx/acclerator/ ugyanazon a <idx/keyboard focus/ területen tûnik fel (ami
 egyszer lehet a fõelem, másszor egy dialógus), akkor az elsõ elem után a többit már nem érhetjük el ugyanazzal a gyosbillentyûvel<nidx/acclerator/. 
Így még az is a fordítón múlik, hogy hogyan lesz használható az alkalmazás a fordított nyelven. Arra sincsen semmiféle biztosíték, hogy az 
eredeti betû megtalálható a fordításban, így a fordítónak nagyon óvatosan kell ezt a problémát kezelnie, és a lefordított alkalmazás tesztelésével 
kell meggyõzõdnie arról, hogy hibák bioztosan ne forduljanak elõ.

<sect>Kapcsolat a fordító csoportokkal
<p>
A KDE Csoport számos olyan kapcsolatot biztosít a fejlesztõknek, amelyek a KDE projekten belül végeznek fordításokat. Ezek nyelvek szerint vannak
csoportokba szervezve. A jelenlegi listát és információt arról, hogy kik
 végzik a fordításokat a <url url="http://www.kde.org"> címen találja meg.

Az alábbi lista az 1999. március 6-án aktuális kapcsolatfelvételi címeket tartalmazza. Amennyiben csatlakozni szeretne valamelyik 
csoporthoz, írjon közvetlenül annak koordinátorához levelet.  

A KDE fordítását Juraj Bednar <htmlurl url="mailto:bednar@rak.isternet.sk"
name="mailto:bednar@rak.isternet.sk"> és Matthias Elter <htmlurl url="mailto:me@kde.org" name="me@kde.org"> koordinálja.

Jelentkezhet a KDE nemzetköziesítési levelezési listájára, ha a kde-i18n-doc@kde.org -ra, ha küld egy levelelet a 
<htmlurl url="mailto:kde-i18n-doc-request@kde.org?subject=subscribe" name="kde-i18n-doc-request@kde.org"> címre, a
tárgyhoz beírva a "subscribe" szót.  

Mielõtt nekikezdene a fordításnak, lépjen kapcsolatba a megfelelõ fordító csoporttal annak érdekében, hogy kétszeri munkavégzés elkerülhetõ legyen. 

<descrip>


<tag/br Breton translation team:/
team coordinators: Jañ-Mai DRAPIER <htmlurl url="mailto:jdrapier@club-internet.fr" name="jdrapier@club-internet.fr">
website: <htmlurl url="http://perso.club-internet.fr/jdrapier" name="http://perso.club-internet.fr/jdrapier">

<tag/ca Catalan translation team:/
team coordinators: Sebastià Pla <htmlurl url="mailto:sastia@redestb.es" name="sastia@redestb.es">

<tag/cs Czech translation team:/
team coordinators:  Miroslav Flídr <htmlurl url="mailto:flidr@kky.zcu.cz" name="flidr@kky.zcu.cz">

<tag/da Danish translation team:/
team coordinators:  Erik Kjær Pedersen <htmlurl url="mailto:erik@binghamton.edu" name="erik@binghamton.edu">

<tag/de German translation team:/
team coordinators: Thomas Diehl <htmlurl url="mailto:th.diehl@gmx.net" name="th.diehl@gmx.net">
website: <url url="http://www.dtp-service.com/kde/de/">
mailing list:  send a mail with 'subscribe' in the subject line to: <htmlurl url="mailto:kde-i18n-de-request@kde.org?subject=subscribe"
name="kde-i18n-de-request@kde.org"> Webforum for discussions and user feedback: <url url="http://www.dtp-service.com/discus_d">

<tag/el Greek translation team:/
team coordinators:  Theodore J. Soldatos <htmlurl url="mailto:theodore@eexi.gr" name="theodore@eexi.gr">

<tag/eo Esperanto translation team:/
team coordinators:  Wolfram Diestel <htmlurl url="mailto:diestel@rzaix340.rz-uni-leipzig.de" name="diestel@rzaix340.rz-uni-leipzig.de">

<tag/es Spanish translation team:/
team coordinators:  Boris Wesslowski, Alonso Lara <htmlurl url="mailto:Boris@Wesslowski.com" name="Boris@Wesslowski.com">
website: <url url="http://members.xoom.com/keko5/">
mailing list: send a mail with 'subscribe' in the subject line to <htmlurl url="mailto:kde-es@kde.org?subject=subscribe"
name="kde-es@kde.org">

<tag/et Estonian translation team:/
team coordinators:  Hasso C. Tepper <htmlurl url="mailto:hasso@ewsound.estnet.ee" name="hasso@ewsound.estnet.ee">

<tag/fi Finnish translation team:/
team coordinators: Kim Enkovaara <htmlurl url="mailto:kim.enkovaara@iki.fi" name="kim.enkovaara@iki.fi">

<tag/fr French translation team:/
team coordinators:  Francois-Xavier Duranceau <htmlurl url="mailto:Francois-Xavier.Duranceau@loria.fr" name="Francois-Xavier.Duranceau@loria.fr">
website: <url url="http://www.loria.fr/~durancea/kde/wip-apps.html">
mailing list: send an empty mail to:  <htmlurl url="mailto:kde-traduc-fr-subscribe@egroups.com" name="kde-traduc-fr-subscribe@egroups.com">

<tag/he Hebrew translation team:/
team coordinators:  Erez Nir <htmlurl url="mailto:erez-n@actcom.co.il" name="erez-n@actcom.co.il">

<tag/hr Croatian translation team:/
team coordinators:  Vladimir Vuksan <htmlurl url="mailto:vuksan@veus.hr" name="vuksan@veus.hr">

<tag/hu Hungarian translation team:/
team coordinators:  Marcell Lengyel <htmlurl url="mailto:miketkf@yahoo.com" name="miketkf@yahoo.com">
website:<url url="http://sophia.jpte.hu/~kde">

<tag/is Icelandic translation team:/
team coordinators:
Logi Ragnarsson, <htmlurl url="mailto:logir@imf.au.dk" name="logir@imf.au.dk">
Thorarinn R. Einarsson, <htmlurl url="mailto:thori@mindspring.com" name="thori@mindspring.com">
Bjarni R. Einarsson, <htmlurl url="mailto:bre@netverjar.is" name="bre@netverjar.is">
Hrafnkell Eiriksson, <htmlurl url="mailto:hkelle@rhi.hi.is" name="hkelle@rhi.hi.is">
Gudmundur Erlingsson, <htmlurl url="mailto:gudmuner@lexis.hi.is" name="gudmuner@lexis.hi.is">
Richard Allen <htmlurl url="mailto:ra@hp.is" name="ra@hp.is">

<tag/it Italian translation team:/
team coordinators:  Andrea Rizzi <htmlurl url="mailto:rizzi@kde.org" name="rizzi@kde.org">

<tag/ko Korean translation team:/
team coordinators:  LinuxKorea Co. <htmlurl url="mailto:kde@linuxkorea.co.kr" name="kde@linuxkorea.co.kr">

<tag/mk Macedonian translation team:/
team coordinators:  Sasha Konecni <htmlurl url="mailto:sasha@msi-uk.com" name="sasha@msi-uk.com">

<tag/nl Dutch translation team:/
team coordinators:  flidr@CyberGate.zcu.cz <htmlurl url="mailto:flidr@CyberGate.zcu.cz" name="flidr@CyberGate.zcu.cz">

<tag/no Norwegian translation team:/
team coordinators:  Hans Petter Bieker <htmlurl url="mailto:zerium@webindex.no" name="zerium@webindex.no">

<tag/pl Polish translation team:/
team coordinators:  Piotr Roszatycki <htmlurl url="mailto:dexter@fnet.pl" name="dexter@fnet.pl">

<tag/pt Portuguese translation team:/
team coordinators:  Pedro Morais <htmlurl url="mailto:pmmm@camoes.rnl.ist.utl.pt" name="pmmm@camoes.rnl.ist.utl.pt">

<tag/pt_BR Brazil Portuguese translation team:/
team coordinators:  Elvis Pfützenreuter <htmlurl url="mailto:epx@netville.com.br" name="epx@netville.com.br">

<tag/ro Romanian translation team:/
team coordinators:  Paul Ionescu <htmlurl url="mailto:ipaul@romsys.ro" name="ipaul@romsys.ro">

<tag/ru Russian translation team:/
team coordinators:  Denis Y. Pershin <htmlurl url="mailto:dyp@inetlab.com" name="dyp@inetlab.com">

<tag/sk Slovak translation team:/
team coordinators:  Juraj Bednar <htmlurl url="mailto:bednar@isternet.sk" name="bednar@isternet.sk">
mailling list:  send a mail with 'subscribe' in the subject line to: <htmlurl url="mailto:sk-i18n@rak.isternet.sk?subject=subscribe"
name="sk-i18n@rak.isternet.sk">

<tag/sl Slovenian translation team:/
team coordinators:  blazzupancic@hotmail.com <htmlurl url="mailto:blazzupancic@hotmail.com" name="blazzupancic@hotmail.com">

<tag/sv Swedish translation team:/
 team coordinators:  Anders Widell <htmlurl url="mailto:d95-awi@nada.kth.se" name="d95-awi@nada.kth.se">

<tag/tr Turkish translation team:/
team coordinators:  Gorkem Cetin <htmlurl url="mailto:gorkem@linux.org.tr" name="gorkem@linux.org.tr">

<tag/zh_GB2312 Simplified Chinese translation team:/
team coordinators:  Wang Jian <htmlurl url="mailto:larkw@263.net" name="larkw@263.net">

<tag/zh_TW_Big5 Chinese BIG5 translation team:/
team coordinators:  Chou Yeh-Jyi <htmlurl url="mailto:ycchou@ccca.nctu.edu.tw" name="ycchou@ccca.nctu.edu.tw">
</descrip>






<chapt>A programhibák megtalálása
<p><nidx/debugging macros/
<sect>Debugging Macros provided by <idx/Qt/
<p>
The Debugging Macros provided by the <idx/Qt/ library can be read on the debug.html page of your <idx/Qt/ Online Reference
Documentation, acessable on the link "Debugging Techniques" at the <idx/Qt/ Documentation index page.

The most recently used macros are

<itemize>
<item>ASSERT(b)
<item>CHECK_PTR(p)
</itemize>

Thereby, b is a boolean expression. Gives out a debugging warning if b is false; p is a pointer which is checked and gives out a
warning, if p is null.

Details can be found in the <idx/Qt/ Online Reference.

<sect>KDE Macros
<p>
<bf/NOTE:/ This chapter is a copy of Kalle Dalheimer's <htmlurl url="mailto:kalle@kde.org" name="kalle@kde.org"> explanation document
about the <idx/KDEBUG/ macros included with the KDE libs package as kdebug.html

Last modified: Sat Sep 13 11:56:01 CEST 1997


<bf/What is KDebug/

KDebug is a system of macros and functions that makes using diagnostic messages in your code more efficient. You can give a message
one out of four severity level and an area. You can choose at runtime where diagnostic messages should go and which of them should be
printed at all. How to use KDebug in your code

<bf/The macro <idx/KDEBUG//

Using KDebug is very simple. All you have to do is to #include &lt;kdebug.h&gt; at the beginning of every source file in which you want
to use diagnostic messages and output the messages by calling the macro <idx/KDEBUG/. This macro expects three parameters. The first is the
severity level. Use one of the following constants:

<itemize>
<item><idx/KDEBUG_INFO/
<item><idx/KDEBUG_WARN/
<item><idx/KDEBUG_ERROR/
<item><idx/KDEBUG_FATAL/
</itemize>

The second parameter is the area. An area is a part of KDE that you define yourself. You can then at runtime choose from which areas
diagnostic messages should be printed. Please see the file kdelibs/kdecore/kdebugareas.txt for a list of already allocated area ranges.
Choose an area within the range allocated for your application. If your application is not yet in here and you have CVS access, you can
allocate a range for your application here, otherwise just mail me. It is probably a good idea to define symbolic constants for the
areas you want to use, but this is completely up to you. The third parameter, finally, is the text you want to output. KDebug
automatically prepends the logical application name if you output to a file, to stderr or to syslog. A newline is always appended, you
need not (and should not) use one yourself. If you need parameters, you can use one of the macros KDEBUG1, ..., KDEBUG9. These allow
for one to nine additional arguments. The syntax is exactly the same as with printf, i.e. you have to include format specifiers in your
message which get replaced by the additional parameters. An example:

<tscreen><code>
KDEBUG3( <idx/KDEBUG_INFO/, kmail_composer, "Message no. %d to %s has %d bytes",
          message_no, aMessage.to(), aMessage.length() );
</code></tscreen>


<bf/<idx/KASSERT//

There are also the macros KASSERT, KASSERT1, ..., KASSERT9 which work just like their <idx/KDEBUG/-counterparts, except that they have an
additional bool as their first parameter. Only if this evaluates to false will the message be output. Note: You should not use neither
<idx/KDEBUG/ nor <idx/KASSERT/ before the <cdx/KApplication/ object is constructed. Note 2: KDebug provides no means for internationalization because it
is meant strictly for developers only. If you want to inform the user about an erroneous condition (like "this file is not writable"),
use KMsgBox.

<bf/Compiler switches/

You do not need any special compiler switches in order to use KDebug. But when you ship your
product (this mainly applies to people who create distributions like .rpm or .deb packages), you should compile with the switch
-DNDEBUG. This will simply remove all the debugging code from your application and make it smaller and faster (e.g. it uses 256K less
non-shareable memory).


<bf/How to manage diagnostic messages at runtime/

You can press Ctrl-Shift-F12 in every <cdx/KApplication/ at any time, and the "Debug Settings"-Dialog will appear. Here you can define
separately for every severity level what should be done with the diagnostic messages of that level. The following settings are
available:

<itemize>
<item>Output: In this Combobox, you can choose where the messages should be output. The choices are: "File", "Message Box", "Shell"
(meaning stderr) and "syslog". Please do not direct fatal messages to syslog unless you are the system administrator yourself. The
default is "Message Box".
<item>File: This is only meaningful when you have chosen "File" as the output and provides the name of that file (which is interpreted
relatively to the current directory). The default is kdebug.dbg.

<item>Area: The areas which should only be output. Every message that is not mentioned here will simply not be output (unless this
field remains empty which is the default and means that all messages should be output). Your can enter several areas separated by
commas here, and you can also use area ranges with the syntax start-end. Thus a valid entry could be: 117,214-289,356-359,221. Please
do not use whitespace.
</itemize>

Apart from this, you can also tick the checkbox "Abort on fatal errors". In this case, if a diagnostic message with the severity level
"<idx/KDEBUG_FATAL/" is output, the application aborts with a SIGABRT after outputting the message. When you close the dialog with OK, your
entries apply immediately and saved in your application's configuration file. Please note that these settings are specific for one
singular application! When you press cancel, your entries are discarded and the old ones are restored.

<chapt>A KDE Fájl Rendszer Szabvány
<p>
This chapter is a copy of the KDE-File System Standard as published on the KDE website at <url url="http://www.kde.org">, written by
Richard Moore <htmlurl url="rich@kde.org" name="rich@kde.org">

<bf/KDE File System Standard/

This file documents the directory structure that KDE and all KDE compliant applications should use. This is version 0.0.4 of the
standard.

<sect>Introduction
<p>
The purpose of the <idx/KDE FSSTD/ is to ensure that all resources (icons, mimetypes etc.) needed for <idx/KDE applications/ are stored in a
consistent directory structure. Following this structure allows applications to make use of tools such as the KIconLoader class and
allows separation of the platform specific data needed by KDE from platform independent data (making installations on multiple
architectures possible). In this document directory names have been suffixed with a `/` character. Where the word 'appname' appears in
angle brackets &lt;like this&gt; it means that there should be an entry corresponding to every installed KDE application. The word
'lang' is used in the same way to indicate that there should be an entry for every supported language named according to the standard
two letter language codes eg. 'fr' for French, 'de' for German etc.

<sect>Directory Layout
<p>
The KDE directory structure is as shown below, the top of the KDE installation tree is usually '/opt/kde' and can be found at run time
by using the kdedir() method of <cdx/KApplication/ (this replaces the KDEDIR environment variable the use of which is now deprecated). This
document will refer to this directory as kdedir().
<nidx/KDE File System/<nidx/.kdelnk files/

<itemize>
<item>kdedir()/
  <itemize>
  <item>bin/
  	<itemize>
  	<item>Application binaries
  	</itemize>
  <item>lib/
  	<itemize>
  	<item>standard kde libraries (libkdecore etc.)
  	<item><em/&lt;appname&gt;//
  		<itemize>
  		<item>Application specific data that is platform dependent
  		</itemize>
  	</itemize>
  <item>include/
  	<itemize>
  	<item>standard kde header files
  	</itemize>
  <item>parts/
  <item>cgi-bin/
  	<itemize>
  	<item>CGI programs for kdehelp
  	</itemize>
  <item>share/
  	<itemize>
  	<item>doc/
  		<itemize>
  		<item>HTML/
  			<itemize>
  			<item>default --> Link to kdedir()/share/doc/HTML/en
  			<item><em/&lt;lang&gt;//
  				<itemize>
  				<item><em/&lt;appname&gt;//
  					<itemize>
  					<item>index.html
  					<item>other application help files
  					</itemize>
  				</itemize>
  			</itemize>
  		</itemize>
  	<item>config/
  	<item>applnk/
  		<itemize>
  		<item>System/
  		<item>Utilities/
  		<item>Applications/
  		<item>Games/
  		<item>kfind<idx/.kdelnk/
  		<item>khelp<idx/.kdelnk/
  		<item>khome<idx/.kdelnk/
  		<item>krefresh<idx/.kdelnk/
  		</itemize>
  	<item>mimelnk/
  		<itemize>
  		<item>magic
  		<item>text/
  		<item>audio/
  		</itemize>
  	<item>partlnk/
  		<itemize>
  		<item><em/&lt;partname&gt;/<idx/.kdelnk/
  		</itemize>
  	<item>icons/
  		<itemize>
  		<item>Icons used in kdelnk files
  		<item><em/&lt;appname&gt;/.xpm
  		<item>mini/
  			<itemize>
  			<item>Mini Icons for kpanel
  			</itemize>
  		</itemize>
  	<item><idx/toolbar//
  		<itemize>
  		<item>Standard <idx/toolbar/ pixmaps (eg. fileopen.xpm)
  		</itemize>
  	<item>wallpapers/
  		<itemize>
  		<item>Wallpapers used by kdisplay
  		</itemize>
  	<item>apps/
  		<itemize>
  		<item><em/&lt;appname&gt;//
  			<itemize>
  			<item><idx/toolbar//
  				<itemize>
  				<item>Toolbar pixmaps
  				</itemize>
  			<item>pics/
  				<itemize>
  				<item>Other application pixmaps
  				</itemize>
  			<item>application specific data (must be platform independent)
  			</itemize>				
  		<item><em/&lt;libname&gt;//
  			<itemize>
  			<item>pics/
  			</itemize>
  		</itemize>
  	<item>locale/
  		<itemize>
  		<item><em/&lt;lang&gt;//
  			<itemize>
  			<item>LC_MESSAGES/
  				<itemize>
  				<item><em/&lt;appname&gt;/.mo
  				</itemize>
  			</itemize>
  		</itemize>
  	</itemize>
  </itemize>
</itemize>
					
<sect>What does this mean to application developers?
<p>
A standard KDE application will install files into several places in the above structure. The only required items are the application
binary, the application kdelnk file, the application icon and the application help files - all others are optional. The most common
things that are installed are:

<tscreen><verb>
Type of file                                      Location

Application binary (required)                     kdedir()/bin/
Application kdelnk file (required)                kdedir()/share/applnk/
Application icon (required)                       kdedir()/share/icons/&lt;appname&gt;.xpm
Application help files (required)                 kdedir()/share/doc/default/HTML/&lt;appname&gt;/&lt;index&gt;.html
Application toolbar pixmaps                       kdedir()/share/apps/&lt;appname&gt;/toolbar/
Application platform independent data             kdedir()/share/apps/&lt;appname&gt;/
Application platform specific data                kdedir()/lib/&lt;appname&gt;/
</verb></tscreen>
<nidx/KDE File System/

<sect>Application Documentation
<p>
I've suggested making putting at least a single page in

kdedir()/doc/default/HTML/&lt;appname&gt;/&lt;appname&gt;.html

a requirement for KDE compliance. The application is free to use the directory to store any help data it requires.


Applications that support more than one language would place the other languages inkdedir()/doc/&lt;lang&gt;/HTML/&lt;appname&gt;/&lt;appname&gt;.html
with there being one 'lang' directory for each language code as usual. Arranging the files like this would allow links between the help
files of two different applications that both support a given language.

I am not 100% happy with the solution I've suggested as it does not allow any way to fall back to the default language if a required
translation is not available.

<sect>What does this mean to library developers?
<p>

<itemize>
<item>kdedir()/share/apps/&lt;libname&gt;/<idx/toolbar/
</itemize>
Toolbar icons for library widgets.

<itemize>
<item>kdedir()/share/apps/&lt;libname&gt;/pics
</itemize>
Any other bitmaps for library widgets.

<chapt>Fájlrendszer használata KDevelop projekteknél
<p>
As the last chapter covered the KDE File System Standard, this chapter deals with what you have to do to use the file system. A KDE
project uses the file system at least for installation routines; therefore we will discuss setting installation properties for your
project files. Your application may make use of files that are installed afterwards, where it is important to know how to get the
relative pathname by the standard. This enables your application to work wherever the KDE file system may be and prevents hard-coding
any file information.

<sect>Accessing Files during Runtime
<p>
After the installation of your project by end-users, your application may require file information during runtime. During the
development process, you will experience at least one error which is caused when running your application within the KDevelop IDE and
requiring the application manual by "Help"-"Contents" or pressing the F1 key. This will result in a message box, saying that the
index.html file could not be found- if you haven't installed your application on your local KDE file system. Your application asks
<idx/KDEHelp/ to open your index page with detecting the installation directory first through <tt/<cdx/KApplication//'s methods to access the file
system, therefore, we will have a look at what <tt/<cdx/KApplication// offers and make some example usage. Also other classes of
<tt/KDE-Core/ make use of the KDE File System like <tt/KIconLoader/ and <tt/KLocale/, which will be reviewed afterwards.

<sect><cdx/KApplication/ Methods
<p>

The <cdx/KApplication/ class offers the following methods to access the KDE File System:
<tscreen><verb>
void invokeHTMLHelp ( QString aFilename, QString aTopic ) const
static const QString& kde_htmldir ()
static const QString& kde_appsdir ()
static const QString& kde_icondir ()
static const QString& kde_datadir ()
static const QString& kde_localedir ()
static const QString& kde_cgidir ()
static const QString& kde_sounddir ()
static const QString& kde_toolbardir ()
static const QString& kde_wallpaperdir ()
static const QString& kde_bindir ()
static const QString& kde_configdir ()
static const QString& kde_mimedir ()
static QString localkdedir ()
static QString localconfigdir ()
static QString findFile ( const char *file )
</verb></tscreen>
<nidx/KDE File System/
The methods are generally used with the <tt/<cdx/KApplication// object of your application, where <tt/<cdx/KApplication// offers the macro
<tt/kapp/ to receive the pointer:

#define kapp <cdx/KApplication/::getKApplication()

Therefore, the methods are generally used like this:
<tscreen><verb>
QString sounddir=kapp->kde_sounddir();
</verb></tscreen>
This example stores the path of the KDE sounddirectory under a <tt/QString/, where you would append e.g. the sound filename. Then you
can process this information and play a sound file that is located there. You should always test for the existence of a file by using
<tt/QFileInfo/'s <tt/exists()/ method.

Within these methods,

<tscreen><verb>
void invokeHTMLHelp( QString aFilename, QString aTopic ) const [public]
</verb></tscreen>

takes a special position to invoke the KDE help. Generally, you should use it everywhere a user needs to access information, e.g. when
he is presented a modal dialog. The F1 key will not work to invoke the help contents, also the user should be presented the according
help page. To make a good use of it, add a "Help" button to your dialog and create a slot that is used to connect on signal
<tt/pressed()/. In this method, use <tt/<cdx/invokeHTMLHelp()// with the according page and subject; in case your application's documentation
isn't written completely yet, leave this open to complete it after the documentation is in sync with the application.

The documentation of <tt/<cdx/KApplication// says:

Invoke the kdehelp HTML help viewer.

Parameters: aTopic
This allows context-sensitive help. Its value will be appended to the filename, prefixed with a "#" (hash) character.

aFilename: The filename that is to be loaded. Its location is computed automatically according to the KFSSTND. If aFilename is empty,
the logical appname with .html appended to it is used.


The methods of  <tt/<cdx/KApplication// will retrieve the following path's.

<tscreen><verb>
kde_htmldir()         kdedir()/share/doc/HTML         Returns the directory where KDE stores
                                                      its HTML documentation

kde_appsdir()         kdedir()/share/applnk           Returns the directory where KDE applications
                                                      store their .kdelnk file

kde_icondir()         kdedir()/share/icons            Returns the directory where KDE icons are stored

kde_datadir()         kdedir()/share/apps             Returns the directory where KDE applications
                                                      store their specific data

kde_localedir()       kdedir()/share/locale           Returns the directory where locale-specific
                                                      information (like translated on-screen messages) are stored

kde_cgidir()          kdedir()/cgi-bin                Returns the directory where cgi scripts are stored

kde_sounddir()        kdedir()/share/sounds           Returns the directory where sound data are stored.
                                                      This directory is for KDE specific sounds.
                                                      Sound data of Applications should go
                                                      into kde_datadir()

kde_toolbardir()      kdedir()/share/toolbar          Returns the directory where toolbar icons are stored

kde_wallpaperdir()    kdedir()/share/wallpapers       Returns the directory where KDE wallpaper files are stored

kde_bindir()          kdedir()/bin                    Returns the directory where KDE application binaries are stored

kde_configdir()       kdedir()/share/config           Returns the directory where config files are stored

kde_mimedir()         kdedir()/share/mimelnk          Returns the directory where mimetypes are stored

localkdedir()         $HOME/.kde                      Get the local KDE base dir

localconfigdir()      $HOME/.kde/share/config         Get the local KDE config dir
</verb></tscreen>

To search for a specific file, use <tt/findFile(const char *file)/ which will search several path's of the KDE File System:

<enum>
<item>$KDEDIR,
<item>$KDEPATH,
<item>"&lsqb;KDE Setup&rsqb;:Path=" entry in a config file.
</enum>

If the file is not found, the QString method isEmpty() will  return True

<sect>KIconLoader Methods
<p>

QPixmap loadIcon ( const QString &amp;name, int w = 0, int h = 0 )

QPixmap reloadIcon ( const QString &amp;name, int w = 0, int h = 0)

QPixmap loadMiniIcon ( const QString &amp;name , int w = 0, int h = 0 )

QPixmap loadApplicationIcon ( const QString &amp;name, int w = 0, int h = 0 )

QPixmap loadApplicationMiniIcon ( const QString &amp;name, int w = 0, int h = 0 )

bool insertDirectory ( int index, const QString &amp;dir_name )


<sect>Setting File Installation Properties
<p>
As the above explained where <idx/KDE applications/ should place their files and how to access them at runtime, the following will explain
how to set the file properties correctly to ensure the files get installed at the right place. The Makefiles support a set of macros to
install your files into the KDE File System and which have to be used for setting the file installation properties.

To set the properties, open your project and select "Project"-"File Properties" which opens the File Properties dialog.
The file properties are displayed if you select a filename currently included in the project. First of all, a file has a type property,
which can be one of the following:

<itemize>
<item><bf/HEADER:/  specifies a file as a header file
<item><bf/SOURCE:/ specifies a file as a source file
<item><bf/SCRIPT:/ specifies a file as a script file
<item><bf/DATA:/ specifies a file as a data file that usually gets installed like pixmaps or HTML documentation files
<item><bf/PO:/ specifies a file as a translation file
<item><bf/KDEV_DIALOG:/ specifies a file as a dialog file to be interpreted by the dialog library
</itemize>

Further, a file is included in the project, if "Include in Distribution" is checked. This ensures that the file is included in the
distribution tarball or package.

If a file has to be installed, you have to enable "Install". This will allow setting the Installation path for the selected file, where
the filename is already inserted.

Now, as said above, the Makefile already is capable of a set of macros for the KDE File System Standard. These are used to set the
installation path and ensure that the files actually will land in the KDE file system and not somewhere else. Macros that can be used,
have to be embraced in round brackets and are marked with the dollar sign in front of the macro. When configure builds the Makefiles on
the end-user's system, it will determine values for these macros that match the real directory name and will expand the Makefile.am
macro towards the actual destination.

When looking a standard KDE application project, you will see on the file property of your <tt/index.html/ file that it already uses a
macro to determine where it should go:

$(kde_htmldir)/en/kscribble/index.html

This says, that make should install the file index.html in the kde-html directory, subdirectory en for English, the application
subdirectory and the filename. You could as well use another filename if you like to rename the file on the installation destination.

For the destination of your binary you currently have to edit the project's Makefile.am if your destination should be different form
the "Applications" section of kpanel:

APPSDIR = $(kde_appsdir)/Applications

Possible values are (as the KDE-File System Standard says):

<itemize>
<item>Applications
<item>Games
<item>Graphics
<item>Internet
<item>Multimedia
<item>Settings
<item>System
<item>Utilities
</itemize>

Setting no directory will end your applnk directly in kpanel's root.

The following list contains the macros that can be used in the installation setup for files:

<tscreen><verb>
kde_htmldir       Where your docs should go to. (contains lang subdirs)
kde_appsdir       Where your application file (.kdelnk) should go to.
kde_icondir       Where your icon should go to.
kde_minidir       Where your mini icon should go to.
kde_datadir       Where you install application data. (Use a subdir)
kde_locale        Where translation files should go to.(contains lang subdirs)
kde_cgidir        Where cgi-bin executables should go to.
kde_confdir       Where config files should go to.
kde_mimedir       Where mimetypes should go to.
kde_toolbardir    Where general toolbar icons should go to.
kde_wallpaperdir  Where general wallpapers should go to.
</verb></tscreen>

Use these macros in conjunction with the according necessary subdirectories and the filename for setting the installation properties.
By default, the currently created HTML documentation files, the kdelnk file, Icon, Miniicon and the translation files (also newly
create ones) are already set up for their destination; therefore you don't have to make any changes for your default installation
routine that has been set up by the application wizard of KDevelop.

<sect>Organizing Project Data
<p>
Another issue in creating projects often appears to the programmer if he has or wants to include additional data that have to be
installed with the project. You already know where to install it, but what about organizing it in the source tree ?

A good advice here may be to collect all data in directories that more or less match the KDE File System Standard, e.g. your
application needs additional <idx/toolbar/ icons. Creating these icons in the main project directory is potentially not a good idea as they
will be difficult to locate in the real file viewer and a removal will result in much work for each icon. Therefore, create your icon
with "File"- "New" and choose a subdirectory <tt/<idx/toolbar//; if it doesn't exist, it can be easily created with the "select directory"
dialog. Existing icons can be copied and included into the project with "Project"-"Add existing file(s)", where you have to choose the
files and the destination. When selecting the destination directory, you can create the <tt/<idx/toolbar// subdirectory first within the
selection dialog. After being finished, press OK and the files will be copied as well as included in the project.

As an example, a <idx/toolbar/ icon should go to the following:

$(kde_datadir)/<em/&lt;appname&gt;//<idx/toolbar//<em/&lt;youricon&gt;/.xpm

Pictures or additional icons that are not used as <idx/toolbar/ icons should go to a subdirectory <em/pics/ instead of <em/<idx/toolbar//.

<sect>The <tt/kdelnk/ File
<p>
The <em/&lt;appname&gt;/<idx/.kdelnk/ file currently included in your project will install itself in KDE's kpanel structure. You should think
it is already created and complete, therefore shouldn't require any further notification. Despite of KDevelop's advanced qualities to
help you with creating, programming and designing applications, it cannot determine the exact purpose of your application- and that is
the information you have to add to the kdelnk file. As this is a text file, select it from the RFV or the LFV; it will be opened in the
Header/Resource window.

The sample kdelnk file would look like this:
<tscreen><verb>
# KDE Config File
&lsqb;KDE Desktop Entry&rsqb;
Type=Application
Exec=kscribble
Icon=kscribble.xpm
DocPath=kscribble/index.html
Comment=
Comment&lsqb;de&rsqb;=
Terminal=0
Name=kscribble
Name&lsqb;de&rsqb;=kscribble
</verb></tscreen>

This already contains the basic configuration for the application specific data such as the icon, binary name, application name etc.
You see that the section Comment is still empty. There you have to insert the Quick-Tip that will be displayed when the mouse cursor
moves over the kdelnk file icon on the desktop or in kpanel. If scribble would be a small drawing program, you would enter e.g.

<tscreen><verb>
Comment=A simple drawing program
</verb></tscreen>

Each comment line afterwards will contain the same description translated in the language the brackets symbolize. Ask translators to
insert a good translation in their native language or include the kdelnk file when asking for translating the application's po file;
the same applies to the name of the application set in the Name lines.<footnote>for more information about the purpose of the <idx/.kdelnk/ file, especially its use for commandline processing, see
<htmlurl url="kde_libref.html" name="The KDE Library Reference Guide"></footnote>

<chapt>Programozási vezérelvek
<p>

Close to the end of this handbook, I want to summarize several issues that programmers should watch out while coding. These are mostly
C++ programming tips that relate to KDE and Qt programming especially and are partly taken from the KDE 
Developer's Center which can be found on the Internet at <url url="http://www.kde.org">, some have been added 
by my own experience.

<sect>General Rules
<p>
<descrip>
<tag/Filenames/ First of all, when creating sourcefiles, you should always use lowercase filenames. KDevelop supports
this guideline already if you stick to its filename aut-suggestion. This makes it easier for other developers to remember what source
files to look for when they have to debug your application.

<tag/Classnames/
The classnaming for KDE projects is recommended to be:
<itemize>
<item>class names should begin with a prefixed <bf/K/ followed by the name of the class by purpose (your choice). This would be e.g.
<tt/KMyWidget/ for an application specific widget.
<item>the class members should always begin with lowercase letters, followed by uppercase beginnings for the next word, e.g.
<tt/myWidgetPointer()/
<item>methods that return a private members value shouldn't use the <tt/get/-prefix. You should prefer using a descriptive name for
those types of classmembers. Example: <tt/b_myboolean/ is a private member. The method returning the current value would be e.g.
<tt/myBoolean()/.
</itemize>

<tag/File access within code/
Hardcoding any path should be avoided by using the KDE File System Standard. You only have to watch the installation path for your
files by the according macros of the <tt/Makefile.am/ as described in this handbook. Within the code, you should use the methods of
<tt/KApplication/ to retrieve the actual path.

<tag/Class documentation/
Another thing already mentionend is class documentation. You should stick to use <tt/KDoc/ formatting rules as they are used by all KDE
developers to document their classes. You should at least add a single line to all of your classmembers for yourself to remember the
prurpose and for others to reuse code. The code-reuse by the GPL makes much more sense if you know where to find an already existing
solution if classes are documented. The Qt library referece is a good example of well-documented interfaces, though it doesn't use
<tt/KDoc/.

<tag/Use <tt/new/ to create widgets/
Within your implementation, you should always prefer to create widgets on the heap with <tt/new/. The Qt library has a nice habbit to
automatically delete all child widgets you created with <tt/new/, so you don't ever have to use <tt/delete/ again in those cases. This
is one of the most important practical features of the Qt library and you should make wide use of this.

<tag/Debugging/
When it comes to debugging, you should make use of the macros <tt/KDebug/ provides. Those are similar to the Qt macros, but can be
retrieved by the keycode STRG+ALT+F12. See the <htmlurl url="../kde_libref/index-4.html#ss4.4" name="KDE Library Reference Guide"> for
more information about the event filtering of these Macros. You could as well use <tt/assert()/, but should try to be consistent with
your debugging code.

<tag/<tt/const/-declarations/
Further, you should use <tt/const/ declarations for member functions that should or do not change any private member. This would be the
case for all methods that only return the current value of a private member. This avoids changing the value accidently and will catch
those logical errors at compile time. Now, towards initializing const members you should stick to do that together with using
<tt/static/ in the declaration and initialize the value outside the constructor like this:
<tscreen><verb>
class foo {
	static const int value;
};

const foo::value = 10;
</verb></tscreen>
ANSI C++ allows to initialize the member inside the constructor but you should avoid this as a few compilers are not capable of this
feature.

<tag/Virtual methods/
As explained in section <ref id="User Interaction" name="User Interaction">, you should stick to the access rights and the declaration
by <tt/virtual/ when overwriting virtual methods. At least you shouldn't reduce the access of a virtual method from protected to
private.

<tag/Forward declarations/
Class-headers should be included where you dereference any object or instance of a class in your sourcecode. That means if your class
uses a member of another class, replace the #include directive with a forward declaration of the class, e.g  instead of:

<tscreen><verb>
#include <qpushbutton.h>

class KMyWidget:public QWidget
{

private:
  QPushButton* ok_button;
};
</verb></tscreen>

you should prefer to only declaring the class <tt/QPushButton/ in the header file:

<tscreen><verb>
class QPushButton;

class KMyWidget:public QWidget
{

private:
  QPushButton* ok_button;
};
</verb></tscreen>

and place the include directive into the according sourcefile where e.g. the instance <tt/ok_button/ is dereferenced with any method of
the class <tt/QPushButton/. This saves compile time at any rate, especially if you're using instances of classes that your're working
on. The compiler will recompile all souces that include the header file if you made any changes on the interface of the class,
therefore a simple addition of a method that only returns an internal value will lead to a recompilation of all sources tha include
the header file of the class.

<tag/Unused Parmeter Warnings and default arguments/
Also you should leave out formal parameters of methods that don't necessarily require the actual parameter to work. This avoids the
<tt/unused parameter/ warnings of your compiler when he sees a method that retrieves a formal parameter but doesn't use it in its
implementation. Usually, you will set some default arguments for several methods. Those should always be placed in the declaration of
the class member instead of setting them in the member implementation.

<tag/Using <tt/config.h//
KDevelop projects as well as any other project that is using <tt/autoconf/ to create a <tt/configure/-script produce a file
<tt/config.h/ after executing the <tt/configure/-script on the target machine. The values found by <tt/configure/ are listed there and
can be used within the sourcecode. The directive to include the <tt/config.h/ file is:

<tscreen><verb>
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
</verb></tscreen>

One of the most recently used entries of <tt/config.h/ is probably the type-definition of <tt/bool/ for compilers that don't comply
with the newest ANSI C++ draft.

<tag/Use <tt/0/ instead of <tt/NULL//
You should stickt to using <tt/0/ directly instead of <tt/NULL/ for preset values like the Qt and KDE libraries already do. This
increases portablility of your applications towards different compilers that have problems with <tt/NULL/.

<tag/Temporaries/
You should declare temporary instances always before using them. This is generally considered better than direct use. Example:
<tscreen><verb>
// Don't:
for( int i=0; i<n; i++){
  //do something
  };

// Do:
int i;

for(i=0; i<n; i++){
  //do something
  };
</verb></tscreen>

This also counts on using temporaries in function calls:
<tscreen><verb>
// Don't:
setColor( &amp;(QColor(black)) );

// Do:
QColor color(black);
setColor( &amp;color );
</verb></tscreen>
</descrip> 

<sect>Operating System Dependencies
<p>
As KDevelop projects use the GNU tools to create projects, it is ensured that your application will run on 
almost every Unix system. However, you may encounter problems when actually compiling your application under 
another Unix, because header files are located somewhere different or you need another implementation 
especially when it comes to using OS-specific low-level functions which can differ from system to system.

When programming with C++ and Qt/KDE you should also notice that the Qt collection classes have a rich set of 
functionality that is already compiler/OS independend and makes things much easier, starting with strings 
(QString) to file reading/writing (QFile); so using Qt will make using OS defines almost obsolete in most 
cases.

Anyway, when using Qt and you still have to use &num;defines for your application, you should include 
<tt>qglobal.h</tt> and make use of the already predefined defines for various Operating Systems and compilers 
which preselects the below defines already.
   
Instead of letting the packagers of OS-Vendors applying any patches to your application (like most do where 
necessary e.g. for building rpm´s or packages/ports), you should use defines for those sections that are 
operating-system specific (but you don´t have to use -D for compiling, the Operating System defines are 
handled automatically). The following lists the available systems and their defines (additional defines in 
brackets): 

<descrip>
<tag/AIX:/ &num;ifdef _AIX

<tag/BSDI Unix:/&num;if defined(bsdi) || defined(__bsdi__)

<tag/Dec Ultrix:/&num;if defined (ultrix) || defined(__ultrix) || defined(__ultrix__)

<tag/DG Unix:/&num;if defined(DGUX)

<tag/FreeBSD:/&num;ifdef __FreeBSD__

<tag/GNU Hurd:/&num;if defined(__GNU__)

<tag/HP-UX:/&num;if defined (hpux) || defined (__hpux) || defined (__hpux__)

<tag/Linux:/&num;if defined(linux) || defined(__linux) || defined(__linux__)

<tag/NetBSD:/&num;ifdef __NetBSD__

<tag/OpenBSD:/&num;ifdef __OpenBSD__

<tag/OSF Unix:/&num;if defined(__osf__)

<tag/QNX:/&num;if defined(__QNX__)

<tag/SCO UnixWare:/&num;if defined(_UNIXWARE)

<tag/SCO UnixWare 7:/&num;if defined(sco) || defined(_UNIXWARE7)

<tag/SCO:/&num;if defined(_SCO_DS) || defined(M_UNIX) || defined(M_XENIX)

<tag/SGI Irix:/&num;if defined(sgi) || defined(__sgi)

<tag/SunOS:/&num;if defined (sun) || defined (__sun) || defined (__sun__)

<tag/Sun Solaris:/&num;if defined  (_OS_SUN_) || defined (__SVR4)
</descrip>


<chapt>Licenszek, engedélyezés
<p>
Ez a fejezet azokkal a kérdésekkel foglalkozik, amelyek a KDevelop IDE-vel létrehozott alkalmazások jogvédelmével kapcsolatban merülnek fel. Elõszõr az 
ajánlott hozzáállásról ejtünk pár szót, majd beszélünk az alkalmazások GPL által történõ levédésének elõnyeirõl, végül a 
kereskedelmi célra szánt alkalmazások fejlesztésének kérdésével fejezzük be.

<sect>A GPL licensz
<p>
A KDevelop maga, a GNU General Public License által van levédve. Ez a jogvédelem biztosítja azt, hogy bármely felhasználó lemásolhassa, módosíthassa és szabadon 
továbbadhassa a KDevelop forráskódját, a licensz elõírásait betartva. A védelem ezt ugyanúgy elõírja, mint ahogyan védi 
a KDevelop Team tagjainak szerzõi jogait.

Emiatt, és a szabad szoftverek fejlesztõinek segítésén túl, minden, a KDeveloppal létrehozott alkalmazás 
tartalmazza a GPL licensz másolatát. Másrészrõl a fejlesztõk ezt a védelmet használják fel termékeik terjesztéséhez úgy, hogy 
közben nem korlátozzák annak elõírásait.

Amikor a szerzõ a GPL-t használja termékének védelmében, akkor egyúttal a következõ elõnyökre is szert tesz:

<itemize>
<item>Bármely létezõ, a GNU által levédett forráskódot szabadon felhasználhat, saját csomagjába azt beépítheti (amíg annak felhasználását nem korlátozza semmilyen, a kódok licenszében meghatározott kód-újrafelhasználási kitétel).
<item>Kódja tartalmaz egy másolásvédelmi licenszet, amely védi szerzõi jogait.
<item>Kódjának más szerzõk által történõ újrafelhasználása segíti a szabad szoftverek általános fejlesztését.
</itemize>

<sect>A KDE, és a Qt licensz korlátozásai
<p>
A Qt 2.0 megjelenéséig, amely az új QPL licenszel érkezett, a Qt licensz jogvédelme tört borsot a KDE fejlesztõi társadalom orra alá. 
A Troll Tech vállalat, mint a Qt megalkotója és tulajdonosa, a könyvtár Unixos változatát ingyen szállította azzal a korlátozással, hogy annak 
forráskódját sem megváltoztatni, sem továbbadni nem szabad a cég engedélye nélkül. Ez volt az 
oka annak, hogy a szabad szoftverek fejlesztõinek nagy része feketelistára tette a könyvtárat azzal, hogy nem teljesen ingyenes, változtatni pedig egyetalán nem szabad rajta. 
Másrészrõl azonban a Qt könyvtár sok olyan kecsegtetõ tulajdonsággal bír, ami vonzóvá teszi a kereskedelmi forgalomba fejlesztõk számára:

<itemize>
<item>Egy kereskedelmi szoftver megvásárlásával, alkalmazások írhatók mind a Unix, mind a Windows platformra.
<item>A jól megtervezett osztályok és a felhasználói felület gondoskodik a könnyû alkalmazásfejlesztésrõl.
<item>Ha van kereskedelmi licenszünk, fejleszteni lehet vele a Unices alá a GPL licensztõl függetlenül.
</itemize>

A KDE projekt a Qt könyvtárat választotta a Unix rendszerek felületének fejlesztéséhez mint alapot, hiszen a további alkalmazások növelik a Qt által nyújtott lehetõségek kihasználhatóságát. A fejlesztõk azokkal a  könyvtárakkal élvezhetik a KDE elõnyeit, amelyek KDE könyvtárként kerülnek terjesztésre.

A KDE könyvtárak az LGPL és a GNU Library Pulic License alatt kerülnek terjesztésre. Mit jelent ez az alkalmazásfejlesztõk számára?

<sect1>A nem-kereskedelmi fejlesztés
<p>A nem-kereskedelmi célokra történõ fejlesztések céljára a Qt könyvtár teljesen ingyenes. Az alkalmazás használhatja a könyvtárat egészen addig, amíg azon nem változtat és a fejlesztõ térítés nélkül szabadon hozzáférhetõvé teszi a forráskódot.

A KDE könyvtárak LGPL-je biztosítja, hogy a KDE könyvtárak, a nem-kereskedelmi célokra történõ fejlesztések számára szabadon felhasználhatók legyenek. A KDE könyvtárak szabadon használhatók úgy, ahogy azt a fejlesztõ, vagy az alkalmazás igényli.

<sect1>Kereskedelmi fejleszés
<p>
A kereskedelmi célokra való fejlesztéshez a Troll Tech vállalat egy kereskedelmi licensz megvásárlását kívánja meg. Ez lehetõvé teszi a Qt könyvtár fejlesztéshez való felhasználását úgy, ahogyan azt az alkalmazás, vagy a projekt igényli. Az alkalmazás bináris formában, vagy forráskódként is terjeszthetõ így, függetlenül bármilyen GPL licensztõl.

A KDE könyvtárak használatánál azonban figyelembe kell venni az LGPL licenszet, amely határozottan megengedi a kereskedelmi fejlesztést az LGPL licensz alatt terjesztett könyvtárak használatával. Mindössze meg kell nézni a licensz szabályozását, hogy megismerjük a KDE könytárakra vonatkozó korlátozásokat, az üzleti célokra történõ felhasználás esetében.

<sect>A fejlesztett termék jogvédelme
<p>
Ezennel a KDevelop Team, mint a KDevelop Integrált Fejlesztõi Környezet tulajdonosa, felhatalmazást ad a KDevelop IDE segítségével fejlesztett és az azzal használt alkalmazások terjesztésére, a választott licensz védelme alatt. Azokkal a megszorításokkal, amelyek azoknak a  könyvtárakban elhelyezett kódoknak a jogvédelme során merülnek fel, amelyeket a végsõ termék használ. Ezek a következõk:

<itemize>
<item>A Qt alkalmazásoknál: A Qt licensz szabályozása meghatározza terjesztés mikéntjét, akár szabad szoftverrõl akár kereskedelmi célú alkalmazásról van szó.
<item>A KDE alkalmazásoknál: A Qt licensz elõírásai a terjeszthetõség módjának megfelelõen <em/plus/ az LGPL elõírásai, ahogyan azok a  felhasznált KDE könyvtárakban meghatározásra kerültek.
<item>Minden más, már létrehozott forráskódhoz szabadon megválasztható a licensz.
</itemize>

Tehát nyugodtan megváltoztathatók azok az alapértelmezett licenszek, amelyek a KDevelop-pal fejlesztett alkalmazásokra vonatkoznak, azzal a kitétellel, hogy figyelni kell azoknak a könyvtáraknak a korlátozásaira, amelyekkel az alkalmazás kapcsolatba kerül.

Amennyiben bármilyen kérdésed lenne a jogvédelemmel kapcsolatban, nyugodtan kérdezd a KDevelop Team-et.

<chapt>Referenciák
<p>
A KDevelop Programozási Kézikönyv számos forrásból -az internetrõl és különbözõ levelezési listákról- származó információt tartalmaz, mint például:

<bf/<idx/KDoc/ documentation:/ Sirtaj S. Kang <htmlurl url="mailto:taj@.kde.org" name="taj@.kde.org">

<bf/KDE Developer's Center/ maintained by Sirtaj S. Kang <htmlurl url="mailto:taj@.kde.org" name="taj@.kde.org">

<bf/KDE Internationalization:/ Matthias Elter <htmlurl url="mailto:me@kde.org" name="me@kde.org">

<bf/KDebug documentation:/ Kalle Dalheimer <htmlurl url="mailto:kalle@kde.org" name="kalle@kde.org">

<bf/The KDE File System Standard:/ Richard Moore <htmlurl url="mailto:rich@kde.org" name="rich@kde.org">

<bf/KDE-Developer's mini-HOWTO:/ David Sweet <htmlurl url="mailto:dsweet@chaos.umd.edu" name="<dsweet@chaos.umd.edu>">

Ezen tartalmak másolásjoga (copyright) az eredeti szerzõket illeti meg.
<chapt>Copyright<label id="Copyright">
<p>
<tscreen><verb>

KDevelop Copyright 1998, 1999, 2000 The KDevelop Team.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
</verb></tscreen>

<appendix>
<chapt>További információk
<p>
<sect>Példa Makefile.am egy megosztott könyvtárhoz
<p>
<tscreen><verb>
# Példa Makefile.am egy megosztott könyvtárhoz. Létrehozza az
#  "example" nevû könyvtárt  libexample.so.2.1.2 fájlnév alatt
# Ez a Makefile.am a kdelibs disztribúcióból lett kiemelve és módosítva
#  a példa kedvéért
#
# David Sweet
#

INCLUDES=  $(all_includes)

lib_LTLIBRARIES  = libexample.la

# Megjegyzés: Ha a:b:c -t ad meg verziószámként a következõ sorban,
#  a keletkezõ könyvtár verziója (a-c).c.b lesz. A jelen
#  példában a verziószám 2.1.2.
libexample_la_LDFLAGS = -version-info 3:2:1 $(all_libraries)

include_HEADERS = header1.h header2.h\
                  header3.h

# Mely header-fájloknak nem lenne szabad telepítve lennie amikor a 'make install' kész?
noinst_HEADERS = version.h

libexample_la_SOURCES = code1.cpp code2.cpp
                        code3.cpp

#  A USE_AUTOMOC nagyszerû. Az Ön összes "moc"-os függõségérõl
#   gondoskodik.
#  (Azért Önnek még mindig 'include'-olni kell, például, a header1.moc-ot a code1.cpp-ben.)
libexample_la_METASOURCES = USE_AUTOMOC
</verb></tscreen>


</book>











