<!doctype linuxdoc system>
<book>
<titlepag>
<title>El Manual de Usuario de KDevelop
<subtitle>Guía de referencia para el Entorno Integrado de Desarrollo KDevelop para sistemas Unix, versión 1.0. 
<author>Ralf Nolden <htmlurl url="mailto:Ralf.Nolden@post.rwth-aachen.de" name = "<Ralf.Nolden@post.rwth-aachen.de>">
<inst> El Equipo de KDevelop
<date>Versión 2.2, 29 de julio de 1999
<abstract>
Este manual es parte del Entorno Integrado de Desarrollo KDevelop y está por tanto bajo la Licencia Pública General (GPL) GNU; vea <ref id="Copyright" name="Copyright"> para más información.
</abstract>
<toc>

<chapt>Introducción
<p>

Como todo en este mundo, el mundo de los ordenadores se mueve por modas y hoy en día tiende al uso de software libre, incluso para utilidades comerciales. El proyecto de software libre más popular es Linux. Actualmente la gente está de acuerdo en que Linux, al igual que otros proyectos como el servidor web Apache, el lenguaje Perl y el conjunto de herramientas GNU, demuestra que el software libre puede ser de una calidad tan alta como el software comercial. Pero a pesar de la calidad, los usuarios finales siguen sufriendo los crípticos comandos de cualquier sistema Unix. Para que Linux prospere se necesitan aplicaciones, tanto libres como comerciales, que sean fáciles de utilizar. 

El proyecto <idx/KDE/ intenta cerrar este hueco, proveyendo un escritorio fácil de utilizar y las bibliotecas complementarias para aumentar la variedad de software basado en <idx/IGU/ (Interfaz Gráfica de Usuario). El problema está en que la mayoría de los programas libres se crean en el tiempo libre del autor, y para ellos es importante que les guste su entorno de desarrollo. KDevelop quiere dar un importante paso hacia delante: hacer la vida del programador más fácil y eficiente. Los productos creados con KDevelop pueden alcanzar un nivel de funcionalidad y estabilidad más alto que otros productos creados sin él, en el mismo periodo de desarrollo.

Para alcanzar esta meta, el Entorno Integrado de Desarrollo KDevelop provee de muchas características que los desarrolladores necesitan, además de servir de interfaz para otros proyectos ajenos al KDevelop como pueden ser el <tt/make/ y los <idx/compilador/es de C++ de GNU, haciendolos invisibles al desarrollador y parte integrada del proceso de desarrollo. El KDevelop maneja:

<itemize>
<item> Todas las herramientas de desarrollo necesarias para programar en C++, tales como el <idx/compilador/, el <idx/enlazador/, el <idx/automake/ y el <idx/autoconf/.
<item> Al <idx/KAppWizard/ (asistente de aplicaciones), que genera aplicaciones de referencia, completas y listas para utilizar.
<item> Un generador de clases, para crear nuevas <idx/clases/ e integrarlas en su proyecto.
<item> Un explorador de ficheros para los fuentes, las cabeceras, la documentación, etc. a ser incluidos en el proyecto.
<item> La creación de manuales de usuario en <idx/SGML/ y la generación automática de los ficheros <idx/HTML/ con el estilo del KDE.
<item> Documentación automática en <idx/HTML/ de las <idx/API/ de las <idx/clases/ del proyecto con referencias cruzadas a las bibliotecas utilizadas.
<item> Soporte para la internacionalización de su proyecto, permitiendo a los traductores añadir fácilmente su idioma al proyecto.
<item> WYSIWYG (del inglés, lo que ve es lo que consigue) - creación de interfaces de usuario con el <idx/editor de diálogos/ incorporado.
<item> Control de su proyecto por medio de un sistema de control de versiones (CVS), proveyendo de un interfaz para la mayoría de las funciones necesarias.
<item> Depurado de su aplicación en conjunción con el <idx/KDbg/
<item> Edición de los <idx/mapas de pixeles/ del proyecto con el programa <idx/KIconEdit/.
<item> La posibilidad de incluir cualquier otro programa que usted considere necesario para el desarrollo de programas, mediante el menú de "<idx/Herramientas/".
</itemize>


KDevelop hace agradable el trabajar con todos los programas en el mismo entorno y ahorra tiempo al automatizar los procesos estándar de la tarea de desarrollo, además le da acceso directo y transparente a toda la información que necesite. Los mecanismos de navegación integrados están diseñados para soportar las peticiones de <idx/documentación/ que los desarrolladores tengan en relación a su proyecto.   

El <idx/visualizador de clases/ y el buscador de errores le llevan a cualquier parte del código del proyecto con un solo click, sin necesidad de buscar ficheros; los árboles de ficheros le dan acceso directo a los <idx/ficheros del proyecto/ y el sistema integrado de ayuda le ofrece acceso a la documentación en línea desde cualquier parte del IDE.

<sect>Cambios
<p>
La versión 1.0 d el KDevelop viene con la mayoría de facilidades necesarias para el desarrollo de aplicaciones en C/C++. Durante la fase de desarrollo del KDevelop, el proyecto ha mejorado mucho desde las versiones 0.1, 0.2, 0.3 y 0.4 todas las cuales fueron probadas y sus fallos corregidos. Creemos que la versión actual será la última para el KDE 1.x, dando a los desarrolladores el entorno que desean.

Se han realizado mejoras en los siguientes aspectos:

<itemize>
<item>Se incluye un rápido analizador y navegador de clases, con una vista de árbol de las clases. Además las clases y sus miembros pueden ser añadidos mediante diálogos.
<item>Soporta las funciones más necesarias de un CVS (sistema de control de versiones), tales como añadir, eliminar, actualizar o entregar ficheros y directorios.
<item>Documentación actualizada y extendida. Ahora se distribuyen cinco manuales con KDevelop.
<item>Se han corregido errores en el analizador de clases, en el editor de diálogos y en el buscador de errores.
</itemize>

Cualquier comentario sobre el IDE y su documentación, así como cualquier petición de nuevas características, es bienvenido.

<sect>Sobre este manual
<p>
Este manual da una visión general del IDE KDevelop y describe escuetamente el proceso básico de desarrollo de una aplicación. Para más información sobre temas de programación, le recomendamos que lea el <htmlurl url="programming/index.html" name="manual de programación de KDevelop"> incluido con el programa, que trata temas como la comprensión de los <idx/esqueletos de aplicación/ generados y como crear aplicaciones <idx/KDE/ avanzadas mediante proyectos de ejemplo.

El diseño de este manual está separado en las siguientes partes:
<itemize>
<item> <ref id="Instalación" name="Instalación">. Enumera los requerimientos del programa y explica como instalar y configurar KDevelop. 
<item><ref id="Programas" name="Programas">. Explica como se crean programas con las herramientas de desarrollo GNU estándar y como se construyen.
<item><ref id="Desarrollo con KDevelop" name="Desarrollo con KDevelop">. Muestra como funciona el entorno.
<item><ref id="Overview" name="Overview">. Explica los menús y los diálogos, además de los <idx/atajos/ de teclado.
<item><ref id="El sistema de ayuda" name="El sistema de ayuda">. Muestra como utilizar el <idx/navegador de documentación/ y las funciones adicionales de ayuda.
<item><ref id="Trabajando con el editor" name="Trabajando con el editor">. Explica las características de gestión y edición de ficheros.
<item><ref id="Proyectos" name="Proyectos">. Describe la creación y mantenimiento de proyectos de software.
<item><ref id="Generación de ejecutables" name="Generación de ejecutables">. Es una referencia sobre las opciones del <idx/Compilador/, del enlazador, y del proyecto.
<item><ref id="El navegador de clases" name="El navegador de clases">. Te detalla como hacer uso del potente navegador de clases del KDevelop.
<item><ref id="El editor de diálogos" name="El editor de diálogos">. Trata del constructor visual integrado de <idx/IGU/ y de el <idx/código/ C++ que genera.
<item><ref id="Configuración general" name="Configuración general">. Muestra como puede modificar las opciones de uso del KDevelop.
<item><ref id="Preguntas y respuestas" name="Preguntas y respuestas">. Cubre preguntas relacionadas con el uso de KDevelop bajo diferentes tipos de Unix, y de soluciones para problemas habituales.
</itemize>

Si es un programador novato o un nuevo usuario de este producto, le recomendamos que lea este manual antes de empezar a utilizar el IDE, ya que habla en profundidad del uso del mismo. Entender como hacer las cosas de la forma más rápida le ayudará a ahorrar tiempo buscando funciones y características, y le ayudará a utilizar la herramienta de una forma más efectiva.

<chapt><idx/Instalación/<label id="Instalación">
<p>
<sect>Cómo obtener el KDevelop
<p>
KDevelop puede ser encontrado en la página de aplicaciones del <idx/KDE/ en <url url="http://www.kde.org/current.html"> o en la página web del KDevelop en <url url="http://www.kdevelop.org">. El programa también se incluye con algunas distribuciones, tales como la SuSE 6.1.

También puede obtener copias del repositorio CVS del programa desde su página web, para aquellos que quieran tener la última versión disponible del KDevelop. Normalmente, estas copias no están hechas para su uso habitual, sino para probar nuevas características y para mostrar los avances en el desarrollo del programa. Si desea obtener los programas ajenos que KDevelop necesita para funcionar, tales como <idx/KDoc/ y <idx/KDbg/, también los puede obtener desde la web del programa.

Si encuentra problemas al compilar o utilizar KDevelop, por favor, lea la sección <ref id="Preguntas y respuestas" name="Preguntas y respuestas"> de este manual, o el fichero FAQ incluido con el paquete del programa. Si su problema no aparece mencionado, por favor suscríbase en la lista de correo de KDevelop en <htmlurl url="mailto:kdevelop@fara3.cs.uni-potsdam.de" name ="kdevelop@fara3.cs.uni-potsdam.de"> enviando un correo electrónico con la cabecera vacía, que contenga "subscribe" como único contenido. Sólo se aceptan preguntas y notificaciones de error que tengan que ver con el IDE, y no relacionadas con problemas de  <idx/implementación/ que puedan surgirle mientras programa su aplicación. Recuerde que todos los mensajes enviados a la lista deben estar escritos en inglés, para que todos los que participan en ella puedan tomar parte de su problema y ayudarle mejor. La lista de correo también está creada para aquellos usuarios que quieran ayudar y que hayan encontrado soluciones para algún problema que les surgió, de forma que podamos solucionar <idx/errores/ y utilizar su conocimiento para dar a los novatos ayuda de primera mano. Una buena forma de notificar errores es enviar la <idx/salida/ que obtenga al ejecutar KDevelop desde la consola, o copiando y pegando el contenido de la <idx/ventana de mensajes/ interna de KDevelop.

<sect><idx/Requerimientos/
<p>
Para poder compilar y utilizar KDevelop necesita los siguientes programas y bibliotecas, que están disponibles para la mayoría de plataformas como paquetes de distribución, y que por tanto pueden ser instalados fácilmente.
<p>
<bf>Requerido:</bf>
<itemize>
<item>g++ 2.7.2/g++ 2.8.1/egcs 1.1 (o compatible), disponible en <url url="http://www.gnu.org">
<item>GNU make (o compatible), disponible en <url url="http://www.gnu.org">
<item>perl 5.004, disponible en <url url="http://www.perl.com">
<item><idx/autoconf/ 2.12, disponible en <url url="http://www.gnu.org">
<item><idx/automake/ 1.2, disponible en <url url="http://www.gnu.org">
<item>flex 2.5.4,
<item>GNU gettext, disponible en <url url="http://www.gnu.org">
<item>Qt 1.42, disponible en <url url="http://www.troll.no">
<item><idx/KDE/ 1.1.x, disponible en <url url="http://www.kde.org">
</itemize>
<p>
<bf>Opcional:</bf>
<itemize>
<item><idx/a2ps/ o <idx/enscript/ para poder <idx/imprimir/
<item>ghostview o kghostview para poder previsualizar la <idx/impresión/
<item><idx/glimpse/ 4.0 para el <idx/índice de búsqueda/, disponible en <url url="http://glimpse.cs.arizona.edu">
<item>sgmltools 1.0, disponibles en <url url="http://www.sgmltools.org">
<item><idx/KDE-SDK/ (<bf/KDE S/oftware <bf/D/evelopment <bf/K/it, Conjunto de herramientas de desarrolo para KDE), que incluye <idx/KDoc/, <idx/KSgml2Html/, <idx/KTranslator/ (disponible en <url url="http://developer.kde.org">)
<item><idx/KDbg/, disponible en <url url="http://members.telecom.at/~johsixt/kdbg.html">
<item><idx/KIconEdit/ (disponible en <url url="http://www.kde.org">)
</itemize>

KDevelop fue probado con SuSE Linux 5.2 y con FreeBSD 3.0 en un AMD K6 200 con 64MB RAM, además de con SuSE Linux 6.0 en un Intel 200 MMX con 128MB RAM.

Por lo que saben los autores, tanto SuSE Linux como FreeBSD contienen todos los paquetes necesarios, incluyendo <idx/a2ps/ y <idx/enscript/, como paquetes o como ficheros rpm, por lo que no debería tener problemas instalando los programas externos necesarios.

<bf>Documentación:</bf>	

Para crear la documentación de las bibliotecas de <idx/KDE/, necesita que las fuentes del paquete kdelibs estén instaladas en su sistema. Además necesita el programa <bf><idx/KDoc/</bf> (incluido con <idx/KDE-SDK/).

También se encuentra disponible en nuestra página una <idx/referencia/ de C/C++, que se integra en <idx/navegador de documentación/ tras su instalación. Descarga el paquete, cópialo como <tt/superusuario/ en el directorio del <idx/kde/ y descomprímelo de la siguiente forma: <tt/tar zxvf c_c++_reference.tar.gz/. La guía de referencia estará disponible desde el árbol de documentación; si no es así, al seleccionar la guía de referencia en el navegador, se mostrará un mensaje de error, con la URL desde la que se puede descargar y las instrucciones de instalación. 

<sect>Compilación e instalación
<p>
Para poder compilar e instalar KDevelop en su sistema, escriba lo siguiente en el directorio base de la distribución de KDevelop:

<tscreen><verb>
	&percnt ./configure
	&percnt make

	(como superusuario)
	
	&percnt make install
</verb></tscreen>


<p>Como KDevelop utiliza <tt><idx/autoconf/</tt>, no debería tener problemas compilándolo. 

Para poder compilar una copia del CVS de KDevelop, escriba lo siguiente:
<tscreen><verb>
	&percnt make -f <idx/Makefile.cvs/
	&percnt ./configure
	&percnt make

	cambie a superusuario y escriba:
		
	&percnt make install
</verb></tscreen>

Si el <idx/comando make/ de su sistema es  <tt/gmake/, escriba <tt/gmake/ en lugar de <tt/make/.

<sect>Arrancando KDevelop
<p>
Si utiliza <idx/KDE/ como gestor de ventanas, KDevelop puede ser lanzado desde "K"&rarr"Desarrollo"&rarr"KDevelop 1.1". Como KDevelop soporta los tipos Mime de <idx/KDE/, puede también lanzarlo seleccionando un fichero de proyecto KDevelop ("*.kdevprj", mostrado con el icono de proyecto KDevelop) en el gestor de ficheros de <idx/KDE/. En este último caso, KDevelop se ejecutará y abrirá el proyecto seleccionado.
Con otros gestores de ventana, abra la consola y escriba:

<tscreen><verb>
&percnt kdevelop
</verb></tscreen>

Para lanzar KDevelop con un proyecto ya existente, entre en el directorio del proyecto y escriba:

<tscreen><verb> 	
&percnt kdevelop  &lt;suProyecto&gt;.kdevprj
</verb></tscreen>

La primera vez que un usuario lance el KDevelop, se ejecutará el proceso de <ref id="El programa de instalación" name="instalación automática">, que le permitirá configurar las opciones más habituales. Si en algún momento se estropea su instalación, puede reconfigurar el KDevelop de dos formas. Puede escribir:

<tscreen><verb> 	
&percnt kdevelop  --setup
</verb></tscreen>

o, utilizando el KDE, puede seleccionar "K"&rarr"Desarrollo"&rarr"KDevelop Setup".

<sect>El programa de instalación<label id="El programa de instalación">
<p>
KDevelop incluye un programa de instalación automática, que se ejecuta cada vez que se lanza KDevelop y no existe el fichero de configuración kdeveloprc. Le recomendamos que siga el proceso de instalación eligiendo "Proceder", para que el programa analice su sistema y para configurar el entorno KDevelop.

Los botones del diálogo de instalación ejecutan las siguientes acciones:
<p>
<bf>Ayuda:</bf> Mostrará este fichero de ayuda.
<p>
<bf>Proceder:</bf> Comienza el proceso de instalación y ejecuta las siguientes acciones

<enum>
<item> Búsqueda de los programas make/gmake, <idx/autoconf/, autoheader, <idx/automake/ y perl, para la creación y compilación de las aplicaciones generadas por KDevelop. Si gmake está instalado, se usará como <idx/comando make/. Posteriormente se puede elegir los parámetros que se le pasan al comando make, en el diálogo de <idx/configuración/ del menú Opciones. Si desea leer una introducción al desarrollo de programas en sistemas Unix, vaya a la sección <ref id="Programas" name="Programas">.

<item> Búsqueda de los programas <idx/KDoc/ y <idx/glimpse/. Éstos permiten crear una nueva documentación de la <idx/biblioteca KDE/ y un <idx/índice de búsqueda/. Si se encuentran los dos programas, tanto el índice como la documentación se crearán en un paso posterior de la instalación.
 
<item> Búsqueda de <idx/a2ps/ y <idx/enscript/ para permitir la <idx/impresión/ de documentos. Alguno de los dos programas ha de estar presente para permitir una correcta impresión. De todas formas, si nínguno de los dos está presente, al instalarse posteriormente alguno de ellos, se puede elegir imprimir con él sin pasar otra vez por la configuración del programa. Unicamente hay que elegir el programa en el diálogo de impresión.

<item> Búsqueda de <idx/KDbg/, <idx/KIconEdit/ y <idx/KTranslator/.  Le recomendamos que instale estos programas, ya que son buenos compañeros para la creación de aplicaciones <idx/KDE/. <idx/KDbg/ se puede utilizar para <idx/depurar/ su proyecto; <idx/KIconEdit/ sirve para mostrar y editar las <idx/imágenes/ que usted seleccione en el árbol de ficheros. Los programas <idx/KDbg/, <idx/KIconEdit/ y <idx/KTranslator/ aparecerán disponibles (si se encuentran) en el menú <idx/Herramientas/ de KDevelop. Posteriormente se pueden añadir más herramientas al menú, mediante la opción <idx/Herramientas/... del menú Opciones.

<item> Resumen de los programas encontrados: se muestra una lista que indica los programas que se encontraron, y los que no. Se muestra también una pequeña sugerencia, si la presencia de algún programa es recomendada. 

<item> Detección del camino hasta la documentación de la biblioteca <idx/Qt/. Busca la misma en la mayoría de localizaciones estandar para la documentación y configura el camino automáticamente. Si la documentación no es encontrada, porque no está instalada, o porque está en un camino distinto a los habituales, aparecerá un diálogo, que le dará como opciones seleccionar manualmente su situación o continuar. Si elige seleccionar manualmente la situación de la documentación, se le mostrará un diálogo para elegir su localización. Normalmente estará en el directorio qt/html. Tras hacer esto, la instalación puede ser continuada pulsando en "Proceder" otra vez.

<item> Si <idx/KDoc/ es encontrado, se le pregutará si desea crear/actualizar la documentación de las bibliotecas de <idx/KDE/. Para hacer esto, necesita tener las fuentes de dichas bibliotecas. A los usuarios de Linux que hayan instalado KDE desde una distribución, les recomendamos que copien y descompriman las fuentes del paquete de bibliotecas de KDE a su sistema; los usuarios de Free BSD que instalaron las bibliotecas como paquete, deberían buscar el paquete distfile adecuado. Si ninguno de estos casos es aplicable a su situación, descargue los ficheros fuente desde <url url="http://www.kde.org"> y descomprímalos en su sistema. Si lo desea, puede utilizar una documentación ya creada, que se encuentra disponible en <url url="http://developer.kde.org">; en ese caso, cancele este paso y continúe creando el <idx/índice de búsqueda/. Cuando la instalación termine, configure el camino hasta la documentación en el diálogo Configuración de KDevelop y vuelva a crear el índice de búsqueda, mediante la opción presente en el mismo diálogo. 

El diálogo "Actualización de la documentación de la biblioteca <idx/KDE/" está preparado para utilizar $HOME/.kde/share/apps/kdevelop/KDE-Documentation como el camino por defecto para la documentación. Lo único que debe de hacer es elegir el camino hasta los fuentes de la biblioteca, con el botón situado en la parte superior del diálogo, y pulsar Aceptar. Ejemplo: si obtuvo el el paquete kdelibs.tar.gz desde <url url="http://www.kde.org"> y lo descargo a su directorio $HOME, debe abrir una consola o terminal y ejecutar "tar zxvf kdelibs.tar.gz". Los fuentes se descomprimirán en el directorio /home/nombredeusuario/kdelibs, que contendrá los fuentes de cada biblioteca en un subdirectorio. La biblioteca kdecore estará en el directorio /home/nombredeusuario/kdelibs/kdecore, etc. En el diálogo de actualización deberá elegir el camino a todas las bibliotecas, en este caso /home/nombredeusuario/kdelibs/. Tras pulsar Aceptar, un mensaje en la ventana de instalación le informará de que se está generando la documentación y de que debe esperar al siguiente mensaje.
<p>

<bf>NOTA:</bf> En un <idx/sistema multiusuario/ o en sistemas con <idx/cuotas de disco/ para las cuentas de usuario, la instalación de documentación <idx/HTML/ para todos los usuarios sería una perdida de espacio. Es este caso, pida al administrador del sistema que ejecute KDevelop como superusuario, para que pueda acceder al directorio raiz del sistema. Entonces instale la documentación dentro del directorio de <idx/KDE/, en $KDEDIR/share/apps/kdevelop/KDE-Documentation. El camino hasta este punto se puede configurar más tarde en el diálogo <idx/Configuración de KDevelop/, en el menú <idx/Opciones/.

<item> Si se encontro el programa <idx/glimpse/ en su sistema, se le ofrecerá la posibilidad de crear una base de datos de búsqueda. La base de datos de búsqueda puede incluir la <idx/documentación de KDE/ y la <idx/documentación de las Qt/ (opción por defecto). Además, la documentación del KDevelop será incluida e indexada. Si desea crear un índice de cualquier otra documentación, puede seleccionar su directorio y serán incluidas en el proceso.

<item> Durante la creación del <idx/índice de búsqueda/ la ventana de instalación mostrará un mensaje, indicando el proceso que se está realizando.

<item> Si todos los pasos de la instalación se realizaron correctamente, aparecerá un mensaje final anunciando que el programa KDevelop será ejecutado tras pulsar Aceptar. Recuerde que puede configurar otras opciones adicionales, tales como el guardado automático de ficheros, en el diálogo <ref id="Configuración general" name="Configuración del KDevelop">, que es accesible a través del menú Opciones.
</enum>

<bf>Cancelar:</bf>  Mostrará un mensaje advirtiendo de que el proceso de instalación va a ser cancelado. Desde este diálogo se puede volver a la instalación ("Retroceder") o arrancar KDevelop con los valores por defecto ("Continuar"). En este último caso, deberá configurar todas las opciones manualmente desde los <idx/diálogos de configuración/ del menú Opciones.


<chapt>Programas<label id="Programas">
<p>
Ahora que ya ha instalado KDevelop satisfactoriamente, y que las opciones más utilizadas están configuradas, se estará preguntándose si este programa ofrece lo que promete. En este capítulo se le dará una guía sobre como crear programas con las herramientas GNU y sobre la parte que KDevelop juega en el proceso.

<sect>El compilador<label id="El compilador">
<p>
El <idx/compilador/ es el programa que, como mínimo, debe estar instalado en su sistema para poder crear programas ejecutables; este programa es el que compila el código fuente, transformándolo en ficheros objeto con los que crea el programa.

Normalmente, lo ejecutaría de esta forma:
Abra el editor que suela utilizar - no use un procesador de textos. Escriba algo como lo siguiente para crear el código fuente de su primer programa:

<tscreen><verb>
#include <iostream.h>

int main(){

cout << "Hola Mundo" << endl;

}
</verb></tscreen>
Bueno, todo lo que el programa hará será imprimir la cadena "Hola Munda" en la <idx/salida/ estandar. En cualquier caso, este es el código del programa a generar, no el programa propiamente dicho. Necesitamos un <idx/compilador/, en este caso un <idx/compilador/ de C++ como g++. Guarde el código fuente como, por ejemplo, miprograma.c e invoque el <idx/compilador/ con el nombre del fichero (en la consola):

<tscreen><verb>
g++ -o miprograma miprograma.cpp
</verb></tscreen>
Ahora ya se puede ejecutar el programa. Escriba <tt/miprograma/ en la consola. El programa mostrará la cadena; después finalizará.

<sect>Make y <idx/Makefile/s<label id="Make">
<p>
Vale, ya tiene todo lo que necesita: un editor y un <idx/compilador/. Además puede ejecutar sus propios programas C++... Pero no es todo tan fácil, ¿qué pasa si tiene más de un fichero fuente? Además, ¿Tiene que compilar todos los ficheros cada vez que modifique uno? A medida que los programas se hacen más grandes, se vuelven más costosos y complejos de compilar, ya que tiene que ejecutar todos los comandos y opciones directamente. La solución pasa por crear un fichero con el nombre <idx/Makefile/ (en realidad puede tomar cualquier nombre menos el del programa) en el que insertar todos los comandos necesarios para <idx/compilar/ el programa, por supuesto con unas normas de sintaxis. Si las herramientas <idx/make/ o <idx/gmake/ están instaladas, lo único que tiene que hacer es escribir el nombre de la herramienta en el directorio en el que el fichero Makefile se encuentra (si el fichero tiene otro nombre es necesario pasar el parametro `-f nombrefichero'). En ese momento la aplicación make toma el control y se encarga de la compilación del programa. La aplicación make tiene otras muchas ventajas y puede ser utilizada para muchos propositos. Para obtener una visión más clara de la herramienta, abra la consola y escriba:

<tt/man make/

o busque "GNU Make" en la ayuda del KDE, en "System GNU Info contents".

At least, you have an insight, why a developer needs the make utility for making it easier to compile his application.
Now, writing <idx/Makefile/s is not only handwork until now, you also have to dig yourself into the whole syntax and options. But here
is the good news about KDevelop and any Make-utility: You just have to set the Make-Command in the <ref id="Configuración general"
name="Configuración del KDevelop"> dialog, and then you're done. All projects generated with KDevelop will use that Make command to build the
target application, and no typing at all. Just hit the buttons on the toolbar of KDevelop, beginning with the one after the second
separator line, or choose the desired function for Make in the "Build" menu.

The toolbar and the build-menu then offer the most-common functions that you need to let make do the dirty work:

<itemize>
<item> <idx/Compile File/: is only active if you're working on a source file. It invokes make with the correct command to compile only
the current source.
<item> Make: just calls make and creates your target.
<item> Rebuild all: rebuilds the whole project
<item> Clean/Rebuild all: cleans the project directory first and then runs make again.
<item> Stop Build: cancels the current process- this is mostly used if you watch make working and staring at your sources. Then-
ahh- I forgot about this line...and you have to correct your code. Just hit Stop, correct the error you found by yourself and run
Make again.
</itemize>

But this is not the only way how KDevelop works together with make- for <idx/KDE/ applications, there are some things that are special,
like creating the message files for internationalization. These functions are also included, so no worry about these things
anymore.

Until now, you know about sources, the <idx/Compiler/ and why make is needed. In the next section, we'll discuss how it comes that
projects created with KDevelop automatically can be compiled on most other Unix-platforms using the <tt/configure-/ script.

<sect>Configure<label id="Configure">
<p>
The title of this section lets you probably question: Configure ? What has to be configured ? Or who ?
Well, assume you have written a program including a <idx/Makefile/. Then you like to distribute it, but the binary compiled does only
run on your system or on systems that are compatible with yours. To support other platforms like different Unix-systems or
machines like Alpha's or RISC's, you have to recompile the program. The easiest way would be to copy the source package to the
target machine and run <tt/make/ again. But what if the target machine uses another <idx/Compiler/ command or has in some other way a
problem to build your binary ? Not to mention more difficult issues like installation paths for your program and documentation-
e.g. <idx/KDE/ can be installed in <tt//opt/kde/ on one machine, while it is installed under <tt//usr/local/kde/ on another. In this
case, you would have to rewrite the <idx/Makefile/ each time to ensure a correct compilation and installation of your product.

Fortunately, GNU-tools have even more to provide than that mighty <tt/make/- the commonly used <idx/automake/ and <idx/autoconf/
packages. It sounds good to hear something with "auto"- seems like something about application design can be done quick and easy,
which exactly hits the point.

Automake's purpose is generally to create a so-called <tt/<idx/Makefile.in// from a file <tt/<idx/Makefile.am// which you have to write for
your project. This <idx/Makefile.am/ consists of macros which can be interpreted and reduce the complexity that make offers, so a
<idx/Makefile.am/ is written safer and quicker than the final <idx/Makefile/.

Having this said, who is finally creating me my <idx/Makefile/ ? Now, here comes <idx/autoconf/. Autoconf requires several macro files
for the project. That are those <idx/Makefile.in/'s generated by <idx/automake/ and a file called <tt/configure.in/, also containing macros.
Hereby the <idx/Makefile.am/ and .in's are containing macros that are responsible for the way how to build the software in terms of
which sources have to be compiled, which files belong to the package and what name the final binary or library will have after a
build. Configure.in on the other hand contains macros for what the final configure-shell script will check for on the system
configure is executed. Those could be e.g. the <idx/Compiler/ command, required libraries against which the final binary will be linked,
include-files the project needs and their location.

For example you want to write a <idx/KDE/ application. After writing your sources,
you want to distribute the program to the user community, and each user has to compile the binary on his own. Then you would write
a configure.in file that contains the macros for a <idx/KDE/-compliant application. That one macro finally expands to a check on the
system whether the Qt-library is installed, checks for the Qt-header files, the <idx/KDE-libraries/ and headers etc.

<bf>Summary:</bf>  To create a GNU-compliant application that is portable to different Unix-OS's and machines other than yours,
you will need to do the following:

<enum>
<item> write the sources of your project
<item> write a <idx/Makefile.am/ for each subdirectory, including the main project directory of your project
<item> write a configure.in file placed in the main project directory containing the macros for system requirements
<item> run <idx/automake/
<item> run <idx/autoconf/
</enum>

Then the main work is done. Automake creates the <idx/Makefile.in/'s, <idx/autoconf/ processes the configure.in and
generates an executable shell script called <tt/configure/. All you then have to do is to execute it with  <tt/./configure/ and
the script will run the checks of your choice. Finally <idx/Makefile/s will be generated that allow a final execution of make (or gmake)
that will process all <idx/Makefile/s and then you're done.

This seems to be a lot of stuff for writing a small application and much to learn especially how to write correct macros. But even
the fact that you provide a compilation on almost all Unix-systems will be worth this work sooner or later. Finally, you only have
to do this work once for your project and in case your project's files increase you only have to add the filenames to the macros.


Now, how far does KDevelop support this kind of application development and how complicated does it get for the programmer ?
The good news is, that you don't even have to know anything about macros and scripts. All details are hidden behind an easy to use
graphical interface doing the work for you. An application is therefore created with GNU tools in a very user-friendly way:

Just generate your application with <idx/KAppWizard/, by the choice of your application's needs- may it be a pure C++ terminal
application or a kind of <idx/GUI/ program using Qt or the Qt/<idx/KDE/ libraries. All work is done automatically and your project
already contains the <idx/Makefile/s that are created by an auto-execution of the GNU-tools and the configure-script.

This is it- you're ready to extend the source of your project, may it be by adding <idx/classes/, dialogs, translations or
documentation, which is also completely automated. Just concentrate on the real work of the developer, which is providing
functionality for the final application that you want to create. In most cases, you probably won't come in touch with <idx/Makefile/s at
all when using KDevelop.

<sect>Debugging<label id="Debugging">
<p>
The following section covers a term that is widely used by developers: Debugging.  It means, that, although your <idx/Compiler/ produces
the final application, your application may not run or crash during execution due to a so-called "bug" in the code. A program
error described by the name of this insect comes from the history of computing; one of the first <idx/errors/ that caused a machine to
crash was not obviously a malfunction- bugs were inside the computer which were responsible for it. Therefore, an error not
detectable on the first look is called a "bug", so "<idx/debugging/" means to throw out bugs where they shouldn't be. Now, you don't
have to hunt them for real; assuming that today's computers are designed to keep them out by some kind of outer protection.
They have to be found inside the code, mostly ending the execution of a program with the message "Segmentation fault". GNU
provides another tool called <tt/gdb/, the GNU debugger. This terminal program allows to watch the internal values of an
application and the execution step by step with setting "breakpoints" in the code. Gdb stops the execution every time the program
comes to a breakpoint while executing. But like most other tools, the debugger is handled by another program providing a frontend
to it, allowing to easily watch values and the setting of breakpoints in the code.

For this purpose, your project's application is by default created with a <idx/Compiler/ option for <idx/debugging/, thereby storing
additional data in the executable to allow the localization of values and lines in the code. As a third-party frontend to gdb,
KDevelop makes use of <idx/KDbg/, the KDebugger. To debug your program, you just have to select "Debug" in the Build-menu or press the
according toolbar button displayed by a wheel having glasses over it, signaling that you want to watch the execution.

KDevelop then opens the <idx/Tools/-window and starts your application with <idx/KDbg/. The <idx/KDbg/ interface appears inside the <idx/Tools/-window and
allows the usage just like you started it from outside.

In general, the above steps are clearly showing the need of certain steps that a developer has to do when starting to write his
own application, and cover issues that are common to all projects. Also, we explained what part KDevelop does for a developer and
how it supports the idea of providing an easy way to Unix programming. To get further information about the role and purpose of
GNU tools, you should read the documentation provided with them, commonly accessed via the <tt/man/ command or by the "System GNU
Info contents" section in KDEHelp.

<chapt>Desarrollo con KDevelop<label id="Desarrollo con KDevelop">
<p>
In this chapter you will get a general overview how you can use KDevelop and the internal <idx/dialog editor/ to create own applications.
Thereby, all tools are described by their use during the development process. If you are a beginner in C++/<idx/GUI/ design and
programming, you should read <htmlurl url="programming/index.html" name="The KDevelop Programming Handbook">, which describes some
basics for program design and shows a more detailed use of KDevelop by sample projects which you can follow step-by-step to get used
with the way applications are created using KDevelop. Also you should have read chapter <ref id="Programas" name="Programas"> to gain a
general understanding why Unix applications should make use of provided development tools; this will make things easier when you hit
references to what <idx/Makefile/s are etc.

<sect>What are KDevelop Project Applications ?
<p>
Projects created with KDevelop make it very easy for developers to use the GNU standard development tools. In opposition to the
self-creation of <idx/Makefile/s, which have to be written anyway because of the project's complexity, those provide not only a better
way of <idx/Makefile/ generation but also a good and safe way to provide a fast adaption towards different systems by <idx/autoconf/-generated
<tt/configure/ scripts.

The distribution of your applications does not require the end-user to have anything different installed than a C++ <idx/Compiler/ and
the development libraries, which is most often the case; but you can as well distribute binary packages of your application. In
either way, the end-user of your product does not have to have KDevelop installed. For giving away your sources, we advise to
include the project file of KDevelop as well, as this makes it very easy for other developers to work with your sources if they
use KDevelop as well. For projects where several developers, maybe working on different places, are involved, this should the case
anyway to ensure consistency of the <idx/Makefile/s so you don't run into trouble. Especially on multi language applications, translators
won't actually work with the source code, except in cases that require corrections for enabling translation support. Anyway, those
will be thankful as KDevelop simplifies their work to a minimum by adding their language and reducing the work to concentrate on
the translation.

With using KDevelop for your own projects, you would start creating a new application with the <idx/KAppWizard/. There, you can also
set the project type according the goals of your program. Then, you would start developing the user interface by adding
<idx/widgets/ that are already constructed in the libraries and only have to be called by your application, or by self-constructions
that can be made with the dialog editor. Next comes the extension of the user interface by changing and extending those parts that
are already made by KDevelop like the statusbar, menubar and toolbars. As resources are collected in a resource file, this can be
extended simply by adding new values to the already existing one; the given resources can also be used as a guideline for adding
your specific ones. After implementing the functionality to methods that are either generated empty by the <idx/dialog editor/ or already
containing code for standard user actions, you should extend the User Manual by simply editing the provided <idx/SGML/ index file
towards describing your applications capabilities. The last step would be to generate translation files and to distribute your
project to translators doing the rest to enhance internationalization.

But even for non-<idx/GUI/ application designers the IDE offers an easy way to create new projects; the editor and Class Browser in
conjunction with KDevelop's powerful project management will reduce the time for development to the minimum that is required for
<idx/implementation/ of functionality.

<sect>Short Description of KDevelop's <idx/Tools/
<p>
With KDevelop you have chosen a package, that, in conjuction with the use of other tools, will provide you a prefect and flexible
environment for object-orientated application development under Unix-Systems. Generally, KDevelop consists of the programming
environment and the <idx/dialog editor/; besides that all needed programs that can be helpful for designing applications are embedded in
one or the other way.

<sect1>Programming Environment and Dialog Editor
<p>

<sect2>The Programming Environment
<p>
The Programming Environment is the user interface that KDevelop provides for creating and maintaining projects, implicitly using
many other tools by simplifying their use. It's built-in Editor and <idx/Helpbrowser/ as well as the Class Browser reduce the amount of
work that development processes usually burden on the programmer. The ease of use make writing applications for Unix an enjoyment
on it's own and will probably result in shorter release cycles and better development improvements. From here, you're managing
your project throughout all its details, keep the overview over your <idx/classes/ and don't have to use additional consoles for your
work, as well as the integration of all user interfaces results in the fact that you only have to work with one window under X and
don't have to watch for several ones spread all over your desktop.

<sect2>The Dialog Editor
<p>
KDevelop's built-in <idx/dialog editor/ offers a simple way of designing user interfaces with the Qt and <idx/KDE/ libraries. Its
simple way to do almost everything with the mouse allows a rapid construction of dialogs and main views for applications and their
direct transformation into C++ code, which is directly added to the project. As the <idx/dialog editor/ is embedded into the rest of
KDevelop's user interface, you have the same commands available than working in Programming mode. This allows e.g. construction of a
dialog, generation of the code <idx/output/ and it's direct testing within the program by the availability of the <idx/make-command/s and you still
can control the <idx/Compiler/ <idx/output/ without having to switch back to the programming view. For a detailed description, see <ref
id="El editor de diálogos">.

<sect1><idx/KAppWizard/ and the Classtools
<p>
The <idx/KAppWizard/ and the Classtools provided for project generation and automatic code extension are intended to make the
creation of applications as easy and safe as possible and offers a good way for beginners in Qt/<idx/KDE/ programming to start
actually working themselves into the details of <idx/GUI/ application design, as results can be achieved very quickly.

<sect2><idx/KAppWizard/
<p>
<idx/KAppWizard/ is intended to create full-functional application projects that are ready-to-run by using GNU-standard tools and, for
<idx/GUI/-programs, taking advantage of the <idx/KDE/ and Qt libraries. By specifying only the information that is required as a
minimum, users are enabled to start working at a new project within seconds. Calling <idx/KAppWizard/ should be the first step to be done for
creating a new application with KDevelop.

<idx/KAppWizard/ provides you a so-called application skeleton with all needed C++ source code files for a running application. After
you specified a projectname and set the needed preferences, your new project will be generated and you have a complete application
that already contains a lot of functionality (for KDE and Qt projects), without even having to type one line of C++ code yourself. When
specifying the complete set of options the program generator offers, your application already contains:
<itemize>
<item>an SDI-Interface (for working with one document per application window), based on the document-view-controller model
<item>Menus and dialogs for opening and saving files as well as <idx/printing/ dialogs
<item>a toolbar and statusbar already providing complete functionality
<item>a helpsystem, containing an <idx/SGML/-based user manual and statusbar help
<item>a complete <idx/HTML/-based <idx/API/ (application programming interface) documentation for the current state of the project
<item>an installation routine though make
</itemize>

The <idx/KAppWizard/ is available by the Project-menu, entry "New...".

<sect2>Classtools
<p>
The term "Classtools" describes a variety of functions that are available for the developer to work on a project not only by
an object-orientated language but using the sources in an object-orientated way. Working with <idx/classes/ instead of having to
watch for files offers a very flexible way to extend a project and lets the user concentrate on the objects the project contains.
The tools that KDevelop offers are a Classgenerator and a Class Browser, where each one provides a lot of automated
functionality.

<sect3> Creating a new class with the Classgenerator
<p>
After generating a project with the <idx/KAppWizard/ your work as a developer would be to add a set of <idx/classes/ that match the design of
the application. The typical process without using KDevelop would be to create a new header and sourcefile, add them manually to
the according <idx/Makefile.am/ and to start writing the <idx/classes/ <idx/declaration/ and <idx/implementation/. To simplify the whole process, the
Classgenerator lets you do this by only specifying the new class by its name, inherited class, inheritance attribute and further
information such as class documentation by it's purpose for the project. Additionally, you can also change the filenames that are
preset by the generator and if the class would be Qt-signal/slot enabled by default.

The rest of the work is done automatically- you don't have to take care for <idx/Makefile.am/, files and the class itself. A new "make"
invocation is enough to include the new class in the compilation process. As the Class Browser updates itself after the addition of
a class, the <idx/declaration/ and <idx/implementation/ is available at once and you can start working on the extension of the class. The
Classgenerator is invoked by the Project-menu, entry "<idx/New Class/".

<sect3>The Class Browser
<p>
The Class Browser displays all types of objects and functions of your project in a tree left of the editing windows. A class parser
scans all files for methods and <idx/classes/ and makes them available by graphical symbols. Over those, context-menus offer a
specialized functionality to work with the sources by focusing on the <idx/classes/ and functions.

Selecting a class will result in opening the file that contains the <idx/declaration/; on methods and functions this will
show you the <idx/implementation/. For a full description, see <ref id="El navegador de clases" name="El navegador de clases">

<sect> The Development Process
<p>
The development of a new application with KDevelop can generally be divided into two major steps: first, you have to generate a
program skeleton with <idx/KAppWizard/, then the "rest" of the development has to be done using KDevelop's features, which only
requires your abilities as a programmer. To describe the development process, we assume you want to create a Qt/<idx/KDE/ application,
which implies using most of KDevelop's features for working with these types of project, so you have a general "HOW-TO".

<sect1>Creating a Program Skeleton
<p>
To start creating your application, you normally would call the <idx/KAppWizard/, enter the project name and generate the program. By
this, the wizard automatically creates a project file for the application and inserts the KDevelop areas into the <idx/Makefile.am/'s
which will be used later when extending the application. The project file is the file you have to load for opening the project in
later sessions.

You call <idx/KAppWizard/ by the "Project"-menu, entry "New...". When the wizard appears, you have to specify the project
type on the first page. Selecting "Next >>" brings you to the next page where you have to insert the project name, version,
directory and your personal information. Page 3 offers more detailed options, page 4 and 5 allow editing file headers for header
and <idx/implementation/ files that are inserted automatically according to your selection. If you already have file headers you want to
use, you can choose those files as well. The last page contains an <idx/output/ window and an error message window. When selecting
"Create", your application will be generated and the actions that are executed can be seen in the <idx/output/ window. If READY appears
in the <idx/output/ window, the <idx/KAppWizard/ is finished and you can select "Exit" to return to the Programming Environment. To build the
binary, choose "Make" from the Build-menu or choose the according button in the toolbar. You can as well test the functions already
present by choosing "Execute" from the Build-menu.

<sect1>Developing an Application
<p>
This section describes the development phase of applications with KDevelop and the <idx/dialog editor/- and all work can be done within
the IDE.

The development steps are generally to edit the source files, the compilation of the project sources followed by the <idx/Linker/
process binding all object files to the final binary. Then <idx/errors/ have to be located which either prevented a compilation or
linking or are semantical bugs that can be found by a <idx/debugging/ session. Finally, the documentation has to be extended and
translations have to be added. But as all those steps can mix which each other, it is not that easy to describe a general way how
to develop your own application. Typically, the usual procedure would be to first create all visible parts of the project like the
main view and the dialogs for configuring any options, then generate the source code and implement all needed connections that
still have to be done like changing the menubar and toolbars, adding statusbar help for new menu entries and fill the new member
functions with objects that are displaying your dialogs. Then you would compile your application and test it's capabilities, fix
<idx/errors/ and test it again. The following sections describe how this would be done; for your particular application
you may choose another way- KDevelop leaves you enough flexibility to decide what to do at what time.

<sect2>User Interfaces
<p>
The User Interface of an application is actually what the user sees and by which he interacts with the program. Therefore a
program generally has a menubar, toolbars and a statusbar as well as a main view which would be e.g. a text input window for an
editor. <idx/KAppWizard/ generated applications already contain a complex functionality on graphical interfaces- the frame structure
takes care of standard elements such as bars and buttons. When developing your application, you have to extend the given structure
to give the program the user interaction capability you want to provide. One part of the work is the design of dialogs e.g. for
changing values like the brush width in a paint application. This can be done easily with the <idx/dialog editor/ inside KDevelop. Now,
how do you create those good-looking dialogs ? As the <idx/Qt-library/ is a <idx/GUI/ toolkit, it provides a base set of so-called "<idx/widgets/"
like labels displaying plain text, lineedits for text input and buttons for navigation and selection commands. Besides these
"low-level" parts of user interfaces, standard dialogs are provided and are ready to use such as <idx/printing/ dialogs. The
<idx/KDE-libraries/ then are based on the Qt-library and contain replacements for certain dialogs as well as additional <idx/widgets/ that
can be used in your application. So, when you start designing your applications behavior towards the user, you should make yourself
comfortable with the <idx/widgets/ provided with Qt and <idx/KDE/. The online-documentation of Qt offers screenshots for most of them,
so you should have a look there first. Then we advise to have a closer look at the KDE-UI library, offering other <idx/widgets/. Libraries
like the K<idx/HTML/ library contains very specialized <idx/widgets/ that a lot of programs make use of. It just simplifies application design like
the predefined dialogs provided with Qt. For your own dialogs, those low-level <idx/widgets/ are the one you need. A dialog merely
consists by a collection of different <idx/widgets/ combined together building the interface and is technically programmed by C++ code
in a class that is derived from <tt/<cdx/QWidget// or a more specialized dialog class that inherits <tt/<cdx/QWidget//. The program
using the widget therefore needs an object of the widget's class- this is almost all you have to understand how dialogs or views are
used.
The <idx/dialog editor/ of KDevelop now offers a nice way to simply construct dialogs and user interfaces visually instead of you having
to combine dialogs with pure C++ code together- this is the hard way to create interfaces. Switch to the <idx/dialog editor/ by
choosing the according entry in the "View"-menu (or by the toolbar button). You will see that KDevelop's face has changed but for
e.g. the menubar and the toolbar are very similar. This makes it very easy to switch back and forth between the two working modes
and you will feel comfortable in both after some time. There you can construct your views and dialogs as you like and set all
available preferences for the items the view will contain. When you're finished, select "Generate Sources" from the Build-menu;
the <idx/dialog editor/ and the project management will take care of the rest. You can test if everything went OK by selecting Make or
Execute, this will build your application including your new sources. But don't expect that dialogs are already usable- this is a
matter of <idx/implementation/ that is the usual way a developer works. Don't worry- this isn't too difficult, too. For more information
about creating dialogs, see <ref id="El editor de diálogos" name="El editor de diálogos">, examples and guidelines can also be found in
<htmlurl url="programming/index-6.html" name="The KDevelop Programming Handbook">.

<sect2>Binding New Elements
<p>
After you have created your user interfaces and generated the sources, you are ready to make your application use them by objects.
As described above, a usual <idx/GUI/-based program contains bars and the main view; additionally the main view operates with the bars,
which are part of the main application class, and the document object which it is connected to. In terms of object-oriented
design, you would describe the given architecture as the "Document-View-Controller"-model. This model describes the basic
functions for objects in an application towards their role within the program. The Controller represents the one coordinating the
main application and provides user interaction through a menubar and additionally toolbars and a statusbar. The Document class
takes the task of representing a document the user works with. Therefore, a document class should do all actions like loading
files and saving them again. The view now is in the center of the application window, showing the user a part of the document
visually and provides all functions to manipulate the data by the user. As the bars and toolbars are already present, your work
would be to create the main view and additional dialogs by which the user can change any settings or has access to additional
functions.

To build your main-view, the generated source code for your application already contains a class in the form of
&lt;YourApplication&gt;View which inherits the <tt/<cdx/QWidget// class (this is the minimal class that handles visual interfaces in Qt
and therefore in <idx/KDE/ as well). In general, there are three different ways how to extend the given class:
<itemize>
<item>remove the document-view structure and use one of the predefined "big" <idx/widgets/ already containing a lot of functionality-
just remove the View-class and replace the view-object by another.
<item>change the inheritance of the View-class. Change the inheritance to e.g. QMultiLineEdit and your application would be an
editor.
<item>if your main view will consist of several separated parts, create the <idx/widgets/ and their <idx/classes/ you need with the
<idx/dialog editor/ and create objects of these <idx/classes/ in the view-class constructors that in combination will build the main view.
</itemize>

For dialogs, things are a bit different. The usual way would be to call a dialog through a menubar entry and additionally by a
toolbar icon. After you constructed your dialog and generated the sources, the class is available for creating an object that will
be the dialog. So you first have to look for a suitable place in the menubar to add an entry which will open the dialog when
selected by the user. If the already given menus do not match your needs, create a new popup menu just like the others and insert
your entry and the slot you want to call when the menuitem gets selected. Then implement the slot by creating an instance of the
dialog class and call the dialog with the <idx/member functions/ given by the base class. Also you have to specify an ID for the
menuentry. The frame applications have all IDs already given collected in a file resource.h, so you only have to add the ID and
give it a new number. Then you're done- additionally you could construct another toolbar icon and add the statushelp message. Your
application now offers a new functionality which is visible to the user. Now you have to add the <idx/implementation/ of methods that
your dialog will be operating with to manipulate any values. Finally, call your make-tool or "Execute" and the changed files will
be recompiled; the result of your changes can then be tested immediately.

<sect2>The Complete Development Process
<p>
Above, we discussed the usual way how to start working on a new application using KDevelop and how to extend the user interface.
Now, these are the standard steps where the IDE helps you, but KDevelop does more than providing tools for creating applications
and their visual parts. The following gives a short description of the main functionality that is offered for enhancing
application development.

<sect3>Sourcecode Management
<p>
The KDevelop IDE provides a lot of methods to the programmer to achieve his goals within the shortest time.  As described above,
the <idx/KAppWizard/ and the <idx/dialog editor/ shorten the time you would usually need to get to the same result manually. But this
didn't cover the work a programmer has to do usually: working on the <idx/implementation/ of his application to provide a proper
execution by the end-user. Now, why is KDevelop the IDE you would want to use as a coding environment, including it's use to
create even non-<idx/GUI/ applications ?

Implicitly, the IDE keeps track of your project in general; that means, you don't have to take care for saving changes, the
<idx/Makefile/ generation and so on- this is providing full project-management, and KDevelop plays out all it's power here in any case
of C++ application development. It is easy to understand that, after taking away the management from the programmer, he is more
concentrated on working out the sourcecode. On the other hand, the code is usually spread over many different files across
the project, so you can separate certain parts. But this means still working the hard way- being the developer, you still
would have to struggle with creating these files and writing standard contents like file headers containing the date and the
author's name as well as e.g. license terms for the code. Additionally, this requires that you have to remember where your
functions, class <idx/declaration/s and <idx/implementation/s are in the project. Therefore, KDevelop contains the Classtools- a variety of
actions, that allow fast work and moving the developer's focus from files to objects- <idx/classes/, structures and methods. The
classgenerator lets you create a new class including inheritance, <idx/attributes/ and documentation easily . For object-oriented work,
the Class Browser brings you to the location of your objects; it doesn't matter any more where the code is actually. The
Browser scans all sources automatically and rebuilds itself after additions to keep up with your work and enables you to access
the new code directly. By context-menus, the browser offers even more functionality, like bringing you to the <idx/implementation/ or to
the <idx/declaration/ of <idx/member functions/. Then, the addition of members are done graphically by dialogs- no search for the file and the
place you would have to add your entries. Finally, you can get an even more specialized view of your project's <idx/classes/ by the
Classtool dialog, providing you trees that show the usage, contents and inheritance of <idx/classes/ and their objects. For more
detailed information, see <ref id="El navegador de clases" name="El navegador de clases">.

<sect3>Building and Executing your Application
<p>
The KDevelop IDE is specially designed to take away all those steps that you have to do periodically like building and executing
your program as well as locating <idx/errors/ in the sourcecode.

You're starting the build-process by:
<itemize>
<item>clicking on the symbols "Build" or "Rebuild All" in the toolbar
<item>or selecting "Build"/"Rebuild All" from the Build-menu.
</itemize>

To execute your application, choose
<itemize>
<item>the symbol "Execute" or "Debug" (starting <idx/KDbg/ with your program) from the toolbar
<item>by the according menu entries in the Build-menu.
<item>or by "Execute with Arguments" to start your application with additional arguments
</itemize>
For more information about the build-process, see <ref id="Proyectos" name="Proyectos">.

<sect3>Searching Program Errors
<p>
As naturally <idx/errors/ occur either during the build-process (which are detected by the <idx/Compiler/ and are called syntactical <idx/errors/
because they result from a wrong syntax of the sources) or during the execution of the application, those have to be found and
removed by the programmer. For locating <idx/errors/, the developer needs the information what exactly caused its occurance. As
mentioned, the <idx/Compiler/ is able to detect syntax <idx/errors/ himself, resulting in that the executable can't be build (this can also
happen by the <idx/Linker/ when he detects "unresolved symbols"-see <ref id="Linker Options" name="Linker Options">). As he gives out a
description of the error as detailed as possible, the error can be found and removed. During the build-process, you will see the <idx/output/
window pop up showing you what your make-tool and the <idx/Compiler/ has to say. In case of <idx/errors/ or <idx/warnings/, just press the mouse button
over the error line and the editor will open the affected file and sets the cursor to the errorline. This can also be done by the
entries in the "View"-menu, "Next Error" and "Previous Error" or by the according keyboard <idx/shortcuts/. You will find that this is very
functional and saves a lot of time to get to the error, thus for removing the cause your knowledge as a programmer is asked.

Runtime Errors, which occur during execution and will mostly result in a segmentation fault, are sometimes hard to find.
Therefore, you can enable the <idx/Compiler/ to add information within the binary to watch the execution by the sourcecode. A debugger
then is another program that lets you do this by starting the application and letting you set breakpoints in the code where the
execution stops, so you can control critical <idx/implementation/s and by this detect at least the line that caused the error. Finding
the real cause is another task; it depends on the programmer to locate this. The <bf/gdb/ is a debugger that is provided with the
GNU <idx/Compiler/ and programs like <em/ddd/ or <em/<idx/KDbg// are frontends that allow an easier use. KDevelop therefore uses <idx/KDbg/ and lets
you invoke the <idx/debugging/ process by the commands "Debug" in the Build-menu or by the "Debug" symbol in the toolbar. For more
information about <idx/debugging/ applications, see <ref id="Proyectos" name="Proyectos"> and <htmlurl url="programming/index-12.html"
name="The KDevelop Programming Handbook">.

<sect>Additional Information
<p>
The topics addressed within this chapter are described im more detail within the documentation provided with the KDevelop IDE and
in other documentations:

<itemize>
<item><htmlurl url="programming/index.html" name="The KDevelop Programming Handbook">, covering a complete introduction into <idx/GUI/
application design and programming with the Qt and <idx/KDE/ libraries,
<item>this handbook, sections <ref id="Overview" name="Overview"> to <ref id="Proyectos" name="Proyectos">, describing all avaliable
functions within KDevelop, <item>this handbook, section <ref id="El editor de diálogos" name="El editor de diálogos">, addressing the use of the
<idx/dialog editor/ to create your own <idx/widgets/, <item>The <em/Online-<idx/Reference/ Documentation/ to the <idx/Qt-library/, which covers examples of
using the Qt <idx/GUI/-toolkit as well as a class reference and screenshots for the most important ready-to-use <idx/widgets/ included,
<item>The <em/KDE-Library Class-<idx/Reference//, generated automatically by KDevelop from the KDE-Library sources, containing
descriptions for all <idx/classes/ and <idx/widgets/ including example code for their use,
<item>on the Internet, see:
  <itemize>
  <item><url url="http://www.troll.no"> for information about Qt and additional third-party <idx/widgets/,
  <item><url url="http://www.kde.org"> for information about the KDE project and developer guidelines,
  <item><url url="http://developer.kde.org"> for additional references to KDE application development.
  <item>on the KDevelop homepage <url url="http://www.kdevelop.org">
  </itemize>
</itemize>

<chapt>Overview<label id="Overview">
<p>
Looking at KDevelop, the user interface can be described by it's logical separation: the main window, the treeview and the <idx/output/
window, surrounded by the menubar, toolbars and the statusbar. This section describes the purpose of each part of the interface,
starting by the windows, followed by the bars and the functions they provide.

<sect>Main Window
<p>
The main window consists of four tabulators for which the left two are for editing purpose. First comes the Header-/Resource
window for headers and any other text files like the documentation <idx/SGML/'s, then the C/C++ window for sourcecodes. These are
followed by the Documentation window displaying in <idx/HTML/-format. At last is the <idx/Tools/ window for external programs like <idx/KIconEdit/
and <idx/KDbg/ which are embedded into the IDE. Any Tool that is registered can be accessed via the <idx/Tools/-menu; whereas the registration
of third-party programs can easily be done by a <idx/configuration dialog/ (see <ref id="Configuración general" name="Configuración general">). For a description of the Editor windows functionality, see chapter <ref id="Trabajando con el editor" name="Trabajando con el editor">, and for the <idx/Helpbrowser/, you should look at section <ref id="Using the Documentation Browser" name="Using the
Documentation Browser">.

<sect> The Class Browser and Fileviewers
<p>

<sect1>The <idx/Class Viewer/
<p>
The <idx/Class Viewer/ (<idx/CV/) shows the <idx/classes/ of your project as well as global functions and <idx/variable/s.  Opening the tree will show
all <idx/member functions/ and members with symbols for <idx/attributes/ (private, protected and public, signals and slots), so you can see the
properties of members visually without switching to the header file.  Selecting the class name will open the according
headerfile containing the class and set the cursor to the class <idx/declaration/ beginning. Selecting <idx/member functions/ will open the
<idx/implementation/ file and place the cursor at the function header.	For elements, KDevelop will look for the header file and place
the cursor at the line the element is declarated.	The <idx/classviewer/ also provides popup-menus that offer more specified options,
see <ref id="El navegador de clases" name="El navegador de clases"> for more detailed information.

<sect1>The Logical File Viewer
<p>
The Logical File Viewer (<idx/LFV/) allows sorting files by filters in groups. Individual groups can be added by the properties
entry of the project menu or by a right click on the tree items. This allows a more specialized search for files that you want to
access quickly, in the first place only showing project-included files. According to their Mime-type, the files will be opened
when selected. You will like the <idx/LFV/ for things like selecting <idx/pixmaps/- this will start <idx/KIconEdit/ (if installed on the system) in
the <idx/Tools/-window and opens the chosen picture.

<sect1>The Real File Viewer
<p>
The Real File Viewer (<idx/RFV/) shows the project directory tree with all files, so you can edit non-<idx/project files/ or files hidden by
the <idx/LFV/ like configure.in and <idx/Makefile/s.
Popup-menus also provide functions like adding or removing files to the current project.

<sect1>The Documentation Tree
<p>
The Documentation Tree (<idx/DOC/) displays all available <idx/HTML/-based documentation that is configured as books. Selecting a book will
open the first page in the Browser window. Also, a popup-menu provides personal configuration for additional <idx/HTML/-based
documentation packages.

<sect>Output window
<p>
The Output window is separated as well into a messages window, a stdin/stdout
window and a stderr window for the following necessities:
<itemize>
<item> messages window:	displays all <idx/output/ of the <idx/Compiler/. Clicking on error messages will change the edit widget to set the
cursor to the line the <idx/Compiler/ found an error.
<item> stdout window: display for terminal based applications that send messages to the standard <idx/output/ of the computer. Note that
Terminal applications are now started in an external console window.
<item> stderr window: displays all the error messages your program
produces. This is useful for testing purposes. The Output window is programmed to show up each time an external process is called,
such as make or a terminal application.
</itemize>

<sect><idx/Menubar/ Commands
<p>

<sect1>File Management and Printing
<p>
This section covers the functions that KDevelop provides about files; accessed via the File-menu in the menubar or by the
according icons in the toolbar:
<nidx/"File"-menu/
<itemize>
<item><bf/New			Ctrl+N/ Opens the "<idx/New File/" dialog, allowing to create a new file. The file can be created using different templates
and the filename has to be given as well as the path where the file will be created.<p>
<item><bf/Open			Ctrl+O/ displays the "Open File..." dialog and lets you choose a file to be opened.<p>
<item><bf/Close		Ctrl+W/ Closes the file in the top editing window<p>
<item><bf/Save			Ctrl+S/	Saves the file opened in the top editing window. If the file has not been saved yet, the "Save File As..."
dialog will be opened to let you choose a path and filename for the file to be saved.<p>
<item><bf/Save As.../ Opens the "Save File As..." dialog to let you save the current file under a new filename<p>
<item><bf/Save All/ Saves all changed files<p>
<item><bf/Print...	Ctrl+P/ Opens the "Print File" dialog where you can set various options for <idx/printing/ either using <idx/a2ps/, <idx/enscript/ or
lpr<p>
<item><bf/Quit			Ctrl+Q/ Exits KDevelop. If files are changed, you will be asked if you want to save these files.<p>
</itemize>
<p>

<sect1>Editing Files
<p><nidx/"Edit"-menu"/
Here, the "Edit" menu and the according icons in the toolbar are covered which provide editing files. Also the editing functions
are available via a context-menu in the <idx/editor/.
<itemize>
<item><bf/Undo			Ctrl+Z/ Reverts the last editing operation<p>
<item><bf/Redo	Ctrl+Y/ lets you do the last undo step again<p>
<item><bf/Cut			Ctrl+X/ cuts out a selection and copies it to the system clipboard.<p>
<item><bf/Copy			Ctrl+C/ copies a selection to the system clipboard. This also counts for selections made in the documentation
browser.<p>
<item><bf/Paste		Ctrl+V/ inserts the clipboard contents at the current cursor position.<p>
<item><bf/Indent		Ctrl+I/ Indent moves a selection to the right<p>
<item><bf/UnIndent	Ctrl+U/ UnIndent moves a selection to the left<p>
<item><bf/Insert File...Ctrl+Insert/ Lets you select a file and inserts its contents at the current cursor position<p>
<item><bf/Search...		Ctrl+F/Opens the Search dialog that looks for an expression in the current file. For a search across several
files, "Search in files..." should be used.<p>
<item><bf/Repeat Search	F3/ Repeats the last search for an expression. This also counts for searches that were made across the
documentation, where more than one hit was found in the same page. The next hit will be displayed by choosing "Repeat Search"
or F3 and signed as marked.<p>
<item><bf/Replace...		Ctrl+R/ Opens the "Search and Replace" dialog that allows the search for an expression and replaces the found
text with a new expression.<p>

<item><bf/Search in files...		Ctrl+Alt+F/Displays the "Search in files..." dialog, that handles <tt/<idx/grep// on whole directories with
wildcards. Search results are displayed with a list of the filenames, line and expression. Choosing an entry will open the file
and the cursor is set to the line of the <idx/search result/<p>
<item><bf/Select All  Ctrl+A/ Selects the whole text of the file currently opened in the top editing window<p>
<item><bf/Deselect All/ Deselects the whole text of the current file. This is often used for multiple selections so you don't have
to deselect each one separately<p>
<item><bf/Invert Selection/ Inverts the selection, meaning that a selection becomes deselected and text which is not selected
becomes selected.<p>
</itemize>
<p>

<sect1>View Configuration
<p><nidx/"View"-menu"/
The View-Menu covers closing and opening functions for windows and commands to enable/disable the tool- and statusbar as well as
to jump <idx/errors/ in the code.
<itemize>
<item><bf/Goto Line...	Ctrl+G/Opens a "Go to Line..." dialog that lets you insert a linenumber to show in the actual file. The last
linenumber is remembered and marked, so you can either jump to that line again or just enter a new linenumber you want to see.<p>
<item><bf/Next Error		F4/Jumps to the next error KDevelop detects from the <idx/output/. The <idx/output/ message of Make or other tools should
give you a descriptive help what the problem is, so you can correct the error.<p>
<item><bf/Previous Error		Shift+F4/ Jumps to the previous error that was reported.<p>
<item><bf/Dialogeditor   Ctrl+D/ Switches to the <idx/dialog editor/ <p>
<item><bf/Tree-View	Ctrl+T/ en/disables the Tree window on the left side of the main view containing the Class Browser, <idx/LFV/,
<idx/RFV/ and <idx/DOC/-tree.<p>
<item><bf/Output-View	Ctrl+B/ en/disables the Output window on the bottom of the main view.<p>
<item><bf/<idx/Toolbar// en/disables the toolbar.<p>
<item><bf/Browser-<idx/Toolbar// en/disables the browser toolbar, containing the back, forward and search buttons for the browser<p>
<item><bf/Refresh/ rescans all files to rebuild the Class Browser. The scanning progress is shown in the statusbar progress display.<p>
</itemize>
<p>

<sect1>Creating and Maintaining Projects
<p><nidx/"Project"-menu/
This section describes functions that are available in the "Project"-menu and are supposed to cover the creation and maintaining
of projects
<itemize>
<item><bf/New.../ Starts the <idx/KAppWizard/ and allows you to create a new project by choosing application type, name,
version and other options.<p>
<item><bf/Open/ Shows the Open Project dialog, where you can choose a KDevelop project file to be opened. After selection, the
project will be loaded.<p>
<item><bf/Open recent project.../ contains a submenu with the last 5 opened projects. You can open a project more easily using the
recent project menu.<p>
<item><bf/Close/Closes the current project. This is mostly done automatically when you quit KDevelop, invoke the
<idx/KAppWizard/ or open another project.<p>
<item><bf/<idx/New Class/.../Starts the class generator to create a new class that will be added to the current project. The class
generator lets you specify classname, inheritance and filenames for the new class.<p>
<item><bf/Add existing File(s)/ Opens a selection dialog where you can choose the files that you want to add to the current project and
the path where they will be copied to. If you choose a destination that was currently not included in the project, e.g. creating a new
subdirectory, KDevelop will copy the files to add to the new subdirectory and create a new <idx/Makefile.am/. After the copy process,
your project will be rebuild by <idx/automake/ and <idx/autoconf/ to include the new subdirectory into the make-process.<p>
<item><bf/Add new translation file/ Opens a language selection dialog that lets you choose the translation file language that will be
added to the project. This is mostly used by translators who can easily add their language to the project and work on the
translation without having to care about the <idx/Makefile.am/'s<p>
<item><bf/File Properties Shift+F7/ Opens the File Properties dialog showing a copy of the <idx/LFV/ and the project file options. Here, the
properties for your files have to be set like installation path and file type.<p>
<item><bf/Make messages and merge/ This is intended to create the messages file for your project. The message file is the one
containing all strings that are set up in the sources for internationalization and is used by translators to create the .po file
for their target language.<p>
<item><bf/Make <idx/API/-Doc/ Calls <idx/KDoc/ on your header files and generates a <idx/HTML/ <idx/output/ with the documentation of your project
<idx/classes/.<p>
<item><bf/Make User-Manual/ runs <idx/KSgml2Html/ on your manual <idx/SGML/ file, creating a <idx/HTML/ user manual. If <idx/KSgml2Html/ is not installed,
sgml2html will be used to do this.<p>
<item><bf/Make Distribution:/<p>
<itemize>
<item><bf/tar.gz / creates a distribution file of your current project in the project directory that is ready to ship to the end-users
containing the sources of your project. The end-user has to <tt/tar zxvf yourproject.tar.gz / to unpack it to a source directory and
use the standard commands <tt>./configure, make </tt>and <tt/make install/.<p>
</itemize>
<item><bf/Options  F7/ Opens the Project Options dialog that
lets you change various settings for your project. This could be a new version number or the <idx/compiler options/ to set to -02 for a
release with optimization.<p>
</itemize>
<p>

<sect1>Building Projects
<p><nidx/"Build"-menu/
This section describes the Build menu that covers all actions to be done with make or actions like rebuilding the project's online
help or <idx/API/ documentation.

<itemize>
<item><bf/Compile file... Ctrl+F8/Active, if the top editing window is the C++ Window. This only compiles the current <idx/implementation/
file and lets you save time in case you suspect <idx/errors/.<p>
<item><bf/Make  F8/ Invokes the <idx/make-command/ to your project and builds the target.<p>
<item><bf/Rebuild All/ Rebuilds all object files and the target of you project.<p>
<item><bf/Clean Rebuild All/ Cleans the project directory from all make-created files and rebuilds the target.<p>
<item><bf/Stop Build  F10/ Stops the current process.<p>
<item><bf/Execute F9/ Executes your target after building the program with make.<p>
<item><bf/Execute with Arguments Alt+F9/ Executes your target with arguments. First, a dialog appears to let you specify the execution
arguments (which are saved in the project for the next session), then your application uses the entered commandline. Mind that your
application program is started from the project directory directly<p>
<item><bf/Debug.../ Opens <idx/KDbg/ in the <idx/Tools/-Window to debug your
application. In this case, <idx/KDbg/ automatically opens the file containing the main() function and executes your application.<p>
<item><bf/Distclean/ Removes all files that are generated by the project like object files etc. Distclean has to be done before
distributing your project, so the distribution file doesn't contain any platform-specific files like those that were generated by your
<idx/Compiler/.<p>
<item><bf/Autoconf and <idx/automake// Calls Make on the file <idx/Makefile.dist/, located in your main project directory. <idx/Makefile.dist/ contains
all commands for <idx/automake/, <idx/autoconf/ etc. to build your project. If you added files manually or changed macros yourself, you should run
Autoconf afterwards, followed by Configure to recreate all <idx/Makefile/s.<p>
<item><bf/Configure/ Executes the configure-script generated by <idx/autoconf/. If this command cannot be executed, run Autoconf and then
Configure again.<p>
</itemize>
<p>

<sect1>Calling <idx/Tools/
<p><nidx/"Tools"-menu/
The <idx/Tools/-menu contains by default the entries for the following programs if installed: <idx/KDbg/, <idx/KIconEdit/ and <idx/KTranslator/. These are
checked by the KDevelop installation program and inserted in the given order into the menu. Invoking a tool will open the
"<idx/Tools/"-window and start the selected program inside this window. The <idx/Tools/ menu can be edited by the <idx/Tools/-entry in the Options-menu;
see <ref id="Configuring the &dquot;<idx/Tools/&dquot; Menu" name="Configuring the &dquot;<idx/Tools/&dquot; Menu">.

<sect1>Changing KDevelop's settings
<p><nidx/"Options"-menu/
The Options-menu contains all entries for invoking <idx/configuration dialog/s with which you can change KDevelop's default settings.
Major settings like those for the <idx/editor/ or <idx/printing/ have their own entries; general settings of KDevelop's behavior can be made
with the <ref id="KDevelop Setup" name="KDevelop Setup"> dialog.
<itemize>
<item><bf/Editor.../ Allows the configuration of the editor's behavior like word-breaking, selections etc.<p>
<item><bf/Editor Colors.../ Here, you can set the color-configuration of the <idx/editor/ like e.g. the background.<p>
<item><bf/Editor Defaults.../ This sets the default display like font and fontsize for the <idx/editor/<p>
<item><bf/Syntax-Highlighting / This dialog lets you configure the fonts and colors for the highlighting of several programming
languages, including <idx/HTML/.<p>
<item><bf/Documentation Browser/ In this tab-dialog, you can set the fonts, sizes and colors for the internal <idx/Helpbrowser/<p>
<item><bf/Configure Printer.../ Contains the entries for the printer <idx/configuration dialog/s according to the used <idx/printing/ program, <idx/a2ps/
or <idx/enscript/.<p>
<itemize>
<item><bf/<idx/a2ps// Configures the printer for use with <idx/a2ps/. See Printing for more information.<p>
<item><bf/<idx/enscript// Configures the printer for use with <idx/enscript/. See Printing for more information.<p>
</itemize>
<item><bf/<idx/Tools/.../ Opens the Configure <idx/Tools/ dialog. Here, you can configure the "<idx/Tools/" menu by adding or removing programs that will
be started in the <idx/Tools/-window.<p>
<item><bf/KDevelop Setup/ Opens the KDevelop Setup dialog. The first tabulator configures general settings, followed by the
key-configuration and the Documentation settings. The Documentation settings also include the generation of a new set of
<idx/HTML/-library documentation and the rebuilding of the <idx/search index/ for the <idx/Helpbrowser/.
</itemize>

<sect1>The Window Menu
<p><nidx/"Window"-menu/
The Window menu contains a list with all currently open files. This allows a quick switch to another file you're currently working
on.

<sect1>Managing Bookmarks
<p><nidx/"Bookmarks"-menu/
The Bookmarks menu is intended for adding and removing <idx/bookmarks/ you want to set in the current editing file. As KDevelop uses two
editing windows, each one configures it's <idx/bookmarks/ separately.
<itemize>
<item><bf/Set Bookmark/ Opens a context-menu with up to nine configurable <idx/bookmarks/. This allows setting a bookmark to a certain entry
in the <idx/bookmarks/ menu by logical reasons.<p>
<item><bf/Add Bookmark  Ctrl+Alt+A/ Adds the line of the current cursor position to the <idx/bookmarks/ menu as a bookmark. Mind that this
could overwrite a bookmark set with the Set Bookmark-option. If the browser is opened, a bookmark will be added to the
Browser-Window <idx/bookmarks/ menu.<p>
<item><bf/Clear Bookmarks Ctrl+Alt+C/ Clears the bookmark-entries for the top editing window or the browser, e.g. if
the Header-Window is visible and you call Clear Bookmarks, the entries for the Header-Window are deleted.<p>
<item><bf/Header-Window/ Contains the bookmark-list for the Header-Window. Selecting a bookmark will set the cursor to the selected
<idx/bookmarks/' line. Mind that <idx/bookmarks/ are only assigned to the file they are set to, so if you change to another file, the
<idx/bookmarks/ are not deleted but choosing a bookmark won't change to the file they are assigned to as well.<p>
<item><bf>C/C++-Window</bf> Contains the bookmark-list for the C/C++-Window. The preferences are the same as for the
Header-Window.
<item><bf>Browser Window</bf> Contains the browser <idx/bookmarks/. Selecting a bookmark will open the browser with the selected page.
</itemize>

<sect1><idx/Online Help/
<p><nidx/Help-menu/
The Help-menu contains entries for navigating in the <idx/Helpbrowser/ as well as entries for library and online-documentation for the
most recently used cases. Accessing additional online-documentation can be achieved with the <idx/DOC/-tree in the treeview
automatically opened (if Autoswitch is enabled) when changing to the Documentation Browser window.
<itemize>
<item><bf/<idx/Back/  Alt+ Left Arrow/ Opens the page opened before the actual one.<p>
<item><bf/<idx/Forward/ Alt+ Right Arrow/ Opens the next page of the browser-history, available after a "Back"-action.<p>
<item><bf/<idx/Search Marked Text/		F2/ Scans the search-index for text currently marked in the editing windows or the browser-window.
After the search, a result page is shown which lets you select the help-page to switch to. After choosing a page, the browser will
highlight the found entry for the expression the search was invoked for. With the F3 key the next <idx/search result/ on the same page
will be displayed if more than one hit was reported for the search on one page.<p>
<item><bf/<idx/Search for Help on...//Opens the Search for Help on... dialog that lets you search for a specific expression you want
help on.
<p>
<item><bf/<idx/User Manual/		<idx/F1// Opens the User's Manual to KDevelop index page so you have access to this manual.
<p>
<item><bf/<idx/Programming Handbook/ / Opens the <htmlurl url="programming/index.html" name="KDevelop Programming Handbook"> index
page to access the programming manuals
<p>
<item><bf/<idx/Tip of the Day// Opens the Tip of the Day dialog to inform you about KDevelop's
features.
<p>
<item><bf/<idx/KDevelop Homepage// Opens the KDevelop Homepage in the browser window if Internet access is provided.
<p>
<item><bf/<idx/Bug Report/.../ Opens the KDevelop Bug Report dialog, where you can send a bug-report directly to the KDevelop Team by
email. See <ref id="Bug Reporting" name="Bug Reporting">
<p>
<item><bf>C/C++ <idx/Reference/</bf> Displays the language reference index page. If the
reference is not installed, an error page shows you how to get the reference and how to install it correctly.
<p>
<item><bf/<idx/Qt-Library// Changes to the index page of the Qt-library documentation provided with your copy of the Qt-library.
<p>
<item><bf/<idx/KDE-Core-Library// Opens the class-index file of the KDE-Core library documentation.<nidx/kdecore/
<p>
<item><bf/<idx/KDE-GUI-Library//  As above for the <idx/GUI/-library<nidx/kdeui/
<p>
<item><bf/<idx/KDE-KFile-Library// As above for the KFile-library
<p>
<item><bf/<idx/KDE-HTML-Library// As above for the <idx/HTML/-library<p>
<item><bf/<idx/Project-API-Doc// Changes to the project's class-documentation index file.<nidx/KDoc/<nidx/API/
<p>
<item><bf/<idx/Project-User-Manual// Opens the User manual's index file of your current project. This can be used to review the
<idx/HTML/-<idx/output/ generated by <idx/KSgml2Html/
<p>
<item><bf/About KDevelop.../ Shows the aboutbox of KDevelop containing the used version number and the authors' names and
email-addresses as well as reference to the licensing of KDevelop.
</itemize>

<sect><idx/Toolbar/ Items
<p>
KDevelop provides quick access to a various set of commands by it's toolbars. These are the standard and the browser toolbar; in
<idx/dialog editor/ mode only the standard toolbar is visible. Both can be en-/disabled by the according menu entries in the "View" menu; also
dragged out of the main window and replaced on each side of the working area.

<sect1>The Standard <idx/Toolbar/
<p>
The standard toolbar provides quick access to the most recently used functions for file processing and editing as well as building your
application. The buttons execute the following commands from left to right:
<nidx/"File"-menu/<nidx/"Edit"-menu/<nidx/"Project"-menu"/<nidx/"Build"-menu/<nidx/debugging/<nidx/Tree-View/<nidx/Output-View/<nidx/execute target/

<itemize>
<item>Open Project - shows the open project dialog
<item>Open File - shows the open file dialog and contains a delayed popup to fast select the current project header and source files.
<item>Save File - saves the currently opened file to disk
<item>Print File - opens the printer dialog
<item>(separator)
<item>Undo - reverts the last action
<item>Redo - executes a reverted action again
<item>Cut - cuts out the current selection
<item>Copy - copies the current selection to the system clipboard
<item>Paste - pastes the current clipboard contents to the actual cursor position
<item>(separator)
<item><idx/Compile File/ - compiles the file currently visible in the source file window. In Dialogeditor mode replaced by the Generate Files
button.
<item>Make - invokes make on the project
<item>Rebuild All - rebuilds the project
<item>Debug - opens <idx/KDbg/ with the application binary for <idx/debugging/ in the <idx/Tools/- window
<item>Execute - runs the application target binary
<item>Stop - cancels the current process
<item>(separator)
<item>Dialogeditor - switches to Dialogeditor mode. There, the button is replaced by a Sourcecode <idx/editor/ button
<item>Tree-View - en-/disables the treeview and works as a toggle button to display the current state
<item>Output-View - en-/disables the <idx/output/ view and works as a toggle button to display the current state
<item>(separator)
<item>What's this..? help button - changes the cursor to a question arrow and lets you get information about <idx/GUI/ components of KDevelop
</itemize>

<sect1>The Browser <idx/Toolbar/
<p>
The <idx/browser/ toolbar is another toolbar that provides a lot of useful commands for browsing files and the <idx/documentation/. The
toolbar contains:
<nidx/documentation browser/<nidx/Help-menu"/
<itemize>
<item>the Class combo box - lets you select a class of the current project to browse to
<item>the Method combo box - lets you select a method of the current class and browses to the <idx/implementation/ of the method
<item>the Class-assistant button - on a single click will bring you to the <idx/declaration/ of the method currently selected. Contains a
delayed popup to access the Classtools for adding Classes, Methods and Attributes as well as the browsing commands.
<item>Back - browses back in the <idx/documentation browser/ history; contains a delayed popup to select a certain page of the back history.
<item>Forward - browses forward in the <idx/documentation browser/ history; contains a delayed popup to select a certain page of the forward
history.
<item>Stop - stops the browser from loading a documentation file request
<item>Reload - reloads the currently displayed page
<item>Home - opens the KDevelop User Manual index page in the browser
<item>Search Marked Text - searches the documentation index for the selected text; works with the browser and the <idx/editor/ windows
<item>Search for Help on... - opens the the Search for Help on.. dialog to let you enter a keyword to search in the documentation
</itemize>

<sect>Keyboard Shortcuts
<p>
This section handles the predefined as well as the standard values for configurable keyboard commands used in the KDevelop IDE.
You should see section <ref id="Changing Keyboard Shortcuts" name="Changing Keyboard Shortcuts"> for a detailed explanation how
to change assigned values to commands.

<sect1>Shortcuts for Text Processing
<p>
<nidx/Keyboard Shortcuts/<nidx/Shortcuts/
<sect2>Cursor Movements<p>
<code>
one letter to the left                           Left Arrow
one letter to the right                          Right Arrow
one word to the left                             CTRL+Left Arrow
one word to the right                            CTRL+Right Arrow
one line upwards                                 Up Arrow
one line downwards                               Down Arrow
to the beginning of the line                     POS 1
to the end of the line                           END
one page up                                      PageUp
one page down                                    PageDown
to the beginning of the current file             CTRL+PageUp
to the end of the current file                   CTRL+PageDown
</code>
<p>

<sect2>Text Selections
<p>
<code>
one letter to the left                           SHIFT+Left Arrow
one letter to the right                          SHIFT+Right Arrow
one word to the left                             CTRL+SHIFT+Left Arrow
one word to the right                            CTRL+SHIFT+Right Arrow
one line upwards                                 CTRL+Up
one line downwards                               CTRL+Down
to the beginning of the current line             CTRL+POS 1
to the end of the current line                   CTRL+END
one page up                                      SHIFT+PageUp
one page down                                    SHIFT+PageDown
to the beginning of the current file             CTRL+SHIFT+PageUp
to the end of the current file                   CTRL+SHIFT+PageDown
</code>
<p>

<sect2>Inserting and Copying Text, Tabulators
<p>
<code>
en/disable insertmode                            INS
copy selection to the clipboard                  CTRL+C, CTRL+INS
insert text from the clipboard                   CTRL+V, SHIFT+INS
delete current line                              CTRL+K
insert line after current line                   END, then Enter
insert line before current line                  POS 1, then Enter
undo editing step                                CTRL+Z
redo an undo step                                CTRL+Y
tabulator                                        TAB
</code>
<p>

<sect2>Deleting Text
<p>
<code>
delete letter left of cursor position            Backspace
delete letter right of cursor position           Delete
delete selected text                             Select text, then Backspace or Delete

</code>
<p>

<sect2>Searching Text within the <idx/Editor/
<p>
<code>
open Goto Line... dialog                         CTRL+G
open Find Text dialog                            CTRL+F
repeat last search                               F3
open Search and Replace dialog                   CTRL+R

open Search in Files dialog (grep)               CTRL+ALT+F
search marked Text with Grep                     SHIFT+F2

locate next error                                F4
locate previous error                            SHIFT+F4

</code>
<p>

<sect2>Searching Text with the Documentation Browser
<p>
<code>
search selected editor text in documentation     F2
search selected browser text in documentation    F2
display next search hit on the same page         F3

search selected browser text within project			 SHIFT+F2
</code>
<p>

<sect2>Browser Shortcuts
<p>
<code>
previous page                                    ALT+ Left Arrow
next page                                        ALT+ Right Arrow
</code>
<p>

<sect2>Managing Bookmarks
<p>
<code>
add bookmark                                     CTRL+ALT+A
clear bookmark list                              CTRL+ALT+C
</code>
<p>	

<sect1>Shortcuts for <idx/Toolbar/ Symbols
<p>
<code>
Symbol "Open File"                               CTRL+O
Symbol "Save File"                               CTRL+S
Symbol "Print File"                              CTRL+P
Symbol "Undo"                                    CTRL+Z
Symbol "Redo"                                    CTRL+Y
Symbol "Cut"                                     CTRL+X
Symbol "Copy"                                    CTRL+C
Symbol "Paste"                                   CTRL+V
Symbol "Compile File"                            CTRL+F8
Symbol "Make"                                    F8
Symbol "Execute"                                 F9
Symbol "Execute with Arguments"                  ALT+F9
Symbol "Dialog Editor"                           CTRL+D
Symbol "Back"                                    ALT+Left Arrow, if browser opened
Symbol "Forward"                                 ALT+Right Arrow, if browser opened
Symbol "Search Marked Text"                      F2
</code>
<p>

<sect1>Window Management
<p>
To switch to a certain window, press ALT plus the underlined letter in the window title, e.g. <idx/Tools/ would be Alt+T
<p>

<sect1>Shortcuts to Compilation Processes
<p>
<code>
Compile current sourcefile                       CTRL+F8
Build current project target                     F8
Execute target after Build process               CTRL+F9
Execute target with Arguments                    ALT+F9
Stop the current process                         F10
</code>

<chapt>El sistema de ayuda<label id="El sistema de ayuda">
<p>
Most of KDevelop's strength is accumulated in the Help System.  It is also to be understood as an example of how to extend your own
KDE application with a complete set of help functionality, and is, in part, already realized in the template applications, so
KDE/Qt <idx/application framework/s generated with the <idx/KAppWizard/ do already contain the basic functionality for statusbar help and
documentation, that only has to be extended by the programmer. This section therefore introduces into the usage of the general
help provided within the IDE as well as to show the usage of the <idx/Helpbrowser/, which, by intelligent use, will make it very easy to
get the information you need for development.

<sect>The "What's this ?"-Button and <idx/Quickhelp/
<p>
Looking at KDevelop's top toolbar, you will see the "What's this?" button on the right end. By selecting the button, the cursor
will change to a pointer with a question mark on the right, as is the same as the button in the toolbar. Now, you can select any
visible part of the KDevelop user interface and click on it. This will result in displaying a help-window giving you a short
description of the function this part gives you or what it can do for you. Included are the main view, the tree-views and the
toolbars, for which every button help is provided. After another mouse click or a keyboard input, the What's this? help window
disappears and your cursor is set to the last active position. Mind, that, if you place the mouse pointer over a button, it gets
raised and after a short time, you will get a Quick-Tip-window, describing the function the button represents in the menubar; this
will disappear if you move the mouse pointer away.

For user interaction dialogs, <idx/Quickhelp/ provides you help windows with a short description of the selected item you want help for.
These are accessed by a right-button mouse click to the item, a context-menu pops up that allows the selection of "Quick-Help".
Selecting this will pop up the help window. This is always useful for dialogs where you can't see the action's purpose for as long
as you are not familiar with KDevelop. Mind that most dialogs offer a Help-button which will show you the detailed context-help
for the dialog's options within the provided online-manual in the help-browser.

<sect> The <idx/Statusbar/ Help
<p>
The statusbar of KDevelop offers you many functions that inform you about the current activity state as well as "status messages"
offering a short description for commands.

<sect1> <idx/Statusbar/ Entries
<p>
The <idx/Statusbar/ contains:
<enum>
<item> a general message field, most left. This is used for help messages and displays the current activity.
<item> the progressbar, indicating the progress for actions that require a comparably long time to be finished, such as saving
files and the scan-progress of the Class Browser. The progressbar only appears during those processes are executed.
<item> an Insert/Overwrite indicator. It shows the <idx/editor/ mode for insert actions by INS for Insert mode and OVR for Overwrite
mode. The mode can be changed by the INS-key on the keyboard.
<item> a line counter, displaying the current line the cursor is placed.
<item> a column counter, indicating the current column position of the cursor in a line.
</enum>

<sect1> Help Messages
<p>
The statusbar informs you about the action of menu entries if you select a menu within the menubar and select an action without
executing it. Further, if you press on a toolbar icon, but without releasing the mousebutton, the help message for the button is
displayed in the same way as for the menu entries. You can prevent the execution of the selected icon by moving the mousepointer
away from the icon, still holding the button pressed. If the cursor is away, release the mousebutton.

For actions that are currently executed, KDevelop displays the action. This counts for processes running in the background
such as saving files as well as for dialogs. If the process has exited such as a make-invocation, the statusbar display
changes back to "Ready" state.

Also, when using the <idx/documentation browser/, the statusbar displays link urls for as long as the cursor is placed over an URL link
in the browser window. Therefore, you can easily find out if the file is a local or a remote file only accessed by network
connection.

The caption of the KDevelop Project Editor shows you the currently opened filename in the top window. This would be a <idx/HTML/ file
for the <idx/documentation browser/ or a text file for the editing windows. Further, the Project name is displayed, so you have constant
control where you are and what you're currently working at.

<sect> Configuring the <idx/HTML/ Browser
<p>
The browser included in KDevelop is completely <idx/HTML/-based, therefore you can specify the usual options like background and the
like. You can set all preferences by the "Documentation Browser"-entry of the "Options"-menu.
The <idx/configuration dialog/ shows you two tabulators; the first for setting the font preferences, the second for color selection.

<sect1>Font Preferences
<p>
The first option for the font display is the size. Available are small, medium and large. The best display for normal use
is set to small by default.
For the font selection you have to specify a standard font for normal text as it appears in <idx/HTML/ documents; the fixed font is the
one used for displaying e.g. code within the <idx/HTML/ file.

<sect1>Color Preferences
<p>
The color preferences dialog allows configuration of background, normal text, URL Link and followed link color. The
colored buttons on the right are displaying the current settings; selecting a button will result in opening the "Select Color"
dialog. There, you can specify the color either by choosing a System Color, a custom color, select the color by the multi-colored
window or by setting the values directly. The middle contains a preview for the color selected.

Further, you can specify if the browser should underline links to easier detect them visually and if you like to use your own
colors always independent of the page's preset ones. "Apply" will execute all changes, while "OK" will apply changes and close the
dialog. "Cancel" leaves all settings untouched and exits the configuration.

<sect> Using the Documentation Browser<label id="Using the Documentation Browser">
<p>
The <idx/documentation browser/ allows quick and easy access to all manuals and documentations that are provided with KDevelop or
generated automatically, including online-documentation for the <idx/KDE-libraries/ and your project documentation. Plus, the
Documentation Tree in the tree-view lets you customize a special "Others" folder that contains all individually added
documentation.

<sect1>Requirements
<p>
To make use of all features of the <idx/Helpbrowser/, you should have <idx/KDoc/ and <idx/glimpse/ installed. <idx/KDoc/ will generate all kind of online
class-documentation for the <idx/KDE-libraries/ during the <idx/setup/ process, but can also invoked by option in the <ref id="Configuración general" name="Configuración del KDevelop">. For the generation of an <idx/API/ (Application Programming Interface) Documentation for your
project's <idx/classes/, <idx/KDoc/ is also used and called by the Project-menu, entry "Make <idx/API/-Doc". This will process all current header files
of the project plus the addition of a cross-reference to the Qt and <idx/KDE-libraries/ if those are available in the <idx/Helpbrowser/. For
the generation of the project handbooks, you should have <idx/KSgml2Html/ (provided with the <idx/KDE-SDK/) and, as a minimum, <idx/SGML/-tools
installed on your system. To extend and change your project's online-documentation, you have to edit the documentation file for your
project by selecting it in the <idx/RFV/. After saving your changes, call "Make User-Manual" from the Project-menu. In case <idx/SGML/tools detect
formatting <idx/errors/, those will be displayed in the <idx/output/ window allow you to find the error line directly. The program "<idx/glimpse/"
is used to create a personal search-index for your documentation automatically. The index is generally build during the
installation process, but can also be build with the <ref id="Configuración general" name="Configuración de KDevelop"> dialog. For a description of
the provided search functions see <ref id="Using the Searchindex" name="Using the Searchindex">.

<sect1>Provided Documentation
<p>
The KDevelop IDE comes with two sets of online-documentation, which can be accessed either via the Help-menu or by the Doc-tree in
the Tree-View in the KDevelop folder. The first book provided is this online-handbook containing all information you need towards
installation, configuration, available functionality and introduction to application development. The second book is <htmlurl
url="programming/index.html" name="The KDevelop Programming Handbook"> in it's first edition. The programming handbook covers most
questions related to the creation and extension of projects that work with KDevelop. By tutorials the user gets an introduction to the
rich facilities that applications created with the Qt- and/or <idx/KDE-libraries/ have to offer as well as given a guideline for
ensuring <idx/KDE/-compliance, which covers the same instructions given on the Internet site at <url url="http://developer.kde.org">.
However, the programming handbook cannot replace any additional documentation available in printed or electronic form about the C++
programming language as well as about the usage of the Qt-library in certain terms.

The C/C++-<idx/Reference/ used with KDevelop is currently only available on the KDevelop homepage at <url
url="http://www.kdevelop.org">. On distributions the reference may be included, see your distribution installation program index for
more information. It can be installed easily by downloading and copying the sourcefile to the main KDE-directory ($KDEDIR). There, you
have to untar it as root with <tt/tar zxvf c_c++_reference.tar.gz/, the reference will then be copied the documentation directory of
KDevelop. For uninstalling the reference documentation you just have to delete the "reference" folder under
($KDEDIR)/share/doc/HTML/default/kdevelop/reference.

The Qt/<idx/KDE-libraries/ documentation folder allows direct access to the <idx/HTML/-online documentation of your copy of the
Qt-library. The path to the library documentation is usually automatically detected by the KDevelop installation program, but can be
set manually in the <ref id="Configuración general" name="Configuración de KDevelop"> dialog. Also, all available documentation for the
<idx/KDE-libraries/ are listed in order of the library name, so if you would use <idx/classes/ of a certain library it is easy to
determine the library type to be added to the <idx/Linker/ settings in the project. Mind that the whole KDE-Library documentation is
only accessible when generated by <idx/KDoc/- so this program, included in the <idx/KDE-SDK/, has to be installed before the
documentation can be generated. As the installation program of KDevelop does this automatically, it should be installed before running
the KDevelop Setup. If this is not the case and the documentation cannot be build, you are able to create it afterwards at any time
with the <ref id="Configuración general" name="Configuración de KDevelop"> dialog.

The documentation tree also contains the "Others" folder which is intended to contain all personally customized
documentation as described below. Finally, the Doc-Tree allows access to the <idx/API/ and the Manual for your current
project.

<sect1>Adding Documentation to the <idx/Helpbrowser/
<p>
To customize your <idx/Helpbrowser/, open the Tree-View and select the "<idx/DOC/" Tabulator. You will see an opened tree containing four folders.
The "Others" folder is, by default, empty. On a right mousebutton click over this folder, a context menu opens that has an entry "Add
Entry". Select this to open the Add Entry dialog where you have to enter two values: the upper one for the name that will be displayed
for the documentation within the Doc-tree, and, below that, a file-entry line. Here, you have to enter the path and filename to the
start page that will be opened by the selection of the entry later. You can enter the path and filename directly or by selection of the
pushbutton on the right to open a file-chooser dialog. This allows a quick browsing on your system to the path for your start page. Mind
that only <idx/HTML/-documentation can be selected, so only <idx/HTML/ files are allowed to choose. Selecting OK will add the entry to the Doc-tree
and is available directly.

<sect1>Using the Searchindex<label id="Using the Searchindex">
<p>
KDevelop includes a set of functions to help you search information within <idx/HTML/ documentation. To use these features, your system
needs to have the program "<idx/glimpse/", a free database generator, installed, which creates the <idx/search index/ and executes searches
within the documentation. To set up the index, see <ref id="Configuración general" name="Configuración de KDevelop">. The index is also
automatically generated during the installation program.

The search functions are available through several ways which you can choose from:
<enum>
<item>in the <idx/editor/, select the text you want to have help on or place the cursor in the word that you want to look for. Then
press the right mouse button and select look up: "expression" This can also be done by selecting "Search Marked Text" from the
Help-menu, the shortcut key F2 or by selecting the Search icon from the toolbar.
<item>in the Documentation browser select the text you want to look up and press the right mouse button, select look
up:"expression" or select "Search Marked Text" or the search icon as above.
<item>if you want to search for a specific keyword, select "Search for Help on..." in the Help-menu or select the "Search for Help
on..." icon from the toolbar, opening a search dialog where you can enter the expression you want to get information for.
</enum>
Direct access to specific documentation is given by selecting the according icon in the "<idx/DOC/" -tree-view or by the Help-menu
entries.

The <idx/Helpbrowser/ also offers support for <idx/grep/ to search for a selection within your current project, e.g you've opened the documentation
page for the <tt/KTMainWindow/ class (KDEUI library) and you want to know where in your code <tt/KTMainWindow/ appears. Mark
<tt/KTMainWindow/ and either select "Grep: KTMainWindow" or press Shift+F2. The "Search in Files" dialog opens with the results about
your <idx/grep/ search directly. Then you can choose an result line to jump to the according sourcecode.

<chapt>Trabajando con el editor<label id="Trabajando con el editor">
<p>
An important part of the integrated development environment is the <idx/editor/. You're using it for:
<itemize>
<item>creating, opening and saving source and <idx/project files/
<item>editing source and <idx/project files/
<item>writing your <idx/SGML/ documentation
<item><idx/printing/ your <idx/project files/
</itemize>
Generally, the <idx/editor/ itself doesn't do much difference in comparison to other editors; especially as it is a build-in version of
the popular KWrite, also known as the "Extended Editor". If you're familiar with that, you won't have any problems using it for
managing your projects. In addition to normal editors, KDevelop contains a new <idx/printing/ system, that is far more extended for use
with sourcecodes- and you can choose between the <idx/printing/ program you want to use.

This section gives you more information about how to handle your <idx/project files/ and to make you more familiar with the <idx/editor/'s
functionality. A lot of Unix-hardliners would prefer using Emacs or XEmacs- they're fine with that. But it isn't necessary for
easy programming, and especially for beginners, to work themselves into powerful editors which shall, in the result, only allow
you to enter your code.

<sect>Managing Project Files
<p>
The following sections describe how to create, save, open and close your <idx/project files/ you need to edit- mind that this doesn't
include translation files or <idx/pixmaps/. Those are recognized automatically and the according editing program like <idx/KTranslator/ opens
those files for you.

To give you an easy access to your files, KDevelop contains two easy-to-handle tree-views, similar to a filemanager, that recognize
if you selected a file, and opens it in the according <idx/editor/ window. The main view contains two windows that are used
independently, but connected via the Project Editor, so you can do all menubar actions the same way. The intention behind this is
that it allows you to handle two windows at the same time, although only one is visible. The C/C++ window thereby takes another
task, which allows you to easily compile your sources one by one, so you can check the implementations without having to run a
complete build-process over your project.

This can be done when having the C/C++ window on top. Select "<idx/Compile File/" from the Build-menu or press the according button in
the toolbar. Your file gets saved and compiled, and you can control any <idx/errors/ by the <idx/Compiler/ <idx/output/ in the <idx/output/ window.

Within the IDE you can open as many text files as you like. All opened files are listed in the Window-menu, so you can switch
between them by selecting the according filename from the menu. Further, the actual opened file is displayed with its name in the
window frame of KDevelop.

<sect1>Creating and Saving Files
<p>
To create a new file, choose "New" from the File-menu. This opens the "<idx/New File/" dialog, where you can specify the filename and type.
Additionally, you have to set the destination directory as well if the file is added to the project or not. Finally, you can also use
your header template for the project in case you want to add a new sourcefile without generating a new class by the Class-Generator.

After the file has been created, you can edit the new file as usual; if you have to switch between different files, you can always
turn back to the file either via the file-trees or by the Window-menu.

For saving any changes, KDevelop offers a whole variety of options. The standard way would be to save the file by selecting "Save"
or "Save As" from the File-menu or by the Save-button on the toolbar. For saving all changed files at once, you could as well
select "Save all" from the File-menu.

Now, when working on a project, it is very annoying if something critical happens while you have done a lot of changes on your
files; sometimes you will bite yourself that you have forgotten to save the changes. KDevelop takes care of this by offering
"Autosaving", which is by default enabled and set to save all files in intervals of 5 minutes. To select another saving period or
to disable this, see <ref id="KDevelop Setup" name="KDevelop Setup">, where the <idx/setup/ options are described.

Additionally, KDevelop takes care for all changes if you open another project or exit KDevelop. You will be asked for saving the
changed files, where you also have the option to specify which one to save and which you want to stay unsaved. Further, when
invoking any build-processes, your files get saved automatically, so you won't ever wonder why your application doesn't run the
way you expected it to do after your changes to the source files. The only exception is the "<idx/Compile File/" command, which only
saves the currently opened source file visible in the source <idx/editor/ window.

<sect1>Opening and Closing Files
<p>
To open a source file, you have a lot of options as well. One way could be, as the standard for editors, to select "Open" from the
File-menu. You will be presented an "Open File" dialog, which allows you to choose the file you want to edit. Another, probably
more frequently used way is to select the file from the <idx/LFV/, the Logical File Viewer, or the <idx/RFV/, the Real File Viewer (see <ref
id="Overview">). The advantage of the file trees is that they provide a quick visual access to your files, especially the <idx/LFV/,
which only displays your <idx/project files/ by their type, collected into folders. You can as well configure the <idx/LFV/ towards sorting
your files in another manner by a right mouse click on the tree. Select "New Group" from the popup-menu, and you can configure a
new group, or select "Edit Group" to install new file filters by specifying the group's file extensions, separated by commas.

The standard file groups for a project generated by <idx/KAppWizard/ are the Headers, Sources, GNU and Others. Additionally, after
adding a translation file, KDevelop adds a folder "Translations", containing your *.po files.

To close files, select the file to close from the Window-menu, which loads the opened file into the front <idx/editor/. Then select
"Close" from the File-menu. If your file has been changed, you will be asked to save it. When closing a project, all currently
opened files will be checked for changes and you will be asked for saving as well.

<sect>Navigating within Files
<p>
The following gives you a general guideline how to locate certain positions within your files for a quicker access.

<bf>&raquo How to find a certain line in a file</bf>

<enum>
<item>Select "Goto Line" in the "View"-menu or press CTRL+G. The dialogfield "Goto Line" appears.
<item>Insert the linenumber you want to go to.
<item>Press OK.
</enum>

<bf>&raquo How to set a bookmark</bf>

<enum>
<item>Set the cursor to the line you want to access via a bookmark
<item>Select "Set Bookmark" from the "Bookmarks"-menu.
<item>A popup-menu opens that allows you to select the bookmark number you want to set for the new bookmark.
<item>Select the bookmark number.
</enum>

Another way to set <idx/bookmarks/ would be to select "Add Bookmark" from the "Bookmarks"-menu. This sets a bookmark to the current line
and appends it to the <idx/bookmarks/-list. The <idx/documentation browser/ also offers setting a bookmark to the current page by a context menu
entry "Add Bookmark".

<bf>&raquo How to delete <idx/bookmarks/</bf>

The <idx/bookmarks/ are set for each editing window separately- mind that your <idx/bookmarks/ aren't connected to a certain file you set the
bookmark for. To delete all bookmarks, select "Delete Bookmarks" from the "Bookmarks"-menu. This deletes the <idx/bookmarks/ for the
window actually on top, either the Header window, the C++ window or the browser window.

<bf>&raquo How to go to a bookmarked line</bf>

<enum>
<item>Select the "Bookmarks"-menu and open the popup menu containing the <idx/bookmarks/ for the window containing the bookmark you want
to view; either the C++-Window or the Header-Window entry.
<item>Select the bookmarked line.
</enum>

Selecting a bookmark for the browser window will open the browser and loads the page.

<sect>Working with Keyboard Shortcuts
<p>
For using the <idx/editor/, you should make yourself comfortable with some keyboard <idx/shortcuts/ that make it easier to position the cursor
and edit the file. The complete shortcut reference is also listed in section <ref id="Overview" name="Overview">.

<code>
one letter to the left                           Left Arrow
one letter to the right                          Right Arrow
one word to the left                             CTRL+Left Arrow
one word to the right                            CTRL+Right Arrow
one line upwards                                 Up Arrow
one line downwards                               Down Arrow
to the beginning of the line                     POS 1
to the end of the line                           END
one page up                                      PageUp
one page down                                    PageDown
to the beginning of the current file             CTRL+PageUp
to the end of the current file                   CTRL+PageDown
one letter to the left                           SHIFT+Left Arrow
one letter to the right                          SHIFT+Right Arrow
one word to the left                             CTRL+SHIFT+Left Arrow
one word to the right                            CTRL+SHIFT+Right Arrow
one line upwards                                 CTRL+Up
one line downwards                               CTRL+Down
to the beginning of the current line             CTRL+POS 1
to the end of the current line                   CTRL+END
one page up                                      SHIFT+PageUp
one page down                                    SHIFT+PageDown
to the beginning of the current file             CTRL+SHIFT+PageUp
to the end of the current file                   CTRL+SHIFT+PageDown
en/disable insertmode                            INS
copy selection to the clipboard                  CTRL+C, CTRL+INS
insert text from the clipboard                   CTRL+V, SHIFT+INS
delete current line                              CTRL+K
insert line after current line                   END, then Enter
insert line before current line                  POS 1, then Enter
undo editing step                                CTRL+Z
redo an undo step                                CTRL+Y
tabulator                                        TAB
delete letter left of cursor position            Backspace
delete letter right of cursor position           Delete
delete selected text                             Select text, then Backspace
</code>
<p>

<sect>Edit Windows Settings
<p>
The <idx/editor/ inside KDevelop can be configured towards special editing needs with a global effect on all editing windows. Thereby
you can set the color modes, highlighting colors (also configurable in reference to the programming language of the file) and
automatic text settings like tab-with and selection modes. The following describes how to set these options by the configuration
dialogs provided in the "Options"-menu.

<sect1>General Settings
<p>
The <idx/editor/'s general settings can be configured with the "Editor" entry in the "Options"-menu. Select the according values and
press OK after you finished with your configuration.

<sect2>Edit Options
<p>
<descrip>
<tag/Auto Indent:/	this sets the editor to place the cursor below the first literal when a new line is entered.
<p>
<tag/Backspace Indent:/ this option sets the cursor below the first literal of the line above when backspace is pressed.
<p>
<tag/Word Wrap:/ words are taken into the next line after the column set in "Wrap Words At:"
<p>
<tag/Replace Tabs:/ tabulators in the current text are replaced with tabulators of the "Tab Width:" value
<p>
<tag/Remove Trailing Spaces:/removes trailing spaces
<p>
<tag/Wrap Cursor:/ sets the cursor to the end of the last line when backspace enters the beginning of a line
<p>
<tag/Auto Brackets:/ creates a closing bracket in front of the cursor when a bracket (any kind) is opened.
</descrip>

<sect2>Select Options
<p>
<descrip>
<tag/Persistent Selections:/ selections made stay marked after setting the cursor to a different place
<p>
<tag/Multiple Selections:/ allows multiple independent selections within the text
<p>
<tag/Vertical Selections:/ allows vertical selections of text
<p>
<tag/Delete On Input:/ deletes a selection when writing in the selection.
<p>
<tag/Toggle Old:/ allows only one selection. A selection made gets deselected when another selection is made.
<p>
<tag/Wrap Words At:/ sets the maximum columns that a line can have. The word that contains a letter that reaches over this value
will be automatically broken into the next line.
</descrip>

<sect1>Colors
<p>
For changing the <idx/editor/'s general appearance, you can define a set of colors that the editor uses by selecting "Editor Colors"
from the "Options"-menu. You can configure colors for:
<itemize>
<item><bf/background:      /        the editor's background
<item><bf/text background:  /     	the background of displayed text
<item><bf/selected:         /       the color of selected text
<item><bf/found:            /       the color of text found by a search via the menu "Edit"-"Search", "Repeat search" and "Replace".
<item><bf/selected + found: /       the color of text selected to search for and found
</itemize>

<sect1>Syntax Highlighting
<p>
The syntax-highlighting mode of KDevelop's <idx/editor/ can be configured by two dialogs; first you can set default colors for
syntax-highlighting by the "Editor Defaults" entry in the "Options"-menu. There, you can set colors and fonts as well as the
fontsize for e.g. keywords. Select the default item and set all needed options.

The second <idx/configuration dialog/ is accessed by the "Syntax-Highlighting" entry in the "Options"-menu. This allows you to set the
file filters for the programming language, e.g. *.cpp, *.h  for C++. Then select the item that you want to configure. If you wish
to use the default values you've set in the "Editor Defaults" dialog, select the "default" checkboxes in the Item-style and
Item-Font sections. This reads the default settings for the selected item. After pressing OK, your new values will be enabled and
used by the <idx/editor/.

<sect>Searching and Replacing
<p>
<sect1>Single File Search
<p>
<bf>&raquo How to find one or more characters in the actual editing window</bf>
<enum>
<item>Select "Search" from the "Edit"-menu. This opens the search dialog.
<item>Specify the expression to search for in the edit field. The drop-down menu offers selecting a previous search expression.
<item>Select additional options like "Whole Words only"
<item>Press OK.
</enum>

To repeat searching for an expression entered in the search dialog, press F3.

<sect1>Searching over Several Files
<p>
As the search function only is referencing searches over a single file that is currently visible, you're limited to this. But often
you want to search for the same expression overall your project. Therefore, KDevelop contains a <tt/<idx/grep//-dialog, which
lets you search over all files that you specify either by setting the directory to start the search from and/or by mime-type.
Specifying the exact directory and the mime-type will therefore reduce the time that KDevelop needs to read your files and display
the results. To start a search over several files, select "Search in files..." from the "Edit"-menu. The search dialog opens and
lets you enter:

<itemize>
<item>The expression to search for (the pattern)
<item>The template used for the search
<item>The mime-type of files to search in
<item>The directory to start form
<item>If the search is recursive over all included subdirectories
</itemize>

By default, the <idx/grep/-dialog is set to start at your project directory and works recursively over <idx/implementation/ and header files.

You can even extend your search pattern by using the following options:

<enum>
<item><bf/./ Match any character
<item><bf/^/ Match the beginning of a line
<item><bf/$/ Match the end of a line
<item><bf/\< / Match the beginning of a word
<item><bf/\> / Match the end of a word
</enum>

For a repeating search, you can also use the available operators:
<enum>
<item><bf/?/ The preceding item matches less than once
<item><bf/*/ The preceding item is matched zero or more times
<item><bf/+/ The preceding item is matched once or more times
<item><bf/{ n }/ The preceding item is matched exactly <em/n/ times
<item><bf/{ n,}/ The preceding item is matched <em/n/ or more times
<item><bf/{,n }/ The preceding item matches less than <em/n/ times
<item><bf/{n,m}/ The preceding item matches at least <em/n/ times but less than <em/m/ times
</enum>

Backreferences to bracketed subexpressions are also available by the notation <em/\n/.

After specifying your search, press "Search". The results are then displayed in the result-window. To jump to a file and line
number, select the resultline and press Enter or double click the result. The editor will automatically open the according file
and place the cursor to the line of the result. This allows a complete specification for any search action and give out exact
results.

KDevelop offers also some more specialized functionality to use <idx/grep/ within the <idx/editor/s and the browser. Select the expression you want
to search for in either of the windows and press SHIFT+F2 or select "<idx/grep/:&lt;your_expression&gt;" from the right button popup menu.
This will ask <idx/grep/ to search for the selection in your project directory's files and will show the results immediately. Switching to
the result works as described above. From within the editor window, it lasts to place the cursor over a word and start searching; the
word under the cursor will be the search pattern.

<sect1>Searching within Documentation
<p>
While working on a project, you often need to have information about the parameters of <idx/member functions/ you want to use- most
often you remember the function's name that matches your needs, but the parameters are a very hard thing to keep in mind.
Therefore, and for other purposes that may occur, KDevelop contains a search functionality that combines searching expressions
that appear in your files with the <idx/documentation browser/. To make use of this search functionality, you should have set up the
<idx/documentation browser/ correctly and created the search database. For invoking a search through the documentation, do the
following:

<enum>
<item>place your cursor at the word you want to search or mark an expression
<item>select "Search Marked Text" from the <idx/Help-menu/ or press the right mouse button to open the context menu; then select
"Look Up: "expression".
<item>after the <idx/search result/ page is displayed in the <idx/documentation browser/, select the page that you think could contain the
information you need.
<item>the selected documentation page is displayed and your <idx/search result/ is marked. To display the next result within the same
documentation page, press F3.
</enum>

This allows you to easily find the information you need. For using the results, the <idx/documentation browser/ allows marking a
selection and copying it to the clipboard. Then return to the file you're editing and select "Paste" from the "Edit"-menu.

For a full description on how to use the Documentation, see <ref id="Using the Searchindex" name="Using the Searchindex">.

<sect1>Replacing Text
<p>
For replacing an expression, select "Search and Replace" from the "Edit"-menu. The "Search and Replace"-dialog lets you specify
the expression to be replaced as well as the replacement expression. Then press OK. The first expression which is found will be
marked, so you can see where the expression is and in which context. Then you can specify by a dialog if the expression shall be
replaced or not. When the search is finished by reaching the end of the current file, you will be asked if you want to start the
search again from the beginning. If you're finished, select "Cancel".

<sect>Printing
<p>
As KDevelop is designed to give developers the best access to files and information to reduce development cycles, it also contains
a new <idx/printing/ utility which makes use of two common <idx/printing/ programs available for Unix-Systems, <em/<idx/a2ps// (ASCII-to-Postscript) and
<em/<idx/enscript//. Besides these, you can also print by directly using lpr (the lineprinter device). As using <idx/a2ps/ or <idx/enscript/ offers the
most options towards <idx/printing/, you should install either one of these on your system; both programs are usually shipped with
distributions, so you shouldn't have any problem to get them. But before <idx/printing/, you should have a look at the available
<idx/configuration dialog/s to prepare the <idx/output/ according to your needs. The following section describes how to configure KDevelop for
<idx/printing/ files.

<sect1>Configuring the Printer
<p>
The <idx/printing/ programs can both be configured by selecting "Print" from the <idx/"File"-menu/; on the <idx/printing/ dialog,
select the program by the drop-down-menu in the left upper corner. Then press the "Options" button on the right. This opens the
configuration for the selected program that will be used. Another way to configure the programs are selecting "Printer
Configuration..." from the "Options"-menu; then select "<idx/a2ps/" or "<idx/enscript/".

<sect2>The <idx/a2ps/ Configuration Options
<p>
<sect3>Printing
<p>
<itemize>
<item><bf/header:/  adds a header frame to the page
<item><bf/filename:/  if checked, the header frame will contain the filename as its text
<item><bf/login:/  adds the User ID to the right upper corner of the page
<item><bf/borders:/  adds frame borders to the text page
<item><bf/Date & Time:/  adds the <idx/printing/ date and time
<item><bf/align files:/  prints out files on the same page, available for two-page <idx/printing/ mode
<item><bf/set TAB size:/  sets the TAB size for <idx/printing/ TABs
<item><bf/headertext:/ available, if filename is deselected and allows inserting another text to the header frame
<item><bf/fontsize:/  sets the fontsize for the text. The default fontsize is 9
</itemize>

<sect3>Text<idx/printing/
<p>
<itemize>
<item><bf/cut lines:/  cuts the line's contents if the line is too large to be printed. If deselected, lines will be broken.
<item><bf/interpret TAB, BS and FF:/ interpret TAB, Backspace and FastForward characters.
<item><bf/replace non-<idx/printing/ character by space:/ if the file contains non-printable characters, those will be replaced by space
characters.
<item><bf/print non-ASCII character as ISO-Latin 1:/ prints characters not included in the ASCII format in ISO-Latin 1 mode <idx/output/
<item><bf/bold font:/ prints the whole text in bold font mode.
</itemize>

<sect3>Numbering
<p>
<itemize>
<item><bf/numbering lines:/  numbers all lines top-down if enabled
<item><bf/numbering pages:/ allows selecting page-numbering mode by:
  <itemize>
  <item><bf/file single:/ numbers each file's pages beginning with 1
  <item><bf/file together:/  appends all following pages after the first for page numbering
  </itemize>
<item><bf/lines per page:/  sets the maximum lines per page to be printed.
</itemize>

<sect2>The <idx/enscript/ Configuration Options
<p>
<sect3>Header
<p>
<itemize>
<item><bf/Fancy Header:/ adds a fancy header
<item><bf/Header Text:/ enables adding a header text
  <itemize>
  <item><bf/text:/ sets the text's contents
  <item><bf/position:/ sets the text's position to left, center or right
  </itemize>
<item><bf/Login:/ add the UserID to the header
  <itemize>
  <item><bf/login:/ enables adding UserID
  <item><bf/position:/ sets the position for the UserID
  </itemize>
<item><bf/Filename:/ add the filename to the header
  <itemize>
  <item><bf/Size of filename:/ add filename as full or short, meaning full path or filename only
  <item><bf/Position:/ sets the position for the filename
  </itemize>
<item><bf/Hostname:/ add the hostname to the header
  <itemize>
  <item><bf/hostname:/ enables adding hostname
  <item><bf/size of hostname:/ sets the size for hostname
  <item><bf/Position:/ sets the position for hostname
  </itemize>
</itemize>

<sect3>Date & Time
<p>
<itemize>
<item><bf/Current Date:/ include the current date
  <itemize>
  <item><bf/current date:/ enables current date adding
  <item><bf/position:/ sets the position for the date entry
  <item><bf/format:/ sets the date format
  </itemize>
<item><bf/Modification Date:/ include the last modification date
  <itemize>
  <item><bf/modification date:/ enables modification date adding
  <item><bf/position:/ sets the position for modification date entry
  <item><bf/format:/ sets the date format
  </itemize>
<item><bf/Current Time:/ include current time
  <itemize>
  <item><bf/current time:/ enables current time adding
  <item><bf/AM/PM:/ use AM/PM or 24h format
  <item><bf/Position:/ sets the position for the time entry
  <item><bf/Format:/ sets the time format
  </itemize>
<item><bf/Modification Time:/ include the last modification time
  <itemize>
  <item><bf/modification time:/ enables adding modification time
  <item><bf/AM/PM:/ use AM/PM or 24h format
  <item><bf/Position:/ sets the position for the time entry
  <item><bf/Format:/ sets the time format
  </itemize>
</itemize>

<sect3>Layout
<p>
<itemize>
<item><bf/Numbering & Border:/
  <itemize>
  <item><bf/numbering lines:/ adds line numbers to the document for <idx/printing/
  <item><bf/borders:/ adds a border to the pages for <idx/printing/
  <item><bf/numbering pages:/ numbers pages for <idx/printing/
  <item><bf/align files:/ appends files for page numbering
  <item><bf/lines per page:/ the maximum value for lines per page
  </itemize>
<item><bf/Format and TAB:/
  <itemize>
  <item><bf/set TAB size:/ sets the TAB size for interpreting TABs
  <item><bf/font for header:/ sets the font used for the header text
  <item><bf/font for body:/ sets the font for the body text (file contents)
  </itemize>
<item><bf/Text<idx/printing/:/
  <itemize>
  <item><bf/cut lines:/ cuts the lines if too large. If unchecked, lines are broken
  <item><bf/replace non-<idx/printing/ character by space:/ replaces characters that the <idx/printing/ charset doesn't support by space characters
  </itemize>
<item><bf/Other Options:/
  <itemize>
  <item><bf/table of contents:/ adds a table of contents page that contains information about printed files, page numbers etc.
  <item><bf/Highlight bars:/
    <itemize>
    <item><bf/highlight bars:/ highlights rows for <idx/printing/
    <item><bf/cycle fo change:/ sets the number of rows to change highlight style
    </itemize>
	<item><bf/Wrapped line:/
    <itemize>
    <item><bf/mark wrapped lines:/ lines that are broken get marked for <idx/printing/
    <item><bf/value for wrapped line:/ the preset value for the new line the line is broken into.
    </itemize>
  </itemize>
</itemize>

<sect3>Underlay
<p>
<itemize>
<item><bf/Text:/ sets the text to underlay
<item><bf/Position:/ sets the position of underlay text
<item><bf/Font:/ sets the font used for the underlay
<item><bf/Angle:/ sets the angle for the underlay text
<item><bf/Gray scaling:/ sets the grayscaling for the underlay text
<item><bf/Style:/ sets the underlay text to be printed as outlined or filled
</itemize>

<sect1>The Printing Dialog
<p>
<sect2>Direct Printing Options
<p>
<itemize>
<item><bf/Program:/ sets the <idx/printing/ program to be used for <idx/printing/: <idx/a2ps/, <idx/enscript/ or lpr
<item><bf/Printer:/ sets the printer to be used for <idx/printing/
<item><bf/Output location:/ for <idx/printing/ into a file, select the <idx/output/ location
<item><bf/Orientation:/ sets the orientation for <idx/printing/, either landscape or portrait
<item><bf/Copy:/ sets the amount of copies to be made per page
<item><bf/Paper Size:/ sets the paper size to be used
<item><bf/Output Format:/ for using <idx/enscript/ as <idx/printing/ program, you can choose between postscript or html <idx/printing/
<item><bf/Default Printsettings:/ sets the default settings to use for <idx/printing/
<item><bf/Out<idx/printing/:/
  <itemize>
  <item><bf/Page Printing:/ sets one or two pages on one sheet
  <item><bf/Pages:/ select all,odd or even for using <idx/enscript/
  <item><bf/Pretty Print:/
    <itemize>
    <item><bf/pretty-print:/ enables pretty-print mode for <idx/enscript/
    <item><bf/color:/ use color <idx/printing/
    <item><bf/Pretty Print Mode:/ sets the <idx/printing/ mode dependent on your file format
    </itemize>
  </itemize>
</itemize>

<sect2>File Selection
<p>
The file selection dialog is accessed by the "Files" button on the <idx/printing/ dialog. The file selection allows specifying which files to
print out by certain criteria:
<itemize>
<item><bf/File Selection:/
  <itemize>
  <item><bf/current:/ the currently opened file visible in the editing window
  <item><bf/all in project:/ all files included in the project currently opened
  <item><bf/self chosen files:/ allows choosing the files to be printed by file-selection
  <item><bf/all cpp files:/ prints out all source files of the project
  <item><bf/all headers:/ prints out all header files of the project
  <item><bf/changed files:/ allows specifying files that are changed in a timespan:
  </itemize>
<item><bf/Changed Files:/
  <itemize>
  <item><bf/Between:/ specifies all files changed after:
    <itemize>
    <item><bf/Date:/ the date the files were changed
    <item><bf/Time:/ the time the files were changed
    </itemize>
  <item><bf/And:/ specifies all files changed before:
    <itemize>
    <item><bf/Date:/ the date the files were changed
    <item><bf/Time:/ the time the files were changed
    </itemize>
  </itemize>
  <item><bf/Self Chosen Files:/ available if self chosen files is selected (see above)
  <itemize>
  <item><bf/add:/ press this to add a file selected for <idx/printing/ in the lineedit field left
  <item><bf/delete:/ deletes a selected file from the <idx/printing/ list
  <item><bf/clear:/ clears the <idx/printing/ list
  </itemize>
</itemize>

<sect2>Print Preview
<p>
Print Preview is available for you to control how the <idx/output/ will look like. Therefore, KDevelop uses the program <em/ghostview/ or
<em/kghostview/. When the preview-button was pressed on either <idx/printing/ dialog, you will be presented a template <idx/output/ that shows you
the effect of the currently set options.

<chapt>Proyectos<label id="Proyectos">
<p>

<sect>Projecttypes
<p>

<sect1>Programas
<p>
KDevelop creates a projectfile with the .kdevprj ending. This file contains all your project information, so be careful not to
delete it. It is stored in the project's base directory and has to be opened to load the project. The projectfile keeps all
information for your files like the file properties, install path, distribution status and <idx/compiler options/ (CXXFLAGS). Setting
file properties allows you to keep track of where the files should go.

With <idx/KAppWizard/, you can create a new application project according to your choice of application type. For now, <idx/KAppWizard/
generates four kinds of frame applications, as:

<itemize>
<item>a single document interface (SDI) <idx/KDE/-application including a menubar, a toolbar and a statusbar. It contains basic control
resource management to allow extending the frame application into a unique <idx/KDE/ application. The application frame also
contains statusbar help messages as known from commercial products just like KDevelop itself. From the programmer's point of view,
it is based on three application-specific <idx/classes/ leaning on the MVC-concept (Model-View-Controller). Technically, the base
<idx/classes/ may not be viewed that way, but it's construction is at least created most logical to create applications with a <idx/GUI/.

<item>a <idx/KDE/-based application frame window. This application type offers most flexibility to those wanting to develop their
program from scratch, but can also be used as a basis for developing wizard applications or modules.

<item>a Qt-only based program framework. For those programmers who want to use the <idx/Qt-library/ as the <idx/GUI/ interface alone, we
tried to offer you a smart framework to support your application development. As Qt programming is fully supported, you should
have no problems to create a full-functional application by using Qt only.

<item>a C++ program framework. This application type is intended for those wanting to write a terminal based C++ program. Just
remove the "Hello World" line in main() and construct your <idx/classes/ the same way with KDevelop as for <idx/KDE/ applications.
<item>a C program framework for C programmers. This is as well a terminal based application but only uses the C compiler.
</itemize>

Additionally, KDevelop enables you to work with already existing projects. Those can have any options set by the programmer himself by
configure and Makefiles. As far as the execution and the build-process is concerned, the current state only allows the same structure
as for the other baseclasses. Create a custom project with the application wizard and add your files to the project to allow scanning
by the classbrowser.

To ensure the build process, your custom project has to have all sources in a subdirectory matching the lowercase name of your project;
the execution of the binary is also restricted to this lowercase project name.

Mind that KDevelop does not write any information into Makefiles or configuration files. You are responsible for any project behavior
and build settings yourself.

<sect1>Libraries
<p>
A general project-type to create libraries is not available at the moment. Anyway, building libraries is not impossible with KDevelop.
Here are a few guidelines and workarounds:

<itemize>
<item>Whenever your project subdirectory gets another subdirectory that contains source files, KDevelop will build a static library of
these. That means static libraries are already supported by automatic creation in order to sort project sourcefiles.
Mind that the static library is part of the binary later and won't get installed.
<item>to create a shared library, you have the option to create another project subdirectory. The sourcefiles that are created in this
subdirectory are included in the project and are therefore available in the classviewer as root classes. To create the shared library,
the <htmlurl url="programming/index-19.html" name="KDevelop Programming Handbook"> offers a Makefile.am template. If the subdirectory's
Makefile is added to the configure.in script, you only have to run "Autoconf and automake" and "Configure" to create the Makefiles. The
build instead is only possible from a make-command within the subdirectory, as KDevelop invokes the build from within the original
project subdirectory. Another possibility to create shared libraries is changing the Makefile.am of the original project-subdirectory
according to the template in the Programming Handbook by hand following the rules for project modifications explained in chapter <ref
id="Project Hacking" name="Project Hacking">.
<item>for installing a shared library, you have to watch the KDE-File-system Standard as explained in <htmlurl
url="programming/index-13.html" name="The KDevelop Programming Handbook">
</itemize>

<sect1>Multiple Targets
<p>

For some projects, the facilities of KDevelop at it's current state will not last. Those are projects that include multiple
targets like packages containing several applications. As commands like "Execute" require that only one target is build by the
developer, those types of projects are only supported in the way that you have to write your own entries to the <idx/Makefile.am/'s and
creating your directories for the additional libraries or binaries to build. Nevertheless, a build-process always invokes your
make-program independent from what actually the targets are; so these functions still can be used (with the restriction that the build
is invoked from the main project subdirectory).

Another way to still work with this type and to still have access to the binaries themselves are creating empty projects and move their
subdirectories in conjunction with the <idx/project files/ to the directory containing all sources later. Then you could load each
target independently by its project file; this also allows executing and <idx/debugging/ the target.

Multiple binaries or libraries within the main project subdirectory are possible with following the rules explained in section <ref
id="Project Hacking" name="Project Hacking"> and the following guidelines for editing the main project's subdirectory Makefile.am (all
modifications outside the KDevelop write area):

<itemize>
<item>add your target to the bin_PROGRAMS if it is an executable
<item>add your library declaration line if it is a shared library
<item>add the same declarations like the original project binary is build:
	<itemize>
	<item>newtarget_METASOURCES
	<item>newtarget_LD_FLAGS
	<item>DISTCLEANFILES
	<item>copy the messages: entry for the original binary and replace target_SOURCES with newtarget_SOURCES, target.pot with
newtarget.pot
	</itemize>
<item>add your sources like the KDevelop write area contains outside the write area for your binary or library
<item>for installing static libraries, create the library with KDevelop's auto-creation inside subdirectories. Then modify the
Makefile.am outside the write area according to the needed settings
</itemize>

<sect> <idx/New Project/s
<p>

The KDevelop Application Wizard allows the creation of four different types of projects, constructing a framework for each. All
projects use the GNU standard development tools as described in the requirements section of this handbook. For <idx/KDE/ applications,
the wizard offers two different frameworks, the <idx/KDE/-Application, providing a complete application with base <idx/classes/ for
document type, view and application. This includes the creation of a menubar, toolbar and statusbar, the mainwindow inherits the
KTMainWindow class. The <idx/KDE/-Mini-Application only gives a view which is empty. This type of project can be used for the creation
of small desktop tools or other simple applications without too much change on the existing code provided by the framework. A
Qt-Application offers the creation of a Qt-only program if you wish no dependencies towards the <idx/KDE-libraries/ for end-users.
The Qt-Application also is created by using tree base <idx/classes/ like the KDE-standard-Application and provides a menubar, toolbar
and statusbar.

The C++ -Application type offers a framework for creating commandline applications.  It is ready to run and by default displays
"Hello World" as the only action.  This may be useful for C++ learners who would like to program applications without using a <idx/GUI/
first or for those working on commandline programs written in C++ or C. C programmers can also take advantage of the C-only project,
which requires any C-compiler at the minimum.

The wizard asks for your project name, version and the location where the project directory will be build.  Further, your Name and
Email address are asked for inserting them in header and cpp templates on top of your source files as well as for entries in the
*.lsm file.

<sect>Opening and Closing of Projects
<p>
KDevelop is by default configured to open the last project loaded when starting. This allows a fast start, but you may want to
change that to just start the IDE without any project. To prevent the default behavior, disable the "Load last project" option in
the <ref id="KDevelop Setup" name="KDevelop Setup"> dialog.

To open another project, select "Open" from the "Project" menu or press the "Open Project" button on the toolbar. In case you've
got another project currently open, this will be closed. If your current project then contains files that aren't saved, you are
asked to save all changed files. Thereby, you can select which file to save and which you want to close without saving, or to save
all at once.

Then you get an "Open Project" dialog, where you can change to the directory containing the project file to be loaded. KDevelop
<idx/project files/ have the <em/*.kdevprj/ mime-type which is also displayed by a project icon. Select the project file and press
"Open". When loading a project, the Class Browser scans all files and builds the initial classtree, so you can start working on the
project by using the Class Browser directly.

Another comfortable way to open a project is to select the project file in the KFM, the <idx/KDE/ File Manager. This will start
KDevelop with loading the selected project file. You could as well open a project by commandline, entering <tt/kdevelop
projectname.kdevprj/.

When closing KDevelop, your project file will be saved automatically and the IDE detects if you have changed any project files.
Then you will be asked to save any changes before exiting. The available options for closing are the same than for closing a
project before loading another.

<sect>Editing a Project
<p>
After you created a new project with the <idx/KAppWizard/, the usual task is to extend the project by editing the already created
sources and adding <idx/classes/, <idx/pixmaps/, pictures and whatelse you project needs. Now, editing a project means that you can change the
default project after its generation by menus and dialogs according to your needs. The next section therefore describes how you
can add existing files and <idx/classes/ as well as creating new files. This is needed for building your project, but this won't help
you for the installation process by the end-user. Therefore, section <ref id="Setting Project File Options" name="Setting Project File
Options"> describes how to set File Properties especially for additional files that you want make to install, like documentation or
<idx/pixmaps/.
Another part in project maintaining is adding translations for applications that support internationalization, which is described
in <ref id="Adding Translations" name="Adding Translations">.

<ref id="Extending the Project Documentation" name="Extending the Project Documentation"> covers questions on how to create a good set
of documentation for online help enabling the end-user to help himself in case of troubles as well as how to use your product.

Finally, <ref id="Project Hacking" name="Project Hacking"> describes how you can eventually work around the KDevelop project
management in special cases.

<sect1>Adding and Removing Files and Classes<label id="Adding Files and Classes">
<p>
Adding a new file is often used when you think that you should separate your class <idx/implementation/ file into several ones. Then you
need to create an new file which will contain the part of the class <idx/implementation/ you want to move. You can do this by choosing
"New" from the <idx/"File"-menu/, opening the "<idx/New File/" dialog. This enables you to specify the file-type, name and the
location. When entering the filename, KDevelop automatically enters the extension for you, but you can as well change the extensions
towards your own preferences. Further, you can include the header template for sourcefiles, so you don't have to copy this into your
new file yourself. Also, you can decide, if the file is included in the project or not. Mind that this doesn't cover the installation
destination; this has to be configured later by setting the file preferences.

After the new file has been created, the project file will be updated as well as the according <idx/Makefile.am/'s.
To add a complete class to your project, you can construct a new class with the Classgenerator which is invoked by "<idx/New Class/" from
the Project-menu.

In case you have an existing project and you want to add certain <idx/classes/ that you want to re-use in your project, select "Add
File(s) to Project..." from the <idx/"Project"-menu/. Select "Add existing files", which will open a dialog to let you specify which
files will be added to the project and the destination directory. Mind that the files will be copied into the specified directory and
added to the project. You should call "Make" after adding sources; then your added files will be included in the build-process. In
case you want to add e.g. <idx/pixmaps/ that have to be installed by the end-user, you should update the File Properties for the added
file and specify the installation path (see <ref id="Setting Project File Options" name="Setting Project File Options">

To add a file to the project that is already in the project directory, go to the <idx/RFV/, where all project-included files are
displayed by their project status by a red ! over the file icon. Select the file you want to add to the project (which has a normal
file icon) and press the right mouse button to get the popup-menu. Then select "Add".

Files can also be removed from your project. This could be needed in cases where you don't want to use pre-generated files that
are already given by the <idx/KAppWizard/. To remove a file, you have additionally the option between removing a file from the project
or delete it completely. To remove a file from the project, select the file in the <idx/LFV/ or the <idx/RFV/, press the right mouse button
and select "remove". To delete a file, select "delete physically".

<sect1>Setting Project File Options<label id="Setting Project File Options">
<p>
The file properties dialog can be accessed via the project menu or within the <idx/LFV/ by a right mouseclick.  It shows the project
files in groups as they are sorted in the <idx/LFV/ and displays the file properties like file size, file type and if the file is
included in the project as well as the installation path if the file is going to be installed by the end-user's make install
command.  It is important for documentation files as well as <idx/pixmaps/ to specify the location where the files should go when the
project is build and installed by end users, so you have to set up those locations. For standard <idx/KDE/ location macros you should
look in your <idx/Makefile.am/ where the location macros are specified.


<sect1>Adding Translations<label id="Adding Translations">
<p>
As <idx/KDE/ allows configuring your desktop and the behavior of your applications, you also have the option to choose the language
that your application uses, in regards of the use of online-documentation as well as the application's look. For documentation files,
this seems a trivial task. You would add a subdirectory labeled by the desired language, e.g. <tt/de/ for German, to the
<tt/docs/ directory of your project and copy the english documentation into that directory. Then you would generate the
documentation and set all project file options for the installation directories. Then you could start translating the <idx/SGML/ file to
your desired language and regenerate the documentation; then you're done.
For the application, this seems a bit more difficult for the programmer. Now, we want to explain how to enable
internationalization support for your application and how to add the languages you want to support.

First, you have to enclose all visible strings of your application that appear in bars or dialogs with the <tt/<idx/i18n/()/ macro.
This macro is a replacement for the function <tt/klocale->translate()/ of the KLocale class and much easier to use. As this macro
is declared in the <tt/kapp.h/ include file, you have to add <tt/#include &lt;kapp.h&gt;/ to the source file or the class
<idx/declaration/ file of the class that makes use of the macro. Also it should be mentioned, that although <tt/<idx/i18n/()/ is a macro and
therefore you could think about using the original function, this won't work because the strings that are set up for translation
have to be read out of the sources and get stored in the application's translation file (&lt;YourApp&gt;.pot in the /po
subdirectory). This task is done by the program xgettext, and to do this, you would enter <tt/make <idx/messages// in your project
directory containing the sources. As xgettext depends on the <tt/<idx/i18n/()/ macro, the original function won't do the job.

For translations themselves, you first have to create the message file containing all strings that are used in your sources with
the <tt/<idx/i18n/()/ macro. This can be done by choosing "Make <idx/messages/ and merge" from the Build-menu.
Then you have to add the languages that your application wants to support. Therefore, select "Add Translation File" from the
Project-menu. This opens a language selection dialog. Select the language and press OK. This will build the ASCII file containing
entries for the filename of the string and the line where the original string is placed. Then you will see a <tt/msgid/ line
containing the string to translate, followed by <tt/msgstr/. The msgstr line is mostly empty except for the translations already
provided by the <idx/KDE-libraries/. Those have to be filled with the according translations of your language.

You could think about writing the translations by hand, which can also be done. But the <idx/KDE-SDK/ offers the use of the program
<idx/KTranslator/, which ready the already existing files from other applications installed on the system, so you can reuse already
translated strings to support your language.

To access <idx/KTranslator/, the easiest way is selecting a &lt;language&gt;.po file in the /po directory either in the <idx/LFV/ or in the
<idx/RFV/. This opens <idx/KTranslator/ and lets you do the translating easily. Mind that you have to set up <idx/KTranslator/'s properties
yourself to include the author name and the language as well as the destination file. <idx/KTranslator/ by default only opens your
translation file.

For all translation files, <tt/<idx/make// uses the program <tt/msgfmt/ to format your message files to use with the binary, but you
don't have to take care for that, as well as specifying the destination directory for installing the translation files; this is
all done by KDevelop automatically.

For more information about internationalization support, see <url url="http://www.kde.org">; a lot of people are doing translations for
you to support their language. You will find a list of email-addresses of the translators you could write to and who will help you with
this. Also read <ref id="El editor de diálogos" name="El editor de diálogos"> and <htmlurl url="programming/index-11.html" name="The KDevelop
Programming Handbook"> where questions about internationalization are covered again.

<sect1>Extending the Project Documentation<label id="Extending the Project Documentation">
<p>
All projects created with KDevelop contain a pre-configured documentation, which already contains standard chapters for
installation, project name and version as well as the author name and email-address. As KDevelop uses <idx/SGML/-templates, it's very
easy to extend the documentation to a full descriptive helpsystem. The only thing you have to do is editing the <idx/SGML/ file, placed
in docs/en as index.sgml. The reference documentation included with your sgml-tools package can be added to the <idx/Helpbrowser/ and
allow you direct access to special tags as well as a short description of how to extend the documentation. <idx/SGML/ has a lot of
advantages, whereas <idx/KDE/ makes wide use by this documentation type with the additional <idx/KSgml2Html/ tool. This creates the typical
<idx/KDE/-style documentation and makes it look nicer. Anyway, the sgmltools alone are enough to produce a html <idx/output/ that is already
included in your application. To create the documents using <idx/KSgml2Html/, install the tool and run "Make User-Manual" from the
Build-menu. The Documentation Browser allows a direct controlling of the <idx/output/ by selecting "Project User-Manual" from the
Help-menu or the according icon in the <idx/DOC/-tree. Then you can browse the documentation online in KDevelop and have a better
overview by the <idx/output/ over <idx/errors/ that result in missing tags.

Now, while extending the documentation, you can't avoid that additional files are produced that have to be included into the
project as each <tt/sect/-tag creates a new <idx/HTML/ file. The <idx/output/ generated by the <idx/KAppWizard/ is already included in the project,
so you don't have to care for their installation path. What you have to watch out for is any index-xx.html file, where xx is
higher than 6 (as the first six pages are already included in the project). After generating the documentation, switch to the <idx/RFV/
and browse to your documentation directory. Press the right mouse button over the files to add and select "Add". Further,
<idx/KSgml2Html/ adds the <idx/KDE/ logo to the documentation directory. This file, <tt/logotp3.gif/, has to be added to the project as well.
Then you have to select the "File Properties" either from the Project menu or by the popup menu in the file-viewers. The easiest
way to set the installation path is to select a documentation file already set up for installation such as <tt/index.html/. You
see that <tt/Install/ is checked and the Installdir+filename already contains the destination. Mark the Installdir and enter
CTRL+C to copy the installation path to the clipboard. Then select the file you want to specify for installation. Enable
<tt/Install/, this will enable the installdir-entry field, already containing the filename. Place the cursor in front of the
filename and enter CTRL+V to insert the clipboard contents (which was the installation path copied before). This is the fastest
way to specify the installation path. For more options about specifying installation destinations, see <htmlurl
url="programming/index-14.html" name="The KDevelop Programming Handbook">.

<sect1>Project Hacking<label id="Project Hacking">
<p>
When working with a project, you should never edit the project file by hand. This will prevent KDevelop from loading your project
correctly under certain circumstances, as well as changes will not result in updating the <idx/Makefile/s. To change any settings for
your project, you have to use the given menu entries like e.g. for adding files or setting file properties. For experts that are
not comfortable with certain options for e.g. the <idx/Linker/ or need additional project configuration, you should work yourself into
the <idx/Makefile.am/ macros and add all changes in the <idx/Makefile.am/'s after the section separated with the entry "KDevelop write area".
As the GNU-tools are using the commands at the end of all macro files, you can overwrite KDevelop's settings with this. Mind that
this will prevent using KDevelop for any changes related to project configuration.

<sect>Compiler and <idx/Linker/ Flags for Projects
<p>
Each new project contains all needed options for the <idx/Compiler/ and <idx/Linker/ as well as general settings. By default, your project
is set to use <idx/debugging/ by the -g flag, and <idx/warnings/ are set to the standard, -Wall. This ensures you can debug your application
and detect constructions that may cause program <idx/errors/. For some applications, you would need additional <idx/Compiler/ or <idx/Linker/ flags,
especially if you're using libraries that are not currently included by the <idx/Linker/. Then you need to update the project by
configuring the correct settings with the Project Options dialog. See <ref id="Generación de ejecutables" name="Generación de ejecutables"> for more
information how and where to set Compiler Options, Warnings and <idx/Linker/ Options.

<sect>External Projects
<p>
Existing projects can be converted to KDevelop projects by selecting "New" from the project menu.  The following dialog creates an
empty project file with your project name, version and type information as well as your name and email address.  Then copy all your
compilation and construction files to the new project directory and choose "Add Files" from the project menu.  The files selected
will be copied into your project directory and the <idx/Makefile.am/'s are updated.   Please change all <idx/Makefile.am/ entries existing
before the conversion towards the now created entries done by KDevelop in the KDevelop area.  Test, if your program can still be
compiled and installed after the conversion to ensure the project's consistency.

<chapt>Generación de ejecutables<label id="Generación de ejecutables">
<p>
The Project Options dialog, accessed by the project menu, lets you specify all needed parameters for your project. Those will be
used for the <idx/Makefile.am/'s and the <idx/configure/.in script (e.g. version number change or <idx/compiler warnings/ ) and thereby set the
compilation preferences as well.. After changing the project options, you should invoke "<idx/make/ clean" or "rebuild all" to compile
your project with the new options. Please mind that <idx/debugging/ is only available if the project options are set to create <idx/debugging/
information, the amount can be set with the debug level (0-3). If you add functions that belong to a library that is not included
in the <idx/Linker/ flags, your program will not link correctly if those are not updated, so keep track of your library linking.

For a release build of your application or for distributing the sourcecode package, you should watch the following standard
settings:

<itemize>
<item>disable <idx/debugging/
<item>enable optimization and set optimization level to <bf/-02/
<item>set the <idx/compiler warnings/ to <bf/-Wall/
<item>for each new release, increase the version number and update the project.lsm file for version and requirements.
</itemize>

<sect>General Options
<p>
The first page of the Project Options dialog sets the general options for your project. These are project name and number, the
handbook sgml file which is used for generating a set of <idx/HTML/ files that are included in the project and specific information
about the author. The short description field is for additional information that you want to include like the program's purpose
and the like.

<sect>Compiler Options<label id="Compiler Options">
<p>
The <idx/compiler options/ page sets the compiler flags towards your target, <idx/debugging/ and additional.

<sect1>Target
<p>
The target box contains three options that can be set:

Target Machine: You have the choice to set the target machine option here by choosing between your machine (default) and i386v,
which is the option if you <idx/configure/d your <idx/Compiler/ as a cross-compiler for an Intel 386-compatible machine running System V. This
option sets the -b flag to the <idx/Compiler/. Usually you would leave this to the default.

only syntax-check: If checked, the -fsyntax-only flag is set. This means that the <idx/Compiler/ will check your code only for
correctness in regards to the syntax, but doesn't check anything beyond that.

Optimize: You can enable optimization for your build process by this option, meaning to set the -O flag. If not checked, the flag
is set to -O0, so no optimization will be used. If you enable optimization by checking this option, you can as well specify the
optimization level below from 1 to 3.

For a release version of your application, enable optimization and set the level to 2.

<sect1>Debugging
<p>
Right of the Target box, you can see the <idx/debugging/-section. This means that you can set your <idx/Compiler/ to include information for
debuggers within the final binary, so the programmer can follow the execution of the application with the debugger in direct
context to the sourcecode.

Enable <idx/debugging/ therefore sets the -g flag; the <idx/debugging/ level specifies the amount of information to be included in the binary.
Available are level 1 to 3 to choose from. Mind that the binary execution will be slower by setting any <idx/debugging/ option and that
the binary size will increase by the <idx/debugging/ level.

Generate extra information for gprof: sets the -pg flag, resulting that the <idx/Compiler/ will include information for the gprof
program that displays caller graphs of your program's function.

Store temporary intermediate files: sets the -save-temps flag. This will result in storing the usually temporary files produced by
the preprocessor and the assembler. A compilation of a sourcefile will therefore produce three <idx/output/ files: an *.o file which is
the final <idx/output/ of the <idx/Compiler/, an *.i file produced by the preprocessor and an *.s file as the <idx/output/ of the assembler.

For a release of your project, disable any <idx/debugging/.

<sect1>Additional Options
<p>
The text entry field on the bottom is intended for you to manually set any flags for the <idx/Compiler/ by setting the CXXFLAGS
environment <idx/variable/ in the <idx/Makefile/s, so make sets the flags before the build process and reset them afterwards. For a complete
description of all available <idx/Compiler/ flags you should see your <idx/Compiler/ documentation; for gcc and egcs this can be done by
<bf/man gcc/; <bf/man g++/ will show you information about the c++ script that is used to lead the <idx/Compiler/.


<sect>Compiler Warnings<label id="Compiler Warnings">
<p>
The following gives a description about the <idx/Compiler/ warning options that can be set on page 3 of the project options dialog. The
explanations are taken from the man page for GCC, egcs version 1.1.1.
The <idx/warnings/ themselves are diagnostic messages that indicate that constructions may cause <idx/errors/.

<descrip>
<tag/-Wall/Standard `-W' options combined.
<p>
<tag/-W/ Compile with -W. This option sets options not included in -Wall which are very specific. Please read GCC-Info for more
information.
<p>
<tag/-Wtraditional/Warn about certain constructs that behave differently in traditional and ANSI C.
<p>
<tag/-Wundef/Warn if an undefined identifier is evaluated in an `#if' directive.
<p>
<tag/-Wshadow/Warn whenever a local <idx/variable/ shadows another local <idx/variable/.
<p>
<tag/-Wid-clash-LEN/Warn whenever two distinct identifiers match in the first len characters. This may help you prepare a program
that will compile with certain obsolete, brain-damaged <idx/Compiler/s.
<p>
<tag/-Wlarger-then-LEN/Warn whenever an object of larger than LEN bytes is defined.
<p>
<tag/-Wpointer-arith/Warn about anything that depends on the «size of» a function type or of void. GNU C assigns these types a
size of 1, for convenience in calculations with void * pointers and pointers to functions.
<p>
<tag/-Wbad-function-cast/Warn whenever a function call is cast to a non-matching type. For example, warn if <tt/int malloc()/ is
cast to <tt/anything *./
<p>
<tag/-Wcast-equal/Warn whenever a pointer is cast so as to remove a type qualifier from the target type. For example, warn if a
const char * is cast to an ordinary char *.
<p>
<tag/-Wcast-align/Warn whenever a pointer is cast such that the required alignment of the target is increased. For example, warn
if a char * is cast to an int * on machines where integers can only be accessed at two- or four-byte boundaries.
<p>
<tag/-Wwrite-strings/Give string constants the type const char[length] so that copying the address of one into a non-const char *
pointer will get a warning. These <idx/warnings/ will help you find at compile time code that can try to write into a string constant,
but only if you have been very careful about using const in <idx/declaration/s and prototypes. Otherwise, it will just be a nuisance;
this is why we did not make `-Wall' request these <idx/warnings/.
<p>
<tag/-Wconversion/Warn if a prototype causes a type conversion that is different from what would happen to the same argument in the absence of a
prototype. This includes conversions of fixed point to floating and vice versa, and conversions changing the width or signedness
of a fixed point argument except when the same as the default promotion.
<p>
<tag/-Wsign-compare/Warn when a comparison between signed and unsigned values could produce an incorrect result when the signed
value is converted to unsigned.
<p>
<tag/-Waggregate-return/Warn if any functions that return
structures or unions are defined or called. (In languages where you can return an array, this also elicits a warning.)
<p>
<tag/-Wmissing-prototypes/ Warn if a global function is defined without a previous prototype <idx/declaration/. This warning is issued even if the definition
itself provides a prototype. The aim is to detect global functions that fail to be declared in header files.
<p>
<tag/-Wmissing-<idx/declaration/s/ Warn if a global function is defined without a previous <idx/declaration/. Do so even if the definition
itself provides a prototype. Use this option to detect global functions that are not declared in header files. -Wredundant-decls
Warn if anything is declared more than once in the same scope, even in cases where multiple <idx/declaration/ is valid and changes nothing.
<p>
<tag/-Wredundant-decls/Warn if anything is declared more than once in the same scope even in cases where multiple <idx/declaration/ is
valid and changes nothing.
<p>
<tag/-Wnested-externs/Warn if an extern <idx/declaration/ is encountered within an function.
<p>
<tag/-Winline/Warn if a function can not be inlined, and either it was declared as inline, or else the -fin*line-functions option was given.
<p>
<tag/-Wold-style-cast/Warn if an old-style (C-style) cast is used within a program
<p>
<tag/-Woverloaded-virtual/(C++ only.) In a derived class, the definitions of virtual functions must match the type signature of a
virtual function declared in the base class. Use this option to request <idx/warnings/ when a derived class declares a function that may
be an erroneous attempt to define a virtual function: that is, warn when a function with the same name as a virtual function in
the base class, but with a type signature that doesn't match any virtual functions from the base class.
<p>
<tag/-Wsynth/Warn when g++'s synthesis behavior does not match that of cfront.
<p>
<tag/make all <idx/warnings/ into <idx/errors//(-Werror) Treat <idx/warnings/ as <idx/errors/; abort compilation after any warning.
<p>
</descrip>

For a release of your project, it is recommended to enable <bf/-Wall/.

<sect><idx/Linker/ Options<label id="Linker Options">
<p><nidx/linker options/
The <idx/Linker/ Options for your current project can be set by the last page of the project options dialog. You have to enable those
libraries that your application uses to link them to your binary with the <idx/Linker/, e.g. your application uses the class
<cdx/KFileDialog/. As the class <cdx/KFileDialog/ is part of the KFile library, you have to enable kfile. For <idx/classes/
or functions that are not listed as checkboxes, use the <bf/"additional libraries"/ field.

<sect1><idx/Linker/ Flags
<p><nidx/linker flags/
<descrip>
<tag/remove all symbol table and relocation information from the executable:/ This means that all redundant information will be
removed from the object files and the binary, resulting that <idx/debugging/ will not be possible. For as long as your application is in
a development stage and not released as final, you should leave this option disabled.

<tag/prevent using shared libraries:/ This option disables the use of shared libraries on systems that support this. On systems
using no shared libraries, this option will have no effect.

<tag/additional flags:/ Here, you can enter additional flags for the <idx/Linker/, setting the LDFLAGS environment <idx/variable/ by <idx/make/. The
available options can be taken from the man page for <bf/ld/ or your <idx/Compiler/ manpage.
</descrip>

<sect1>Libraries
<p>
The libraries section contains checkboxes for the most needed libraries in conjuction with Qt/<idx/KDE/ application
development. You have to enable those libraries that your application uses, otherwise the <idx/Linker/ will complain about unresolved
symbol tables.
<descrip>
<tag/<cdx/X11// The X11 library. Recommended for all X-Window programs.
<p>
<tag/<cdx/Xext// The X11 extension library. Also most X-Window programs depend on Xext.
<p>
<tag/<cdx/qt// The <idx/Qt-library/. Recommended for Qt and <idx/KDE/ applications.
<p>
<tag/<cdx/kdecore// The KDE Core library; contains the <idx/classes/ for KDE Application frameworks.
<p>
<tag/<cdx/kdeui// The KDE User Interface library; contains KDE-specific <idx/widgets/.
<p>
<tag/<cdx/khtmlw// The KHTML Widget library.
<p>
<tag/<cdx/kfm// The KFM library containing <idx/classes/ for KFM functions.
<p>
<tag/<cdx/kfile// The KFile library. Contains file dialogs etc.
<p>
<tag/<cdx/kspell// The KSpell library. Contains an interface for programs to use Ispell for spell-checking.
<p>
<tag/<cdx/kab// The KAdressBook library. Needed for access to the addressbook as well as providing addressbook <idx/widgets/
<p>
</descrip>
<bf/additional libraries:/ Here you can enter additional libraries that your application needs, e.g. the KOM library. Set the
libraries with the -l option; for the example -lkom.

<sect1>Make
<p>
As GNU <idx/make/ supports some useful options, the Project Options dialog contains a page called "Make-Options", where those can be
en/disabled. The available settings are:

<descrip>
<tag/

<tag/Print debug information/ prints out all information about the <idx/project files/ and what <idx/make/ determines for rebuilding them.
<tag/Continue after <idx/errors// tries to continue with the compilation after an error occurred (e.g. a file couldn't be compiled due to an
error)
<tag/Print the data base/ prints out the <idx/make/-database for the current process which contains the changes from the last
build-run. <tag/Environment variables/ give the current environment variables a higher priority than the currently used variables in
the <idx/Makefile/s.
<tag/No built-in rules/ doesn't use built-in rules for <idx/make/.
<tag/Touch files/ don't run the <idx/Compiler/ on changed files; instead only touches them. This sets them as already processed by <idx/make/.
<tag/Ignore all <idx/errors// Ignores all <idx/errors/ that occur
<tag/Silent operation/ doesn't print out any information about the build-process
<tag/Print working directory/ prints the current directory during the <idx/make/-process.
<tag/job number/ sets the amount of parallel processes for <idx/make/. For a single-CPU system we recommend setting this to one or two.
<tag/set modified/ sets the selected file modified. Choose the file by clicking the folder button on the right. Setting a file modified
means that the file will be processed by <idx/make/ and compiled if it is a source file.
<tag/additional options/ set additional options to <idx/make/; those can be found in your local man page for "GNU Make". </descrip>

<chapt>El navegador de clases<label id="El navegador de clases">
<p>
<sect>The Classviewer
<p><nidx/classbrowser/
The KDevelop Classviewer is one of the most useful and important tools that the IDE provides a developer for managing his project
sources. When a project is loaded, a class parser reads all project sources for functions, <idx/classes/ etc., then displays the results in
the <idx/CV/ treeview. This chapter shows you how to use the Classviewer and the provided functionality and how it can improve your work.

Classes and their methods can also be accessed by the browser toolbar. There, the left combo selects the class; the right
lets you choose the methods of the selected class. When you select a method, the classbrowser will automatically bring you to the
<idx/implementation/ file and sets the cursor to the method. Finally, the class-assistant button on the right of the method combo will bring
you to the <idx/declaration/ of the method on a click; on another click to the definition. The delayed popup menu, displayed by the
down-arrow on the button, offers additional functionality that is also available in the classviewer's context menus, such as:

<itemize>
<item>Goto Declaration: browses to the <idx/declaration/ of the method
<item>Goto Definition: browses to the definition of the method
<item>Goto Class Declaration: browses to the class <idx/declaration/
<item><idx/New Class/: opens the <idx/New Class/ dialog to construct a new class
<item>Add Method: adds a method to the selected class
<item>Add Attribute: adds an attribute to the selected class
</itemize>

<sect1>Available Objects
<p>
By available objects, we describe a term that means that C++ code can be seen as a collection of objects- <idx/classes/, their members,
global functions and the like. The classtree displays these objects logically and orders them by character, so they are easy to locate
in the tree as well by their according icon. Therefore the classtree contains a "Classes" and a "Globals" folder. Thereby the "Classes"
folder generally contains the project's <idx/classes/; if your project contains subfolders to manage your sourcefiles, these are also
displayed by their original folder name and contain all <idx/classes/ that are stored in the files located in the subfolder.

Further, when popping up a class, the classtree displays the class contents by separating methods and <idx/attributes/. As these can have
<idx/attributes/ as well like public, private and protected, these are displayed by modified icons as well. You see that a class displayed in
the Class Browser contains all the objects that are present in the class <idx/declaration/.

Now, <idx/classes/ are a very common thing when programming in C++ and will contain most of the code. But applications also contain objects
that have a "Global" appearance to the program. These would be structs, functions etc. Especially the <tt/main()/ function appears in
every application and you need to modify it in one or the other way sometimes. To access these objects, the Classviewer provides the
"Globals" folder, containing subfolders for the following object types:
<itemize>
<item>Structs
<item>Functions
<item>Variables
</itemize>

As the icons displaying these items are similar to those used in the class-viewer, their meaning is easy to guess and to remember by
the programmer.

Finally, it can be stated that the <idx/classviewer/ displays your project graphically by their objects related to their appearance in the
code. In the following section you will learn how to use the <idx/classviewer/ and it's tools in conjunction with your code.

<sect1>Browsing Object Declarations and Implementations
<p>
The Classviewer's best strength is providing a fast and good access to his code by the code's contents independent of the location
within files. Therefore, selections by a mouse click will result in the following actions:

<itemize>
<item><bf/On a classname:/  Switches to the class <idx/declaration/
<item><bf/On a class method:/ Switches to the method <idx/implementation/
<item><bf/On a class attribute:/ Switches to the attribute's <idx/declaration/ in the class <idx/declaration/
<item><bf/On a struct:/ Switches to the struct's <idx/declaration/
<item><bf/On a global function:/ Switches to the function's <idx/implementation/
</itemize>

Now, this provides you the most needed access towards code objects. Apparently, it may be needed to change a method's header, resulting
that you have to change it's <idx/declaration/ in the class as well as the <idx/implementation/. The <idx/classviewer/ supports this by providing
right-button context menus over items. On a method or function, this means that you can select where to go:

<itemize>
<item><bf/Go to definition:/ Switches to the <idx/implementation/- this is the default for a left click as described above
<item><bf/Go to <idx/declaration/:/ Switches to the <idx/declaration/ of the method or function.
</itemize>

By this behavior, the Class Browser offers you access to every place you have to go for coding your C++ application.

The following sections give you a description of the other tools that the Class Browser offers- you will find them very useful when
working with large projects as they enhance working object-orientated on C++ programs.

<sect>The Classtools
<p><nidx/classtools/
The classtools are dialogs that makes it even more easier for the developer to get more information about his project's <idx/classes/.
The <idx/classviewer/ displays all objects by their occurrence in the code, but you sometimes want to get more information about
<idx/classes/ without having to look inside the code. Therefore, the classtool dialogs are specialized on displaying specific class
<idx/attributes/.

The classtool dialog is invoked by the popup menu over a class in the <idx/classviewer/. Select "Classtool", and the dialog will appear.
To get informed about a class, select the class in the combo box on top. Then the buttons in the toolbar provide functions that give
you specific trees for your class. These are:

<descrip>
<tag/ Parents:/
The parents of the selected class, which means the class it inherits. This is useful for multiple inheritance as well as to see why a
class behaves in one or the other way, e.g. for dialogs your parent class could be <tt/<cdx/QWidget// or <tt/<cdx/QDialog//.
<tag/Children:/
Displays the children <idx/classes/ that inherit the current class.
<tag/Clients:/
Classes that make use of the selected class by an attribute in their class <idx/declaration/
<tag/Suppliers:/
The suppliers that give <idx/attributes/ to the selected class.
<tag/Attributes:/ The <idx/attributes/ of the class by their name
<tag/Methods:/ The Methods of the selected class
<tag/Virtual Methods:/ The virtual methods that a class provides
</descrip>
Further, the selection of the attribute public, protected, private or all shows Attributes, Methods and Virtual Methods by their
attribute value.

<sect>Managing Classes
<p>
The Class Browser additionally allows adding methods and <idx/attributes/ directly by dialogs. This means you don't have to type the
<idx/classdeclaration/ and the <idx/implementation/ header yourself. After adding a method, you only have to set the formal parameters to the
<idx/implementation/ header and, if the method requires an attribute, to the <idx/declaration/.

<bf>&raquo How to add a method to a class</bf>

<enum>
<item>select the class you want to add a method
<item>press the right mouse button; the popup menu appears
<item>select "Add member function".
<item>the "Add member function" dialog appears.
<item>insert the type, <idx/declaration/ and documentation for the method
<item>specify the access and the modifiers for the method
<item>press OK to exit the dialog
</enum>

For adding a <idx/variable/, this is the same action, just with selecting "Add member <idx/variable/" in the popup menu.

The difference between the actions of these dialogs is that the adding of a <idx/variable/ will add the <idx/variable/ to the <idx/classdeclaration/,
the adding of a method will add the method's <idx/declaration/ and the method's <idx/implementation/ header to the sources. As the <idx/classviewer/
directly updates himself, you have a direct access to the new method <idx/implementation/, so you only have to fill out the code for the
actual purpose of the method.

<chapt>El editor de diálogos<label id="El editor de diálogos">
<p>
The KDevelop integrated <idx/dialog editor/ allows the easy construction of <idx/widgets/ and dialogs your application uses all by graphical means.
You see the direct appearance of your dialog as it will be presented to the user. Using the <idx/dialog editor/ is usually the first step you
would take after creating a new project with the <idx/KAppWizard/ to create your main view, the user interaction dialogs and, after finishing
the graphical work, the code generation. This way, your project will contain all the usually considered "difficult" parts that normally
would take a long time to implement. Then, the "rest" of your work is implementing the functionality in the generated code. This
chapter deals with how to use the <idx/dialog editor/ to create your project <idx/widgets/ as well as what to do in case you see your <idx/widgets/ need
corrections or additions during the further development process.

You can switch to the <idx/dialog editor/ either by selecting "Dialog Editor" from the "<idx/View/"-menu or by the according toolbar icon.
To switch back to the Project Editor, select "KDevelop" from the <idx/dialog editor/'s "<idx/View/"-menu or by the icon in the toolbar.

What else does the <idx/dialog editor/'s interface offer you ?  Mainly, that its appearance is almost the same as the project editor in term
of the main view separation as well as the menu- and toolbars. This allows you to make yourself accustomed with the <idx/dialog editor/ very
quickly and, as he completely interacts with the project management, stay in the <idx/dialog editor/ if you want to control your
build-process. Actions that require to switch back to KDevelop will do that automatically for you, like accessing the documentation
browser. Just select the menu commands, and KDevelop reacts to your will.

The following chapters give you an overview of the <idx/dialog editor/ interface, how to create a new dialog initially and how set up the
properties of the child <idx/widgets/ that your dialog contains.

<sect>The Dialog Editor View
<p>
<sect1>The Mainview
<p>
The <idx/dialog editor/'s view is logically separated by:
<itemize>
<item>The Widgets Tabulator, containing the "Widgets", "Dialogs" and "Items" tabs. These are described in <ref id="Adding Widgets"
name="Adding Widgets">.
<item>The Widget-Editor, representing the editing view for creating your dialog. See <ref id="The Widget Editor" name="The Widget
Editor">
<item>The Properties window, containing a list of properties and their values, dependent on the currently selected widget in the widget
editor. See <ref id="Setting Properties" name="Setting Properties"> for information how to specialize the widget's behavior and look.
</itemize>

<sect1><idx/Menubar/, <idx/Toolbar/ and <idx/Statusbar/ differences to KDevelop
<p>
In Dialogeditor mode, KDevelop changes the menubar, toolbar and statusbar slightly to provide the functionality you need for creating
<idx/widgets/. These are:

<sect2><idx/Menubar/
<p>
<bf/<idx/"File"-menu/:/ replaces "New" with "New Dialog". "Open" allows to open a dialog definition file.

<bf/<idx/"View"-menu/:/ replaces "Tree-View" with "Widgets-View", en/disabling the Widgets-View tabulators; adds "Properties-View" to
en/disable the Properties-View and "Grid Size" to let you specify the grid size in pixels for horizontal and vertical values.

<bf/<idx/"Build"-menu/:/ replaces "<idx/Compile File/" with "Generate Sources". This lets you actually generate the sources for your
dialog.

<sect2><idx/Toolbar/
<p>
The toolbar contains a new icon for "New Dialog" as well as a replacement for "<idx/Compile File/" by "Generate Sources".

<sect2><idx/Statusbar/
<p>
The statusbar is providing you information about the currently selected widget, especially displaying the values for X
and Y size in the coordinate system. For <idx/Statusbar/ help, you are provided the same functionality than in Project-editing mode.

While changing widget size, the statusbar shows the current values for width and height of the selected widget.

<sect>Creating a New Dialog
<p>
After creating your project skeleton, you are provided a ready-to-run application, according to your preferences. As KDevelop provides
the project types KDE and Qt application, the <idx/dialog editor/ recognizes this and offers widget construction by the <idx/widgets/ that are
provided by the used libraries. To save time, you already should have a design in mind that will do the intended actions. For
information about widget design, see <htmlurl url="programming/index-6.html" name="The KDevelop Programming Handbook">.

To create a new dialog, select "New" from the <idx/"File"-menu/ or select "New" from the context menu in the "Dialogs" tab. The "New
Dialog" menu appears where you have to give KDevelop the dialog-specific information about the baseclass and the source file names and
destination.

<sect1>Dialog Class
<p>
The dialog class you can select, is the class that is inherited by your new widget, which is technically represented by a class itself.
Therefore, you have the following options:
<enum>
<item><bf/<cdx/QWidget/:/ the base class for all user interaction <idx/widgets/ provided by Qt. Used for main views and top-level <idx/widgets/.
<item><bf/<cdx/QFrame/:/ inherits <tt/<cdx/QWidget// and is used by numerous <idx/widgets/ as a base class. This is useful for
<idx/widgets/ that already want to have a <tt/<cdx/QFrame// functionality in addition to <tt/<cdx/QWidget// methods.
<item><bf/Custom:/ inherits a custom class that has to be set in the "Custom Properties". This could be an already designed class
provided by your project or the libraries.
<item><bf/<cdx/QDialog/:/ the base class for dialogs that you would inherit for user interaction like setting properties or changing values.
<item><bf/<cdx/QTabDialog/:/ inherits <cdx/QDialog/ and provides a dialog with predefined buttons and a set of tabs, which you will provide by the
<idx/widgets/ that you create.
</enum>

<bf/Custom Properties/

For the inheritance of a custom class as selected in the dialog class field, you have to specify the classname, which goes to "Custom
Class". The <idx/dialog editor/ uses this for the code-generation; therefore, you also have to insert the "Custom Header", where the header
filename of the custom class has to be set.

<sect1>Files
<p>
In the "Files" section, you have to enter the widget's specific information. This is the classname (which would be e.g. KColorSelectDlg
for a dialog that allows selecting the color of a pen), the header, C++ and Data filenames.
When inserting the Classname, the filenames are given by the <idx/dialog editor/, but you can as well change the filenames.

Now, what about the files ? When you are ready with constructing the widget visually, you will have to generate the files that contain
the <idx/implementation/ for your widget. As this will be a class, the dialog will exist by the header file containing the <idx/classdeclaration/,
a C++ file containing the method <idx/implementation/ for your widget's methods and slots. The Data file is the file that will contain a
function that is called by the constructor of your widget, the <em/initDialog()/ method. The file itself shouldn't be changed as it
will contain the generated code from the <idx/dialog editor/ to create the widget on the screen. If you ever have to change values, you should
do this by the constructor or be sure that you won't change the dialog during the development process, as the Data file will be
overwritten each time the code is generated for your widget. The header and C++ file contain sections, where the <idx/dialog editor/ writes;
these are marked by comments. After file generation, you can change any values and settings outside these sections; otherwise your
changes will get lost by the next code-creation.

<sect1>Location
<p>
For generating the widget's sources, the <idx/dialog editor/ needs to know the location where these will go. The default value for the
<idx/output/ directory is the current project subdirectory containing the sources already present.

After pressing "OK", your default values are generated and an empty Widget constructor is opened. Then you are ready to go for creating
your own widget. Mind that the <idx/dialog editor/ currently only supports static <idx/widgets/ without geometry management. If you're about to use
geometry management for your <idx/widgets/, you should make yourself accustomed with the <idx/classes/ that Qt provides for this, create a new
class with the classgenerator and write your widget by hand. For more information, see <htmlurl url="programming/index.html" name="The
KDevelop Programming Handbook">.

<sect>Adding Widgets<label id="Adding Widgets">
<p>
After specifying the dialogs or <idx/widgets/ class and filenames, you are ready to start creating the widget and filling it with contents.
Adding low-level <idx/widgets/ to your dialog is a very easy task. Just select the widget you want to add from the "Widgets" tabulator on the
left by a single click over the according widget icon. The widget will then be laid on the left upper corner of the currently opened
main widget. An added widget then gets the default size of 100x30 pixels on the <idx/editor/ view. To move a widget, click over it to
activate the drawing frame, which is displayed in dark grey with hot spots on the corners and on the center of the top, bottom, left
and right sides of the widget. A cross-cursor indicates that the widget can be moved. To move it, press the left mouse button and keep
it pressed. then move the widget with your mouse to the place you want to have it displayed later.

To resize a widget, move your mouse cursor over one of the hot spots of the already activated item. The mouse cursor then changes to a
double-arrow indicating the directions, in which resizing can be done. Press the left mouse button and hold it pressed. The widget item
will change it's size when the mouse is moved to the direction indicated by the cursor.

Further, the widget editor contains a lot of context menus to help you coordinate your work. Those are available over all items in the
<idx/widgets/ tabulator and give you a quick help message window that shows the class name of the selected widget with a short description.
Over a selected widget, the context menu shows the class name of the selected item and offers:

<itemize>
<item>Raise
<item>Lower
<item>Raise to top
<item>Lower to bottom
<item>Cut
<item>Delete
<item>Copy
<item>Paste
<item>Help
</itemize>

After setting the size and position, you can edit the preferences for the selected item on the Preferences window.

<sect1>The Widgets Tabulator
<p><nidx/dialog editor widgets/
The <idx/widgets/ tab represents the available <idx/widgets/ you can place on the dialog. If you want information about a certain widget, press the
right mouse button over a widget icon and select "Quick-Help" from the popup-menu. Mind that the <idx/dialog editor/ automatically determines,
if your project type is Qt-only or KDE. This prevents you from using KDE-<idx/widgets/ in a Qt application.

After you selected a widget item, it is placed with default sizes and values on the editing window and marked selected by a frame and
darkened corners. To resize a widget, move your mouse over one of the dark spots and your cursor will change to display which resizing
directions are possible. Then press the mousebutton and move the mouse while holding it. When you're finished with resizing the widget,
release the mouse. While resizing, the statusbar displays the current position of the item by X and Y values and the current size by
W(Width) and H(Height) values.

<sect1>The Dialogs Tabulator
<p><nidx/project dialogs/
The dialogs tabulator is intended to let you open your project's dialogs by a mouseclick. As the dialog's structure is saved in a
*.kdevdlg file within the directory that contains the generated files, only those dialog definition files are shown. Also mind that you
don't delete these definition files.

On selecting a dialog, it will be shown as by the state it was saved in the last editing step in the Widget-Editor view.

<sect1>The Items Tabulator
<p><nidx/dialog items/
The Items tabulator lets you have an overview over the currently present widget items of the dialog hierarchically. This means, that, as
your background represents the parent of all <idx/widgets/ within the dialog, it is shown on top of the tree. The children of the main dialog
are then listed in the next tree-level.

On selecting an item, it gets marked in the editor view, as well as the properties are shown in the properties window.
Using the items view is sometimes important if your <idx/widgets/ behavior depends on the parent-child relationship.

<sect>The Widget Editor<label id="The Widget Editor">
<p>
The Widget Editor is the main view that is placed in the middle and where you are constructing your widget. After adding items, those
can be selected and resized, as well as moved to the place you need them. Over all items, popup menus provide a quick access to
functions like cut, copy and insert.

<sect>Setting Properties<label id="Setting Properties">
<p><nidx/setting widget properties/
The properties window on the right is the place where you set the default behavior for the widget and its items. It displays the
pre-set values for each selected item right away; changing values will result in direct changes on the Widget Editor view, e.g. naming
labels or buttons.

To separate certain property values by their effect, the properties window contains four folders; selecting a folder will pop up all
values for the properties group. All possible values are described below. Mind that the properties are dependent on the widget, e.g. a
label and button will have a property for their on-screen name, while lineedits will have properties for methods like <em/setText()/.

For a complete list of the available values per item, you should see the class-reference of the widget which explains the used methods
and all possible values. Note that most values are implemented in <tt/<cdx/QWidget// and are used for all <idx/widgets/ that inherit
<cdx/QWidget/. Also mind that the final code does not contain any method calls that are unchanged by the user and therefore use the
default values as given in the widget's constructors.

A complete list of the supported properties that can be set in the properties window for each widget item.


<sect>Generating Files
<p><nidx/dialog sourcecode generation/

After creating a widget, you have to generate the sourcecode to make it available in your project. This can be done either with the
"Generate Sources" from the "Build"-menu or by the according icon in the <idx/dialog editor/ toolbar. Your <idx/Makefile/s will be updated
automatically to include the new widget in the compiling process; therefore, after calling "Generate Sources", you can build your
project again within the <idx/dialog editor/. The <idx/output/ window pops up below the Widget-Editor window as in Project Editor mode.

Now that your project contains a new widget, your work as a programmer is to implement functionality to the used slots and eventually
add other methods you may need. <footnote>See <htmlurl url="programming/index-6.html" name="The KDevelop Programming Handbook, The
Dialogeditor"> for more information about widget properties and sourcecode generation.</footnote>


<chapt>CVS Integration
<p>
KDevelop also takes care of managing your project via CVS repositories. The goal behind CVS (concurrent version control) is to enable
groups of developers to work on the same source-tree independently and to merge changes into the repository. Usually, the repository is
located at a server. The initial repository contains the base set of files that the project includes; directories and files are then
added or removed to the CVS by the developers.

Locally, the developer works on his copy of the CVS tree. He writes his changes into his files and tests, if his project still works,
at least to a certain extend where incomplete sources don't prevent other developers from still working on the CVS repository if they
receive the changes.

<sect>Enabling CVS Support
<p>
As CVS support is most often only needed by professionals or companies as well as by KDE developers maintaining their project over the
KDE CVS server, using the CVS commands of KDevelop is optional. To enable the CVS commands, open the Project-Options dialog and change
the option for Version Control to "CVS".

<sect>Using CVS Commands
<p>
Then the following commands are available in the LFV and RFV by context menus:

Over a file not included in the repository:
<itemize>
<item><bf/Add to Repository/: adds the file to the repository. The file is set up to be added and will be introduced to the repository
on the next <tt/commit/ command that includes the directory where the added file is located locally.
</itemize>

Over a file included in the repository:
<itemize>
<item><bf/Update/: update the selected file with the CVS version
<item><bf/Commit/: commit the selected file to the CVS repository
<item><bf/Remove from Repository/: remove the file from the repository
</itemize>

Over a folder:
<itemize>
<item><bf/Add/: adds the folder to the repository
<item><bf/Remove/: removes the folder from the repository
<item><bf/Update/: update the folder recursively to be in sync with the repository
<item><bf/Commit/: commit any changes recursively to the repository
</itemize>

The CVS commands all require a working network connection to the CVS server. When invoking a command, you will be shown a dialog with
the command sent to the CVS server and the retrieved output. Thereby you can control what actually happens and if the command was
successful or not.

As the CVS commands of KDevelop only work with the <tt/cvs/ system command and its commandline options, you should have no trouble to
use the cvs features.

<chapt>Configuración general<label id="Configuración general">
<p>

This chapter describes how you can set your individual preferences about how KDevelop works. All settings addressed below can be
found by the according entry in the Options-menu.

<sect>Configuring the "<idx/Tools/" Menu<label id="Configuring the &dquot;<idx/Tools/&dquot; Menu">
<p><nidx/configuring the Tools-menu/<nidx/"Options"-menu/

As KDevelop supports the use of third-party programs within it's user interface, you are able to <idx/configure/ any program that suits
your needs towards application development. This can be done by adding programs to the already pre-defined ones in the
<idx/"Tools"-menu/. To change the tools-menu, select "<idx/Tools/" from the "Options" menu. This dialog allows to specify the entry
name, program and additional command line options you want to pass to the execution. To remove a program from the menu, select the
entry name and choose "Delete". To add a program, specify the menuentry, where a & is used as a menu-accelerator; you may compare the
already configured entries with the entry list. Select the binary and pass your commandline options. Then hit "Add" and the entry
is added to the list. After leaving the <idx/configuration dialog/, the tools-menu updates itself, so the new configuration is already
usable without restarting KDevelop.

<sect>File Viewer Options
<p><nidx/file viewers/

The Logical File Viewer can be configured by context menus completely. As it's intention is to separate files logically to keep a
better overview over complex projects, one of the most used configurations is to create file groups. Those can be set by opening the
context menu with a right mouse button click over the project icon displayed at the root of the tree. The menu offers:
<itemize>
<item><idx/New File/: Opens the <idx/New File/ dialog. Equals to the menubar command "File"-"New"
<item><idx/New Class/: Opens the Classgenerator to create a new class. Equals to the menubar command "Project"-"<idx/New
Class/"<nidx/"Project"-menu/
<item>New Group: Opens a dialog to create a new group. There, set the group name and the file filter for
the <idx/project files/ that will be displayed in this group.
<item>Show relative path: displays the files with their path name starting from the main project directory if checked; otherwise only
the filename is shown.
</itemize>

Over a group folder, the according context menu offers:
<itemize>
<item>New Group: Opens the New Group dialog as in the context menu described above.
<item>Remove group: removes the group from the <idx/LFV/.
<item>Properties: Opens the properties of the group. There, you can edit the file filters by a list of wildcards separated by commas.
</itemize>


<sect><idx/KDevelop Setup/<label id="KDevelop Setup">
<p>
<bf><idx/Make-command/:</bf>
The General Options dialog lets you configure KDevelop's general settings.
First, you should set the <idx/make-command/ available on your system. If the selected program does not exist,
KDevelop will warn you the next time you're invoking a make command.

<bf><idx/Autosave/:</bf>

If Autosave is checked, KDevelop will save all changed files periodically.  The autosaving time range can be set to 3, 5, 15 or 30 minutes.


<bf><idx/Autoswitch/:</bf>

If Autoswitch is enabled, the KDevelop windows will switch on and off according to the usage context, e.g.  if you switch to a
documentation in the Help-menu, the Documentation browser will be opened, together with the documentation tree and the <idx/output/
window turned off.
Startup:

For starting KDevelop, you have the option to enable/disable the <idx/start-logo/ to be shown during the time KDevelop loads.
Further, if you don't like the last project to be opened on startup, you can disable the default behavior.

<sect>Changing <idx/Keyboard Shortcuts/<label id="Changing Keyboard Shortcuts">
<p>
The Configure Keys dialog lets you configure the KDevelop key bindings. Note that global keys can be configured in the
KDE Control Center, such as open file and print.  A key function can be configured by choosing the menu entry. Then the
configuration can be changed by checking values like the Alt / Ctrl key etc.

<sect>Documentation<label id="Documentation">
<p>
<sect1>Directories<nidx/documentation path/
<p>
For setting up the <idx/documentation browser/ to work correctly, KDevelop needs some information about where the <idx/HTML/-documentation
is placed on the system. Therefore, the Documentation Path properties dialog needs the path of the Qt- online documentation in <idx/HTML/
as well as the path to the KDE-Library documentation.

Usually, the <idx/Qt-Documentation/ is placed in the same directory where Qt is installed; e.g. if Qt resides in /usr/local/qt, the path
you have to enter is /usr/local/qt/html. For the KDE- Documentation, you have to set the directory to the root of the
documentation, assumed all KDE-Libs documentation resides in the same directory. Both path's can be selected by pressing the
according buttons, displaying a path-selection. If your system doesn't contain the documentation for the KDE-libs,  you should
first enter the next <idx/configuration dialog/, Update <idx/KDE-Documentation/. This will create the documentation to a path of your choice,
also setting the KDE Library Doc path automatically.

<sect1>Options
<p>
<sect2>Update <idx/KDE-Documentation/
<p>
For those users who don't have a recent documentation of the <idx/KDE-libraries/, especially the documentation for the files
installed on the system, the Update <idx/KDE-Documentation/ dialog creates a new one or updates existing documentations. This
function requires your system to have <idx/KDoc/ and qt2<idx/KDoc/ installed, included in the <idx/KDE-SDK/ package. First of, you have
to set up the path to your recent kdelibs sources, which is not the include-path for KDE ! Just enter the path to the sources, like:
/home/rnolden/kdelibs-1.1/.

Then, you can choose three different installation modes, as:

<itemize>
<item> Delete old Documentation and  install to recent Documentation-path:  this assumes that you already have a documentation
installed and is placed in the path the Documentation Path-dialog was entered. This will delete all documentation and install the
newly generated documentation into the recent path.
<item> Delete old Documentation and install to new Documentation-path:   this will result in deleting the old documentation as
well as above, but gives you the choice to set up a new documentation place.
<item> Leave old Documentation untouched and install to new Documentation path:   This is recommended for a new generation of
the kdelibs documentation for users who didn't have one before and for those who want to keep the last documentation for an older
kdelibs version.
</itemize>

The "new KDE Libs Documentation path" is to be set  for option 2 and 3 of the installation mode.  This is also recommended for
users who generate a new documentation from scratch.

After pressing the OK button, KDevelop will create a subdirectory "<idx/KDoc/-reference" in the documentation path containing the <idx/KDoc/
reference files.  First, the qt library documentation <idx/classes/ will be indexed to connect the Qt documentation with the
documentation to be generated for the kdelibs.  So it is important that you have set up the Qt documentation path first to ensure
that it can be found by <tt/<cdx/qt2kdoc//. Finally, the KDE libs will be indexed and the documentation will be build with
cross-references to give browsing the most functionality.

<sect2>Create Search Database
<p>
The Create Search Database dialog, accessed via the create-button, allows the programmer to create a database to search for a
keyword interactively.  To create and use the documentation search function, you must have the program <idx/glimpse/ 4.0 installed.
Preset are the options to index the given KDE-Library documentation as well as the <idx/Qt-Documentation/, assuming the path to the
documentation files were set in the "Documentation Path" dialog of the options- menu.   Additionally, the index can include
directories the user can set up himself by the "additional directories to index"-field.  After setting a path to an additional
directory, the "Add" - button must be pushed to set the path.  A path once set can be removed from the index by selecting the path
in the path field and pushing "Remove". Furthermore, the user is offered three different modes for the index size: tiny, small and
medium.  The higher the index size, the more the index files will grow. On the other hand, a search in a bigger search-database
will be faster and more successful, so we suggest choosing a "medium" size. For using the search function, see section
<ref id="Using the Documentation Browser" name="Using the Documentation Browser">.


<chapt>Preguntas y respuestas<label id="Preguntas y respuestas">
<p>
This section addresses questions by users that were answered by the KDevelop Team or by their supporters on the KDevelop
mailing list during experiences with the current versions of KDevelop as well as bug reporting in general.

<sect><idx/Bug Reporting/ <label id="Bug Reporting">
<p>
Another improvement of KDevelop is the integrated bug-reporting system via email. If you experience a bug, you have the option to send
the KDevelop development team a bug report either by your email-client or by the bug-report dialog. All bug-reports are collected on
the KDevelop web site and can be reviewed on <url url="http://fara3.cs.uni-potsdam.de/~smeier/kdevelop/bugarchive/maillist.html" >. You
can also receive all bug-reports via subscription to the bug-report mailing list by sending an empty email to <htmlurl
url="mailto:kdevelop-bug-report-request@fara3.cs.uni-potsdam.de" name="kdevelop-bug-report-request@fara3.cs.uni-potsdam.de"> with
"subscribe <em/your_email_address/" as the body contents.

To send bug reports, please use this email address by your mail program. If you want to use KDevelop for direct bug-reporting, choose
"Bug Report" from the <idx/Help-menu/. You are presented the report dialog that lets you enter all necessary information about the
bug you found. After pressing "OK", the dialog's contents is sent to the mailing list automatically.

<sect>Where to get Information
<p>
<bf>Q:</bf> I have a question which is not addressed in the FAQ file, nor in the manuals of KDevelop. Where should I turn to ?

<bf>A:</bf>  In any case send all requests that are regarding KDevelop by subscribing to the KDevelop mailing list at <htmlurl
url="mailto:kdevelop@fara3.cs.uni-potsdam.de" name = "kdevelop@fara3.cs.uni-potsdam.de">. Send a mail with an empty header and
"subscribe" as contents; then you can participate on the discussions. All questions should go there and will be addressed there as well.
If you stick to that, you will get the most help by the developers and all users having the same problems, as well as helping to keep
the FAQ up to date.

The <idx/KDevelop Homepage/ at <url url="http://www.kdevelop.org"> also contains a <idx/mailing-list/ archive that allows you to browse
the mails already send by the subscribers, so you should look there first as most problems should have been addressed already by the
team or other users.

<sect>Library and System Problems
<p>

<bf>Q:</bf> Wrong JPEG library version: library is 61, caller expects 62

<bf>A:</bf>  There are 2 ways.
<enum>
<item> When the kdelibs are installed it installs header files for the
 jpeg libraries, these are version 61,  however most distributions
 (Redhat) use version 62 libraries. To fix  this just remove jpeglib.h
 from /opt/kde/include. The pukka include  file for version 62 should
 then be picked up. However looking at the  error message above it may
 be the other way round, in any case ensure  you only have on version
 of the header file, the library and that  they are consistent.

 It is useful to use the locate command to verify that I have
 the correct version of a library and header files e.g.
 updatedb
 locate libjpeg
 locate jpeglib

<item> You must recompiled kdesupport without jpeg
 library (./<idx/configure/ --with-libjpeg --with-libgif).
</enum>


<bf>Q:</bf>
 <tscreen><verb>
make[2]: Entering directory `/usr/local/src/kdevelop-0.3/po'
cd .. && automake --gnu --include-deps po/Makefile
aclocal.m4: 2709: `AM_PROG_INSTALL' is obsolete; use `AC_PROG_INSTALL'
make[2]: *** [Makefile.in] Error 1
</verb></tscreen>
<bf>A:</bf>  Workaround for automake-1.4/automake-2.13 users: Just run
 "aclocal" manually, then it will compile.


<bf>Q:</bf>  What must i do, if <idx/configure/ said ,that i need giflib23.

<bf>A:</bf>  Try a newer snap of kdesupport, or maybe you have another giflib installed?


<bf>Q:</bf> How can I convert a KDevelop 0.2 project to a 0.3 one?

<bf>A:</bf> Please change the AC_OUTPUT in the <idx/configure/.in to a oneline version

 for example:
 old version:
<tscreen><verb>
AC_OUTPUT(Makefile \
kdevelop/kwrite/Makefile \
kdevelop/templates/Makefile
)
</verb></tscreen>
 new version:
<tscreen><verb>
AC_OUTPUT(Makefile kdevelop/kwrite/Makefile kdevelop/templates/Makefile)
</verb></tscreen>


<bf>Q:</bf>  I  get the following <idx/Linker/ <idx/errors/ when using SuSE Linux with KDE 1.1, what do I have to do to get KDevelop linked ?
<tscreen><verb>
/usr/lib/libqt.so:
warning: multiple common of `QArrayT&lt;char&gt; type_info node'
ckdevelop.o: warning: previous common is here
ckdevelop.o: In function `CKDevelop::slotFileSaveAll(void)':
ckdevelop.o(.text+0x784): undefined reference to `kdebug(unsigned short,
unsigned short, char const *,...)'
ckdevelop.o(.text+0x839): undefined reference to `kdebug(unsigned short,
unsigned short, char const *,...)'
ckdevelop.o(.text+0x89d): undefined reference to `kdebug(unsigned short,
unsigned short, char const *,...)'
ckdevelop.o: In function `CKDevelop::slotFileSaveAs(void)':
ckdevelop.o(.text+0xd28): undefined reference to `kdebug(unsigned short,
unsigned short, char const *,...)'
ckdevelop.o: In function `CKDevelop::slotFileClose(void)':
ckdevelop.o(.text+0x1216): undefined reference to `kdebug(unsigned short,
unsigned short, char const *,...)'
ckdevelop.o(.text+0x1263): more undefined references to `kdebug(unsigned
short, unsigned short, char const     *,...)' follow  collect2: ld returned 1
exit status  make[2]: ***
[kdevelop] Error 1  make[2]: Leaving directory
'/home/LinuXDaten/Programme_Updates_Packete/KDE_Updates/Kdevelop_actual_snapshot/kdevelop-0.3/kdevelop'
make[1]: *** [all-recursive] Error 1  make[1]: Leaving directory
`/home/LinuXDaten/Programme_Updates_Packete/KDE_Updates/Kdevelop_actual_snapshot/kdevelop-0.3'
make: *** [all-recursive-am] Error 2
</verb></tscreen>
<bf>A:</bf> If you have the SuSE rpm´s of KDE-1.1, you must recompile the kdelibs without the patch commited by SuSE and reinstall
them or get an updated rpm of the kdelibs from <url url="ftp://ftp.suse.com">

<sect>Usage Questions
<p>
<bf>Q:</bf> I see the KDevelop does not allow for usage of the delete key (or backspace deleting when text is marked).

<bf>A:</bf>  go to "Options"->"Editor" and make sure that "Delete on Input" is enabled, then backspace and delete works.


<bf>Q:</bf> If I add files to my project, will they be automatically included and compiled ?

<bf>A:</bf> Yes, they are included in the <idx/Makefile.am/'s then and if you make a "Rebuild All" (./<idx/configure/ updates the <idx/Makefile/s), your new
added files will be included as well.

<bf>Q:</bf> If I removed a file, I get some weird <idx/Linker/ messages. What is wrong with my project ?

<bf>A:</bf> If the removed file is a header file, that is automatically processed by automoc (running the Qt-Meta-Object-Compiler
automatically on all headers), your removed header is still present as a moc-generated *.moc.cpp file and compiled.  Remove the
according *.moc.cpp file and rebuild the project.

<chapt>Autores
<p>
<bf>Desarrolladores principales:</bf>

Sandy Meier 			<htmlurl url="mailto:smeier@rz.uni-potsdam.de" name = "<smeier@rz.uni-potsdam.de>">
(mantenimiento, coordinador de desarrollo y proveedor de la página web)
<quote/Desarrollo principal de: estructura del programa, apariencia del entorno, gestión del proyecto./

Stefan Heidrich			<htmlurl url="mailto:sheidric@rz.uni-potsdam.de" name = "<sheidric@rz.uni-potsdam.de>">
<quote/Desarrollo principal de: <idx/KAppWizard/, habilidad de <idx/impresión/ /

Ralf Nolden			<htmlurl url="mailto:Ralf.Nolden@post.rwth-aachen.de" name = "<Ralf.Nolden@post.rwth-aachen.de>">
<quote/Main development of: KDevelop<->Dialog Editor interface, configuration functionality, online-help and handbooks/

Jonas Nordin			<htmlurl url="mailto:jonas.nordin@cenacle.se" name="<jonas.nordin@cenacle.se>">
<quote/Main development of: Classviewer and -parser/

Pascal Krahmer 			<htmlurl url="mailto:pascal@beast.de" name="<pascal@beast.de>">
<quote/Main development of: Dialog Editor/

Bernd Gehrmann 			<htmlurl url="mailto:bernd@physik.hu-berlin.de" name="<bernd@physik.hu-berlin.de>">
<quote/Main development of: Grep Dialog, CVS integration, new DOC tree/

Jörgen Olsson       <htmlurl url="mailto:jorgen@cenacle.net" name="<jorgen@cenacle.net>">
<quote/Main development of: Visual Classtree/

Stefan Bartel 			<htmlurl url="mailto:bartel@rz.uni-potsdam.de" name = "<bartel@rz.uni-potsdam.de>">
<quote/Main development of: Real-File-Viewer/



<bf>Coordinador de traducciones:</bf>

Martin Piskernig		<htmlurl url="mailto:martin.piskernig@stuwo.at" name = "<martin.piskernig@stuwo.at>">



<bf>Traductores del programa y la documentación:</bf>

Martin Spirk 				<htmlurl url="mailto:spirk@kla.pvt.cz" name="<spirk@kla.pvt.cz>"> 			-Checo

Steen Rabol    			<htmlurl url="mailto:rabol@get2net.dk" name = "<rabol@get2net.dk>">			-Danés

Sami Kuhmonen 			<htmlurl url="mailto:sami@iqs.fi" name="<sami@iqs.fi>">					-Finlandés

Herve Lefebvre 			<htmlurl url="mailto:hlefebvre@easynet.fr" name="<hlefebvre@easynet.fr>">			-Francés

Martin Piskernig    <htmlurl url="mailto:martin.piskernig@stuwo.at" name = "<martin.piskernig@stuwo.at>">	-Alemán

Pahan Szabolcs 			<htmlurl url="mailto:szabczy@bigfoot.com" name="<szabczy@bigfoot.com>">			-Húngaro

Massimo Morin       <htmlurl url="mailto:mmorin@schedsys.com" name="<mmorin@schedsys.com>"> -Italiano

Jacek Wojdel 				<htmlurl url="mailto:wojdel@kbs.twi.tudelft.nl" name="<wojdel@kbs.twi.tudelft.nl>">     -Polaco

Duarte Loreto 			<htmlurl url="mailto:dnloreto@esoterica.pt" name="<dnloreto@esoterica.pt>">		-Portugués

Ilmar Habibulin    	<htmlurl url="mailto:ilmar@ints.ru" name = "<ilmar@ints.ru>">				-Ruso

Jan Prokop 					<htmlurl url="mailto:jprokop@ibl.sk" name="<jprokop@ibl.sk>">				-Eslovaco

Salvador Gimeno 		<htmlurl url="mailto:salgiza@eui.upv.es" name="<salgiza@eui.upv.es>">		-Español

Patrik Adolfsson 		<htmlurl url="mailto:patrik.adolfsson@iname.com" name="<patrik.adolfsson@iname.com>">		-Sueco

Kaðan Kongar        <htmlurl url="mailto:kongar@doruk.net.tr" name="<kongar@doruk.net.tr>"> - Turco

<bf>Logo de inicio:</bf>

Jacek Wojdel 			<htmlurl url="mailto:wojdel@kbs.twi.tudelft.nl" name="<wojdel@kbs.twi.tudelft.nl>">


<bf>Colaboraciones, parches y arreglo de fallos:</bf>

Walter Tasin						<htmlurl url="mailto:tasin@e-technik.fh-muenchen.de" name="<tasin@e-technik.fh-muenchen.de>">

Jost Schenk    					<htmlurl url="mailto:Jost@Schenk.de" name = "<Jost@Schenk.de>">

David Barth    					<htmlurl url="mailto:dbarth@videotron.ca" name = "<dbarth@videotron.ca>">

Matthias Hipp						<htmlurl url="mailto:Matthias.Hipp@gmx.de" name = "<Matthias.Hipp@gmx.de>">

Martin Piskernig    		<htmlurl url="mailto:martin.piskernig@stuwo.at" name = "<martin.piskernig@stuwo.at>">

Matthias Hoelzer-Kluepfel    	<htmlurl url="mailto:mh@caldera.de" name = "<mh@caldera.de>">

Steen Rabol    					<htmlurl url="mailto:rabol@get2net.dk" name = "<rabol@get2net.dk>">

Matt Koss 							<htmlurl url="mailto:koss@napri.sk" name="<koss@napri.sk>">

Jochen Wilhelmy 				<htmlurl url="mailto:digisnap@cs.tu-berlin.de" name="<digisnap@cs.tu-berlin.de>">

Torsten Uhlmann 				<htmlurl url="mailto:TUhlmann@debis.com" name="<TUhlmann@debis.com>">

Stefan Mars             <htmlurl url="mailto:mars@lysator.liu.se" name="<mars@lysator.liu.se>">

Nikolay Liber           <htmlurl url="mailto:nikolay_liber@mail.ru" name="<nikolay_liber@mail.ru>">

Gordon Tyler            <htmlurl url="maito:gtyler@iafrica.com" name="<gtyler@iafrica.com>">

Huy Cuong Nguyen        <htmlurl url="maito:huyc@iquebec.com" name="<huyc@iquebec.com>">

John R. Zedlewski       <htmlurl url="mailto:zedlwski@princeton.edu" name="<zedlwski@princeton.edu>">


<bf>KDevelop contiene código fuente de las siguientes aplicaciones:</bf>

<bf/KWrite 0.98/ &copy		by Jochen Wilhelmy		<htmlurl url="mailto:digisnap@cs.tu-berlin.de" name="<digisnap@cs.tu-berlin.de>">

<bf/KDE Help/ &copy		by Martin R. Jones 		<htmlurl url="mailto:mjones@kde.org" name="<mjones@kde.org>">

<bf/KSwallow/	&copy 		by Matthias Hoelzer  <htmlurl url="mailto:hoelzer@physik.uni-wuerzburg.de"
name="<hoelzer@physik.uni-wuerzburg.de>">

<bf/kcmlocale/	&copy 1998 	by Matthias Hoelzer <htmlurl url="mailto:hoelzer@physik.uni-wuerzburg.de"
name="<hoelzer@physik.uni-wuerzburg.de>">

<chapt>Agradecimientos
<p>
We like to express special thanks to all of our family members and friends who supported us in several ways to let us construct
and improve KDevelop.

Further, we thank  Jochen Wilhelmy  for offering his program kwrite and his help on integrating it into KDevelop.

Thanks also to the KDE team and Stephan Kulow, who gave us the possibility to work on KDevelop via CVS

We hope that our free work on this product will lead to a better acceptance of Free Software and its development. Without the help
and idealism of many, the KDevelop IDE would never have been realized in such a short period of time and we're proud that so many
users already have reported good experience and brought KDevelop to it's destiny: helping free software programmers to build a
better world where users have the freedom of choice.


<chapt>Copyright <label id="Copyright">
<p>
<tscreen><verb>

KDevelop Copyright 1998,1999 The KDevelop Team.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
</verb></tscreen>

</book>



