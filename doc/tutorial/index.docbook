<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook V3.1-Based Variant V1.0//EN">
<book lang="en">
<bookinfo>
<title>KDE Application Tutorials</title>
<subtitle>The KDE Application Tutorials Handbook for the KDevelop Integrated Development Environment</subtitle>
<authorgroup>
<author>
<surname>Ralf Nolden </surname>
<affiliation>
<address><email><ulink url="mailto:Ralf.Nolden@post.rwth-aachen.de">Ralf.Nolden@post.rwth-aachen.de</ulink></email></address>
</affiliation>
</author>
<corpauthor>The KDevelop Team</corpauthor>
</authorgroup>
<date>Version 0.1 , Mon Jun 21 1999</date>
<releaseinfo><!-- information about this particular version --></releaseinfo>
<abstract>
<para>The KDE Application Tutorials Handbook for the KDevelop Integrated Development Environment, a tutorial collection on how to create KDE
applications by examples and describes how to build the tutorial examples included with the Qt library. This handbook itself is part
of the KDevelop Integrated Development Environment and is therefore also licensed under the GNU General Public License; see <link linkend="Copyright">Copyright</link> for more information.</para>
<para></para><!-- Merge this with the previous paragraph; it comes from <META NAME="description" CONTENT="..."> --></abstract>
</bookinfo>

<chapter id="Introduction">
<title>Introduction</title>

<para>As KDE is currently becoming a standard for Unix System's desktops, more and more developers want to take advantage of the well-written
API that the KDE project includes to create new applications that offer a GUI as well as an easy use of the classes provided with
Qt/KDE. The KDevelop project therefore intends to provide an IDE which enables developers to create and extend their applications
rapidly with the main focus on KDE. As beginners always have difficulties to get started, this handbook tries to explain certain
aspects of application creation for KDE by describing how to create running applications with the sample code included with the Qt
library by using the KDevelop IDE as well as creating KDE applications by examples.</para>

<para>Therefore, the next chapter will explain you how to create a project with KDevelop that is already a complete application; then we'll
walk on to the Qt online documentation containing the sources for examples on how to use the Qt library.</para>

<para>This will give you a first understanding how the underlying Qt library functions and how to use the classes provided with it; Qt is the
point where to get started as KDE is on top of the Qt library classes and KDE applications make a wide use of them.</para>

<para>Further, we'll cover on how to create a mini-KDE application with KDevelop's application wizard. From the minimum framework provided,
we will create a running example KDE application that makes use of the KDE libraries and will explain the different parts of a KDE
application in detail.</para>

<para>The KDevelop Team wishes you success in learing about KDE and Qt with this handbook and hope it will enable you to become another
programmer contributing to the KDE project.</para>

<sect1 id="Whatyoushouldknowalready">
<title>What you should know already</title>

<para>This handbook requires a base knowledge about the C++ programming language as a minimum to understand the code examples and their
functionality. Further, it is assumed that you have read <ulink url="../index.html">The User Manual to KDevelop</ulink> as well as
<ulink url="../programming/index.html">The KDevelop Programming Handbook</ulink> and know how the KDevelop IDE works in general and
what generated projects are.</para>
</sect1>
</chapter>

<chapter id="GettingStarted">
<title>Getting Started</title>

<para>Getting Started- that means, you should have set up KDevelop to work correctly first. Ensure you have access to the Qt online reference
documentation by the "Help" menu or the according book in the documentation tree. When looking a the first page of the Ot
documentation, you will see that it contains a link to a section "Tutorials" and "Examples". Under "Tutorials", you will find a 14-step
introduction into using the Qt library to build applications. On the other hand, "Examples" will lead you to a list of example
programs that Qt includes and takes for example usage reference in certain classes. Now, if you are an absolute beginner, you should be
comfortable with the idea behind Qt- providing a library that offers:</para>

<para><itemizedlist>
<listitem>
<para>a base application class (<literal remap="tt">QApplication</literal>)</para>
</listitem>
<listitem>
<para>a widget library for graphical user interfaces</para>
</listitem>
<listitem>
<para>a set of additional helper classes for graphics, file and data handling</para>
</listitem>
<listitem>
<para>the signal-slot mechanism for object communication</para>
</listitem>
<listitem>
<para>event controlling by event loops and virtual methods</para>
</listitem>
</itemizedlist>
</para>

<para>If that doesn't tell you anything right now, you should read about the Qt library in <ulink url="../programming/index-2.html#ss2.1">The KDevelop Programming Handbook</ulink> where the basics for a Qt application are described in detail. There, you will also find and
introduction about the difference between a Qt and a KDE application, which is not much at the first level of the Qt tutorial step.</para>

<para>Now, to learn about Qt first would be a good start for programming KDE applications as well, so we will create a project that will
produce the tutorial applications after editing.</para>

<para>To do this, start with opening KDevelop and select "Project"-"New" from the menubar. The application wizard opens and you have to
select which type of project you want to build. For Qt applications, you would choose the Qt application, but we will use the mini-KDE
project to build our examples. The reason is simple: the Qt tutorials don't contain much code, and  by choosing the Qt application in
the application wizard, we would have to do a lot of changing on the provided code to create the "true" examples.</para>

<para>But as the mini-KDE application only consists of an empty main window but also checks for the Qt library and header files, it will fit
for our purposes and doesn't require much changes.</para>

<para>When entering the next wizard page, we have to enter the project-specific information. There, we can leave out any KDE-specific
additions such as a mini-icon and a main icon, documentation etc. We just fill in the information that will be useful for building a
suitable base for the tutorials. As the structure of the tutorial steps builds the next step on the previously created code, we can
start with <literal remap="tt">MyWidget</literal> as the project name. This will already build us the base class that is needed in chapter 4, so we don't have
to care for that later. As we want to start with the first tutorial step, we will use '1' as the project number, which we can increase
later when moving to the next step.</para>

<para>Then, fill in the other required information such as your name, email address and project directory. That would be all we need and we
can flip to the next page. Insert your header for the project's header file here or use the given example. The same is done with the
4th page, where the same has to be set for the source files. Finally, the last page is entered, where you have to press "Create" to
build the project. If the button is not available, start at the first page again and make sure you didn't miss to insert any required
information.</para>

<para>If everything went OK, the project has been build and the messages window in the application wizard will have "READY" at it's last
line.  Select "Exit" to finish the wizard.</para>

<para>When looking at the treeview on the left, you will see that the project alreay includes a class "MyWidget"- this is because we chose
this to be the application name. Further, when opening "Functions" in the classviewer's "Globals" folder, you will see that the
application already contains a <literal remap="tt">main()</literal> function where the execution will start.</para>

<para>Now the application is already set up. You could do an "Execute" or "Make", but as we want to create the tutorial applications, we can
go ahead and change the code first to create our tutorial examples- which we'll do in the next step.</para>
</chapter>

<chapter id="BuildingtheQtTutorials">
<title>Building the Qt Tutorials</title>

<sect1 id="StepOneHelloWorld">
<title>Step One: Hello World!</title>

<para>As the previous chapter explains, we created a project called <literal remap="tt">MyWidget</literal>- now, when looking at the first tutorial page of the Qt
documentation, you will see that the first application only uses a <literal remap="tt">main()</literal> function. Therefore, we only have to change the given
<literal remap="tt">main()</literal> function of our generated project to get the first tutorial step running.</para>

<para>To access the <literal remap="tt">main()</literal> function, select it from the classviewer's "Globals" folder, which contains a subfolder for "Functions" where
all non-class functions are listed. This will open the file <literal remap="tt">main.cpp</literal> in the "C/C++ Files" window and the editing cursor is already
set in front of the first line of <literal remap="tt">main()</literal>.</para>
<sect2 id="Whattochangefirst">
<title>What to change first</title>

<para>We could start changing the given code towards the desired one which is listed in the tutorial- but it can be even easier. Select the
contents of the <literal remap="tt">main()</literal> function with the mouse or by holding the Shift-key pressed while selecting the lines with the down-arrow
key. Then select "Cut" from the "Edit" menu or press the DEL-key to remove the selected code. This will clear the main function and we
can start from scratch to build our first tutorial.</para>
</sect2>
<sect2 id="Enteringthetutorialcode">
<title>Entering the tutorial code</title>

<para>Now, to insert the code from the tutorial, you could first read it carefully and try to remember which line contained which code. Then,
after reading the tutorial's line-by-line description, you could use it as an example to write the tutorial by yourself.</para>

<para>Those who want to go the easy way: select the contents of the listed <literal remap="tt">main()</literal> function in the documentation browser and press the
"Copy"-icon from the toolbar. Optionally, you could use the context-menu or the according entry in the "Edit" menu. This will copy the
selection into the clipboard and, after switching back to the sourcecode window, can be inserted with "Paste" (either from the context
menu, the toolbar icon or the according entry in the "Edit" menu).</para>

<para>Finally, add the according header files outside the <literal remap="tt">main()</literal> function:</para>

<para><screen>#include &lt;qapplication.h&gt;
#include &lt;qpushbutton.h&gt;
</screen>
</para>

<para>That's it ! The source code is done for your first tutorial application.</para>
</sect2>
<sect2 id="BuildingHelloWorld">
<title>Building Hello World!</title>

<para>To build the first tutorial, select "Make" from the "Build" menu or press the according toolbar icon. Optionally, you could choose
"Execute" as well, which results in running the application after the build was successful.</para>

<para>If the build stops due to an error, be assured the fault was on the programmer's side, not on the tutorial ! This would be sad to
search for an error just when you decided to program for KDE and/or Qt, but you can use this to train yourself to use KDevelop. Now, to
find an error, you have two options: either select the according error message in the output window, which will bring you to the
according line the error occured, or press the F4 key; optionally you could use the "Next Error" entry in the "View" menu.</para>
</sect2>
<sect2 id="Exercises">
<title>Exercises</title>

<para>You may ask "Exercises ? This one was so simple, I don't need to excercise !", but be assured, things will get more complicated. This
one was the easiest example, but the more complex they will get the more thinking is asked on your side to understand and follow the
tutorial steps. Also the excercises will enable you to learn how to acutally use KDevelop and it's features.</para>

<para>To teach yourself more with the first tutorial, you should try to do the following changes to the given code and see how this will
influence the application behavoir:</para>

<para><orderedlist><listitem>
<para>change the pushbutton to a QLabel.</para>
</listitem>
<listitem>
<para>use <literal remap="tt">setText()</literal> instead of directly setting the text in the pushbutton's constructor</para>
</listitem>
<listitem>
<para>use <literal remap="tt">QPushButton::resize ( const QSize & s )</literal> instead of setting the size by width and height directly. Create a <literal remap="tt">QSize</literal>
instance first that contains the size</para>
</listitem>
<listitem>
<para>play with the sizes to see which is width and heigth</para>
</listitem>
</orderedlist>
</para>
</sect2>
</sect1>

<sect1 id="Step2and3Extensions">
<title>Step 2 and 3: Extensions</title>

<para>The tutorial steps 2 and 3 are extending the facilities of the first tutorial. There, you will learn about signals and slots as well as
parent-child relationships between widgets.</para>

<para>Now, why is it important to learn about that ? Well, the signals and slots are building the technology which make the difference when
comparing the Qt library to other widget library.  Whenever you will hit an implementation problem where you want to communicate
between objects, this will make your work incredible short and nothing serious will happen if something went wrong, even misconnections
don't lead to a segmentation fault. This is the strength of the Qt library and a lot of KDE/Qt developer's won't want to miss it
anymore because of it's flexibility. Understanding the signal/slot mechanism therefore is essential to create any KDE/Qt application.</para>

<para>Another thing to watch out for is the fact that the button terminates the <literal remap="tt">QApplication</literal> instance by calling <literal remap="tt">quit()</literal>. You will
meet <literal remap="tt">quit()</literal> again when working with <literal remap="tt">QApplication</literal>'s KDE-pendant, <literal remap="tt">KApplication</literal></para>
</sect1>

<sect1 id="WritingyourownWidgets">
<title>Writing your own Widgets</title>

<para>Now, after having successfully modified and extended the <literal remap="tt">main()</literal> function, you will hit the point to create a new widget- a unique
widget that only can be constructed with the class you're about to write in step 4.  Actually, the class has been created by the
application wizard for you, so there is not much to add- just that you have to insert the code that lesson 4 places in the
<literal remap="tt">main.cpp</literal> file into the <literal remap="tt">MyWidget</literal> classes' header and implementation file. Fortunately, you only have to add the implementation
to the constructor code.</para>

<para>To access the constructor, select it from the classviewer. This will automatically bring you to the implementation where you have to
add the code.</para>

<para>Here, you only have to watch out for the include of <literal remap="tt">qfont.h</literal>- <literal remap="tt">QFont</literal> is only used in the constructor code of <literal remap="tt">MyWidget</literal>.
Therefore, add <literal remap="tt">&num;include &lt;qfont.h&gt;</literal> to the top of the <literal remap="tt">mywidget.cpp</literal> file.</para>

<para>To run the new application, just hit "Execute". This will result in compling the changes after an autosaving.</para>
</sect1>

<sect1 id="ExtendingtheWidgetClass">
<title>Extending the Widget Class</title>

<para>Now, in lesson 5 the target is to extend the widget class. Therefore, you will learn about virtual functions as well. Here, the
<literal remap="tt">resizeEvent()</literal> is reimplemented. What is important to learn here (besides extending a class) is that Qt works with user events by
virtual functions that take an event as a parameter. Therefore, you should make yourself comfortable with the following classes of the
Qt library:</para>

<para><itemizedlist>
<listitem>
<para>QEvent</para>
</listitem>
<listitem>
<para>QChildEvent</para>
</listitem>
<listitem>
<para>QCloseEvent</para>
</listitem>
<listitem>
<para>QFocusEvent</para>
</listitem>
<listitem>
<para>QKeyEvent</para>
</listitem>
<listitem>
<para>QMouseEvent</para>
</listitem>
<listitem>
<para>QMoveEvent</para>
</listitem>
<listitem>
<para>QPaintEvent</para>
</listitem>
<listitem>
<para>QResizeEvent</para>
</listitem>
<listitem>
<para>QTimerEvent</para>
</listitem>
</itemizedlist>
</para>

<para>Whenever writing custom widgets, especially view areas of applications, you will have to overwrite the default implementation of the
widget's event-methods by your own for certain events that have to be processed. Those would be e.g.</para>

<para><literal remap="tt">virtual void mousePressEvent ( QMouseEvent * )</literal> for processing a mouse event to pop up a context menu. In the implementation, you
have to insert a formal parameter into the function header, most developers either use <literal remap="tt">event</literal> or just <literal remap="tt">e</literal> as the parameter name.</para>

<para>Then, you can process the event's parameters. For a <literal remap="tt">QMouseEvent</literal>, you have to ask if the right, middle or left mouse button was the
one that caused the event.</para>
</sect1>

<sect1 id="AddinganewClass">
<title>Adding a new Class</title>

<para>With lesson 6, you will have to add a class to the tutorial application. Now, normally you would think "I just will create a header
file and an implementation file- then I'm done"- but KDevelop will make it easier for you. When adding a class, you should always use
the Classgenerator. This will do all the work for you so you just will have to add the specific code.</para>

<para>To add a class with the Classgenerator, choose "Project"-"New Class", which will open a dialog to enter all needed values for the class
you want to add. The first thing we have to insert is the classname. The tutorial name this <literal remap="tt">LCDRange</literal>, so this has to be inserted
first. Then proceed to the baseclass. The baseclass is the one that the new class inherits. Looking at the tutorial (Qt 1.42), this is
<literal remap="tt">QWidget</literal>.  Now, as most GUI classes to add would inherit QWidget, the Classgenerator makes it even easier. Leave the baseclass
empty and instead check "QWidget child class" in the "Additional Options" section. This will automatically add the required
<literal remap="tt">Q&lowbar;OBJECT</literal> macro to the headerfile to add slots and signals later (which is required in chapter 7).</para>

<para>As the filenames are automatically inserted, you don't have to care for that. The only thing that we would suggest adding is the
documentation. It is always a good style to add a desciptive documentation to the class, especially as the classname <literal remap="tt">LCDRange</literal>
doesn't inform you specifically about the purpose of the widget.</para>
</sect1>

<sect1 id="Step714">
<title>Step 7-14</title>

<para>For the rest of the tutorial steps, you are prepared and know everything you have to know- adding the classes required and doing the
changes.</para>

<para>After each change you should do a new build and check your code for errors. Run the application and follow it's execution;
additionally, you should play with KDevelop's options for "Build"- execute the application with a commandline argument such as
--geometry and debug it with KDbg in the Tools-window. Then you should be able to proceed with the Qt examples that will be discussed
in the next chapter.</para>
</sect1>
</chapter>

<chapter id="Copyright">
<title>Copyright </title>

<para><screen>
KDevelop Copyright 1998,1999 The KDevelop Team.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
</screen>
</para>
</chapter>
</book>
<!--
Local Variables:
mode: sgml
sgml-omittag: nil
sgml-shorttag: t
End:
-->
