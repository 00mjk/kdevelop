//This is file has been generated by xmltokross, you should not edit this file but the files used to generate it.

#include <QtCore/QObject>
#include <QtCore/QVariant>
#include <kross/core/manager.h>
#include <kross/core/wrapperinterface.h>
#include <language/backgroundparser/backgroundparser.h>

class KrossKDevelopBackgroundParser : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossKDevelopBackgroundParser(KDevelop::BackgroundParser* obj, QObject* parent=0) : QObject(parent), wrapped(obj)		{ setObjectName("KDevelop::BackgroundParser"); }
		void* wrappedObject() const { return wrapped; }

		Q_PROPERTY(const QMetaObject  staticMetaObject READ getstaticMetaObject SCRIPTABLE true)
		Q_SCRIPTABLE const QMetaObject  getstaticMetaObject() const { return wrapped->staticMetaObject; }
		Q_SCRIPTABLE QString statusName() const { return wrapped->statusName(); }
		Q_SCRIPTABLE void clear(QObject* x0) { wrapped->clear(x0); }
		Q_SCRIPTABLE KDevelop::ParseJob* parseJobForDocument(const KUrl& x0) const { return wrapped->parseJobForDocument(x0); }
		Q_SCRIPTABLE KDevelop::ParserDependencyPolicy* dependencyPolicy() const { return wrapped->dependencyPolicy(); }
		Q_SCRIPTABLE void setThreadCount(int x0) { wrapped->setThreadCount(x0); }
		Q_SCRIPTABLE void setDelay(int x0) { wrapped->setDelay(x0); }
		Q_SCRIPTABLE void addManagedTopRange(const KUrl& x0, KTextEditor::SmartRange* x1) { wrapped->addManagedTopRange(x0, x1); }
		Q_SCRIPTABLE void removeManagedTopRange(KTextEditor::SmartRange* x0) { wrapped->removeManagedTopRange(x0); }
		Q_SCRIPTABLE void suspend() { wrapped->suspend(); }
		Q_SCRIPTABLE void resume() { wrapped->resume(); }
		Q_SCRIPTABLE void addDocument(const KUrl& x0) { wrapped->addDocument(x0); }
		Q_SCRIPTABLE void addDocumentList(const KUrl::List& x0) { wrapped->addDocumentList(x0); }
		Q_SCRIPTABLE void removeDocument(const KUrl& x0) { wrapped->removeDocument(x0); }
		Q_SCRIPTABLE void parseDocuments() { wrapped->parseDocuments(); }
		Q_SCRIPTABLE void updateProgressBar() { wrapped->updateProgressBar(); }
	private:
		KDevelop::BackgroundParser* wrapped;
};

bool krossbackgroundparser_registerHandler(const QByteArray& name, Kross::MetaTypeHandler::FunctionPtr* handler)
{ Kross::Manager::self().registerMetaTypeHandler(name, handler); return false; }

namespace Handlers
{
QVariant _kDevelopBackgroundParserHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::BackgroundParser* t=static_cast<KDevelop::BackgroundParser*>(type);
	Q_ASSERT(dynamic_cast<KDevelop::BackgroundParser*>(t));
	return qVariantFromValue((QObject*) new KrossKDevelopBackgroundParser(t, 0));
}
bool b_KDevelopBackgroundParser=krossbackgroundparser_registerHandler("KDevelop::BackgroundParser*", _kDevelopBackgroundParserHandler);
QVariant kDevelopBackgroundParserHandler(KDevelop::BackgroundParser* type){ return _kDevelopBackgroundParserHandler(type); }
QVariant kDevelopBackgroundParserHandler(const KDevelop::BackgroundParser* type) { return _kDevelopBackgroundParserHandler((void*) type); }

}
#include "krossbackgroundparser.moc"
