//This is file has been generated by xmltokross, you should not edit this file but the files used to generate it.

#include <QtCore/QObject>
#include <QtCore/QVariant>
#include <kross/core/manager.h>
#include <kross/core/wrapperinterface.h>
#include <context.h>

using namespace KDevelop;

class KrossFileContext : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossFileContext(KDevelop::FileContext* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE KUrl::List urls() const { return wrapped->urls(); }
		Q_SCRIPTABLE int type() const { return wrapped->type(); }
	private:
		KDevelop::FileContext* wrapped;
};

class KrossProjectItemContext : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossProjectItemContext(KDevelop::ProjectItemContext* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE int type() const { return wrapped->type(); }
		Q_SCRIPTABLE QList<ProjectBaseItem*> items() const { return wrapped->items(); }
	private:
		KDevelop::ProjectItemContext* wrapped;
};

class KrossContext : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossContext(KDevelop::Context* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE int type() const { return wrapped->type(); }
		Q_SCRIPTABLE bool hasType(int type) const { return wrapped->hasType(type); }
	private:
		KDevelop::Context* wrapped;
};

class KrossEditorContext : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossEditorContext(KDevelop::EditorContext* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE QString currentLine() const { return wrapped->currentLine(); }
		Q_SCRIPTABLE KTextEditor::View* view() const { return wrapped->view(); }
		Q_SCRIPTABLE KTextEditor::Cursor position() const { return wrapped->position(); }
		Q_SCRIPTABLE KUrl url() const { return wrapped->url(); }
		Q_SCRIPTABLE QString currentWord() const { return wrapped->currentWord(); }
		Q_SCRIPTABLE int type() const { return wrapped->type(); }
	private:
		KDevelop::EditorContext* wrapped;
};

bool krosscontext_registerHandler(const QByteArray& name, Kross::MetaTypeHandler::FunctionPtr* handler)
{ Kross::Manager::self().registerMetaTypeHandler(name, handler); return false; }

namespace Handlers
{
QVariant _fileContextHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::FileContext* t=static_cast<KDevelop::FileContext*>(type);
	return qVariantFromValue((QObject*) new KrossFileContext(t, 0));
}
bool b_FileContext=krosscontext_registerHandler("KDevelop::FileContext*", _fileContextHandler);

QVariant _projectItemContextHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::ProjectItemContext* t=static_cast<KDevelop::ProjectItemContext*>(type);
	return qVariantFromValue((QObject*) new KrossProjectItemContext(t, 0));
}
bool b_ProjectItemContext=krosscontext_registerHandler("KDevelop::ProjectItemContext*", _projectItemContextHandler);

QVariant _contextHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::Context* t=static_cast<KDevelop::Context*>(type);
	return qVariantFromValue((QObject*) new KrossContext(t, 0));
}
bool b_Context=krosscontext_registerHandler("KDevelop::Context*", _contextHandler);

QVariant _editorContextHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::EditorContext* t=static_cast<KDevelop::EditorContext*>(type);
	return qVariantFromValue((QObject*) new KrossEditorContext(t, 0));
}
bool b_EditorContext=krosscontext_registerHandler("KDevelop::EditorContext*", _editorContextHandler);

}
#include "krosscontext.moc"
