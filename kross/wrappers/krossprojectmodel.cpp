//This is file has been generated by xmltokross, you should not edit this file but the files used to generate it.

#include <QtCore/QObject>
#include <QtCore/QVariant>
#include <kross/core/manager.h>
#include <kross/core/wrapperinterface.h>
#include <project/projectmodel.h>

using namespace KDevelop;

class KrossProjectExecutableTargetItem : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossProjectExecutableTargetItem(KDevelop::ProjectExecutableTargetItem* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE int type() const { return wrapped->type(); }
	private:
		KDevelop::ProjectExecutableTargetItem* wrapped;
};

class KrossProjectLibraryTargetItem : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossProjectLibraryTargetItem(KDevelop::ProjectLibraryTargetItem* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE int type() const { return wrapped->type(); }
	private:
		KDevelop::ProjectLibraryTargetItem* wrapped;
};

class KrossProjectBuildFolderItem : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossProjectBuildFolderItem(KDevelop::ProjectBuildFolderItem* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE void setIcon() { wrapped->setIcon(); }
		Q_SCRIPTABLE int type() const { return wrapped->type(); }
	private:
		KDevelop::ProjectBuildFolderItem* wrapped;
};

class KrossProjectTestTargetItem : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossProjectTestTargetItem(KDevelop::ProjectTestTargetItem* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE int type() const { return wrapped->type(); }
	private:
		KDevelop::ProjectTestTargetItem* wrapped;
};

class KrossProjectFolderItem : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossProjectFolderItem(KDevelop::ProjectFolderItem* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE void setUrl(KUrl const& x0) { wrapped->setUrl(x0); }
		Q_SCRIPTABLE bool isProjectRoot() const { return wrapped->isProjectRoot(); }
		Q_SCRIPTABLE void setIcon() { wrapped->setIcon(); }
		Q_SCRIPTABLE bool hasFileOrFolder(QString const& name) const { return wrapped->hasFileOrFolder(name); }
		Q_SCRIPTABLE KUrl const url() const { return wrapped->url(); }
		Q_SCRIPTABLE void setProjectRoot(bool isRoot) { wrapped->setProjectRoot(isRoot); }
		Q_SCRIPTABLE int type() const { return wrapped->type(); }
		Q_SCRIPTABLE KDevelop::ProjectFolderItem* folder() const { return wrapped->folder(); }
	private:
		KDevelop::ProjectFolderItem* wrapped;
};

class KrossWorkspaceItem : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossWorkspaceItem(KDevelop::WorkspaceItem* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE KSharedConfig::Ptr metadataConfiguration() const { return wrapped->metadataConfiguration(); }
		Q_SCRIPTABLE QString name() const { return wrapped->name(); }
		Q_SCRIPTABLE QString metadataDirectory() const { return wrapped->metadataDirectory(); }
	private:
		KDevelop::WorkspaceItem* wrapped;
};

class KrossProjectTargetItem : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossProjectTargetItem(KDevelop::ProjectTargetItem* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE KDevelop::ProjectTargetItem* target() const { return wrapped->target(); }
		Q_SCRIPTABLE void setIcon() { wrapped->setIcon(); }
		Q_SCRIPTABLE int type() const { return wrapped->type(); }
	private:
		KDevelop::ProjectTargetItem* wrapped;
};

class KrossProjectFileItem : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossProjectFileItem(KDevelop::ProjectFileItem* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE void setUrl(KUrl const& x0) { wrapped->setUrl(x0); }
		Q_SCRIPTABLE void setIcon() { wrapped->setIcon(); }
		Q_SCRIPTABLE KUrl const url() const { return wrapped->url(); }
		Q_SCRIPTABLE int type() const { return wrapped->type(); }
		Q_SCRIPTABLE KDevelop::ProjectFileItem* file() const { return wrapped->file(); }
	private:
		KDevelop::ProjectFileItem* wrapped;
};

class KrossProjectModel : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossProjectModel(KDevelop::ProjectModel* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE void fetchMore(QModelIndex const& parent) { wrapped->fetchMore(parent); }
		Q_SCRIPTABLE KDevelop::WorkspaceItem* workspace() const { return wrapped->workspace(); }
		Q_SCRIPTABLE KDevelop::ProjectBaseItem* item(QModelIndex const& index) const { return wrapped->item(index); }
		Q_SCRIPTABLE void resetModel() { wrapped->resetModel(); }
		Q_SCRIPTABLE bool canFetchMore(QModelIndex const& parent) const { return wrapped->canFetchMore(parent); }
	private:
		KDevelop::ProjectModel* wrapped;
};

class KrossProjectBaseItem : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossProjectBaseItem(KDevelop::ProjectBaseItem* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE QList<ProjectFolderItem*> folderList() const { return wrapped->folderList(); }
		Q_SCRIPTABLE KDevelop::ProjectTargetItem* target() const { return wrapped->target(); }
		Q_SCRIPTABLE void setIcon() { wrapped->setIcon(); }
		Q_SCRIPTABLE QList<ProjectFileItem*> fileList() const { return wrapped->fileList(); }
		Q_SCRIPTABLE void setParent(QStandardItem* parent) { wrapped->setParent(parent); }
		Q_SCRIPTABLE void add(KDevelop::ProjectBaseItem* item) { wrapped->add(item); }
		Q_SCRIPTABLE KDevelop::ProjectFileItem* file() const { return wrapped->file(); }
		Q_SCRIPTABLE QList<ProjectTargetItem*> targetList() const { return wrapped->targetList(); }
		Q_SCRIPTABLE QList<ProjectTestTargetItem*> testList() const { return wrapped->testList(); }
		Q_SCRIPTABLE KDevelop::ProjectFolderItem* folder() const { return wrapped->folder(); }
		Q_SCRIPTABLE KDevelop::IProject* project() const { return wrapped->project(); }
	private:
		KDevelop::ProjectBaseItem* wrapped;
};

bool krossprojectmodel_registerHandler(const QByteArray& name, Kross::MetaTypeHandler::FunctionPtr* handler)
{ Kross::Manager::self().registerMetaTypeHandler(name, handler); return false; }

namespace Handlers
{
QVariant _projectExecutableTargetItemHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::ProjectExecutableTargetItem* t=static_cast<KDevelop::ProjectExecutableTargetItem*>(type);
	return qVariantFromValue((QObject*) new KrossProjectExecutableTargetItem(t, 0));
}
bool b_ProjectExecutableTargetItem=krossprojectmodel_registerHandler("KDevelop::ProjectExecutableTargetItem*", _projectExecutableTargetItemHandler);

QVariant _projectLibraryTargetItemHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::ProjectLibraryTargetItem* t=static_cast<KDevelop::ProjectLibraryTargetItem*>(type);
	return qVariantFromValue((QObject*) new KrossProjectLibraryTargetItem(t, 0));
}
bool b_ProjectLibraryTargetItem=krossprojectmodel_registerHandler("KDevelop::ProjectLibraryTargetItem*", _projectLibraryTargetItemHandler);

QVariant _projectBuildFolderItemHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::ProjectBuildFolderItem* t=static_cast<KDevelop::ProjectBuildFolderItem*>(type);
	return qVariantFromValue((QObject*) new KrossProjectBuildFolderItem(t, 0));
}
bool b_ProjectBuildFolderItem=krossprojectmodel_registerHandler("KDevelop::ProjectBuildFolderItem*", _projectBuildFolderItemHandler);

QVariant _projectTestTargetItemHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::ProjectTestTargetItem* t=static_cast<KDevelop::ProjectTestTargetItem*>(type);
	return qVariantFromValue((QObject*) new KrossProjectTestTargetItem(t, 0));
}
bool b_ProjectTestTargetItem=krossprojectmodel_registerHandler("KDevelop::ProjectTestTargetItem*", _projectTestTargetItemHandler);

QVariant _projectFolderItemHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::ProjectFolderItem* t=static_cast<KDevelop::ProjectFolderItem*>(type);
	return qVariantFromValue((QObject*) new KrossProjectFolderItem(t, 0));
}
bool b_ProjectFolderItem=krossprojectmodel_registerHandler("KDevelop::ProjectFolderItem*", _projectFolderItemHandler);

QVariant _workspaceItemHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::WorkspaceItem* t=static_cast<KDevelop::WorkspaceItem*>(type);
	return qVariantFromValue((QObject*) new KrossWorkspaceItem(t, 0));
}
bool b_WorkspaceItem=krossprojectmodel_registerHandler("KDevelop::WorkspaceItem*", _workspaceItemHandler);

QVariant _projectTargetItemHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::ProjectTargetItem* t=static_cast<KDevelop::ProjectTargetItem*>(type);
	return qVariantFromValue((QObject*) new KrossProjectTargetItem(t, 0));
}
bool b_ProjectTargetItem=krossprojectmodel_registerHandler("KDevelop::ProjectTargetItem*", _projectTargetItemHandler);

QVariant _projectFileItemHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::ProjectFileItem* t=static_cast<KDevelop::ProjectFileItem*>(type);
	return qVariantFromValue((QObject*) new KrossProjectFileItem(t, 0));
}
bool b_ProjectFileItem=krossprojectmodel_registerHandler("KDevelop::ProjectFileItem*", _projectFileItemHandler);

QVariant _projectModelHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::ProjectModel* t=static_cast<KDevelop::ProjectModel*>(type);
	return qVariantFromValue((QObject*) new KrossProjectModel(t, 0));
}
bool b_ProjectModel=krossprojectmodel_registerHandler("KDevelop::ProjectModel*", _projectModelHandler);

QVariant _projectBaseItemHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::ProjectBaseItem* t=static_cast<KDevelop::ProjectBaseItem*>(type);
	return qVariantFromValue((QObject*) new KrossProjectBaseItem(t, 0));
}
bool b_ProjectBaseItem=krossprojectmodel_registerHandler("KDevelop::ProjectBaseItem*", _projectBaseItemHandler);

}
#include "krossprojectmodel.moc"
