//This is file has been generated by xmltokross, you should not edit this file but the files used to generate it.

#include <QtCore/QObject>
#include <QtCore/QVariant>
#include <kross/core/manager.h>
#include <kross/core/wrapperinterface.h>
#include <contextmenuextension.h>

using namespace KDevelop;

class KrossContextMenuExtension : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossContextMenuExtension(KDevelop::ContextMenuExtension* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE KDevelop::ContextMenuExtension operator=(KDevelop::ContextMenuExtension const& rhs) { return wrapped->operator=(rhs); }
		Q_SCRIPTABLE void addAction(QString const& group, QAction* action) { wrapped->addAction(group, action); }
		Q_SCRIPTABLE void populateMenu(QMenu* menu, QList<ContextMenuExtension> const& extensions) { wrapped->populateMenu(menu, extensions); }
		Q_SCRIPTABLE QList<QAction*> actions(QString const& group) const { return wrapped->actions(group); }
		Q_PROPERTY(QString const VcsGroup READ getVcsGroup SCRIPTABLE true)
		Q_SCRIPTABLE QString const getVcsGroup() const { return wrapped->VcsGroup; }
		Q_PROPERTY(QString const ExtensionGroup READ getExtensionGroup SCRIPTABLE true)
		Q_SCRIPTABLE QString const getExtensionGroup() const { return wrapped->ExtensionGroup; }
		Q_PROPERTY(QString const FileGroup READ getFileGroup SCRIPTABLE true)
		Q_SCRIPTABLE QString const getFileGroup() const { return wrapped->FileGroup; }
		Q_PROPERTY(QString const BuildGroup READ getBuildGroup SCRIPTABLE true)
		Q_SCRIPTABLE QString const getBuildGroup() const { return wrapped->BuildGroup; }
		Q_PROPERTY(QString const RefactorGroup READ getRefactorGroup SCRIPTABLE true)
		Q_SCRIPTABLE QString const getRefactorGroup() const { return wrapped->RefactorGroup; }
		Q_PROPERTY(QString const RunGroup READ getRunGroup SCRIPTABLE true)
		Q_SCRIPTABLE QString const getRunGroup() const { return wrapped->RunGroup; }
		Q_PROPERTY(QString const EditGroup READ getEditGroup SCRIPTABLE true)
		Q_SCRIPTABLE QString const getEditGroup() const { return wrapped->EditGroup; }
		Q_PROPERTY(QString const ProjectGroup READ getProjectGroup SCRIPTABLE true)
		Q_SCRIPTABLE QString const getProjectGroup() const { return wrapped->ProjectGroup; }
		Q_PROPERTY(QString const DebugGroup READ getDebugGroup SCRIPTABLE true)
		Q_SCRIPTABLE QString const getDebugGroup() const { return wrapped->DebugGroup; }
	private:
		KDevelop::ContextMenuExtension* wrapped;
};

bool krosscontextmenuextension_registerHandler(const QByteArray& name, Kross::MetaTypeHandler::FunctionPtr* handler)
{ Kross::Manager::self().registerMetaTypeHandler(name, handler); return false; }

namespace Handlers
{
QVariant _contextMenuExtensionHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::ContextMenuExtension* t=static_cast<KDevelop::ContextMenuExtension*>(type);
	return qVariantFromValue((QObject*) new KrossContextMenuExtension(t, 0));
}
bool b_ContextMenuExtension=krosscontextmenuextension_registerHandler("KDevelop::ContextMenuExtension*", _contextMenuExtensionHandler);

}
#include "krosscontextmenuextension.moc"
