//This is file has been generated by xmltokross, you should not edit this file but the files used to generate it.

#include <QtCore/QObject>
#include <QtCore/QVariant>
#include <kross/core/manager.h>
#include <kross/core/wrapperinterface.h>
#include <iuicontroller.h>

using namespace KDevelop;

class KrossIToolViewFactory : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossIToolViewFactory(KDevelop::IToolViewFactory* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE Qt::DockWidgetArea defaultPosition() { return wrapped->defaultPosition(); }
		Q_SCRIPTABLE void viewCreated(Sublime::View* view) { wrapped->viewCreated(view); }
		Q_SCRIPTABLE QString id() const { return wrapped->id(); }
		Q_SCRIPTABLE QWidget* create(QWidget* parent=0) { return wrapped->create(parent); }
	private:
		KDevelop::IToolViewFactory* wrapped;
};

class KrossIUiController : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossIUiController(KDevelop::IUiController* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}
		void* wrappedObject() const { return wrapped; }

		Q_SCRIPTABLE KParts::MainWindow* activeMainWindow() { return wrapped->activeMainWindow(); }
		Q_SCRIPTABLE void addToolView(QString const& name, KDevelop::IToolViewFactory* factory) { wrapped->addToolView(name, factory); }
		Q_SCRIPTABLE void removeToolView(KDevelop::IToolViewFactory* factory) { wrapped->removeToolView(factory); }
		Q_SCRIPTABLE void switchToArea(QString const& areaName, KDevelop::IUiController::SwitchMode switchMode) { wrapped->switchToArea(areaName, switchMode); }
		Q_SCRIPTABLE Sublime::Controller* controller() { return wrapped->controller(); }
	private:
		KDevelop::IUiController* wrapped;
};

using namespace Sublime;

using namespace KParts;

bool krossiuicontroller_registerHandler(const QByteArray& name, Kross::MetaTypeHandler::FunctionPtr* handler)
{ Kross::Manager::self().registerMetaTypeHandler(name, handler); return false; }

namespace Handlers
{
QVariant _iToolViewFactoryHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::IToolViewFactory* t=static_cast<KDevelop::IToolViewFactory*>(type);
	return qVariantFromValue((QObject*) new KrossIToolViewFactory(t, 0));
}
bool b_IToolViewFactory=krossiuicontroller_registerHandler("KDevelop::IToolViewFactory*", _iToolViewFactoryHandler);

QVariant _iUiControllerHandler(void* type)
{
	if(!type) return QVariant();
	KDevelop::IUiController* t=static_cast<KDevelop::IUiController*>(type);
	return qVariantFromValue((QObject*) new KrossIUiController(t, 0));
}
bool b_IUiController=krossiuicontroller_registerHandler("KDevelop::IUiController*", _iUiControllerHandler);

}
#include "krossiuicontroller.moc"
