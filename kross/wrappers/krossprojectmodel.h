#ifndef KROSSPROJECTMODEL_H
#define KROSSPROJECTMODEL_H

#include<QtCore/QVariant>

//This is file has been generated by xmltokross, you should not edit this file but the files used to generate it.

#include <projectmodel.h>
namespace Handlers
{
	QVariant _projectExecutableTargetItemHandler(void* type);
	QVariant projectExecutableTargetItemHandler(KDevelop::ProjectExecutableTargetItem* type) { return _projectExecutableTargetItemHandler((void*) type); }
	QVariant projectExecutableTargetItemHandler(const KDevelop::ProjectExecutableTargetItem* type) { return _projectExecutableTargetItemHandler((void*) type); }

	QVariant _projectLibraryTargetItemHandler(void* type);
	QVariant projectLibraryTargetItemHandler(KDevelop::ProjectLibraryTargetItem* type) { return _projectLibraryTargetItemHandler((void*) type); }
	QVariant projectLibraryTargetItemHandler(const KDevelop::ProjectLibraryTargetItem* type) { return _projectLibraryTargetItemHandler((void*) type); }

	QVariant _projectBuildFolderItemHandler(void* type);
	QVariant projectBuildFolderItemHandler(KDevelop::ProjectBuildFolderItem* type) { return _projectBuildFolderItemHandler((void*) type); }
	QVariant projectBuildFolderItemHandler(const KDevelop::ProjectBuildFolderItem* type) { return _projectBuildFolderItemHandler((void*) type); }

	QVariant _projectTestTargetItemHandler(void* type);
	QVariant projectTestTargetItemHandler(KDevelop::ProjectTestTargetItem* type) { return _projectTestTargetItemHandler((void*) type); }
	QVariant projectTestTargetItemHandler(const KDevelop::ProjectTestTargetItem* type) { return _projectTestTargetItemHandler((void*) type); }

	QVariant _projectFolderItemHandler(void* type);
	QVariant projectFolderItemHandler(KDevelop::ProjectFolderItem* type) { return _projectFolderItemHandler((void*) type); }
	QVariant projectFolderItemHandler(const KDevelop::ProjectFolderItem* type) { return _projectFolderItemHandler((void*) type); }

	QVariant _workspaceItemHandler(void* type);
	QVariant workspaceItemHandler(KDevelop::WorkspaceItem* type) { return _workspaceItemHandler((void*) type); }
	QVariant workspaceItemHandler(const KDevelop::WorkspaceItem* type) { return _workspaceItemHandler((void*) type); }

	QVariant _projectTargetItemHandler(void* type);
	QVariant projectTargetItemHandler(KDevelop::ProjectTargetItem* type) { return _projectTargetItemHandler((void*) type); }
	QVariant projectTargetItemHandler(const KDevelop::ProjectTargetItem* type) { return _projectTargetItemHandler((void*) type); }

	QVariant _projectFileItemHandler(void* type);
	QVariant projectFileItemHandler(KDevelop::ProjectFileItem* type) { return _projectFileItemHandler((void*) type); }
	QVariant projectFileItemHandler(const KDevelop::ProjectFileItem* type) { return _projectFileItemHandler((void*) type); }

	QVariant _projectModelHandler(void* type);
	QVariant projectModelHandler(KDevelop::ProjectModel* type) { return _projectModelHandler((void*) type); }
	QVariant projectModelHandler(const KDevelop::ProjectModel* type) { return _projectModelHandler((void*) type); }

	QVariant _projectBaseItemHandler(void* type);
	QVariant projectBaseItemHandler(KDevelop::ProjectBaseItem* type) { return _projectBaseItemHandler((void*) type); }
	QVariant projectBaseItemHandler(const KDevelop::ProjectBaseItem* type) { return _projectBaseItemHandler((void*) type); }

}

#endif
