/***************************************************************************
 *   Copyright 2008 Aleix Pol <aleixpol@gmail.com>                         *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Library General Public License as       *
 *   published by the Free Software Foundation; either version 2 of the    *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Library General Public     *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.         *
 ***************************************************************************/

#include <QXmlStreamReader>
#include <QFile>
#include <QDebug>
#include <QStringList>

class XmlToKross
{
    public:
        struct method {
            QString funcname;
            QString returnType;
            QString access;
            bool isConst;
            QList<QPair<QString, QString> > args;
        };
        
        XmlToKross(QXmlStreamReader& _xml, const QString& _include) : xml(_xml), include(_include) {}
        QString output;
        QXmlStreamReader& xml;
        QStringList definedClasses;
        QString inNamespace;
        QString include;
        method currentMethod;
        QMap <QString, QString> classNamespace;
        
        void writeDocument()
        {
            output += "//This is file has been generated by xmltokross, you should not edit this file but the files used to generate it.\n\n"
                      "#include <QObject>\n"
                      "#include <kross/core/manager.h>\n"
                      "#include <kross/core/wrapperinterface.h>\n"
                      "#include <"+include+">\n\n";
        }
        
        void writeClass(const QString& classname)
        {
            classNamespace[classname]=inNamespace;
            definedClasses.append(classname);
            output += "class Kross" + classname + " : public QObject, public Kross::WrapperInterface\n"
                      "{\n"
                      "\tQ_OBJECT\n"
                      "\tpublic:\n"
                      "\t\tKross"+classname+"("+inNamespace+"::"+classname+"* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}\n"
                      "\t\tvoid* wrappedObject() const { return wrapped; }\n\n";
        }
        
        void writeEndClass()
        { output += "\tprivate:\n"
                    "\t\t"+inNamespace+"::"+definedClasses.last()+"* wrapped;\n"
                    "};\n\n"; }
        
        void createHandler(const QString& classname)
        {
            QString classNS;
            if(classNamespace.contains(classname))
                classNS=classNamespace[classname]+"::";
            output += "namespace\n{\n"
                    "   QVariant documentHandler(void* type)\n"
                    "   {\n"
                    "   \tif(!type) return QVariant();\n"
                    "   \t"+classNS+classname+"* t=static_cast<"+classNS+classname+"*>(type);\n"
                    "   \treturn qVariantFromValue((QObject*) new Kross"+classname+"(t, 0));\n"
                    "   }\n"
                    "   int a=Kross::Manager::self().registerMetaTypeHandler(\""+classNS+classname+"*\", documentHandler);\n\n"
                    "}\n\n";
        }
        
        void writeEndDocument()
        {
            foreach(const QString& aclass, definedClasses) createHandler(aclass);
            output += "#include \"kross"+definedClasses.last().toLower()+".moc\"\n";
        }
        
        void writeEndFunction(const method& m)
        {
            output += "\t\tQ_SCRIPTABLE " + m.returnType +' '+ m.funcname+'(';
            typedef QPair<QString, QString> StringPair;
            QStringList values;
            
            int param=0;
            foreach(const StringPair& arg, m.args)
            {
                QString varname=arg.first;
                if(varname.isEmpty()) {
                    qWarning() << "The paramenter number "+QString::number(param)+" in method: "+
                            inNamespace+"::"+definedClasses.last()+"::"+m.funcname+" does not have a name";
                    varname=QString("x%1").arg(param);
                }
                values += varname;
                output += arg.second +' '+ varname + ", ";
                param++;
            }
            
            if(!values.isEmpty())
                output.resize(output.size()-2);
            output += ')';
            if(m.isConst)
                output+=" const";
            
            QString shouldReturn= m.returnType=="void" ? QString() : QString("return ");
            
            output += " { "+shouldReturn+"wrapped->"+m.funcname+"(";
            foreach(const QString& val, values)
            {
                output+=val+", ";
            }
            
            if(!values.isEmpty())
                output.resize(output.size()-2);
            
            output += "); }\n";
        }
        
        int start()
        {
            while (!xml.atEnd())
            {
                QXmlStreamReader::TokenType t=xml.readNext(); 
                QString str;
                
                switch(t)
                {
                    case QXmlStreamReader::Invalid:
                        qDebug() << "invalid token!" << xml.errorString() << endl;
                        break;
                    case QXmlStreamReader::StartDocument:
                        writeDocument();
                        break;
                    case QXmlStreamReader::StartElement:
//                         qDebug() << "Element " << xml.name().toString() << endl;
                        str=xml.name().toString();
                        if(str=="Class")
                            writeClass(xml.attributes().value(QString(), "name").toString());
                        else if(str=="Function")
                        {
                            QString funcname=xml.attributes().value(QString(), "name").toString();
                            QString rettype=xml.attributes().value(QString(), "type_name").toString();
                            bool isConst=xml.attributes().value(QString(), "constant").toString()==QChar('1');
                            currentMethod=method();
                            currentMethod.access=xml.attributes().value(QString(), "access").toString();
                            currentMethod.funcname=funcname;
                            currentMethod.returnType=rettype;
                            currentMethod.isConst=isConst;
                            if(funcname==definedClasses.last() || funcname=='~'+definedClasses.last() )
                                currentMethod.access="constructor";
                        }
                        else if(str=="Argument")
                            currentMethod.args.append(qMakePair(xml.attributes().value(QString(), "name").toString(),
                                          xml.attributes().value(QString(), "type_name").toString()));
                        else if(str=="Namespace")
                        {
                            if(!inNamespace.isEmpty())
                                inNamespace.append("::");
                            inNamespace.append(xml.attributes().value(QString(), "name").toString());
                        }
                        break;
                    case QXmlStreamReader::EndDocument:
                        writeEndDocument();
                        break;
                    case QXmlStreamReader::EndElement:
                        str=xml.name().toString();
                        if(str=="Class")
                            writeEndClass();
                        else if(str=="Function" && currentMethod.access=="public")
                            writeEndFunction(currentMethod);
                        
                        break;
                    default:
                        break;
                }
            }
            if (xml.error())
            {
                qDebug() << "error!" << xml.errorString();
                return 2;
            }
            return 0;
        }
};

int main(int argc, char** argv)
{
    Q_UNUSED(argv);
    if(argc!=2)
    {
        qDebug() << "Error. unrecognized amount of parameters";
        return 1;
    }
    
    QFile f;
    if(!f.open(stdin, QIODevice::ReadOnly))
        return 33;
    
    QXmlStreamReader xml(&f);
    XmlToKross p(xml, argv[1]);
    
    int ret=p.start();
    
    fprintf(stdout, "%s", qPrintable(p.output));
    
    return ret;
}
