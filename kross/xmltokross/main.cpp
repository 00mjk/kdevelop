/***************************************************************************
 *   Copyright 2008 Aleix Pol <aleixpol@gmail.com>                         *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Library General Public License as       *
 *   published by the Free Software Foundation; either version 2 of the    *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Library General Public     *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.         *
 ***************************************************************************/

#include <QXmlStreamReader>
#include <QFile>
#include <QDebug>
#include <QStringList>

class XmlToKross
{
    public:
        struct method {
            struct argument { QString name, type, def; };
            QString funcname;
            QString returnType;
            QString access;
            bool isConst;
            QList<argument> args;
        };
        
        XmlToKross(QXmlStreamReader& _xml) : xml(_xml){}
        QString output;
        QString handlersHeader;
        QXmlStreamReader& xml;
        QStringList definedClasses;
        QString inNamespace;
        QStringList includes;
        QString filename;
        method currentMethod;
        QMap <QString, QString> classNamespace;
        int inclass;
        
        void setIncludes(const QStringList& _includes) { includes=_includes; }
        void setFileName(const QString& fn) { filename=fn; }
        
        void writeDocument()
        {
            handlersHeader += "#ifndef "+filename.toUpper()+"_H\n";
            handlersHeader += "#define "+filename.toUpper()+"_H\n\n";
            handlersHeader += "#include<QtCore/QVariant>\n\n";
            handlersHeader += "//This is file has been generated by xmltokross, "
                              "you should not edit this file but the files used to generate it.\n\n";
                              
            output += "//This is file has been generated by xmltokross, you should not edit this file but the files used to generate it.\n\n"
                      "#include <QtCore/QObject>\n"
                      "#include <QtCore/QVariant>\n"
                      "#include <kross/core/manager.h>\n"
                      "#include <kross/core/wrapperinterface.h>\n";
            foreach(const QString & include, includes)
            {
                output += "#include <"+include+">\n";
                handlersHeader += "#include <"+include+">\n";
            }
            output +='\n';
        }
        
        void writeClass(const QString& classname)
        {
            classNamespace[classname]=inNamespace;
            definedClasses.append(classname);
            output += "class Kross" + classname + " : public QObject, public Kross::WrapperInterface\n"
                      "{\n"
                      "\tQ_OBJECT\n"
                      "\tpublic:\n"
                      "\t\tKross"+classname+"("+(inNamespace.isEmpty() ? QString() : inNamespace+"::")
                                 +classname+"* obj, QObject* parent=0) : QObject(parent), wrapped(obj) {}\n"
                      "\t\tvoid* wrappedObject() const { return wrapped; }\n\n";
        }
        
        void writeEndClass()
        { output += "\tprivate:\n"
                    "\t\t"+(inNamespace.isEmpty() ? QString() : inNamespace+"::")+definedClasses.last()+"* wrapped;\n"
                    "};\n\n"; }
                    
        void writeVariable(const QString& name, const QString& type, bool isConst)
        {
            QString write;
            if(!isConst)
                write=" WRITE set"+name;
            output += "\t\tQ_PROPERTY("+type+' '+name+" READ get"+name+write+" SCRIPTABLE true)\n";
            if(!isConst) output += "\t\tQ_SCRIPTABLE void set"+name+"(const "+type+"& val) { wrapped->"+name+"=val; }\n";
            output += "\t\tQ_SCRIPTABLE "+type+" get"+name+"() const { return wrapped->"+name+"; }\n";
        }
        
        void createHandler(const QString& classname)
        {
            //TODO: Should improve the memory management. Use harald's script tools.
            QString classNS;
            if(classNamespace.contains(classname) && !classNamespace[classname].isEmpty())
                classNS=classNamespace[classname]+"::";
            
            QString handlername=classname;
            handlername[0]=handlername[0].toLower();
            
            handlersHeader += "\tQVariant _"+handlername+"Handler(void* type);\n";
            handlersHeader += "\tQVariant "+handlername+"Handler("+classNS+classname+"* type) { return _"+handlername+"Handler((void*) type); }\n\n";
            handlersHeader += "\tQVariant "+handlername+"Handler(const "+classNS+classname+"* type) "
                                "{ return _"+handlername+"Handler((void*) type); }\n\n";
            
            output += "QVariant _"+handlername+"Handler(void* type)\n"
            "{\n"
            "\tif(!type) return QVariant();\n"
            "\t"+(classNS.isEmpty() ? QString() : (classNS))+classname+"* t=static_cast<"+classNS+classname+"*>(type);\n"
            "\treturn qVariantFromValue((QObject*) new Kross"+classname+"(t, 0));\n"
            "}\n"
            "bool b_"+classname+"="+filename+"_registerHandler(\""+classNS+classname+"*\", _"+handlername+"Handler);\n\n";
        }
        
        void writeEndDocument()
        {
            output += "bool "+filename+"_registerHandler(const QByteArray& name, Kross::MetaTypeHandler::FunctionPtr* handler)\n"
                      "{ Kross::Manager::self().registerMetaTypeHandler(name, handler); return false; }\n\n";
            
            output += "namespace Handlers\n{\n";
            handlersHeader += "namespace Handlers\n{\n";
            foreach(const QString& aclass, definedClasses)
                createHandler(aclass);
            output += "}\n";
            handlersHeader += "}\n\n";
            output += "#include \""+filename+".moc\"\n";
            
            handlersHeader += "#endif\n";
        }
        
        void writeEndFunction(const method& m)
        {
            output += "\t\tQ_SCRIPTABLE " + m.returnType +' '+ m.funcname+'(';
            QStringList values;
            
            int param=0;
            foreach(const method::argument& arg, m.args)
            {
                QString varname=arg.name;
                if(varname.isEmpty()) {
                    qWarning() << "The paramenter number "+QString::number(param)+" in method: "+
                            inNamespace+"::"+definedClasses.last()+"::"+m.funcname+" does not have a name";
                    varname=QString("x%1").arg(param);
                }
                values += varname;
                output += arg.type +' '+ varname;
                if(!arg.def.isEmpty())
                    output+='='+arg.def;
                output += ", ";
                param++;
            }
            
            if(!values.isEmpty())
                output.resize(output.size()-2);
            output += ')';
            if(m.isConst)
                output+=" const";
            
            QString shouldReturn= m.returnType=="void" ? QString() : QString("return ");
            
            output += " { "+shouldReturn+"wrapped->"+m.funcname+"(";
            foreach(const QString& val, values)
            {
                output+=val+", ";
            }
            
            if(!values.isEmpty())
                output.resize(output.size()-2);
            
            output += "); }\n";
        }
        
        int start()
        {
            inclass=0;
            while (!xml.atEnd())
            {
                QXmlStreamReader::TokenType t=xml.readNext(); 
                QString str;
                
                switch(t)
                {
                    case QXmlStreamReader::Invalid:
                        qDebug() << "invalid token!" << xml.errorString() << endl;
                        break;
                    case QXmlStreamReader::StartDocument:
                        writeDocument();
                        break;
                    case QXmlStreamReader::StartElement:
//                         qDebug() << "Element " << xml.name().toString() << endl;
                        str=xml.name().toString();
                        if(str=="Class")
                        {
                            writeClass(xml.attributes().value(QString(), "name").toString());
                            inclass++;
                        }
                        else if(str=="Function")
                        {
                            QString funcname=xml.attributes().value(QString(), "name").toString();
                            QString rettype=xml.attributes().value(QString(), "type_name").toString();
                            bool isConst=xml.attributes().value(QString(), "constant").toString()==QChar('1');
                            currentMethod=method();
                            currentMethod.access=xml.attributes().value(QString(), "access").toString();
                            currentMethod.funcname=funcname;
                            currentMethod.returnType=rettype;
                            currentMethod.isConst=isConst;
                            if(funcname==definedClasses.last() || funcname=='~'+definedClasses.last() )
                                currentMethod.access="constructor";
                        }
                        else if(str=="Argument")
                        {
                            method::argument arg;
                            arg.name=xml.attributes().value(QString(), "name").toString();
                            arg.type=xml.attributes().value(QString(), "type_name").toString();
                            arg.def=xml.attributes().value(QString(), "defaultvalue").toString();
                            QString context=xml.attributes().value(QString(), "context").toString();
                            if(!arg.def.isEmpty() && arg.type.startsWith(context))
                                arg.def.prepend(context+"::");
                            
                            currentMethod.args.append(arg);
                        }
                        else if(str=="Namespace")
                        {
                            QString name=xml.attributes().value(QString(), "name").toString();
                            if(!inNamespace.isEmpty())
                                inNamespace.append("::");
                            inNamespace.append(name);
                            output += "using namespace "+name+";\n\n";
                        }
                        else if(str=="Variable" && xml.attributes().value(QString(), "access").toString()=="public")
                        {
                            writeVariable(xml.attributes().value(QString(), "name").toString(),
                                          xml.attributes().value(QString(), "type_name").toString(), xml.attributes().value(QString(), "type_constant").toString()=="1");
                        }
                        break;
                    case QXmlStreamReader::EndDocument:
                        writeEndDocument();
                        break;
                    case QXmlStreamReader::EndElement:
                        str=xml.name().toString();
                        if(str=="Class")
                        {
                            inclass--;
                            writeEndClass();
                        }
                        else if(str=="Function" && currentMethod.access=="public" && inclass>0)
                            writeEndFunction(currentMethod);
                        break;
                    default:
                        break;
                }
            }
            if (xml.error())
            {
                qDebug() << "error!" << xml.errorString();
                return 2;
            }
            return 0;
        }
};

int main(int argc, char** argv)
{
    QStringList includes;
    QString filename;
    QString directory;
    int i;
    for(i=1; i<argc; i++)
    {
        if(argv[i][0]=='-' && argv[i][1]!=0) {
            QString param=argv[i];
            switch(argv[i][1])
            {
                case 'I':
                    param=param.right(param.size()-2);
                    includes += param.split(';');
                    break;
                case 'F':
                    filename=param.right(param.size()-2);
                    break;
                case 'D':
                    directory=param.right(param.size()-2);
                    break;
            }
        }
        else
        {
            qDebug() << "error. Unrecognized parameter: " << argv[i];
            return 1;
        }
    }
    
    QFile f;
    if(!f.open(stdin, QIODevice::ReadOnly)) {
        qDebug() << "error. can't read the input: " << argv[i];
        return 33;
    }
    
    QXmlStreamReader xml(&f);
    XmlToKross p(xml);
    p.setIncludes(includes);
    p.setFileName(filename);
    
    int ret=p.start();
    
    fprintf(stdout, "%s", qPrintable(p.output));
    
    if(!filename.isEmpty()) {
        QFile headerFile(directory+'/'+filename+".h");
        if(!headerFile.open(QIODevice::WriteOnly | QIODevice::Text)) {
            qDebug() << "error. can't write the header: " << filename+".h";
            return 33;
        }
        
        QTextStream out(&headerFile);
        out << p.handlersHeader;
        headerFile.close();
    }
    return ret;
}
