-----TODO list for a first beta version-------

- the editor (using kwrite part, first prototype integration is available)
- project management (most of the basics (multiple projects,appwizard,persistence...) is implemented,the makefile generation and Projectoptions aren't finished yet
- documentation browser (isn't integrated yet, should be based on khtml part)
- debugger (doesn't work)
- assorted templates (a small KDE2 is available at the moment, some more should be added. Application Wizard plugins)
- a new Real File View (small filemanager,a konqueror component?) 
- grep (works)
- make system for c++ (works)
- classparser (the current version works, but we will need a better solution in the future)	
- project view (works)

------KDevelop Component architecture (a brief overview)-----------

- every component should be derived from KDevComponent as defined in kdevelop/lib/ComponentManager/kdevcomponent.h
-there are different types of component: languagesupport,viewhandler,processview... (all defined in kdevelop/lib/ComponentManger/Components/
-all projectmangement related interfaces are defined in kdevelop/lib/projectmanagement/
-implementations of components are located at kdevelop/parts/ (grepview/projectview are a good examples)
-small plugins (for projectmanagement...) are located in kdevelop/plugin

-----Component Manager-------------

Class KDevComponentManager, resided in lib/ComponentManager is responsible for
loading the components (using the klibloader and kservices). Everybody (mostly the core)
who wants to load a component, loads it using the KDevComponentManager.
KDevComponentManager provides the needed methods. When
KDevComponentManager loads a module, registers it as well, so it can give
the pointer to the rest, if they ask for it.

Another aspect of the KDevComponentManager is the Core<->Component
communications. It provides some public slots and signals. Send the
right signal to it, it distributes the signal over the registerd
components. So can the core communicate easily with the components
just using the KDevComponentManager to deliver its qt signals.

------KDevNode (kdevnodes.h in lib/general)------------

a KDevNode is a data structure which holds information for a object in KDevelop. 
This can be used if components want exchange information about a specific object. 
For instance a Projectspace can raise the signal "sigAddedFileToProject(KDevFileNode*)" 
to inform all other running components that a file was added. The KDevFileNode is a subclass 
of KDevNode and contains information about Projectspace,Projectname and of course the 
filenname of this file.

-----KDevNodeAction (kdevactions.h in lib/general)---------
In KDevelop2 it is possible to extend the the popup menus in the treeviews or similar things 
at _runtime_ for every object _indivual_. For this you will need KDevNodeAction,
the signal "void KDevComponent::needKDevNodeActions(KDevNode* pNode, QList<KAction> *pList)" 
and the method "QList<KAction>* KDevComponent::kdevNodeActions(KDevNode* pNode)".

KDevNodeAction is a special KAction which stores a KDevNode and raise it if the action was activated.

An example: (asking for actions)

the Projectview need some actions (the user clicked the right mousebutton) for the file "main.cpp" in the project "foobar", projectspace: "foo". 
The Projectview creates now a KDevFileNode (pNode) with these properties and an empty list (pList)After this it raise the signal
"KDevComponent::needKDevNodeActions(KDevNode* pNode,QList<KAction>* pList)" the list (pList) will be filled with actions (from running components) for these KDevNode. You can use it with:
++
for(pAction=pList->first();pAction!=0;pAction= pList->next()){
     pAction->plug(pPopup,-1);// add all available actions to the popupmenu
}
+++
An example: (implementing a new action for an KDevNode)

An implemention from a ProjectSpace component which add a "Move to" action could look like this:
+++
QList<KAction>* ProjectSpace::kdevNodeActions(KDevNode* pNode){
  QList<KAction>* pList = new QList<KAction>;

  KDevNodeAction* pAction=0;
  if(pNode->inherits("KDevFileNode")){
    pList->append(new KActionSeparator());
    pAction = new KDevNodeAction(pNode,"Move to..."); // pNode is stored in the Action
    connect(pAction,SIGNAL(activated(KDevNode*)),this,
	    SLOT(slotMoveFileTo(KDevNode*)));
    pList->append(pAction);
...
return pList;
}

--- CREATING A KDEVCOMPONENT ---
to be written...

------coding style rules for KDevelop2------------

- prefix "m_" for class attributes
- prefix "p" for pointers but no further type-prefixes
- prefix "m_p" for class attributes which are pointers
- upper case letters for each single word in a compound word: e.g.
KDevViewHandler instead of Kdevviewhandler.
- tab space = 4
- tabs replaced by spaces
- no prefix "get" at the beginning of a get function.



