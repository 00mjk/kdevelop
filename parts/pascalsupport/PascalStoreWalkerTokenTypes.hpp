#ifndef INC_PascalStoreWalkerTokenTypes_hpp_
#define INC_PascalStoreWalkerTokenTypes_hpp_

/* $ANTLR 2.7.2: "pascal.tree.g" -> "PascalStoreWalkerTokenTypes.hpp"$ */
struct PascalStoreWalkerTokenTypes {
	enum {
		EOF_ = 1,
		BLOCK = 4,
		IDLIST = 5,
		ELIST = 6,
		FUNC_CALL = 7,
		PROC_CALL = 8,
		SCALARTYPE = 9,
		TYPELIST = 10,
		VARIANT_TAG = 11,
		VARIANT_TAG_NO_ID = 12,
		VARIANT_CASE = 13,
		CONSTLIST = 14,
		FIELDLIST = 15,
		ARGDECLS = 16,
		VARDECL = 17,
		ARGDECL = 18,
		ARGLIST = 19,
		TYPEDECL = 20,
		FIELD = 21,
		INTERFACE = 22,
		DOT = 23,
		PROGRAM = 24,
		LPAREN = 25,
		RPAREN = 26,
		SEMI = 27,
		UNIT = 28,
		IDENT = 29,
		IMPLEMENTATION = 30,
		USES = 31,
		LABEL = 32,
		COMMA = 33,
		CONST = 34,
		EQUAL = 35,
		CHR = 36,
		NUM_INT = 37,
		NUM_REAL = 38,
		PLUS = 39,
		MINUS = 40,
		STRING_LITERAL = 41,
		TYPE = 42,
		FUNCTION = 43,
		COLON = 44,
		PROCEDURE = 45,
		DOTDOT = 46,
		CHAR = 47,
		BOOLEAN = 48,
		INTEGER = 49,
		REAL = 50,
		STRING = 51,
		PACKED = 52,
		LBRACK = 53,
		RBRACK = 54,
		ARRAY = 55,
		OF = 56,
		LBRACK2 = 57,
		RBRACK2 = 58,
		RECORD = 59,
		END = 60,
		CASE = 61,
		SET = 62,
		FILE = 63,
		POINTER = 64,
		VAR = 65,
		ASSIGN = 66,
		AT = 67,
		NOT_EQUAL = 68,
		LTH = 69,
		LE = 70,
		GE = 71,
		GT = 72,
		IN = 73,
		OR = 74,
		STAR = 75,
		SLASH = 76,
		DIV = 77,
		MOD = 78,
		AND = 79,
		NOT = 80,
		NIL = 81,
		GOTO = 82,
		BEGIN = 83,
		IF = 84,
		THEN = 85,
		ELSE = 86,
		WHILE = 87,
		DO = 88,
		REPEAT = 89,
		UNTIL = 90,
		FOR = 91,
		TO = 92,
		DOWNTO = 93,
		WITH = 94,
		METHOD = 95,
		ADDSUBOR = 96,
		ASSIGNEQUAL = 97,
		SIGN = 98,
		FUNC = 99,
		NODE_NOT_EMIT = 100,
		MYASTVAR = 101,
		LF = 102,
		LCURLY = 103,
		RCURLY = 104,
		WS = 105,
		COMMENT_1 = 106,
		COMMENT_2 = 107,
		EXPONENT = 108,
		NULL_TREE_LOOKAHEAD = 3
	};
};
#endif /*INC_PascalStoreWalkerTokenTypes_hpp_*/
