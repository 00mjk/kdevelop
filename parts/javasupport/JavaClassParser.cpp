/***************************************************************************
                            JavaClassParser.cpp -  description
                             -------------------
    begin                : Wed May 23 14:16:27 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Wed May 23 14:16:27 2001, using kdoc parser/custom Java conversion backend.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <classparser.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/JavaClassParser.h>

class JavaClassParserJBridge : public JavaClassParser
{
public:
	JavaClassParserJBridge(ClassStore* classstore) : JavaClassParser(classstore) {}
	~JavaClassParserJBridge() {}
};


JNIEXPORT void JNICALL
Java_JavaClassParser_newJavaClassParser__Lorg_kde_koala_ClassStore_2(JNIEnv *env, jobject obj, jobject classstore)
{
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new JavaClassParserJBridge((ClassStore*) QtSupport::getQt(env, classstore)));
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_JavaClassParser_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (JavaClassParser*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT jboolean JNICALL
Java_JavaClassParser_parse(JNIEnv *env, jobject obj, jstring file)
{
static QString * _qstring_file = 0;
	return (jboolean) ((JavaClassParserJBridge*) QtSupport::getQt(env, obj))->parse((QString&) * (QString *) QtSupport::toQString(env, file, &_qstring_file));
}

JNIEXPORT void JNICALL
Java_JavaClassParser_wipeout(JNIEnv *env, jobject obj)
{
	((JavaClassParserJBridge*) QtSupport::getQt(env, obj))->wipeout();
	return;
}

JNIEXPORT void JNICALL
Java_JavaClassParser_out(JNIEnv *env, jobject obj)
{
	((JavaClassParserJBridge*) QtSupport::getQt(env, obj))->out();
	return;
}

JNIEXPORT void JNICALL
Java_JavaClassParser_removeWithReferences(JNIEnv *env, jobject obj, jstring aFile)
{
static QCString * _qstring_aFile = 0;
	((JavaClassParserJBridge*) QtSupport::getQt(env, obj))->removeWithReferences((char*) QtSupport::toCharString(env, aFile, &_qstring_aFile));
	return;
}

