/***************************************************************************
                            ParsedScopeContainer.java -  description
                             -------------------
    begin                : Wed Dec 19 12:26:58 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Wed Dec 19 12:26:58 2001, using kalyptus 0.91.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

package org.kde.koala;

import org.kde.qt.*;
import java.util.*;
import java.lang.Error;

/**

 This is a container for scopes, like namespaces in C++
 or Modules in IDL-files.

 @author Jonas Nordin
 
 @short 
 This is a container for scopes, like namespaces in C++
 or Modules in IDL-files.
*/
public class ParsedScopeContainer extends ParsedClassContainer  {
	protected ParsedScopeContainer(Class dummy){super((Class) null);}

	private native void newParsedScopeContainer();
	public ParsedScopeContainer() {
		super((Class) null);
		newParsedScopeContainer();
	}
	protected native void finalize() throws InternalError;

/** 
 Tells if a scope exists in this scope.

*/
	public native boolean hasScope( String aName);

/** 
 Fetches a scope by using its name.

*/
	public native ParsedScopeContainer getScopeByName( String aName);

/** 
 Gets all scopenames in sorted order.

*/
	public native ArrayList getSortedScopeNameList();

/** 
 Adds a scope to this scope. 

*/
	public native void addScope( ParsedScopeContainer aScope);

/** 
 Removes a scope from this scope.

*/
	public native void removeScope( String aName);

/**  Clears the internal state. 
*/
	public native void clear();

/**  Outputs this object to stdout. 
*/
	public native void out();

/**  Return a list of scopes
*/
	public native ArrayList scopeList();
}
