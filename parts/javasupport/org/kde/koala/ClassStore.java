/***************************************************************************
                            ClassStore.java -  description
                             -------------------
    begin                : Wed Dec 19 12:26:58 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Wed Dec 19 12:26:58 2001, using kalyptus 0.91.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

package org.kde.koala;

import org.kde.qt.*;
import java.util.*;
import java.lang.Error;

/**

 This class has the ability to store and fetch parsed items. 

 @author Jonas Nordin
 
 @short 
 This class has the ability to store and fetch parsed items.
*/
public class  ClassStore implements QtSupport {
	private long _qt;
	private boolean _allocatedInJavaWorld = true;

	protected ClassStore(Class dummy){}

	private native void newClassStore();
	public ClassStore() {
		newClassStore();
	}
	protected native void finalize() throws InternalError;

/** 
 Checks if a scope exists in the store.

*/
	public native boolean hasScope( String aName);

/** 
 Tells if a class exists in the store. 

*/
	public native boolean hasClass( String aName);

/** 
 Tells if a struct exists in the store. 

*/
	public native boolean hasStruct( String aName);

/** 
 Fetches a scope from the store using its name.

*/
	public native ParsedScopeContainer getScopeByName( String aName);

/** 
 Fetches a class from the store by using its' name. 

*/
	public native ParsedClass getClassByName( String aName);

/** 
 Get all classnames in sorted order.

*/
	public native ArrayList getSortedClassNameList();

/** 
 Fetches all virtual methods, both implemented and not.

*/
//	public native void getVirtualMethodsForClass( String aName, ParsedMethodList implList, ParsedMethodList availList);


/**  Removes all parsed classes. 
*/
	public native void wipeout();

/**  
 Adds a scope to the store.

*/
	public native void addScope( ParsedScopeContainer aScope);

/**  Adds a classdefintion. 

*/
	public native void addClass( ParsedClass aClass);

/**  Adds a global variable. 
*/
	public native void addGlobalVar( ParsedAttribute aAttr);

/**  Adds a global function. 
*/
	public native void addGlobalFunction( ParsedMethod aFunc);

/**  Adds a global structure. 
*/
	public native void addGlobalStruct( ParsedStruct aStruct);

/** 
 Removes all items in the store with references to the file. 

*/
	public native void removeWithReferences( String aFile);

/**  Removes a class from the store. 

*/
	public native void removeClass( String aName);

/**  Outputs this object as text on stdout 
*/
	public native void out();

/**  Set the path where the persistant store file should be stored.

*/
	public native void setPath( String aPath);

/**  Set the name of the file to read/write.

*/
	public native void setFileName( String aFileName);

/**  Open the file. 
*/
	public native boolean open( String aFileName, int nMode);

/**  Close the file. 
*/
	public native void close();

/**  Has the store been created? 
*/
	public native boolean exists();

/**  Stores all data in a binary file 
*/
	public native void storeAll();

/**  Restores all data from a binary file 
*/
	public native void restoreAll();

/**  Store a class in the persistant store.

*/
	protected native void storeClass( ParsedClass pClass);

/**  Store a scope in the persistant store.

*/
	protected native void storeScope( ParsedScopeContainer pScope);

/**  Store a Method in the persistant store.

*/
	protected native void storeMethod( ParsedMethod pMethod);

/**  Store a attribute in the persistant store.

*/
	protected native void storeAttribute( ParsedAttribute pAttribute);

/**  Store a struct in the persistant store.

*/
	protected native void storeStruct( ParsedStruct pStruct);
}
