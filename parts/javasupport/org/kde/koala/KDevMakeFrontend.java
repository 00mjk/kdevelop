/***************************************************************************
                            KDevMakeFrontend.java -  description
                             -------------------
    begin                : Wed Jul  4 12:40:03 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Wed Jul  4 12:40:03 2001, using kdoc parser/custom Java conversion backend.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

package org.kde.koala;

import org.kde.qt.*;
import java.util.*;
import java.lang.Error;

/**

 The interface to a make frontend
 
 @short 
 The interface to a make frontend
 
*/
public class KDevMakeFrontend extends KDevPart  {
	protected KDevMakeFrontend(Class dummy){super((Class) null);}

	protected native void finalize() throws InternalError;

/** 
 The component shall start to execute a make-like command.
 Commands are always asynchronous. You can submit several jobs
 without caring about another job already running. There are
 executed in the order in which they are submitted. If one of
 then fails, all following jobs are dropped.
 You should not make any assumptions about the directory in which
 the command is started. If the command depends on that, put and
 explicit 'cd' into the command. The parameter dir is interpreted
 as a starting directory to find files when parsing compiler error
 messages.
     
*/
	public native void queueCommand( String dir, String command);

/** 
 Returns whether the application is currently running.
     
*/
	public native boolean isRunning();
}
