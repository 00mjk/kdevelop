/***************************************************************************
                            Editor.java -  description
                             -------------------
    begin                : Fri Dec 21 13:45:30 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Fri Dec 21 13:45:30 2001, using kalyptus 0.91.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

package org.kde.koala;

import org.kde.qt.*;
import java.util.*;
import java.lang.Error;

/**

 \brief The main interface to the editor.

 This is the main class used to access an editor.

 An Editor is a KPart, so you can use all the KPart methods
 to locate and use it.

 To locate the preferred editor service, use code like this:

 \code
   KTrader.OfferList offers = KTrader.self().query(String.fromLatin1("KDevelop/Editor"), String.null);
   if (offers.isEmpty())
     return ;

   KService service = offers.begin();
 \endcode

 Now that we have a reference to the preferred editor service, we
 load the library to get the factory:

 \code 
   KLibFactory factory = KLibLoader.self().factory(service.library());
 \endcode

 Now that we have the factory, we create an instance of the editor:

 \code
   Editor m_editor = static_cast < Editor > (factory.create(this, "editortest_part", "KParts.ReadWritePart" ));
 \endcode

 Now all that is left to do is to activate the part. Inside a KParts.MainWindow, this is done with:
 \code
   if (m_editor)
   {
     setCentralWidget(m_editor.widget());
     createGUI(m_editor);
   }
 \endcode
 
 @short 
 \brief The main interface to the editor.
*/
public class Editor extends QObject implements  KXMLGUIClientInterface {
	protected Editor(Class dummy){super((Class) null);}


/** 
 \brief Deallocate the part's ressources.

 Deallocates the part's ressources.
   
*/
	protected native void finalize() throws InternalError;

/** 
 \brief Query for an advanced interface

 Query the Editor part to find out if a particular
 interface is supported.

 You use it like this:

 \code
   ClipboardEditorIface iface = static_cast<ClipboardEditorIface>(getInterface("ClipboardEditorIface"));
   if (iface)
     ...
 \endcode

 Note that implementations of the Editor part are free to implement
 a subset of the available interfaces, so users of the part should
 always test if a given interface is provided.

   
*/
	public native EditorInterface queryInterface( String ifname);
	public native Document document( KURL url);
	public native Document createDocument( QWidget parentWidget, KURL url);
	public native Document createDocument();
	public native Document currentDocument();
	public native void activePartChanged( Part part);
	
	// From KXMLGUIClientInterface

/**
 Retrieves an action of the client by name.
 This method is provided for convenience, as it uses {@link #actionCollection}
 to get the action object.
   
*/
	public native KAction action( String name);

/** 
 Retrieves an action for a given {@link QDomElement}. The default
 implementation uses the "name" attribute to query the action
 object via the other action() method.
   
*/
	public native KAction action( QDomElement element);

/** 
 Retrieves the entire action collection for the GUI client
   
*/
	public native KActionCollection actionCollection();

/** 

*/
	public native KInstanceInterface instance();

/** 

*/
	public native QDomDocument domDocument();

/** 
 This will return the name of the XML file as set by {@link #setXMLFile}.
 If {@link #setXML} is used directly, then this will return NULL.

 The filename that this returns is obvious for components as each
 component has exactly one XML file.  In non-components, however,
 there are usually two: the global file and the local file.  This
 function doesn't really care about that, though.  It will always
 return the last XML file set.  This, in almost all cases, will
 be the local XML file.

*/
	public native String xmlFile();
	public native String localXMLFile();

/** 

   
*/
	public native void setXMLGUIBuildDocument( QDomDocument doc);

/** 

   
*/
	public native QDomDocument xmlguiBuildDocument();

/** 
 This method is called by the {@link KXMLGUIFactory} as soon as the client
 is added to the KXMLGUIFactory's GUI.
   
*/
	public native void setFactory( KXMLGUIFactory factory);

/** 
 Retrieves a pointer to the {@link KXMLGUIFactory} this client is
 associated with (will return null if the client's GUI has not been built
 by a KXMLGUIFactory.
   
*/
	public native KXMLGUIFactory factory();

/** 
 KXMLGUIClients can form a simple child/parent object tree. This
 method returns a pointer to the parent client or null if it has no
 parent client assigned.
   
*/
	public native KXMLGUIClientInterface parentClient();

/** 
 Use this method to make a client a child client of another client.
 Usually you don't need to call this method, as it is called
 automatically when using the second constructor, which takes a
 arent argument.
   
*/
	public native void insertChildClient( KXMLGUIClientInterface child);

/** 
 Removes the given <code>child</code> from the client's children list.
   
*/
	public native void removeChildClient( KXMLGUIClientInterface child);

/** 
 A client can have an own {@link KXMLGUIBuilder}.
 Use this method to assign your builder instance to the client (so that the
 {@link KXMLGUIFactory} can use it when building the client's GUI)

 Client specific guibuilders are useful if you want to create
 custom container widgets for your GUI.
   
*/
	public native void setClientBuilder( KXMLGUIBuilderInterface builder);

/** 
 Retrieves the client's GUI builder or null if no client specific
 uilder has been assigned via {@link #setClientBuilder}
   
*/
	public native KXMLGUIBuilderInterface clientBuilder();

/** 
 Forces this client to re-read its XML resource file.  This is
 intended to be used when you know that the resource file has
 changed and you will soon be rebuilding the GUI.  It has no
 useful effect with non-KParts GUIs, so don't bother using it
 unless your app is component based.
   
*/
	public native void reloadXML();
	public native void unplugActionList( String name);
	public native void addStateActionEnabled( String state, String action);
	public native void addStateActionDisabled( String state, String action);
//	public native StateChange getActionsToChangeForState( String state);
	public static native String findMostRecentXMLFile( String[] files, String doc);

/** 
 Sets the instance ({@link KInstance}) for this part.

 Call this first in the inherited class constructor.
 (At least before {@link #setXMLFile}.)
   
*/
	public native void setInstance( KInstanceInterface instance);

/** 
 Sets the name of the rc file containing the XML for the part.

 Call this in the Part-inherited class constructor.

*/
	protected native void setXMLFile( String file, boolean merge, boolean setXMLDoc);
	protected native void setXMLFile( String file);
	protected native void setLocalXMLFile( String file);

/** 
 Sets the XML for the part.

 Call this in the Part-inherited class constructor if you
  don't call {@link #setXMLFile}.

*/
	protected native void setXML( String document, boolean merge);
	protected native void setXML( String document);

/** 
 Sets the Document for the part, describing the layout of the GUI.

 Call this in the Part-inherited class constructor if you don't call
 {@link setXMLFile} or {@link setXML} .
   
*/
	protected native void setDOMDocument( QDomDocument document, boolean merge);
	protected native void setDOMDocument( QDomDocument document);

/** 
 This function will attempt to give up some memory after the GUI
 is built.  It should never be used in apps where the GUI may be
 rebuilt at some later time (components, for instance).
   
*/
	protected native void conserveMemory();
	protected native void stateChanged( String newstate);

}
