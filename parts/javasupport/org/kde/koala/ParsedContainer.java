/***************************************************************************
                            ParsedContainer.java -  description
                             -------------------
    begin                : Mon May 21 09:39:20 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Mon May 21 09:39:20 2001, using kdoc parser/custom Java conversion backend.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

package org.kde.koala;

import org.kde.qt.*;
import java.util.*;
import java.lang.Error;

/**

 Represents a parsed object that can store other objects.
 The objects can be variables, functions or structures. 
 Since this is a special case of a parsed item, the container
 inherits ParsedItem.

 @author Jonas Nordin
 
 @short 
 Represents a parsed object that can store other objects.
*/
public class ParsedContainer extends ParsedItem  {
	protected ParsedContainer(Class dummy){super((Class) null);}

	private native void newParsedContainer();
	public ParsedContainer() {
		super((Class) null);
		newParsedContainer();
	}
	protected native void finalize() throws InternalError;

/** 
 Adds a struct. 

*/
	public native void addStruct( ParsedStruct aStruct);

/** 
 Adds an attribute. 

*/
	public native void addAttribute( ParsedAttribute anAttribute);

/** 
 Adds a method. 

*/
	public native void addMethod( ParsedMethod aMethod);

/**  
 Tells if the container should store objects using their full path.

*/
	public native void setUseFullpath( boolean state);

/** 
 Gets a method by comparing with another method. 

*/
	public native ParsedMethod getMethod( ParsedMethod aMethod);

/** 
 Gets a method by using its name and arguments. 

*/
	public native ParsedMethod getMethodByNameAndArg( String aName);

/** 
 Gets a struct by using its name. 

*/
	public native ParsedStruct getStructByName( String aName);

/** 
 Get a attribute by using its' name. 

*/
	public native ParsedAttribute getAttributeByName( String aName);

/** 
 Gets all attributes in their string reprentation in sorted order. 

*/
	public native ArrayList getSortedAttributeAsStringList();

/** 
 Gets the names of all structures in a sorted list.

*/
	public native ArrayList getSortedStructNameList();

/** 
 Does a attribute exist in the store? 

*/
	public native boolean hasAttribute( String aName);

/** 
 Does a struct exist in the store? 

*/
	public native boolean hasStruct( String aName);

/** 
 Removes all items in the store with references to the file. 

*/
	public native void removeWithReferences( String aFile);

/** 
 Removes a method matching the specification. 

*/
	public native void removeMethod( ParsedMethod aMethod);

/** 
 Removes an attribute with a specified name. 

*/
	public native void removeAttribute( String aName);

/** 
 Removes a struct with a specified name. 

*/
	public native void removeStruct( String aName);

/**  Clears the internal state. 
*/
	public native void clear();

/**  Outputs this object to stdout 
*/
	public native void out();

	/**  Return a list of methods */
	public native ArrayList methodList();

	/**  Return a list of attributes */
	public native ArrayList attributeList();

	/**  Return a list of structs */
	public native ArrayList structList();

}
