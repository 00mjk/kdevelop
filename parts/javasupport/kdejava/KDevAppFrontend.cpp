/***************************************************************************
                            KDevAppFrontend.cpp -  description
                             -------------------
    begin                : Wed Dec 19 15:43:05 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Wed Dec 19 15:43:05 2001, using kalyptus 0.91.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <kdevappfrontend.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/KDESupport.h>
#include <kdejava/KDevAppFrontend.h>

JNIEXPORT void JNICALL
Java_org_kde_koala_KDevAppFrontend_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (KDevAppFrontend*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_KDevAppFrontend_startAppCommand(JNIEnv *env, jobject obj, jstring command)
{
static QString * _qstring_command = 0;
	((KDevAppFrontend*) QtSupport::getQt(env, obj))->startAppCommand((QString&) * (QString *) QtSupport::toQString(env, command, &_qstring_command));
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_KDevAppFrontend_isRunning(JNIEnv *env, jobject obj)
{
	return (jboolean) ((KDevAppFrontend*) QtSupport::getQt(env, obj))->isRunning();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_KDevAppFrontend_insertStdoutLine(JNIEnv *env, jobject obj, jstring line)
{
static QString * _qstring_line = 0;
	((KDevAppFrontend*) QtSupport::getQt(env, obj))->insertStdoutLine((QString&) * (QString *) QtSupport::toQString(env, line, &_qstring_line));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_KDevAppFrontend_insertStderrLine(JNIEnv *env, jobject obj, jstring line)
{
static QString * _qstring_line = 0;
	((KDevAppFrontend*) QtSupport::getQt(env, obj))->insertStderrLine((QString&) * (QString *) QtSupport::toQString(env, line, &_qstring_line));
	return;
}

