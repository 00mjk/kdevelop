/***************************************************************************
                            EditDocumentIface.cpp -  description
                             -------------------
    begin                : Fri Dec 21 13:45:30 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Fri Dec 21 13:45:30 2001, using kalyptus 0.91.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <keditor/edit_iface.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/KDESupport.h>
#include <kdejava/EditDocumentIface.h>

JNIEXPORT jstring JNICALL
Java_org_kde_koala_EditDocumentIface_text(JNIEnv *env, jobject obj)
{
	QString  _qstring;
	_qstring = ((KEditor::EditDocumentIface*) QtSupport::getQt(env, obj))->text();
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_EditDocumentIface_setText(JNIEnv *env, jobject obj, jstring text)
{
static QString * _qstring_text = 0;
	((KEditor::EditDocumentIface*) QtSupport::getQt(env, obj))->setText((QString&) * (QString *) QtSupport::toQString(env, text, &_qstring_text));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_EditDocumentIface_append(JNIEnv *env, jobject obj, jstring text)
{
static QString * _qstring_text = 0;
	((KEditor::EditDocumentIface*) QtSupport::getQt(env, obj))->append((QString&) * (QString *) QtSupport::toQString(env, text, &_qstring_text));
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_EditDocumentIface_insertLine(JNIEnv *env, jobject obj, jstring text, jint line)
{
static QString * _qstring_text = 0;
	return (jboolean) ((KEditor::EditDocumentIface*) QtSupport::getQt(env, obj))->insertLine((QString&) * (QString *) QtSupport::toQString(env, text, &_qstring_text), (uint) line);
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_EditDocumentIface_insertAt(JNIEnv *env, jobject obj, jstring text, jint line, jint col)
{
static QString * _qstring_text = 0;
	return (jboolean) ((KEditor::EditDocumentIface*) QtSupport::getQt(env, obj))->insertAt((QString&) * (QString *) QtSupport::toQString(env, text, &_qstring_text), (uint) line, (uint) col);
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_EditDocumentIface_removeLine(JNIEnv *env, jobject obj, jint line)
{
	return (jboolean) ((KEditor::EditDocumentIface*) QtSupport::getQt(env, obj))->removeLine((uint) line);
}

JNIEXPORT jstring JNICALL
Java_org_kde_koala_EditDocumentIface_line__IZ(JNIEnv *env, jobject obj, jint line, jboolean replaceTabsWithSpaces)
{
	QString  _qstring;
	_qstring = ((KEditor::EditDocumentIface*) QtSupport::getQt(env, obj))->line((uint) line, (bool) replaceTabsWithSpaces);
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT jstring JNICALL
Java_org_kde_koala_EditDocumentIface_line__I(JNIEnv *env, jobject obj, jint line)
{
	QString _qstring;
	_qstring = ((KEditor::EditDocumentIface*) QtSupport::getQt(env, obj))->line((uint) line, false);
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_EditDocumentIface_setLine(JNIEnv *env, jobject obj, jstring text, jint line)
{
static QString * _qstring_text = 0;
	return (jboolean) ((KEditor::EditDocumentIface*) QtSupport::getQt(env, obj))->setLine((QString&) * (QString *) QtSupport::toQString(env, text, &_qstring_text), (uint) line);
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_EditDocumentIface_hasSelectedText(JNIEnv *env, jobject obj)
{
	return (jboolean) ((KEditor::EditDocumentIface*) QtSupport::getQt(env, obj))->hasSelectedText();
}

//JNIEXPORT  JNICALL
//Java_org_kde_koala_EditDocumentIface_dcopInterface(JNIEnv *env, jobject obj)
//{
//	return () ((KEditor::EditDocumentIface*) QtSupport::getQt(env, obj))->dcopInterface();
//}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_EditDocumentIface_getInterface(JNIEnv *env, jclass obj, jobject doc)
{
	return (jobject) QtSupport::objectForQtKey(env, (void *)KEditor::EditDocumentIface::interface((KEditor::Document*) QtSupport::getQt(env, doc)), "org.kde.koala.EditDocumentIface");
}

