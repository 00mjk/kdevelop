/***************************************************************************
                            ClassStore.cpp -  description
                             -------------------
    begin                : Wed Dec 19 15:43:05 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Wed Dec 19 15:43:05 2001, using kalyptus 0.91.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <classstore.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/KDESupport.h>
#include <kdejava/ClassStore.h>

class ClassStoreJBridge : public ClassStore
{
public:
	ClassStoreJBridge() : ClassStore() {}
	~ClassStoreJBridge() {QtSupport::qtKeyDeleted(this);}
	void protected_storeClass(ParsedClass* pClass) {
		ClassStore::storeClass(pClass);
		return;
	}
	void protected_storeScope(ParsedScopeContainer* pScope) {
		ClassStore::storeScope(pScope);
		return;
	}
	void protected_storeMethod(ParsedMethod* pMethod) {
		ClassStore::storeMethod(pMethod);
		return;
	}
	void protected_storeAttribute(ParsedAttribute* pAttribute) {
		ClassStore::storeAttribute(pAttribute);
		return;
	}
	void protected_storeStruct(ParsedStruct* pStruct) {
		ClassStore::storeStruct(pStruct);
		return;
	}
};


JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_newClassStore(JNIEnv *env, jobject obj)
{
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new ClassStoreJBridge());
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (ClassStore*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ClassStore_hasScope(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jboolean) ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->hasScope((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ClassStore_hasClass(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jboolean) ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->hasClass((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ClassStore_hasStruct(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jboolean) ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->hasStruct((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ClassStore_getScopeByName(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jobject) QtSupport::objectForQtKey(env, (void *)((ClassStoreJBridge*) QtSupport::getQt(env, obj))->getScopeByName((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName)), "org.kde.koala.ParsedScopeContainer");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ClassStore_getClassByName(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jobject) QtSupport::objectForQtKey(env, (void *)((ClassStoreJBridge*) QtSupport::getQt(env, obj))->getClassByName((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName)), "org.kde.koala.ParsedClass");
}

//JNIEXPORT  JNICALL
//Java_org_kde_koala_ClassStore_asForest(JNIEnv *env, jobject obj)
//{
//	return () ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->asForest();
//}

//JNIEXPORT  JNICALL
//Java_org_kde_koala_ClassStore_getClassesByParent(JNIEnv *env, jobject obj, jstring aName)
//{
//static QString * _qstring_aName = 0;
//	return () ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->getClassesByParent((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
//}

//JNIEXPORT  JNICALL
//Java_org_kde_koala_ClassStore_getClassClients(JNIEnv *env, jobject obj, jstring aName)
//{
//static QString * _qstring_aName = 0;
//	return () ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->getClassClients((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
//}

//JNIEXPORT  JNICALL
//Java_org_kde_koala_ClassStore_getClassSuppliers(JNIEnv *env, jobject obj, jstring aName)
//{
//static QString * _qstring_aName = 0;
//	return () ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->getClassSuppliers((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
//}

//JNIEXPORT  JNICALL
//Java_org_kde_koala_ClassStore_getSortedClassList(JNIEnv *env, jobject obj)
//{
//	return () ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->getSortedClassList();
//}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ClassStore_getSortedClassNameList(JNIEnv *env, jobject obj)
{
	QStringList  * _qlist;
	_qlist = ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->getSortedClassNameList();
	return (jobject) QtSupport::arrayWithQStringList(env, (QStringList *) _qlist);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_getVirtualMethodsForClass(JNIEnv *env, jobject obj, jstring aName, jobject implList, jobject availList)
{
static QString * _qstring_aName = 0;
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->getVirtualMethodsForClass((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName), (QList<ParsedMethod>*) QtSupport::getQt(env, implList), (QList<ParsedMethod>*) QtSupport::getQt(env, availList));
	return;
}

//JNIEXPORT  JNICALL
//Java_org_kde_koala_ClassStore_getSortedStructList(JNIEnv *env, jobject obj)
//{
//	return () ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->getSortedStructList();
//}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_wipeout(JNIEnv *env, jobject obj)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->wipeout();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_addScope(JNIEnv *env, jobject obj, jobject aScope)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->addScope((ParsedScopeContainer*) QtSupport::getQt(env, aScope));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_addClass(JNIEnv *env, jobject obj, jobject aClass)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->addClass((ParsedClass*) QtSupport::getQt(env, aClass));
	return;
}

//JNIEXPORT void JNICALL
//Java_org_kde_koala_ClassStore_addGlobalVar(JNIEnv *env, jobject obj, jobject aAttr)
//{
//	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->addGlobalVar((ParsedAttribute*) QtSupport::getQt(env, aAttr));
//	return;
//}

//JNIEXPORT void JNICALL
//Java_org_kde_koala_ClassStore_addGlobalFunction(JNIEnv *env, jobject obj, jobject aFunc)
//{
//	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->addGlobalFunction((ParsedMethod*) QtSupport::getQt(env, aFunc));
//	return;
//}

//JNIEXPORT void JNICALL
//Java_org_kde_koala_ClassStore_addGlobalStruct(JNIEnv *env, jobject obj, jobject aStruct)
//{
//	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->addGlobalStruct((ParsedStruct*) QtSupport::getQt(env, aStruct));
//	return;
//}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_removeWithReferences(JNIEnv *env, jobject obj, jstring aFile)
{
static QString * _qstring_aFile = 0;
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->removeWithReferences((QString&) * (QString *) QtSupport::toQString(env, aFile, &_qstring_aFile));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_removeClass(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->removeClass((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_out(JNIEnv *env, jobject obj)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->out();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_setPath(JNIEnv *env, jobject obj, jstring aPath)
{
static QString * _qstring_aPath = 0;
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->setPath((QString&) * (QString *) QtSupport::toQString(env, aPath, &_qstring_aPath));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_setFileName(JNIEnv *env, jobject obj, jstring aFileName)
{
static QString * _qstring_aFileName = 0;
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->setFileName((QString&) * (QString *) QtSupport::toQString(env, aFileName, &_qstring_aFileName));
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ClassStore_open(JNIEnv *env, jobject obj, jstring aFileName, jint nMode)
{
static QString * _qstring_aFileName = 0;
	return (jboolean) ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->open((QString&) * (QString *) QtSupport::toQString(env, aFileName, &_qstring_aFileName), (int) nMode);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_close(JNIEnv *env, jobject obj)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->close();
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ClassStore_exists(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->exists();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_storeAll(JNIEnv *env, jobject obj)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->storeAll();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_restoreAll(JNIEnv *env, jobject obj)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->restoreAll();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_storeClass(JNIEnv *env, jobject obj, jobject pClass)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->protected_storeClass((ParsedClass*) QtSupport::getQt(env, pClass));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_storeScope(JNIEnv *env, jobject obj, jobject pScope)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->protected_storeScope((ParsedScopeContainer*) QtSupport::getQt(env, pScope));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_storeMethod(JNIEnv *env, jobject obj, jobject pMethod)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->protected_storeMethod((ParsedMethod*) QtSupport::getQt(env, pMethod));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_storeAttribute(JNIEnv *env, jobject obj, jobject pAttribute)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->protected_storeAttribute((ParsedAttribute*) QtSupport::getQt(env, pAttribute));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_storeStruct(JNIEnv *env, jobject obj, jobject pStruct)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->protected_storeStruct((ParsedStruct*) QtSupport::getQt(env, pStruct));
	return;
}

