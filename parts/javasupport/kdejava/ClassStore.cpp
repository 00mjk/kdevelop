/***************************************************************************
                            ClassStore.cpp -  description
                             -------------------
    begin                : Mon May 21 09:39:20 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Mon May 21 09:39:20 2001, using kdoc parser/custom Java conversion backend.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <classstore.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/ClassStore.h>

class ClassStoreJBridge : public ClassStore
{
public:
	ClassStoreJBridge() : ClassStore() {}
	~ClassStoreJBridge() {}
};


JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_newClassStore(JNIEnv *env, jobject obj)
{
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new ClassStoreJBridge());
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (ClassStore*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ClassStore_hasScope(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jboolean) ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->hasScope((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ClassStore_hasClass(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jboolean) ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->hasClass((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ClassStore_hasStruct(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jboolean) ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->hasStruct((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ClassStore_getScopeByName(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jobject) QtSupport::objectForQtKey(env, (void *)((ClassStoreJBridge*) QtSupport::getQt(env, obj))->getScopeByName((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName)), "org.kde.koala.ParsedScopeContainer");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ClassStore_getClassByName(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jobject) QtSupport::objectForQtKey(env, (void *)((ClassStoreJBridge*) QtSupport::getQt(env, obj))->getClassByName((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName)), "org.kde.koala.ParsedClass");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ClassStore_getSortedClassNameList(JNIEnv *env, jobject obj)
{
	QStrList  * _qlist;
	_qlist = ((ClassStoreJBridge*) QtSupport::getQt(env, obj))->getSortedClassNameList();
	return (jobject) QtSupport::arrayWithQStrList(env, (QStrList *) _qlist);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_wipeout(JNIEnv *env, jobject obj)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->wipeout();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_addScope(JNIEnv *env, jobject obj, jobject aScope)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->addScope((ParsedScopeContainer*) QtSupport::getQt(env, aScope));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_addClass(JNIEnv *env, jobject obj, jobject aClass)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->addClass((ParsedClass*) QtSupport::getQt(env, aClass));
	return;
}

//JNIEXPORT void JNICALL
//Java_org_kde_koala_ClassStore_addGlobalVar(JNIEnv *env, jobject obj, jobject aAttr)
//{
//	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->addGlobalVar((ParsedAttribute*) QtSupport::getQt(env, aAttr));
//	return;
//}

//JNIEXPORT void JNICALL
//Java_org_kde_koala_ClassStore_addGlobalFunction(JNIEnv *env, jobject obj, jobject aFunc)
//{
//	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->addGlobalFunction((ParsedMethod*) QtSupport::getQt(env, aFunc));
//	return;
//}

//JNIEXPORT void JNICALL
//Java_org_kde_koala_ClassStore_addGlobalStruct(JNIEnv *env, jobject obj, jobject aStruct)
//{
//	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->addGlobalStruct((ParsedStruct*) QtSupport::getQt(env, aStruct));
//	return;
//}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_removeWithReferences(JNIEnv *env, jobject obj, jstring aFile)
{
static QString * _qstring_aFile = 0;
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->removeWithReferences((QString&) * (QString *) QtSupport::toQString(env, aFile, &_qstring_aFile));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_removeClass(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->removeClass((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_storeAll(JNIEnv *env, jobject obj)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->storeAll();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ClassStore_out(JNIEnv *env, jobject obj)
{
	((ClassStoreJBridge*) QtSupport::getQt(env, obj))->out();
	return;
}

