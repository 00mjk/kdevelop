/***************************************************************************
                            KDevPart.cpp -  description
                             -------------------
    begin                : Mon May 21 09:39:20 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Mon May 21 09:39:20 2001, using kdoc parser/custom Java conversion backend.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <kdevpart.h>
#include <kdevcore.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/KDevPart.h>

class KDevPartJBridge : public KDevPart
{
public:
	KDevPartJBridge(KDevApi* api, QObject* parent, const char* name) : KDevPart(api, parent, name) {}
	~KDevPartJBridge() {}
};


JNIEXPORT void JNICALL
Java_org_kde_koala_KDevPart_newKDevPart__Lorg_kde_koala_KDevApi_2Lorg_kde_qt_QObject_2Ljava_lang_String_2(JNIEnv *env, jobject obj, jobject api, jobject parent, jstring name)
{
static QCString * _qstring_name = 0;
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new KDevPartJBridge((KDevApi*) QtSupport::getQt(env, api), (QObject*) QtSupport::getQt(env, parent), (char*) QtSupport::toCharString(env, name, &_qstring_name)));
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_KDevPart_newKDevPart__Lorg_kde_koala_KDevApi_2(JNIEnv *env, jobject obj, jobject api)
{
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new KDevPartJBridge((KDevApi*) QtSupport::getQt(env, api), 0, 0));
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_KDevPart_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (KDevPart*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_KDevPart_core(JNIEnv *env, jobject obj)
{
	return (jobject) QtSupport::objectForQtKey(env, (void *) ((KDevPartJBridge*) QtSupport::getQt(env, obj))->core(), "org.kde.koala.Core");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_KDevPart_project(JNIEnv *env, jobject obj)
{
	return (jobject) QtSupport::objectForQtKey(env, (void *)((KDevPartJBridge*) QtSupport::getQt(env, obj))->project(), "org.kde.koala.KDevProject");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_KDevPart_versionControl(JNIEnv *env, jobject obj)
{
	return (jobject) QtSupport::objectForQtKey(env, (void *)((KDevPartJBridge*) QtSupport::getQt(env, obj))->versionControl(), "org.kde.koala.KDevVersionControl");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_KDevPart_languageSupport(JNIEnv *env, jobject obj)
{
	return (jobject) QtSupport::objectForQtKey(env, (void *)((KDevPartJBridge*) QtSupport::getQt(env, obj))->languageSupport(), "org.kde.koala.KDevLanguageSupport");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_KDevPart_makeFrontend(JNIEnv *env, jobject obj)
{
	return (jobject) QtSupport::objectForQtKey(env, (void *)((KDevPartJBridge*) QtSupport::getQt(env, obj))->makeFrontend(), "org.kde.koala.KDevMakeFrontend");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_KDevPart_appFrontend(JNIEnv *env, jobject obj)
{
	return (jobject) QtSupport::objectForQtKey(env, (void *)((KDevPartJBridge*) QtSupport::getQt(env, obj))->appFrontend(), "org.kde.koala.KDevAppFrontend");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_KDevPart_classStore(JNIEnv *env, jobject obj)
{
	return (jobject) QtSupport::objectForQtKey(env, (void *)((KDevPartJBridge*) QtSupport::getQt(env, obj))->classStore(), "org.kde.koala.ClassStore");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_KDevPart_projectDom(JNIEnv *env, jobject obj)
{
	return (jobject) QtSupport::objectForQtKey(env, (void *)((KDevPartJBridge*) QtSupport::getQt(env, obj))->projectDom(), "org.kde.qt.QDomDocument");
}

