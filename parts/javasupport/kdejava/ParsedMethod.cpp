/***************************************************************************
                            ParsedMethod.cpp -  description
                             -------------------
    begin                : Wed Dec 19 15:43:05 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Wed Dec 19 15:43:05 2001, using kalyptus 0.91.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <parsedmethod.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/KDESupport.h>
#include <kdejava/ParsedMethod.h>

class ParsedMethodJBridge : public ParsedMethod
{
public:
	ParsedMethodJBridge() : ParsedMethod() {}
	~ParsedMethodJBridge() {QtSupport::qtKeyDeleted(this);}
};


JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_newParsedMethod(JNIEnv *env, jobject obj)
{
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new ParsedMethodJBridge());
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (ParsedMethod*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_addArgument(JNIEnv *env, jobject obj, jobject anArg)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->addArgument((ParsedArgument*) QtSupport::getQt(env, anArg));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsVirtual__Z(JNIEnv *env, jobject obj, jboolean aState)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsVirtual((bool) aState);
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsVirtual__(JNIEnv *env, jobject obj)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsVirtual(true);
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedMethod_isVirtual(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->isVirtual();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsPure__Z(JNIEnv *env, jobject obj, jboolean aState)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsPure((bool) aState);
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsPure__(JNIEnv *env, jobject obj)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsPure(true);
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedMethod_isPure(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->isPure();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsSlot__Z(JNIEnv *env, jobject obj, jboolean aState)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsSlot((bool) aState);
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsSlot__(JNIEnv *env, jobject obj)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsSlot(true);
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedMethod_isSlot(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->isSlot();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsSignal__Z(JNIEnv *env, jobject obj, jboolean aState)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsSignal((bool) aState);
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsSignal__(JNIEnv *env, jobject obj)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsSignal(true);
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedMethod_isSignal(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->isSignal();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsConstructor__Z(JNIEnv *env, jobject obj, jboolean aState)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsConstructor((bool) aState);
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsConstructor__(JNIEnv *env, jobject obj)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsConstructor(true);
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedMethod_isConstructor(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->isConstructor();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsDestructor__Z(JNIEnv *env, jobject obj, jboolean aState)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsDestructor((bool) aState);
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsDestructor__(JNIEnv *env, jobject obj)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsDestructor(true);
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedMethod_isDestructor(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->isDestructor();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsObjectiveC__Z(JNIEnv *env, jobject obj, jboolean is)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsObjectiveC((bool) is);
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_setIsObjectiveC__(JNIEnv *env, jobject obj)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->setIsObjectiveC(true);
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedMethod_isObjectiveC(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->isObjectiveC();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_copy(JNIEnv *env, jobject obj, jobject aMethod)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->copy((ParsedMethod*) QtSupport::getQt(env, aMethod));
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedMethod_isEqual(JNIEnv *env, jobject obj, jobject method)
{
	return (jboolean) ((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->isEqual((ParsedMethod*) QtSupport::getQt(env, method));
}

JNIEXPORT jstring JNICALL
Java_org_kde_koala_ParsedMethod_asString(JNIEnv *env, jobject obj)
{
	QString  _qstring;
	_qstring = ((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->asString();
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedMethod_out(JNIEnv *env, jobject obj)
{
	((ParsedMethodJBridge*) QtSupport::getQt(env, obj))->out();
	return;
}

