/***************************************************************************
                            CursorDocumentIface.cpp -  description
                             -------------------
    begin                : Fri Dec 21 13:45:30 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Fri Dec 21 13:45:30 2001, using kalyptus 0.91.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <keditor/cursor_iface.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/KDESupport.h>
#include <kdejava/CursorDocumentIface.h>

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_CursorDocumentIface_setCursorPosition(JNIEnv *env, jobject obj, jint line, jint row)
{
	return (jboolean) ((KEditor::CursorDocumentIface*) QtSupport::getQt(env, obj))->setCursorPosition((int) line, (int) row);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_CursorDocumentIface_getCursorPosition(JNIEnv *env, jobject obj, jint line, jint col)
{
	((KEditor::CursorDocumentIface*) QtSupport::getQt(env, obj))->getCursorPosition((int&) * (int *) line, (int&) * (int *) col);
	return;
}

JNIEXPORT jint JNICALL
Java_org_kde_koala_CursorDocumentIface_numberOfLines(JNIEnv *env, jobject obj)
{
	return (jint) ((KEditor::CursorDocumentIface*) QtSupport::getQt(env, obj))->numberOfLines();
}

JNIEXPORT jint JNICALL
Java_org_kde_koala_CursorDocumentIface_lengthOfLine(JNIEnv *env, jobject obj, jint line)
{
	return (jint) ((KEditor::CursorDocumentIface*) QtSupport::getQt(env, obj))->lengthOfLine((int) line);
}

//JNIEXPORT  JNICALL
//Java_org_kde_koala_CursorDocumentIface_dcopInterface(JNIEnv *env, jobject obj)
//{
//	return () ((KEditor::CursorDocumentIface*) QtSupport::getQt(env, obj))->dcopInterface();
//}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_CursorDocumentIface_getInterface(JNIEnv *env, jclass obj, jobject doc)
{
	return (jobject) QtSupport::objectForQtKey(env, (void *)KEditor::CursorDocumentIface::interface((KEditor::Document*) QtSupport::getQt(env, doc)), "org.kde.koala.CursorDocumentIface");
}

