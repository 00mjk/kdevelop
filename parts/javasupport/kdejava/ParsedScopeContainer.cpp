/***************************************************************************
                            ParsedScopeContainer.cpp -  description
                             -------------------
    begin                : Tue Jul  3 08:02:55 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Tue Jul  3 08:02:55 2001, using kdoc parser/custom Java conversion backend.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <parsedscopecontainer.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/ParsedScopeContainer.h>

class ParsedScopeContainerJBridge : public ParsedScopeContainer
{
public:
	ParsedScopeContainerJBridge() : ParsedScopeContainer() {}
	~ParsedScopeContainerJBridge() {}
};


JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedScopeContainer_newParsedScopeContainer(JNIEnv *env, jobject obj)
{
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new ParsedScopeContainerJBridge());
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedScopeContainer_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (ParsedScopeContainer*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedScopeContainer_hasScope(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jboolean) ((ParsedScopeContainerJBridge*) QtSupport::getQt(env, obj))->hasScope((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedScopeContainer_getScopeByName(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jobject) QtSupport::objectForQtKey(env, (void *)((ParsedScopeContainerJBridge*) QtSupport::getQt(env, obj))->getScopeByName((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName)), "org.kde.koala.ParsedScopeContainer");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedScopeContainer_getSortedScopeNameList(JNIEnv *env, jobject obj)
{
	QStrList  * _qlist;
	_qlist = ((ParsedScopeContainerJBridge*) QtSupport::getQt(env, obj))->getSortedScopeNameList();
	return (jobject) QtSupport::arrayWithQStrList(env, (QStrList *) _qlist);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedScopeContainer_addScope(JNIEnv *env, jobject obj, jobject aScope)
{
	((ParsedScopeContainerJBridge*) QtSupport::getQt(env, obj))->addScope((ParsedScopeContainer*) QtSupport::getQt(env, aScope));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedScopeContainer_removeScope(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	((ParsedScopeContainerJBridge*) QtSupport::getQt(env, obj))->removeScope((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedScopeContainer_clear(JNIEnv *env, jobject obj)
{
	((ParsedScopeContainerJBridge*) QtSupport::getQt(env, obj))->clear();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedScopeContainer_out(JNIEnv *env, jobject obj)
{
	((ParsedScopeContainerJBridge*) QtSupport::getQt(env, obj))->out();
	return;
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedScopeContainer_scopeList(JNIEnv * env, jobject obj)
{
	jobject			scopeArray;
	jclass			cls;
	jmethodID		clearMid;
	jmethodID		addMid;

	scopeArray = (jobject) QtSupport::objectForQtKey(env, ((ParsedContainer *) QtSupport::getQt(env, obj))->structIterator, "java.util.ArrayList");

	cls = env->GetObjectClass(scopeArray);
	clearMid = env->GetMethodID(cls, "clear", "()V");
	if (clearMid == 0) {
		return 0;
	}

	env->CallVoidMethod(scopeArray, clearMid);

	addMid = env->GetMethodID(cls, "add", "(Ljava/lang/Object;)Z");
	if (addMid == 0) {
		return 0;
	}

	for (	((ParsedScopeContainer *) QtSupport::getQt(env, obj))->scopeIterator.toFirst();
			((ParsedScopeContainer *) QtSupport::getQt(env, obj))->scopeIterator.current();
			++((ParsedScopeContainer *) QtSupport::getQt(env, obj))->scopeIterator )
	{
    	ParsedScopeContainer * currentScope = ((ParsedScopeContainer *) QtSupport::getQt(env, obj))->scopeIterator.current();

		if (! env->CallBooleanMethod(	scopeArray,
										addMid,
										QtSupport::objectForQtKey(env, currentScope, "org.kde.koala.ParsedScopeContainer") ) )
		{
			return 0;
		}
    }

	return scopeArray;
}


