/***************************************************************************
                            ParsedContainer.cpp -  description
                             -------------------
    begin                : Fri May 25 13:39:04 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Fri May 25 13:39:04 2001, using kdoc parser/custom Java conversion backend.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <parsedcontainer.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/ParsedContainer.h>

class ParsedContainerJBridge : public ParsedContainer
{
public:
	ParsedContainerJBridge() : ParsedContainer() {}
	~ParsedContainerJBridge() {}
};


JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedContainer_newParsedContainer(JNIEnv *env, jobject obj)
{
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new ParsedContainerJBridge());
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedContainer_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (ParsedContainer*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedContainer_addStruct(JNIEnv *env, jobject obj, jobject aStruct)
{
	((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->addStruct((ParsedStruct*) QtSupport::getQt(env, aStruct));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedContainer_addAttribute(JNIEnv *env, jobject obj, jobject anAttribute)
{
	((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->addAttribute((ParsedAttribute*) QtSupport::getQt(env, anAttribute));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedContainer_addMethod(JNIEnv *env, jobject obj, jobject aMethod)
{
	((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->addMethod((ParsedMethod*) QtSupport::getQt(env, aMethod));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedContainer_setUseFullpath(JNIEnv *env, jobject obj, jboolean state)
{
	((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->setUseFullpath((bool) state);
	return;
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedContainer_getMethod(JNIEnv *env, jobject obj, jobject aMethod)
{
	return (jobject) QtSupport::objectForQtKey(env, (void *)((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->getMethod((ParsedMethod*) QtSupport::getQt(env, aMethod)), "org.kde.koala.ParsedMethod");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedContainer_getMethodByNameAndArg(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jobject) QtSupport::objectForQtKey(env, (void *)((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->getMethodByNameAndArg((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName)), "org.kde.koala.ParsedMethod");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedContainer_getStructByName(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jobject) QtSupport::objectForQtKey(env, (void *)((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->getStructByName((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName)), "org.kde.koala.ParsedStruct");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedContainer_getAttributeByName(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jobject) QtSupport::objectForQtKey(env, (void *)((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->getAttributeByName((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName)), "org.kde.koala.ParsedAttribute");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedContainer_getSortedAttributeAsStringList(JNIEnv *env, jobject obj)
{
	QStrList  * _qlist;
	_qlist = ((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->getSortedAttributeAsStringList();
	return (jobject) QtSupport::arrayWithQStrList(env, (QStrList *) _qlist);
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedContainer_getSortedStructNameList(JNIEnv *env, jobject obj)
{
	QStrList  * _qlist;
	_qlist = ((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->getSortedStructNameList();
	return (jobject) QtSupport::arrayWithQStrList(env, (QStrList *) _qlist);
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedContainer_hasAttribute(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jboolean) ((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->hasAttribute((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedContainer_hasStruct(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jboolean) ((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->hasStruct((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedContainer_removeWithReferences(JNIEnv *env, jobject obj, jstring aFile)
{
static QString * _qstring_aFile = 0;
	((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->removeWithReferences((QString&) * (QString *) QtSupport::toQString(env, aFile, &_qstring_aFile));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedContainer_removeMethod(JNIEnv *env, jobject obj, jobject aMethod)
{
	((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->removeMethod((ParsedMethod*) QtSupport::getQt(env, aMethod));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedContainer_removeAttribute(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->removeAttribute((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedContainer_removeStruct(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->removeStruct((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedContainer_clear(JNIEnv *env, jobject obj)
{
	((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->clear();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedContainer_out(JNIEnv *env, jobject obj)
{
	((ParsedContainerJBridge*) QtSupport::getQt(env, obj))->out();
	return;
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedContainer_attributeList(JNIEnv * env, jobject obj)
{
	jobject			attributeArray;
	jclass			cls;
	jmethodID		clearMid;
	jmethodID		addMid;

	attributeArray = (jobject) QtSupport::objectForQtKey(env, ((ParsedContainer *) QtSupport::getQt(env, obj))->attributeIterator, "java.util.ArrayList");

	cls = env->GetObjectClass(attributeArray);
	clearMid = env->GetMethodID(cls, "clear", "()V");
	if (clearMid == 0) {
		return 0;
	}

	env->CallVoidMethod(attributeArray, clearMid);

	addMid = env->GetMethodID(cls, "add", "(Ljava/lang/Object;)Z");
	if (addMid == 0) {
		return 0;
	}

	for (	((ParsedContainer *) QtSupport::getQt(env, obj))->attributeIterator.toFirst();
			((ParsedContainer *) QtSupport::getQt(env, obj))->attributeIterator.current();
			++((ParsedContainer *) QtSupport::getQt(env, obj))->attributeIterator )
	{
    	ParsedAttribute * currentAttribute = ((ParsedContainer *) QtSupport::getQt(env, obj))->attributeIterator.current();

		if (! env->CallBooleanMethod(	attributeArray,
										addMid,
										QtSupport::objectForQtKey(env, currentAttribute, "org.kde.koala.ParsedAttribute") ) )
		{
			return 0;
		}
    }

	return attributeArray;
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedContainer_methodList(JNIEnv * env, jobject obj)
{
	jobject			methodArray;
	jclass			cls;
	jmethodID		clearMid;
	jmethodID		addMid;

	methodArray = (jobject) QtSupport::objectForQtKey(env, ((ParsedContainer *) QtSupport::getQt(env, obj))->methodIterator, "java.util.ArrayList");

	cls = env->GetObjectClass(methodArray);
	clearMid = env->GetMethodID(cls, "clear", "()V");
	if (clearMid == 0) {
		return 0;
	}

	env->CallVoidMethod(methodArray, clearMid);

	addMid = env->GetMethodID(cls, "add", "(Ljava/lang/Object;)Z");
	if (addMid == 0) {
		return 0;
	}

	for (	((ParsedContainer *) QtSupport::getQt(env, obj))->methodIterator.toFirst();
			((ParsedContainer *) QtSupport::getQt(env, obj))->methodIterator.current();
			++((ParsedContainer *) QtSupport::getQt(env, obj))->methodIterator )
	{
    	ParsedMethod * currentMethod = ((ParsedContainer *) QtSupport::getQt(env, obj))->methodIterator.current();

		if (! env->CallBooleanMethod(	methodArray,
										addMid,
										QtSupport::objectForQtKey(env, currentMethod, "org.kde.koala.ParsedMethod") ) )
		{
			return 0;
		}
    }

	return methodArray;
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedContainer_structList(JNIEnv * env, jobject obj)
{
	jobject			structArray;
	jclass			cls;
	jmethodID		clearMid;
	jmethodID		addMid;

	structArray = (jobject) QtSupport::objectForQtKey(env, ((ParsedContainer *) QtSupport::getQt(env, obj))->structIterator, "java.util.ArrayList");

	cls = env->GetObjectClass(structArray);
	clearMid = env->GetMethodID(cls, "clear", "()V");
	if (clearMid == 0) {
		return 0;
	}

	env->CallVoidMethod(structArray, clearMid);

	addMid = env->GetMethodID(cls, "add", "(Ljava/lang/Object;)Z");
	if (addMid == 0) {
		return 0;
	}

	for (	((ParsedContainer *) QtSupport::getQt(env, obj))->structIterator.toFirst();
			((ParsedContainer *) QtSupport::getQt(env, obj))->structIterator.current();
			++((ParsedContainer *) QtSupport::getQt(env, obj))->structIterator )
	{
    	ParsedStruct * currentStruct = ((ParsedContainer *) QtSupport::getQt(env, obj))->structIterator.current();

		if (! env->CallBooleanMethod(	structArray,
										addMid,
										QtSupport::objectForQtKey(env, currentStruct, "org.kde.koala.ParsedStruct") ) )
		{
			return 0;
		}
    }

	return structArray;
}



