/***************************************************************************
                            ParsedAttribute.cpp -  description
                             -------------------
    begin                : Fri May 25 13:03:19 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Fri May 25 13:03:19 2001, using kdoc parser/custom Java conversion backend.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <parsedattribute.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/ParsedAttribute.h>

class ParsedAttributeJBridge : public ParsedAttribute
{
public:
	ParsedAttributeJBridge() : ParsedAttribute() {}
	~ParsedAttributeJBridge() {}
};


JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedAttribute_newParsedAttribute(JNIEnv *env, jobject obj)
{
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new ParsedAttributeJBridge());
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedAttribute_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (ParsedAttribute*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedAttribute_setType(JNIEnv *env, jobject obj, jstring aType)
{
static QString * _qstring_aType = 0;
	((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->setType((QString&) * (QString *) QtSupport::toQString(env, aType, &_qstring_aType));
	return;
}

JNIEXPORT jstring JNICALL
Java_org_kde_koala_ParsedAttribute_attributeType(JNIEnv *env, jobject obj)
{
	QString  _qstring;
	_qstring = ((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->attributeType();
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedAttribute_setNamePos(JNIEnv *env, jobject obj, jint pos)
{
	((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->setNamePos((int) pos);
	return;
}

JNIEXPORT jint JNICALL
Java_org_kde_koala_ParsedAttribute_namePos(JNIEnv *env, jobject obj)
{
	return (jint) ((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->namePos();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedAttribute_setIsInHFile__Z(JNIEnv *env, jobject obj, jboolean aState)
{
	((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->setIsInHFile((bool) aState);
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedAttribute_setIsInHFile__(JNIEnv *env, jobject obj)
{
	((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->setIsInHFile(true);
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedAttribute_inHFile(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->inHFile();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedAttribute_setIsStatic__Z(JNIEnv *env, jobject obj, jboolean aState)
{
	((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->setIsStatic((bool) aState);
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedAttribute_setIsStatic__(JNIEnv *env, jobject obj)
{
	((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->setIsStatic(true);
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedAttribute_isStaticAttribute(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->isStaticAttribute();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedAttribute_setIsConst__Z(JNIEnv *env, jobject obj, jboolean aState)
{
	((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->setIsConst((bool) aState);
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedAttribute_setIsConst__(JNIEnv *env, jobject obj)
{
	((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->setIsConst(true);
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedAttribute_isConstAttribute(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->isConstAttribute();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedAttribute_copy(JNIEnv *env, jobject obj, jobject anAttribute)
{
	((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->copy((ParsedAttribute*) QtSupport::getQt(env, anAttribute));
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedAttribute_isEqual(JNIEnv *env, jobject obj, jobject attr)
{
	return (jboolean) ((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->isEqual((ParsedAttribute*) QtSupport::getQt(env, attr));
}

JNIEXPORT jstring JNICALL
Java_org_kde_koala_ParsedAttribute_asString(JNIEnv *env, jobject obj)
{
	QString  _qstring;
	_qstring = ((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->asString();
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedAttribute_out(JNIEnv *env, jobject obj)
{
	((ParsedAttributeJBridge*) QtSupport::getQt(env, obj))->out();
	return;
}

