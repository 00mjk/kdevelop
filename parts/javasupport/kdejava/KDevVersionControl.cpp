/***************************************************************************
                            KDevVersionControl.cpp -  description
                             -------------------
    begin                : Wed Jul  4 12:40:03 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Wed Jul  4 12:40:03 2001, using kdoc parser/custom Java conversion backend.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <kdevversioncontrol.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/KDevVersionControl.h>

class KDevVersionControlJBridge : public KDevVersionControl
{
public:
	KDevVersionControlJBridge(KDevApi* api, QObject* parent, const char* name) : KDevVersionControl(api, parent, name) {}
	~KDevVersionControlJBridge() {}
};


JNIEXPORT void JNICALL
Java_org_kde_koala_KDevVersionControl_newKDevVersionControl__Lorg_kde_koala_KDevApi_2Lorg_kde_qt_QObject_2Ljava_lang_String_2(JNIEnv *env, jobject obj, jobject api, jobject parent, jstring name)
{
static QCString * _qstring_name = 0;
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new KDevVersionControlJBridge((KDevApi*) QtSupport::getQt(env, api), (QObject*) QtSupport::getQt(env, parent), (char*) QtSupport::toCharString(env, name, &_qstring_name)));
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_KDevVersionControl_newKDevVersionControl__Lorg_kde_koala_KDevApi_2(JNIEnv *env, jobject obj, jobject api)
{
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new KDevVersionControlJBridge((KDevApi*) QtSupport::getQt(env, api), 0, 0));
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_KDevVersionControl_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (KDevVersionControl*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

