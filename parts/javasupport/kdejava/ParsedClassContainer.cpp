/***************************************************************************
                            ParsedClassContainer.cpp -  description
                             -------------------
    begin                : Tue Jul  3 08:02:55 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Tue Jul  3 08:02:55 2001, using kdoc parser/custom Java conversion backend.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <parsedclasscontainer.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/ParsedClassContainer.h>

class ParsedClassContainerJBridge : public ParsedClassContainer
{
public:
	ParsedClassContainerJBridge() : ParsedClassContainer() {}
	~ParsedClassContainerJBridge() {}
};


JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedClassContainer_newParsedClassContainer(JNIEnv *env, jobject obj)
{
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new ParsedClassContainerJBridge());
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedClassContainer_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (ParsedClassContainer*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedClassContainer_hasClass(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jboolean) ((ParsedClassContainerJBridge*) QtSupport::getQt(env, obj))->hasClass((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedClassContainer_getClassByName(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jobject) QtSupport::objectForQtKey(env, (void *)((ParsedClassContainerJBridge*) QtSupport::getQt(env, obj))->getClassByName((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName)), "org.kde.koala.ParsedClass");
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedClassContainer_getSortedClassNameList(JNIEnv *env, jobject obj, jboolean useFullPath)
{
	QStrList  * _qlist;
	_qlist = ((ParsedClassContainerJBridge*) QtSupport::getQt(env, obj))->getSortedClassNameList((bool) useFullPath);
	return (jobject) QtSupport::arrayWithQStrList(env, (QStrList *) _qlist);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedClassContainer_removeWithReferences(JNIEnv *env, jobject obj, jstring aFile)
{
static QString * _qstring_aFile = 0;
	((ParsedClassContainerJBridge*) QtSupport::getQt(env, obj))->removeWithReferences((QString&) * (QString *) QtSupport::toQString(env, aFile, &_qstring_aFile));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedClassContainer_addClass(JNIEnv *env, jobject obj, jobject aClass)
{
	((ParsedClassContainerJBridge*) QtSupport::getQt(env, obj))->addClass((ParsedClass*) QtSupport::getQt(env, aClass));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedClassContainer_removeClass(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	((ParsedClassContainerJBridge*) QtSupport::getQt(env, obj))->removeClass((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedClassContainer_clear__Z(JNIEnv *env, jobject obj, jboolean bAutodel)
{
	((ParsedClassContainerJBridge*) QtSupport::getQt(env, obj))->clear((bool) bAutodel);
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedClassContainer_clear__(JNIEnv *env, jobject obj)
{
	((ParsedClassContainerJBridge*) QtSupport::getQt(env, obj))->clear(true);
	return;
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_ParsedClassContainer_classList(JNIEnv * env, jobject obj)
{
	jobject			classArray;
	jclass			cls;
	jmethodID		clearMid;
	jmethodID		addMid;

	classArray = (jobject) QtSupport::objectForQtKey(env, ((ParsedClassContainer *) QtSupport::getQt(env, obj))->classIterator, "java.util.ArrayList");

	cls = env->GetObjectClass(classArray);
	clearMid = env->GetMethodID(cls, "clear", "()V");
	if (clearMid == 0) {
		return 0;
	}

	env->CallVoidMethod(classArray, clearMid);

	addMid = env->GetMethodID(cls, "add", "(Ljava/lang/Object;)Z");
	if (addMid == 0) {
		return 0;
	}

	for (	((ParsedClassContainer *) QtSupport::getQt(env, obj))->classIterator.toFirst();
			((ParsedClassContainer *) QtSupport::getQt(env, obj))->classIterator.current();
			++((ParsedClassContainer *) QtSupport::getQt(env, obj))->classIterator )
	{
    	ParsedClass * currentClass = ((ParsedClassContainer *) QtSupport::getQt(env, obj))->classIterator.current();

		if (! env->CallBooleanMethod(	classArray,
										addMid,
										QtSupport::objectForQtKey(env, currentClass, "org.kde.koala.ParsedClass") ) )
		{
			return 0;
		}
    }

	return classArray;
}


