/***************************************************************************
                            ParsedItem.cpp -  description
                             -------------------
    begin                : Wed Dec 19 15:43:05 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Wed Dec 19 15:43:05 2001, using kalyptus 0.91.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <parseditem.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/KDESupport.h>
#include <kdejava/ParsedItem.h>

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (ParsedItem*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedItem_isPublic(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedItem*) QtSupport::getQt(env, obj))->isPublic();
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedItem_isProtected(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedItem*) QtSupport::getQt(env, obj))->isProtected();
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedItem_isPrivate(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedItem*) QtSupport::getQt(env, obj))->isPrivate();
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedItem_isPackage(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedItem*) QtSupport::getQt(env, obj))->isPackage();
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_ParsedItem_isGlobal(JNIEnv *env, jobject obj)
{
	return (jboolean) ((ParsedItem*) QtSupport::getQt(env, obj))->isGlobal();
}

JNIEXPORT jstring JNICALL
Java_org_kde_koala_ParsedItem_path(JNIEnv *env, jobject obj)
{
	QString  _qstring;
	_qstring = ((ParsedItem*) QtSupport::getQt(env, obj))->path();
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_setItemType(JNIEnv *env, jobject obj, jint aType)
{
	((ParsedItem*) QtSupport::getQt(env, obj))->setItemType((PIType) aType);
	return;
}

JNIEXPORT jint JNICALL
Java_org_kde_koala_ParsedItem_itemType(JNIEnv *env, jobject obj)
{
	return (jint) ((ParsedItem*) QtSupport::getQt(env, obj))->itemType();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_setName(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	((ParsedItem*) QtSupport::getQt(env, obj))->setName((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
	return;
}

JNIEXPORT jstring JNICALL
Java_org_kde_koala_ParsedItem_name(JNIEnv *env, jobject obj)
{
	QString  _qstring;
	_qstring = ((ParsedItem*) QtSupport::getQt(env, obj))->name();
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_setAccess(JNIEnv *env, jobject obj, jint aAccess)
{
	((ParsedItem*) QtSupport::getQt(env, obj))->setAccess((PIAccess) aAccess);
	return;
}

JNIEXPORT jint JNICALL
Java_org_kde_koala_ParsedItem_access(JNIEnv *env, jobject obj)
{
	return (jint) ((ParsedItem*) QtSupport::getQt(env, obj))->access();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_setDeclaredInScope(JNIEnv *env, jobject obj, jstring aScope)
{
static QString * _qstring_aScope = 0;
	((ParsedItem*) QtSupport::getQt(env, obj))->setDeclaredInScope((QString&) * (QString *) QtSupport::toQString(env, aScope, &_qstring_aScope));
	return;
}

JNIEXPORT jstring JNICALL
Java_org_kde_koala_ParsedItem_declaredInScope(JNIEnv *env, jobject obj)
{
	QString  _qstring;
	_qstring = ((ParsedItem*) QtSupport::getQt(env, obj))->declaredInScope();
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_setDefinedOnLine(JNIEnv *env, jobject obj, jint aLine)
{
	((ParsedItem*) QtSupport::getQt(env, obj))->setDefinedOnLine((uint) aLine);
	return;
}

JNIEXPORT jint JNICALL
Java_org_kde_koala_ParsedItem_definedOnLine(JNIEnv *env, jobject obj)
{
	return (jint) ((ParsedItem*) QtSupport::getQt(env, obj))->definedOnLine();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_setDefinitionEndsOnLine(JNIEnv *env, jobject obj, jint aLine)
{
	((ParsedItem*) QtSupport::getQt(env, obj))->setDefinitionEndsOnLine((uint) aLine);
	return;
}

JNIEXPORT jint JNICALL
Java_org_kde_koala_ParsedItem_definitionEndsOnLine(JNIEnv *env, jobject obj)
{
	return (jint) ((ParsedItem*) QtSupport::getQt(env, obj))->definitionEndsOnLine();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_setDeclaredOnLine(JNIEnv *env, jobject obj, jint aLine)
{
	((ParsedItem*) QtSupport::getQt(env, obj))->setDeclaredOnLine((uint) aLine);
	return;
}

JNIEXPORT jint JNICALL
Java_org_kde_koala_ParsedItem_declaredOnLine(JNIEnv *env, jobject obj)
{
	return (jint) ((ParsedItem*) QtSupport::getQt(env, obj))->declaredOnLine();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_setDeclarationEndsOnLine(JNIEnv *env, jobject obj, jint aLine)
{
	((ParsedItem*) QtSupport::getQt(env, obj))->setDeclarationEndsOnLine((uint) aLine);
	return;
}

JNIEXPORT jint JNICALL
Java_org_kde_koala_ParsedItem_declarationEndsOnLine(JNIEnv *env, jobject obj)
{
	return (jint) ((ParsedItem*) QtSupport::getQt(env, obj))->declarationEndsOnLine();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_setDefinedInFile(JNIEnv *env, jobject obj, jstring aFile)
{
static QString * _qstring_aFile = 0;
	((ParsedItem*) QtSupport::getQt(env, obj))->setDefinedInFile((QString&) * (QString *) QtSupport::toQString(env, aFile, &_qstring_aFile));
	return;
}

JNIEXPORT jstring JNICALL
Java_org_kde_koala_ParsedItem_definedInFile(JNIEnv *env, jobject obj)
{
	QString  _qstring;
	_qstring = ((ParsedItem*) QtSupport::getQt(env, obj))->definedInFile();
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_setDeclaredInFile(JNIEnv *env, jobject obj, jstring aFile)
{
static QString * _qstring_aFile = 0;
	((ParsedItem*) QtSupport::getQt(env, obj))->setDeclaredInFile((QString&) * (QString *) QtSupport::toQString(env, aFile, &_qstring_aFile));
	return;
}

JNIEXPORT jstring JNICALL
Java_org_kde_koala_ParsedItem_declaredInFile(JNIEnv *env, jobject obj)
{
	QString  _qstring;
	_qstring = ((ParsedItem*) QtSupport::getQt(env, obj))->declaredInFile();
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_setComment(JNIEnv *env, jobject obj, jstring aComment)
{
static QString * _qstring_aComment = 0;
	((ParsedItem*) QtSupport::getQt(env, obj))->setComment((QString&) * (QString *) QtSupport::toQString(env, aComment, &_qstring_aComment));
	return;
}

JNIEXPORT jstring JNICALL
Java_org_kde_koala_ParsedItem_comment(JNIEnv *env, jobject obj)
{
	QString  _qstring;
	_qstring = ((ParsedItem*) QtSupport::getQt(env, obj))->comment();
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_clearDeclaration(JNIEnv *env, jobject obj)
{
	((ParsedItem*) QtSupport::getQt(env, obj))->clearDeclaration();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_clearDefinition(JNIEnv *env, jobject obj)
{
	((ParsedItem*) QtSupport::getQt(env, obj))->clearDefinition();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_copy(JNIEnv *env, jobject obj, jobject anItem)
{
	((ParsedItem*) QtSupport::getQt(env, obj))->copy((ParsedItem*) QtSupport::getQt(env, anItem));
	return;
}

JNIEXPORT jstring JNICALL
Java_org_kde_koala_ParsedItem_asString(JNIEnv *env, jobject obj)
{
	QString  _qstring;
	_qstring = ((ParsedItem*) QtSupport::getQt(env, obj))->asString();
	return QtSupport::fromQString(env, &_qstring);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_ParsedItem_out(JNIEnv *env, jobject obj)
{
	((ParsedItem*) QtSupport::getQt(env, obj))->out();
	return;
}

