/***************************************************************************
                            PersistantClassStore.cpp -  description
                             -------------------
    begin                : Wed Dec 19 15:43:05 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Wed Dec 19 15:43:05 2001, using kalyptus 0.91.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <persistantclassstore.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/KDESupport.h>
#include <kdejava/PersistantClassStore.h>

class PersistantClassStoreJBridge : public PersistantClassStore
{
public:
	PersistantClassStoreJBridge() : PersistantClassStore() {}
	~PersistantClassStoreJBridge() {QtSupport::qtKeyDeleted(this);}
	void protected_storeClass(ParsedClass* pClass) {
		PersistantClassStore::storeClass(pClass);
		return;
	}
	void protected_storeScope(ParsedScopeContainer* pScope) {
		PersistantClassStore::storeScope(pScope);
		return;
	}
	void protected_storeMethod(ParsedMethod* pMethod) {
		PersistantClassStore::storeMethod(pMethod);
		return;
	}
	void protected_storeAttribute(ParsedAttribute* pAttribute) {
		PersistantClassStore::storeAttribute(pAttribute);
		return;
	}
	void protected_storeStruct(ParsedStruct* pStruct) {
		PersistantClassStore::storeStruct(pStruct);
		return;
	}
};


JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_newPersistantClassStore(JNIEnv *env, jobject obj)
{
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new PersistantClassStoreJBridge());
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (PersistantClassStore*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_setPath(JNIEnv *env, jobject obj, jstring aPath)
{
static QString * _qstring_aPath = 0;
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->setPath((QString&) * (QString *) QtSupport::toQString(env, aPath, &_qstring_aPath));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_setFileName(JNIEnv *env, jobject obj, jstring aFileName)
{
static QString * _qstring_aFileName = 0;
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->setFileName((QString&) * (QString *) QtSupport::toQString(env, aFileName, &_qstring_aFileName));
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_PersistantClassStore_open(JNIEnv *env, jobject obj, jstring aFileName, jint nMode)
{
static QString * _qstring_aFileName = 0;
	return (jboolean) ((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->open((QString&) * (QString *) QtSupport::toQString(env, aFileName, &_qstring_aFileName), (int) nMode);
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_close(JNIEnv *env, jobject obj)
{
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->close();
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_PersistantClassStore_exists(JNIEnv *env, jobject obj)
{
	return (jboolean) ((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->exists();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_storeAll(JNIEnv *env, jobject obj)
{
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->storeAll();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_restoreAll(JNIEnv *env, jobject obj)
{
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->restoreAll();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_storeClass(JNIEnv *env, jobject obj, jobject pClass)
{
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->protected_storeClass((ParsedClass*) QtSupport::getQt(env, pClass));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_storeScope(JNIEnv *env, jobject obj, jobject pScope)
{
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->protected_storeScope((ParsedScopeContainer*) QtSupport::getQt(env, pScope));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_storeMethod(JNIEnv *env, jobject obj, jobject pMethod)
{
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->protected_storeMethod((ParsedMethod*) QtSupport::getQt(env, pMethod));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_storeAttribute(JNIEnv *env, jobject obj, jobject pAttribute)
{
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->protected_storeAttribute((ParsedAttribute*) QtSupport::getQt(env, pAttribute));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_storeStruct(JNIEnv *env, jobject obj, jobject pStruct)
{
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->protected_storeStruct((ParsedStruct*) QtSupport::getQt(env, pStruct));
	return;
}

