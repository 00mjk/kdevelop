/***************************************************************************
                            PersistantClassStore.cpp -  description
                             -------------------
    begin                : Tue Jul  3 08:02:55 2001
    copyright            : (C) 2000-2001 Lost Highway Ltd.
    email                : Richard_Dale@tipitina.demon.co.uk
    generated by         : duke@tipitina on Tue Jul  3 08:02:55 2001, using kdoc parser/custom Java conversion backend.
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
***************************************************************************/

#define _BOOL_H_
#include <persistantclassstore.h>
#include <qstring.h>
#include <qcstring.h>

#include <qtjava/QtSupport.h>
#include <kdejava/PersistantClassStore.h>

class PersistantClassStoreJBridge : public PersistantClassStore
{
public:
	PersistantClassStoreJBridge() : PersistantClassStore() {}
	PersistantClassStoreJBridge(const QString& aFilename) : PersistantClassStore(aFilename) {}
	~PersistantClassStoreJBridge() {}
};


JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_newPersistantClassStore__(JNIEnv *env, jobject obj)
{
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new PersistantClassStoreJBridge());
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_newPersistantClassStore__Ljava_lang_String_2(JNIEnv *env, jobject obj, jstring aFilename)
{
static QString * _qstring_aFilename = 0;
	if (QtSupport::getQt(env, obj) == 0) {
		QtSupport::setQt(env, obj, new PersistantClassStoreJBridge((QString&) * (QString *) QtSupport::toQString(env, aFilename, &_qstring_aFilename)));
		QtSupport::setObjectForQtKey(env, obj, QtSupport::getQt(env, obj));
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_finalize(JNIEnv *env, jobject obj)
{
	if (QtSupport::allocatedInJavaWorld(env, obj)) {
		delete (PersistantClassStore*)QtSupport::getQt(env, obj);
		QtSupport::setQt(env, obj, 0);
	}
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_setPath(JNIEnv *env, jobject obj, jstring aPath)
{
static QString * _qstring_aPath = 0;
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->setPath((QString&) * (QString *) QtSupport::toQString(env, aPath, &_qstring_aPath));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_setFilename(JNIEnv *env, jobject obj, jstring aFilename)
{
static QString * _qstring_aFilename = 0;
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->setFilename((QString&) * (QString *) QtSupport::toQString(env, aFilename, &_qstring_aFilename));
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_PersistantClassStore_open(JNIEnv *env, jobject obj)
{
	return (jboolean) ((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->open();
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_close(JNIEnv *env, jobject obj)
{
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->close();
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_storeClass(JNIEnv *env, jobject obj, jobject aClass)
{
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->storeClass((ParsedClass*) QtSupport::getQt(env, aClass));
	return;
}

JNIEXPORT void JNICALL
Java_org_kde_koala_PersistantClassStore_removeClass(JNIEnv *env, jobject obj, jstring arg1)
{
static QString * _qstring_arg1 = 0;
	((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->removeClass((QString&) * (QString *) QtSupport::toQString(env, arg1, &_qstring_arg1));
	return;
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_PersistantClassStore_exists(JNIEnv *env, jobject obj)
{
	return (jboolean) ((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->exists();
}

JNIEXPORT jboolean JNICALL
Java_org_kde_koala_PersistantClassStore_hasClass(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jboolean) ((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->hasClass((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName));
}

JNIEXPORT jobject JNICALL
Java_org_kde_koala_PersistantClassStore_getClassByName(JNIEnv *env, jobject obj, jstring aName)
{
static QString * _qstring_aName = 0;
	return (jobject) QtSupport::objectForQtKey(env, (void *)((PersistantClassStoreJBridge*) QtSupport::getQt(env, obj))->getClassByName((QString&) * (QString *) QtSupport::toQString(env, aName, &_qstring_aName)), "org.kde.koala.ParsedClass");
}

