#line 2 "tokenizer.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 67
#define YY_END_OF_BUFFER 68
static yyconst short int yy_acclist[348] =
    {   0,
       68,   66,   67,    1,   66,   67,   65,   67,   45,   66,
       67,   66,   67,   66,   67,   42,   66,   67,   37,   66,
       67,   66,   67,   48,   66,   67,   49,   66,   67,   40,
       66,   67,   38,   66,   67,   47,   66,   67,   39,   66,
       67,   41,   66,   67,   55,   66,   67,   31,   66,   67,
       46,   66,   67,   35,   66,   67,   34,   66,   67,   36,
       66,   67,   54,   66,   67,   54,   66,   67,   54,   66,
       67,   52,   66,   67,   53,   66,   67,   44,   66,   67,
       54,   66,   67,   54,   66,   67,   54,   66,   67,   54,
       66,   67,   54,   66,   67,   54,   66,   67,   54,   66,

       67,   54,   66,   67,   54,   66,   67,   54,   66,   67,
       54,   66,   67,   54,   66,   67,   54,   66,   67,   50,
       66,   67,   43,   66,   67,   51,   66,   67,   33,   54,
       66,   67,   64,   67,   63,   67,   63,   64,   67,   64,
       67,   66,   67,    1,   66,   67,   65,   67,   66,   67,
       64,   67,    1,   29,   56,   61,   55,   32,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   62,   57,   58,   59,   30,   60,   60,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   12,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,    2,   54,    6,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       11,   54,   54,   54,   54,   19,   54,   54,   16,   54,
       54,   54,   54,   54,   54,   54,   54,   28,   54,   14,
       54,   26,   54,   54,   54,   54,   54,    3,   54,   54,
        8,   54,   15,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   27,   54,   54,   54,    5,   54,   54,   10,
       54,   54,   13,   54,    9,   54,   54,   21,   54,   23,
       54,   54,   54,   54,   17,   54,   54,   18,   54,    7,
       54,   22,   54,   54,   54,   20,   54,    4,   54,   54,
       54,   54,   25,   54,   54,   24,   54
    } ;

static yyconst short int yy_accept[254] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   12,   14,   16,   19,   22,   24,   27,
       30,   33,   36,   39,   42,   45,   48,   51,   54,   57,
       60,   63,   66,   69,   72,   75,   78,   81,   84,   87,
       90,   93,   96,   99,  102,  105,  108,  111,  114,  117,
      120,  123,  126,  129,  133,  135,  137,  140,  142,  144,
      147,  149,  151,  153,  154,  154,  155,  155,  156,  156,
      156,  157,  157,  158,  159,  160,  161,  161,  161,  162,
      163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
      173,  174,  175,  176,  177,  178,  179,  180,  181,  182,

      183,  184,  185,  186,  187,  187,  187,  188,  188,  188,
      188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
      198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  216,
      216,  216,  216,  217,  218,  219,  220,  221,  222,  223,
      225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
      235,  236,  237,  238,  239,  240,  241,  242,  243,  243,
      243,  243,  243,  244,  245,  246,  247,  248,  250,  252,
      253,  254,  255,  256,  257,  258,  259,  260,  261,  263,
      264,  265,  266,  268,  269,  271,  272,  273,  274,  275,

      276,  277,  278,  280,  282,  284,  285,  286,  287,  288,
      290,  291,  293,  295,  296,  297,  298,  299,  300,  301,
      302,  303,  305,  306,  307,  309,  310,  312,  313,  315,
      317,  318,  320,  322,  323,  324,  325,  327,  328,  330,
      332,  334,  335,  336,  338,  340,  341,  342,  343,  345,
      346,  348,  348
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,    1,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   37,   39,   40,   41,
       42,   43,   44,   45,   37,   37,   37,   46,   37,   37,
       47,   48,   49,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   37,   37,   61,   62,   63,
       64,   65,   37,   66,   67,   68,   69,   70,   71,   72,
       73,   37,   74,   75,   76,   77,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[78] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    1,    1,    5,    6,
        1,    1,    1,    1,    1,    3,    6,    6,    6,    6,
        6,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    1,    3,    1,    1,
        7,    5,    5,    6,    6,    6,    5,    7,    7,    7,
        7,    7,    8,    7,    7,    8,    7,    8,    7,    8,
        7,    8,    7,    1,    1,    1,    7
    } ;

static yyconst short int yy_base[264] =
    {   0,
        0,    0,   75,   77,   80,   90,   83,   96,  240,  847,
       99,  847,  847,   81,   85,  847,  847,  171,  847,  847,
      847,  847,  847,  847,   88,   92,  196,  847,  847,  847,
      847,   94,   98,  100,  847,  847,  847,  102,  104,   96,
      106,  111,  113,  115,  123,  129,  139,  145,  143,  151,
      847,  847,  847,  153,  847,  847,  847,  192,  202,  177,
      193,   93,  166,  181,  120,  847,  117,  847,  144,  125,
      847,  191,  155,  847,    0,  171,  139,  118,  189,  193,
      183,  206,  208,  213,  215,  217,  219,  222,  225,  227,
      232,  230,  234,  237,  240,  242,  244,  246,  248,  250,

      847,  847,  847,  847,  267,    0,  847,  281,    0,  287,
      847,  301,  253,  277,  297,  256,  274,  301,  303,  311,
      315,  318,  320,  323,  325,  327,  330,  332,  336,  334,
      338,  340,  342,  344,  347,  356,  358,  362,  365,  420,
      375,  467,  369,  376,  385,  381,  396,  402,  411,  259,
      405,  417,  422,  414,  409,  436,  426,  424,  440,  434,
      443,  446,  470,  485,  487,  489,  491,  493,  300,    0,
      182,    0,  497,  507,  509,  513,  515,  520,  526,  528,
      530,  534,  538,  543,  546,  548,  550,  552,  554,  556,
      558,  560,  564,  567,  569,  573,  575,  577,  579,  597,

      599,  581,  586,  602,  608,  611,  613,  618,  621,  623,
      625,  627,  629,  631,  633,  635,  637,  639,  641,  646,
      648,  650,  652,  656,  661,  663,  668,  674,  681,  683,
      685,  689,  691,  694,  696,  698,  701,  707,  709,  712,
      714,  716,  718,  720,  723,  726,  729,  731,  733,  738,
      740,  847,  782,  790,  798,  806,  810,  816,  822,  830,
      834,  838,  840
    } ;

static yyconst short int yy_def[264] =
    {   0,
      252,    1,  253,  253,  254,  254,  253,  253,  252,  252,
      252,  252,  252,  255,  252,  252,  252,  256,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  257,  257,  257,  252,  252,  252,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      252,  252,  252,  257,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  255,  252,  258,  252,  256,  259,
      252,  260,  252,  252,  261,  257,  255,  256,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,

      252,  252,  252,  252,  255,  262,  252,  256,  263,  260,
      252,  260,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  255,  255,
      256,  256,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  255,  140,
      256,  142,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,

      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,    0,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252
    } ;

static yyconst short int yy_nxt[925] =
    {   0,
       10,   11,   12,   11,   11,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   26,
       27,   28,   29,   30,   31,   10,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   33,   32,   32,
       32,   34,   32,   32,   32,   32,   35,   10,   36,   37,
       38,   39,   32,   40,   32,   41,   42,   32,   32,   43,
       32,   32,   44,   45,   46,   32,   47,   48,   49,   50,
       32,   32,   32,   51,   52,   53,   54,   56,   57,   56,
       57,   60,   61,   60,   60,   56,   57,   66,   58,   68,
       58,   60,   61,   60,   60,  102,   63,   62,   56,   57,

       64,   71,   64,   64,   77,   72,  103,   62,   78,   63,
       73,   73,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   66,   10,   67,   75,
       75,   75,   75,   75,   75,  105,   68,   10,   68,   68,
       68,   75,   75,  108,   68,   66,   68,   75,   75,   68,
       79,   68,   80,   68,  107,   68,   82,   75,   75,   83,
       81,   75,   75,   75,   75,   70,   88,   67,   84,   75,
       75,   75,   75,   73,   73,   87,   86,   85,   64,  102,
       64,   64,   64,  104,   64,   64,   67,   89,  106,   75,
       75,   70,  107,  111,   90,  102,  109,   91,   92,   93,

       95,   75,   75,   96,  102,   98,   94,   75,   75,  101,
       99,   75,   75,  112,  100,  112,   74,   97,   70,  113,
      115,  112,  112,  116,   75,   75,   75,   75,  114,   70,
      112,   75,   75,   75,   75,   75,   75,   75,   75,  252,
       75,   75,  252,   75,   75,   75,   75,  252,   75,   75,
       75,   75,   75,   75,  117,   75,   75,  118,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
      119,   75,   75,   66,   75,   75,  122,   75,   75,  123,
      125,  120,  121,  124,  128,  139,  126,  129,  131,  111,
      127,  107,   75,   75,  146,   75,   75,  130,  143,  141,

      252,  133,  132,  111,  144,  136,   66,  134,  135,  112,
      138,  112,  252,  137,   67,   75,   75,  112,  112,   75,
       75,   75,   75,  112,  147,  112,  112,  145,   70,   75,
       75,  112,  112,   75,   75,  252,   75,   75,   75,   75,
      112,   75,   75,   75,   75,   75,   75,   67,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,  252,   75,   75,  148,  252,  149,
      151,   66,  150,  152,   75,   75,   75,   75,  154,  153,
       75,   75,  252,  169,  252,  107,  252,   75,   75,  252,
      155,  252,  158,  171,   75,   75,  156,  157,  159,   75,

       75,  160,  165,   75,   75,  161,  163,  164,  162,  173,
      176,  174,   67,  168,   75,   75,  252,  175,  252,  166,
       75,   75,   70,   75,   75,  167,   66,   75,   75,   75,
       75,  252,   75,   75,  252,   75,   75,  252,  170,  170,
       75,   75,   75,   75,   75,   75,  170,  170,  170,  170,
      170,  170,   75,   75,   75,   75,  252,  177,   75,   75,
      184,   75,   75,  252,   75,   75,  252,   67,  178,  252,
      180,  170,  170,  170,  170,  170,  170,  107,  179,  181,
      183,  186,  252,  187,  182,  172,  172,  185,   75,   75,
      252,  188,  252,  172,  172,  172,  172,  172,  172,  191,

      189,  252,  190,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,  252,   70,   75,   75,  252,  172,  172,
      172,  172,  172,  172,  252,   75,   75,   75,   75,  252,
      192,   75,   75,   75,   75,  252,  198,  199,   75,   75,
      252,  194,  252,  200,   75,   75,   75,   75,   75,   75,
      252,  195,   75,   75,  252,  193,   75,   75,  252,  196,
      197,   75,   75,  201,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
      252,  202,   75,   75,  204,   75,   75,   75,   75,  205,
      203,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,  209,  206,  210,   75,   75,  252,  219,  252,  212,
      207,  214,  211,  208,  252,   75,   75,   75,   75,  218,
       75,   75,  215,  252,  216,  213,   75,   75,  221,   75,
       75,   75,   75,  252,  217,  220,   75,   75,  222,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,  252,  223,  252,   75,   75,   75,   75,   75,   75,
       75,   75,  252,  225,   75,   75,  224,  252,  235,   75,
       75,   75,   75,  232,  252,  233,   75,   75,  226,  229,
      252,  227,   75,   75,  252,  230,  234,  231,  228,   75,

       75,   75,   75,   75,   75,  236,  252,   75,   75,   75,
       75,  252,   75,   75,   75,   75,   75,   75,  238,   75,
       75,  237,  241,  242,  243,   75,   75,   75,   75,  239,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
      240,   75,   75,  252,   75,   75,  246,   75,   75,   75,
       75,   75,   75,  244,  248,  247,   75,   75,   75,   75,
      252,  245,  252,  252,  252,  252,  252,  252,  250,  252,
      252,  252,  249,  252,  252,  252,  252,  252,  252,  252,
      252,  251,   55,   55,   55,   55,   55,   55,   55,   55,
       59,   59,   59,   59,   59,   59,   59,   59,   65,  252,

       65,   65,   65,   65,   65,   65,   69,  252,   69,  252,
       69,   69,   69,   69,   76,   76,   76,   76,   65,   65,
       65,  252,  252,   65,   69,   69,   69,  252,  252,   69,
      110,  110,  110,  110,  110,  110,  110,  110,   75,   75,
       75,   75,  140,  140,  142,  142,    9,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,

      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252
    } ;

static yyconst short int yy_chk[925] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    4,
        4,    5,    5,    5,    5,    7,    7,   14,    3,   15,
        4,    6,    6,    6,    6,   62,    7,    5,    8,    8,

       11,   25,   11,   11,   33,   25,   62,    6,   33,    8,
       26,   26,   32,   32,   40,   40,   33,   33,   34,   34,
       38,   38,   39,   39,   41,   41,   65,    5,   14,   42,
       42,   43,   43,   44,   44,   67,   15,    6,   15,   15,
       15,   45,   45,   70,   15,   77,   15,   46,   46,   15,
       34,   15,   38,   15,   69,   15,   40,   47,   47,   40,
       39,   49,   49,   48,   48,   78,   44,   65,   41,   50,
       50,   54,   54,   73,   73,   43,   42,   41,   60,   60,
       60,   60,   64,   63,   64,   64,   77,   45,   67,   76,
       76,   69,  171,   72,   46,   61,   70,   46,   47,   47,

       48,   81,   81,   48,   59,   49,   47,   79,   79,   58,
       50,   80,   80,   72,   50,   72,   27,   48,   18,   79,
       80,   72,   72,   80,   82,   82,   83,   83,   79,  171,
       72,   84,   84,   85,   85,   86,   86,   87,   87,    9,
       88,   88,    0,   89,   89,   90,   90,    0,   92,   92,
       91,   91,   93,   93,   81,   94,   94,   82,   95,   95,
       96,   96,   97,   97,   98,   98,   99,   99,  100,  100,
       83,  113,  113,  105,  116,  116,   86,  150,  150,   87,
       89,   84,   85,   88,   91,  105,   90,   92,   94,  110,
       90,  108,  117,  117,  116,  114,  114,   93,  113,  108,

        0,   95,   94,  112,  114,   98,  169,   96,   97,  110,
      100,  110,    0,   99,  105,  115,  115,  110,  110,  118,
      118,  119,  119,  112,  117,  112,  110,  115,  108,  120,
      120,  112,  112,  121,  121,    0,  122,  122,  123,  123,
      112,  124,  124,  125,  125,  126,  126,  169,  127,  127,
      128,  128,  130,  130,  129,  129,  131,  131,  132,  132,
      133,  133,  134,  134,    0,  135,  135,  118,    0,  119,
      121,  139,  120,  122,  136,  136,  137,  137,  124,  123,
      138,  138,    0,  139,    0,  141,    0,  143,  143,    0,
      125,    0,  128,  141,  144,  144,  126,  127,  129,  146,

      146,  130,  135,  145,  145,  131,  133,  134,  132,  143,
      146,  144,  139,  138,  147,  147,    0,  145,    0,  136,
      148,  148,  141,  151,  151,  137,  140,  155,  155,  149,
      149,    0,  154,  154,    0,  152,  152,    0,  140,  140,
      153,  153,  158,  158,  157,  157,  140,  140,  140,  140,
      140,  140,  160,  160,  156,  156,    0,  147,  159,  159,
      155,  161,  161,    0,  162,  162,    0,  140,  148,    0,
      151,  140,  140,  140,  140,  140,  140,  142,  149,  152,
      154,  157,    0,  158,  153,  142,  142,  156,  163,  163,
        0,  159,    0,  142,  142,  142,  142,  142,  142,  162,

      160,    0,  161,  164,  164,  165,  165,  166,  166,  167,
      167,  168,  168,    0,  142,  173,  173,    0,  142,  142,
      142,  142,  142,  142,    0,  174,  174,  175,  175,    0,
      163,  176,  176,  177,  177,    0,  173,  174,  178,  178,
        0,  165,    0,  175,  179,  179,  180,  180,  181,  181,
        0,  166,  182,  182,    0,  164,  183,  183,    0,  167,
      168,  184,  184,  176,  185,  185,  186,  186,  187,  187,
      188,  188,  189,  189,  190,  190,  191,  191,  192,  192,
        0,  177,  193,  193,  181,  194,  194,  195,  195,  182,
      180,  196,  196,  197,  197,  198,  198,  199,  199,  202,

      202,  186,  183,  187,  203,  203,    0,  199,    0,  190,
      184,  192,  188,  185,    0,  200,  200,  201,  201,  198,
      204,  204,  194,    0,  196,  191,  205,  205,  201,  206,
      206,  207,  207,    0,  197,  200,  208,  208,  202,  209,
      209,  210,  210,  211,  211,  212,  212,  213,  213,  214,
      214,  215,  215,  216,  216,  217,  217,  218,  218,  219,
      219,    0,  206,    0,  220,  220,  221,  221,  222,  222,
      223,  223,    0,  208,  224,  224,  207,    0,  221,  225,
      225,  226,  226,  218,    0,  219,  227,  227,  209,  215,
        0,  211,  228,  228,    0,  216,  220,  217,  214,  229,

      229,  230,  230,  231,  231,  223,    0,  232,  232,  233,
      233,    0,  234,  234,  235,  235,  236,  236,  226,  237,
      237,  224,  232,  234,  235,  238,  238,  239,  239,  228,
      240,  240,  241,  241,  242,  242,  243,  243,  244,  244,
      231,  245,  245,    0,  246,  246,  242,  247,  247,  248,
      248,  249,  249,  236,  246,  243,  250,  250,  251,  251,
        0,  238,    0,    0,    0,    0,    0,    0,  248,    0,
        0,    0,  247,    0,    0,    0,    0,    0,    0,    0,
        0,  250,  253,  253,  253,  253,  253,  253,  253,  253,
      254,  254,  254,  254,  254,  254,  254,  254,  255,    0,

      255,  255,  255,  255,  255,  255,  256,    0,  256,    0,
      256,  256,  256,  256,  257,  257,  257,  257,  258,  258,
      258,    0,    0,  258,  259,  259,  259,    0,    0,  259,
      260,  260,  260,  260,  260,  260,  260,  260,  261,  261,
      261,  261,  262,  262,  263,  263,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,

      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./tokenizer.l"
#define INITIAL 0
/***************************************************************************
                          tokenizer.l  -  description
                             -------------------
    begin                : Mon Mar 15 1999
    copyright            : (C) 1999 by Jonas Nordin
    email                : jonas.nordin@syncom.se
   
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   * 
 *                                                                         *
 ***************************************************************************/
#define COMMENT 1
#define PREPARSER 2
#define PPCOMMENT 3

#line 21 "./tokenizer.l"
  #include <stdlib.h>
  #include <qstring.h>
  #include "tokenizer.h"
  #include "FlexLexer.h"

  /** This class is a stupid trick to make it possible 
   * to access the gettext method. */
  class MyLexer : public yyFlexLexer
  {
    public:
    char *gettext() {return yytext;};
  };

  /* Line where a comment starts. */
  int comment_start = -1;

  /* Line where a comment ends. */
  int comment_end = -1;

  /* Last parsed comment. */
  QString comment;

  /* Function prototypes */
  bool beginComment(MyLexer *lex);
  void inComment(MyLexer *lex);
  bool endComment(MyLexer *lex);
#line 710 "tokenizer.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 66 "./tokenizer.l"

    /*==============> Strip whitespace <==============*/
#line 840 "tokenizer.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yy_c_buf_p - yytext_ptr;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 253 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 847 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 68 "./tokenizer.l"
{}
	YY_BREAK
/*==============> Special keyword <==============*/
case 2:
YY_RULE_SETUP
#line 71 "./tokenizer.l"
{return CPCLASS;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 72 "./tokenizer.l"
{return CPPUBLIC;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 73 "./tokenizer.l"
{return CPPROTECTED;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "./tokenizer.l"
{return CPPRIVATE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 75 "./tokenizer.l"
{return CPCONST;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "./tokenizer.l"
{return CPVOLATILE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 77 "./tokenizer.l"
{return CPSTATIC;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 78 "./tokenizer.l"
{return CPVIRTUAL;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 79 "./tokenizer.l"
{return QTSIGNAL;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 80 "./tokenizer.l"
{return QTSLOT;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 81 "./tokenizer.l"
{return CPENUM;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 82 "./tokenizer.l"
{return CPTYPEDEF;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 83 "./tokenizer.l"
{return CPFRIEND;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 84 "./tokenizer.l"
{return CPSTRUCT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 85 "./tokenizer.l"
{return CPUNION;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 86 "./tokenizer.l"
{return CPOPERATOR;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 87 "./tokenizer.l"
{return CPTEMPLATE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 88 "./tokenizer.l"
{return CPTHROW;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 89 "./tokenizer.l"
{return CPNAMESPACE;}
	YY_BREAK
/*==============> Ignored stuff <==============*/
/*========== added to avoid extern "C" trouble--rnolden 03232000====*/
case 21:
YY_RULE_SETUP
#line 93 "./tokenizer.l"
{}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 94 "./tokenizer.l"
{}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 95 "./tokenizer.l"
{}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 96 "./tokenizer.l"
{}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 97 "./tokenizer.l"
{}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 98 "./tokenizer.l"
{}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 99 "./tokenizer.l"
{}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 100 "./tokenizer.l"
{}
	YY_BREAK
/*==============> String <==============*/
case 29:
YY_RULE_SETUP
#line 103 "./tokenizer.l"
{return STRING;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "./tokenizer.l"
{return STRING;}
	YY_BREAK
/*==============> Normal operators <==============*/
case 31:
YY_RULE_SETUP
#line 107 "./tokenizer.l"
{return ':';}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 108 "./tokenizer.l"
{return CLCL;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 109 "./tokenizer.l"
{return '~';}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 110 "./tokenizer.l"
{return '=';}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 111 "./tokenizer.l"
{return '<';}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 112 "./tokenizer.l"
{return '>';}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 113 "./tokenizer.l"
{return '&';}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 114 "./tokenizer.l"
{return '+';}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 115 "./tokenizer.l"
{return '-';}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 116 "./tokenizer.l"
{return '*';}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 117 "./tokenizer.l"
{return '/';}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 118 "./tokenizer.l"
{return '%';}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 119 "./tokenizer.l"
{return '|';}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 120 "./tokenizer.l"
{return '^';}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 121 "./tokenizer.l"
{return '!';}
	YY_BREAK
/*==============> End of Phrase <==============*/
case 46:
YY_RULE_SETUP
#line 124 "./tokenizer.l"
{return ';';}
	YY_BREAK
/*==============> Comma <==============*/
case 47:
YY_RULE_SETUP
#line 127 "./tokenizer.l"
{return ',';}
	YY_BREAK
/*==============> Paranthesis <==============*/
case 48:
YY_RULE_SETUP
#line 130 "./tokenizer.l"
{return '(';}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 131 "./tokenizer.l"
{return ')';}
	YY_BREAK
/*==============> Brackets <==============*/
case 50:
YY_RULE_SETUP
#line 134 "./tokenizer.l"
{return '{';}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 135 "./tokenizer.l"
{return '}';}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 136 "./tokenizer.l"
{return '[';}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 137 "./tokenizer.l"
{return ']';}
	YY_BREAK
/*==============> Identifiers <==============*/
case 54:
YY_RULE_SETUP
#line 140 "./tokenizer.l"
{return ID;}
	YY_BREAK
/*==============> Numbers <==============*/
case 55:
YY_RULE_SETUP
#line 143 "./tokenizer.l"
{return NUM;}
	YY_BREAK
/*==============> Skip preprocessor directives <==============*/
case 56:
YY_RULE_SETUP
#line 146 "./tokenizer.l"
{BEGIN (PREPARSER);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 147 "./tokenizer.l"
{ BEGIN (0);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 148 "./tokenizer.l"
{beginComment((MyLexer *) this);
                                  BEGIN (PPCOMMENT);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 150 "./tokenizer.l"
{ endComment((MyLexer *) this);
                       BEGIN (PREPARSER); }
	YY_BREAK
/*==============> Strip // comments <==============*/
case 60:
YY_RULE_SETUP
#line 154 "./tokenizer.l"
{}
	YY_BREAK
/*==============> Strip comments <==============*/
case 61:
YY_RULE_SETUP
#line 157 "./tokenizer.l"
{beginComment((MyLexer *) this);
                                  BEGIN (COMMENT);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 160 "./tokenizer.l"
{ endComment((MyLexer *) this);
                       BEGIN (0); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 163 "./tokenizer.l"
{inComment((MyLexer *) this);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 164 "./tokenizer.l"
{inComment((MyLexer *) this);}
	YY_BREAK
/*==============> All other characters are ignored <==============*/
case 65:
YY_RULE_SETUP
#line 167 "./tokenizer.l"
{}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 168 "./tokenizer.l"
{}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 170 "./tokenizer.l"
ECHO;
	YY_BREAK
#line 1291 "tokenizer.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(PREPARSER):
			case YY_STATE_EOF(PPCOMMENT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 253 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 253 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 252);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 170 "./tokenizer.l"


bool beginComment(MyLexer *lex)
{
 comment_start = lex->lineno();
 comment="/*";
 return true;
}

void inComment(MyLexer *lex)
{
  char *text=lex->gettext();
  comment+=text;
};

bool endComment(MyLexer *lex)
{
 comment_end = lex->lineno();
 comment+="*/";
 return true;
}

