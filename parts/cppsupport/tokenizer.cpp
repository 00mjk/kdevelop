#line 2 "tokenizer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 79
#define YY_END_OF_BUFFER 80
static yyconst short int yy_acclist[387] =
    {   0,
       80,   78,   79,    1,   78,   79,   77,   79,   57,   78,
       79,   78,   79,   78,   79,   54,   78,   79,   49,   78,
       79,   78,   79,   60,   78,   79,   61,   78,   79,   52,
       78,   79,   50,   78,   79,   59,   78,   79,   51,   78,
       79,   53,   78,   79,   67,   78,   79,   43,   78,   79,
       58,   78,   79,   47,   78,   79,   46,   78,   79,   48,
       78,   79,   78,   79,   66,   78,   79,   66,   78,   79,
       66,   78,   79,   66,   78,   79,   64,   78,   79,   65,
       78,   79,   56,   78,   79,   66,   78,   79,   66,   78,
       79,   66,   78,   79,   66,   78,   79,   66,   78,   79,

       66,   78,   79,   66,   78,   79,   66,   78,   79,   66,
       78,   79,   66,   78,   79,   66,   78,   79,   66,   78,
       79,   66,   78,   79,   62,   78,   79,   55,   78,   79,
       63,   78,   79,   45,   66,   78,   79,   76,   79,   75,
       79,   75,   76,   79,   76,   79,   78,   79,    1,   78,
       79,   77,   79,   78,   79,   76,   79,    1,   41,   68,
       73,   67,   44,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   74,   69,
       70,   71,   42,   72,   72,   66,   66,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   40,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   12,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,    2,   66,    6,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   11,   66,   66,   66,   66,
       19,   66,   66,   16,   66,   66,   66,   33,   24,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   29,   66,

       14,   66,   27,   66,   66,   66,   66,   66,    3,   66,
       66,    8,   66,   15,   66,   66,   66,   66,   66,   38,
       66,   66,   66,   66,   66,   66,   66,   28,   66,   66,
       66,    5,   66,   66,   10,   66,   66,   13,   66,    9,
       66,   66,   36,   66,   21,   66,   23,   66,   66,   66,
       66,   66,   17,   66,   66,   18,   66,    7,   66,   35,
       32,   66,   22,   66,   66,   66,   66,   20,   66,    4,
       66,   34,   37,   30,   66,   66,   66,   66,   66,   26,
       66,   31,   66,   25,   66,   39
    } ;

static yyconst short int yy_accept[337] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   12,   14,   16,   19,   22,   24,   27,
       30,   33,   36,   39,   42,   45,   48,   51,   54,   57,
       60,   63,   65,   68,   71,   74,   77,   80,   83,   86,
       89,   92,   95,   98,  101,  104,  107,  110,  113,  116,
      119,  122,  125,  128,  131,  134,  138,  140,  142,  145,
      147,  149,  152,  154,  156,  158,  159,  159,  160,  160,
      161,  161,  161,  162,  162,  163,  164,  164,  164,  164,
      164,  165,  166,  167,  167,  167,  168,  169,  170,  171,
      172,  173,  174,  175,  176,  177,  178,  179,  180,  181,

      182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
      192,  193,  193,  193,  194,  194,  194,  194,  195,  196,
      196,  196,  196,  196,  196,  196,  197,  198,  199,  200,
      201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
      211,  212,  213,  214,  215,  216,  217,  218,  219,  220,
      221,  222,  223,  224,  224,  224,  224,  224,  224,  225,
      225,  225,  225,  225,  225,  226,  227,  228,  229,  230,
      231,  232,  233,  234,  235,  237,  238,  239,  240,  241,
      242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
      252,  253,  254,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  256,  257,  258,  259,  260,  261,
      262,  263,  265,  267,  268,  269,  270,  271,  272,  273,
      274,  275,  276,  278,  279,  280,  281,  283,  284,  286,
      287,  288,  289,  289,  289,  289,  289,  289,  289,  291,
      292,  293,  294,  295,  296,  297,  298,  299,  301,  303,
      305,  306,  307,  308,  309,  311,  312,  314,  316,  317,
      318,  319,  320,  320,  320,  320,  320,  320,  321,  322,
      323,  324,  325,  326,  327,  328,  330,  331,  332,  334,
      335,  337,  338,  340,  342,  343,  343,  343,  344,  344,
      344,  344,  345,  347,  349,  350,  351,  352,  353,  355,

      356,  358,  360,  360,  360,  360,  361,  361,  362,  363,
      365,  366,  367,  368,  370,  372,  372,  373,  374,  376,
      377,  378,  379,  379,  379,  380,  382,  382,  382,  383,
      384,  384,  386,  386,  387,  387
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,    1,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   49,   50,   51,   49,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   49,   49,   66,   67,   68,
       69,   70,   49,   71,   72,   73,   74,   75,   76,   77,
       78,   49,   79,   80,   81,   82,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[83] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    1,    1,    5,    6,
        1,    1,    1,    1,    1,    3,    1,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    3,    1,    1,    7,    5,    5,    6,    6,
        6,    5,    7,    7,    7,    7,    7,    8,    7,    7,
        8,    7,    8,    7,    8,    7,    8,    7,    1,    1,
        1,    7
    } ;

static yyconst short int yy_base[349] =
    {   0,
        0,    0,   80,   82,   85,   95,   88,  101,  697, 1002,
      104, 1002, 1002,   86,   90, 1002, 1002,  640, 1002, 1002,
     1002, 1002, 1002, 1002,   93,   97,  665, 1002, 1002, 1002,
     1002,   53,  100,  102,  117,  107, 1002, 1002, 1002,  111,
      113,  115,  121,  123,  125,  133,  149,  151,  158,  154,
      160,  168, 1002, 1002, 1002,  163, 1002, 1002, 1002,  661,
      674,  197,  670,  151,  638,  201,  103, 1002,   82, 1002,
      161,  127, 1002,  188,  166, 1002,  585,  559,  128,  136,
        0,  189,  207,  190,  572,  197,  215,  222,  226,  229,
      231,  233,  235,  237,  240,  243,  245,  250,  248,  252,

      255,  257,  259,  261,  267,  265,  269, 1002, 1002, 1002,
     1002,  275,    0, 1002,  290,    0,  314, 1002,  317,  555,
      545,  527,  520,   60,  526,  272,  303,  296,  332,  335,
      338,  314,  276,  299,  341,  343,  345,  349,  354,  356,
      361,  364,  366,  370,  368,  372,  374,  376,  378,  381,
      383,  390,  392,  398,  457,  402,  509,  510, 1002,  513,
      516,  490,  486,  491,  411,  406,  400,  403,  414,  438,
      440,  442,  409,  448,  446,  454,  459,  463,  450,  473,
      475,  482,  479,  477,  484,  486,  488,  492,  504,  516,
      526,  529,  533,  205,  600,  371,  652,  478,  472,  455,

      456,  229,  435,  535,  541,  544,  553,  555,  568,  570,
      572,  576,  580,  582,  589,  591,  594,  596,  602,  615,
      617,  604,  598,  619,  621,  635,  623,  626,  628,  646,
      669, 1002,  424,  422,  407,  416,  391,  385,  648,  671,
      679,  676,  688,  700,  681,  704,  706,  708,  710,  717,
      719,  721,  723,  725,  727,  729,  731,  733,  735,  737,
      739,  741,  378,  378,  357,  343,  338, 1002,  751,  745,
      747,  753,  758,  760,  763,  766,  768,  772,  777,  790,
      792,  794,  798,  800,  802,  331,  319, 1002,  311,  300,
      332,  804,  806,  809,  811,  813,  815,  817,  819,  827,

      829,  833,  268,  277,  269, 1002,  314,  300,  837,  840,
      842,  845,  847,  849,  851,  236, 1002, 1002,  853,  862,
      860,  856,  200,  253,  869,  872,  196,  223,  179,  875,
      107,  877,   93, 1002, 1002,  921,  929,  937,  945,  949,
      955,  961,  969,  973,  977,  979,  985,  993
    } ;

static yyconst short int yy_def[349] =
    {   0,
      335,    1,  336,  336,  337,  337,  336,  336,  335,  335,
      335,  335,  335,  338,  335,  335,  335,  339,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  340,  340,  340,  340,  335,  335,  335,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  335,  335,  335,  340,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  338,  335,  341,  335,
      339,  342,  335,  343,  335,  335,  335,  335,  335,  335,
      344,  340,  340,  338,  339,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,

      340,  340,  340,  340,  340,  340,  340,  335,  335,  335,
      335,  338,  345,  335,  339,  346,  343,  335,  343,  335,
      335,  335,  335,  335,  335,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  338,  338,  339,  339,  335,  335,  335,
      335,  335,  335,  335,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  338,  338,  339,  339,  335,  335,  335,

      335,  335,  335,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  335,  335,  335,  335,  335,  335,  335,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  335,  335,  335,  335,  335,  335,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  335,  335,  335,  335,  335,
      347,  340,  340,  340,  340,  340,  340,  340,  340,  340,

      340,  340,  335,  335,  335,  335,  347,  347,  340,  340,
      340,  340,  340,  340,  340,  335,  335,  335,  340,  340,
      340,  340,  335,  348,  340,  340,  335,  348,  348,  340,
      335,  340,  335,  335,    0,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335
    } ;

static yyconst short int yy_nxt[1085] =
    {   0,
       10,   11,   12,   11,   11,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   26,
       27,   28,   29,   30,   31,   10,   32,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   34,   35,   33,
       33,   33,   33,   36,   33,   33,   33,   33,   33,   33,
       33,   37,   10,   38,   39,   40,   41,   33,   42,   33,
       43,   44,   33,   33,   45,   33,   33,   46,   47,   48,
       33,   49,   50,   51,   52,   33,   33,   33,   53,   54,
       55,   56,   58,   59,   58,   59,   62,   63,   62,   62,
       58,   59,   68,   60,   70,   60,   62,   63,   62,   62,

      112,   65,   64,   58,   59,   66,   73,   66,   66,   68,
       74,   77,   64,   78,   65,   75,   75,   79,   81,   81,
       81,   81,   80,   84,  162,   81,   81,   85,  163,   81,
       81,   81,   81,   81,   81,   81,   81,   10,   69,   81,
       81,   81,   81,   81,   81,  115,   70,   10,   70,   70,
       70,   81,   81,  109,   70,   69,   70,   83,  113,   70,
      334,   70,   86,   70,  110,   70,   87,   81,   81,   81,
       81,  114,   81,   81,   88,  333,   81,   81,   81,   81,
       89,   81,   81,   90,   75,   75,   81,   81,   91,   95,
      118,  329,   94,   93,  122,  123,   68,   92,   66,  109,

       66,   66,   66,  116,   66,   66,  124,   81,   81,  125,
      119,   68,  119,   72,  102,   81,   81,  103,   96,  119,
      119,   97,   99,  100,   98,   81,   81,  105,  127,  119,
      101,  104,  106,   81,   81,  329,  107,  126,  128,  129,
       81,   81,   69,  130,   81,   81,  131,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   69,   81,   81,
      331,   81,   81,   81,   81,  329,   81,   81,   81,   81,
       81,   81,  327,   81,   81,   81,   81,   81,   81,   81,
       81,   68,  133,   81,   81,   81,   81,   81,   81,  236,
       81,   81,  323,  154,   81,   81,  134,  237,  132,  137,

      114,  165,  138,  140,  135,  136,  139,  143,  156,  141,
      144,  146,  308,  142,   81,   81,  118,   81,   81,  118,
      145,   81,   81,  148,  168,  147,  308,   69,  318,  149,
      150,  151,   81,   81,  153,  152,  119,  317,  119,  119,
      316,  119,   72,  166,  308,  119,  119,  173,  119,  119,
       81,   81,  167,   81,   81,  119,   81,   81,  119,   81,
       81,   81,   81,   81,   81,  306,  170,   81,   81,  172,
      174,  305,   81,   81,   81,   81,  169,  304,  171,   81,
       81,  114,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,  303,   81,

       81,   81,   81,  176,   68,  177,  290,  175,   81,   81,
       81,   81,  114,  178,  179,  289,  194,  288,   81,   81,
      196,   81,   81,   72,   81,   81,  180,   81,   81,   81,
       81,  183,   81,   81,  287,  181,  182,  184,  286,  207,
      185,  190,  206,  268,  186,  188,  189,  187,  193,  267,
       69,  191,  204,  205,   72,  208,   81,   81,   81,   81,
       81,   81,  192,   68,   81,   81,   81,   81,   81,   81,
      210,  209,   81,   81,  266,  195,  195,   81,   81,  265,
      212,   81,   81,  264,  195,  195,  195,  195,  195,  195,
      263,   81,   81,   81,   81,   81,   81,   81,   81,  238,

       81,   81,   81,   81,   81,   81,   81,   81,  211,   69,
       81,   81,  235,  195,  195,  195,  195,  195,  195,  114,
      213,  217,   81,   81,  214,  234,  215,  197,  197,  218,
      216,  219,  233,  222,   81,   81,  197,  197,  197,  197,
      197,  197,  220,  221,   81,   81,  225,   81,   81,  232,
      224,   81,   81,   81,   81,  223,  203,  226,  202,   81,
       81,   72,   81,   81,  201,  197,  197,  197,  197,  197,
      197,   81,   81,   81,   81,  228,  200,  239,  199,  227,
      240,  198,  241,  164,  243,  242,   81,   81,   81,   81,
       81,   81,  161,  229,   81,   81,  160,  244,   81,   81,

       81,   81,  230,  245,  159,  231,   68,   81,   81,   81,
       81,  158,   81,   81,   81,   81,   81,   81,  195,  195,
       81,   81,   81,   81,   72,  246,  121,  195,  195,  195,
      195,  195,  195,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,  247,   81,   81,   81,   81,  249,  248,
      120,  250,   69,   81,   81,  111,  195,  195,  195,  195,
      195,  195,  114,  251,   81,   81,   81,   81,  252,  256,
      197,  197,  109,  254,  253,  255,  109,  257,  108,  197,
      197,  197,  197,  197,  197,   76,  260,   81,   81,   81,
       81,  259,   72,  258,   81,   81,  335,   81,   81,   81,

       81,  335,  261,  335,   72,  335,   81,   81,  197,  197,
      197,  197,  197,  197,  270,  335,  269,  272,   81,   81,
      271,  274,   81,   81,   81,   81,   81,   81,   81,   81,
      335,  273,  335,  262,  275,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,  335,  291,   81,   81,   81,   81,  335,  276,   81,
       81,   81,   81,  335,  292,  277,   81,   81,   81,   81,
      335,   81,   81,  279,   81,   81,   81,   81,  335,  278,
       81,   81,  335,  293,  297,   81,   81,  280,  283,  294,

      281,  335,  295,  335,  284,  335,  285,  282,   81,   81,
       81,   81,   81,   81,  335,  296,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,  298,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,  309,
      310,  335,  299,  312,  313,   81,   81,   81,   81,  335,
      300,   81,   81,  335,  301,   81,   81,  311,   81,   81,
       81,   81,  302,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,  324,   81,   81,  321,  314,   81,   81,
       81,   81,  335,  319,  335,  322,  315,   81,   81,  325,
       81,   81,  320,   81,   81,   81,   81,  335,  335,  335,

      335,  326,  335,  335,  335,  335,  335,  330,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      332,   57,   57,   57,   57,   57,   57,   57,   57,   61,
       61,   61,   61,   61,   61,   61,   61,   67,  335,   67,
       67,   67,   67,   67,   67,   71,  335,   71,  335,   71,
       71,   71,   71,   82,   82,   82,   82,   67,   67,   67,
      335,  335,   67,   71,   71,   71,  335,  335,   71,  117,
      117,  117,  117,  117,  117,  117,  117,   81,   81,   81,
       81,  155,  155,  157,  157,  307,  335,  307,  307,  307,
      307,  307,  307,  328,  335,  328,  328,  328,  328,  328,

      328,    9,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335
    } ;

static yyconst short int yy_chk[1085] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    4,    4,    5,    5,    5,    5,
        7,    7,   14,    3,   15,    4,    6,    6,    6,    6,

       69,    7,    5,    8,    8,   11,   25,   11,   11,   67,
       25,   32,    6,   32,    8,   26,   26,   32,   33,   33,
       34,   34,   32,   35,  124,   36,   36,   35,  124,   40,
       40,   41,   41,   42,   42,   35,   35,    5,   14,   43,
       43,   44,   44,   45,   45,   72,   15,    6,   15,   15,
       15,   46,   46,   64,   15,   67,   15,   34,   69,   15,
      333,   15,   36,   15,   64,   15,   40,   47,   47,   48,
       48,   71,   50,   50,   41,  331,   49,   49,   51,   51,
       42,   56,   56,   42,   75,   75,   52,   52,   43,   46,
       74,  329,   45,   44,   79,   79,   84,   43,   62,   62,

       62,   62,   66,   72,   66,   66,   80,   82,   82,   80,
       74,  194,   74,   71,   50,   86,   86,   50,   47,   74,
       74,   48,   49,   49,   48,   83,   83,   51,   86,   74,
       49,   50,   52,   87,   87,  328,   52,   83,   86,   86,
       88,   88,   84,   87,   89,   89,   87,   90,   90,   91,
       91,   92,   92,   93,   93,   94,   94,  194,   95,   95,
      327,   96,   96,   97,   97,  324,   99,   99,   98,   98,
      100,  100,  323,  101,  101,  102,  102,  103,  103,  104,
      104,  112,   89,  106,  106,  105,  105,  107,  107,  202,
      126,  126,  316,  112,  133,  133,   90,  202,   88,   93,

      115,  126,   94,   96,   91,   92,   95,   98,  115,   97,
       99,  101,  308,   97,  128,  128,  117,  134,  134,  119,
      100,  127,  127,  102,  128,  101,  307,  112,  305,  103,
      104,  105,  132,  132,  107,  106,  117,  304,  117,  119,
      303,  119,  115,  127,  291,  117,  117,  133,  119,  119,
      129,  129,  127,  130,  130,  117,  131,  131,  119,  135,
      135,  136,  136,  137,  137,  290,  130,  138,  138,  132,
      134,  289,  139,  139,  140,  140,  129,  287,  131,  141,
      141,  196,  142,  142,  143,  143,  145,  145,  144,  144,
      146,  146,  147,  147,  148,  148,  149,  149,  286,  150,

      150,  151,  151,  136,  154,  137,  267,  135,  152,  152,
      153,  153,  156,  138,  139,  266,  154,  265,  167,  167,
      156,  168,  168,  196,  166,  166,  140,  173,  173,  165,
      165,  143,  169,  169,  264,  141,  142,  144,  263,  168,
      145,  150,  167,  238,  146,  148,  149,  147,  153,  237,
      154,  151,  165,  166,  156,  169,  170,  170,  171,  171,
      172,  172,  152,  155,  175,  175,  174,  174,  179,  179,
      171,  170,  176,  176,  236,  155,  155,  177,  177,  235,
      173,  178,  178,  234,  155,  155,  155,  155,  155,  155,
      233,  180,  180,  181,  181,  184,  184,  183,  183,  203,

      182,  182,  185,  185,  186,  186,  187,  187,  172,  155,
      188,  188,  201,  155,  155,  155,  155,  155,  155,  157,
      174,  179,  189,  189,  176,  200,  177,  157,  157,  180,
      178,  181,  199,  184,  190,  190,  157,  157,  157,  157,
      157,  157,  182,  183,  191,  191,  187,  192,  192,  198,
      186,  193,  193,  204,  204,  185,  164,  188,  163,  205,
      205,  157,  206,  206,  162,  157,  157,  157,  157,  157,
      157,  207,  207,  208,  208,  190,  161,  204,  160,  189,
      205,  158,  206,  125,  207,  206,  209,  209,  210,  210,
      211,  211,  123,  191,  212,  212,  122,  208,  213,  213,

      214,  214,  192,  209,  121,  193,  195,  215,  215,  216,
      216,  120,  217,  217,  218,  218,  223,  223,  195,  195,
      219,  219,  222,  222,   85,  210,   78,  195,  195,  195,
      195,  195,  195,  220,  220,  221,  221,  224,  224,  225,
      225,  227,  227,  211,  228,  228,  229,  229,  215,  214,
       77,  216,  195,  226,  226,   65,  195,  195,  195,  195,
      195,  195,  197,  217,  230,  230,  239,  239,  218,  222,
      197,  197,   63,  220,  219,  221,   61,  224,   60,  197,
      197,  197,  197,  197,  197,   27,  228,  231,  231,  240,
      240,  226,   18,  225,  242,  242,    9,  241,  241,  245,

      245,    0,  230,    0,  197,    0,  243,  243,  197,  197,
      197,  197,  197,  197,  241,    0,  240,  243,  244,  244,
      242,  245,  246,  246,  247,  247,  248,  248,  249,  249,
        0,  244,    0,  231,  246,  250,  250,  251,  251,  252,
      252,  253,  253,  254,  254,  255,  255,  256,  256,  257,
      257,  258,  258,  259,  259,  260,  260,  261,  261,  262,
      262,    0,  269,  270,  270,  271,  271,    0,  247,  269,
      269,  272,  272,    0,  270,  251,  273,  273,  274,  274,
        0,  275,  275,  253,  276,  276,  277,  277,    0,  252,
      278,  278,    0,  271,  275,  279,  279,  254,  260,  272,

      256,    0,  273,    0,  261,    0,  262,  259,  280,  280,
      281,  281,  282,  282,    0,  274,  283,  283,  284,  284,
      285,  285,  292,  292,  293,  293,  277,  294,  294,  295,
      295,  296,  296,  297,  297,  298,  298,  299,  299,  292,
      293,    0,  278,  296,  297,  300,  300,  301,  301,    0,
      280,  302,  302,    0,  282,  309,  309,  295,  310,  310,
      311,  311,  285,  312,  312,  313,  313,  314,  314,  315,
      315,  319,  319,  320,  322,  322,  312,  298,  321,  321,
      320,  320,    0,  309,    0,  313,  300,  325,  325,  321,
      326,  326,  311,  330,  330,  332,  332,    0,    0,    0,

        0,  322,    0,    0,    0,    0,    0,  325,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      330,  336,  336,  336,  336,  336,  336,  336,  336,  337,
      337,  337,  337,  337,  337,  337,  337,  338,    0,  338,
      338,  338,  338,  338,  338,  339,    0,  339,    0,  339,
      339,  339,  339,  340,  340,  340,  340,  341,  341,  341,
        0,    0,  341,  342,  342,  342,    0,    0,  342,  343,
      343,  343,  343,  343,  343,  343,  343,  344,  344,  344,
      344,  345,  345,  346,  346,  347,    0,  347,  347,  347,
      347,  347,  347,  348,    0,  348,  348,  348,  348,  348,

      348,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./tokenizer.l"
#define INITIAL 0
/***************************************************************************
                          tokenizer.l  -  description
                             -------------------
    begin                : Mon Mar 15 1999
    copyright            : (C) 1999 by Jonas Nordin
    email                : jonas.nordin@syncom.se
   
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   * 
 *                                                                         *
 ***************************************************************************/
#define COMMENT 1
#define PREPARSER 2
#define PPCOMMENT 3

#line 21 "./tokenizer.l"
  #include <stdlib.h>
  #include <qstring.h>
  #include <iostream.h>
  #include "tokenizer.h"
  #include "FlexLexer.h"

  /** This class is a stupid trick to make it possible 
   * to access the getText method. */
  class MyLexer : public yyFlexLexer
  {
    public:
    char *getText() {return yytext;};
  };

  /* Line where a comment starts. */
  int comment_start = -1;

  /* Line where a comment ends. */
  int comment_end = -1;

  /* Last parsed comment. */
  QString comment;

  /* Function prototypes */
  static bool beginComment(MyLexer *lex);
  static void inComment(MyLexer *lex);
  static bool endComment(MyLexer *lex);
  extern "C" int yywrap(); 
#line 778 "tokenizer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 71 "./tokenizer.l"

    /*==============> Strip whitespace <==============*/
#line 908 "tokenizer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yy_c_buf_p - yytext_ptr;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 336 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1002 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 73 "./tokenizer.l"
{}
	YY_BREAK
/*==============> Special keyword <==============*/
case 2:
YY_RULE_SETUP
#line 76 "./tokenizer.l"
{return CPCLASS;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 77 "./tokenizer.l"
{return CPPUBLIC;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 78 "./tokenizer.l"
{return CPPROTECTED;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 79 "./tokenizer.l"
{return CPPRIVATE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 80 "./tokenizer.l"
{return CPCONST;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 81 "./tokenizer.l"
{return CPVOLATILE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 82 "./tokenizer.l"
{return CPSTATIC;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 83 "./tokenizer.l"
{return CPVIRTUAL;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 84 "./tokenizer.l"
{return QTSIGNAL;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 85 "./tokenizer.l"
{return QTSLOT;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 86 "./tokenizer.l"
{return CPENUM;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 87 "./tokenizer.l"
{return CPTYPEDEF;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 88 "./tokenizer.l"
{return CPFRIEND;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 89 "./tokenizer.l"
{return CPSTRUCT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 90 "./tokenizer.l"
{return CPUNION;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 91 "./tokenizer.l"
{return CPOPERATOR;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 92 "./tokenizer.l"
{return CPTEMPLATE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 93 "./tokenizer.l"
{return CPTHROW;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 94 "./tokenizer.l"
{return CPNAMESPACE;}
	YY_BREAK
/*==============> Ignored stuff <==============*/
/*========== added to avoid extern "C" trouble--rnolden 03232000====*/
case 21:
YY_RULE_SETUP
#line 98 "./tokenizer.l"
{}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 99 "./tokenizer.l"
{}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 100 "./tokenizer.l"
{}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 101 "./tokenizer.l"
{}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 102 "./tokenizer.l"
{}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 103 "./tokenizer.l"
{}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 104 "./tokenizer.l"
{}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 105 "./tokenizer.l"
{}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 106 "./tokenizer.l"
{}
	YY_BREAK
/*========== for ignoring qt-specific macros dymo 24012003 ===*/
case 30:
YY_RULE_SETUP
#line 108 "./tokenizer.l"
{}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 109 "./tokenizer.l"
{}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 110 "./tokenizer.l"
{}
	YY_BREAK
/*==============> Objective-C keyword <==============*/
case 33:
YY_RULE_SETUP
#line 113 "./tokenizer.l"
{return CPOBJCCLASS;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 114 "./tokenizer.l"
{return CPOBJCINTERFACE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 115 "./tokenizer.l"
{return CPOBJCPROTOCOL;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 116 "./tokenizer.l"
{return CPOBJCPRIVATE;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 117 "./tokenizer.l"
{return CPOBJCPROTECTED;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 118 "./tokenizer.l"
{return CPOBJCPUBLIC;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 119 "./tokenizer.l"
{return CPOBJCIMPLEMENTATION;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 120 "./tokenizer.l"
{return CPOBJCEND;}
	YY_BREAK
/*==============> String <==============*/
case 41:
YY_RULE_SETUP
#line 123 "./tokenizer.l"
{return STRING;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 124 "./tokenizer.l"
{return STRING;}
	YY_BREAK
/*==============> Normal operators <==============*/
case 43:
YY_RULE_SETUP
#line 127 "./tokenizer.l"
{return ':';}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 128 "./tokenizer.l"
{return CLCL;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 129 "./tokenizer.l"
{return '~';}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 130 "./tokenizer.l"
{return '=';}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 131 "./tokenizer.l"
{return '<';}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 132 "./tokenizer.l"
{return '>';}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 133 "./tokenizer.l"
{return '&';}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 134 "./tokenizer.l"
{return '+';}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 135 "./tokenizer.l"
{return '-';}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 136 "./tokenizer.l"
{return '*';}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 137 "./tokenizer.l"
{return '/';}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 138 "./tokenizer.l"
{return '%';}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 139 "./tokenizer.l"
{return '|';}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 140 "./tokenizer.l"
{return '^';}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 141 "./tokenizer.l"
{return '!';}
	YY_BREAK
/*==============> End of Phrase <==============*/
case 58:
YY_RULE_SETUP
#line 144 "./tokenizer.l"
{return ';';}
	YY_BREAK
/*==============> Comma <==============*/
case 59:
YY_RULE_SETUP
#line 147 "./tokenizer.l"
{return ',';}
	YY_BREAK
/*==============> Paranthesis <==============*/
case 60:
YY_RULE_SETUP
#line 150 "./tokenizer.l"
{return '(';}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 151 "./tokenizer.l"
{return ')';}
	YY_BREAK
/*==============> Brackets <==============*/
case 62:
YY_RULE_SETUP
#line 154 "./tokenizer.l"
{return '{';}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 155 "./tokenizer.l"
{return '}';}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 156 "./tokenizer.l"
{return '[';}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 157 "./tokenizer.l"
{return ']';}
	YY_BREAK
/*==============> Identifiers <==============*/
case 66:
YY_RULE_SETUP
#line 160 "./tokenizer.l"
{return ID;}
	YY_BREAK
/*==============> Numbers <==============*/
case 67:
YY_RULE_SETUP
#line 163 "./tokenizer.l"
{return NUM;}
	YY_BREAK
/*==============> Skip preprocessor directives <==============*/
case 68:
YY_RULE_SETUP
#line 166 "./tokenizer.l"
{BEGIN (PREPARSER);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 167 "./tokenizer.l"
{ BEGIN (0);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 168 "./tokenizer.l"
{beginComment((MyLexer *) this);
                                  BEGIN (PPCOMMENT);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "./tokenizer.l"
{ endComment((MyLexer *) this);
                       BEGIN (PREPARSER); }
	YY_BREAK
/*==============> Strip // comments <==============*/
case 72:
YY_RULE_SETUP
#line 174 "./tokenizer.l"
{}
	YY_BREAK
/*==============> Strip comments <==============*/
case 73:
YY_RULE_SETUP
#line 177 "./tokenizer.l"
{beginComment((MyLexer *) this);
                                  BEGIN (COMMENT);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 180 "./tokenizer.l"
{ endComment((MyLexer *) this);
                       BEGIN (0); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 183 "./tokenizer.l"
{inComment((MyLexer *) this);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 184 "./tokenizer.l"
{inComment((MyLexer *) this);}
	YY_BREAK
/*==============> All other characters are ignored <==============*/
case 77:
YY_RULE_SETUP
#line 187 "./tokenizer.l"
{}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 188 "./tokenizer.l"
{}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 190 "./tokenizer.l"
ECHO;
	YY_BREAK
#line 1421 "tokenizer.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(PREPARSER):
			case YY_STATE_EOF(PPCOMMENT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 336 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 336 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 335);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#include<unistd.h>
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 190 "./tokenizer.l"


static bool beginComment(MyLexer *lex)
{
 comment_start = lex->lineno();
 comment="/*";
 return true;
}

static void inComment(MyLexer *lex)
{
  char *text=lex->getText();
  comment+=text;
};

static bool endComment(MyLexer *lex)
{
 comment_end = lex->lineno();
 comment+="*/";
 return true;
}

extern "C" int yywrap() { return 1; }
