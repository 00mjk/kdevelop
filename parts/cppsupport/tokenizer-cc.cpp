#line 2 "tokenizer-cc.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 97
#define YY_END_OF_BUFFER 98
static yyconst short int yy_acclist[462] =
    {   0,
       98,   96,   97,    1,   96,   97,   95,   97,   73,   96,
       97,   96,   97,   96,   97,   70,   96,   97,   65,   96,
       97,   96,   97,   78,   96,   97,   79,   96,   97,   68,
       96,   97,   66,   96,   97,   76,   96,   97,   67,   96,
       97,   77,   96,   97,   69,   96,   97,   85,   96,   97,
       59,   96,   97,   75,   96,   97,   63,   96,   97,   62,
       96,   97,   64,   96,   97,   74,   96,   97,   96,   97,
       84,   96,   97,   84,   96,   97,   84,   96,   97,   82,
       96,   97,   83,   96,   97,   72,   96,   97,   84,   96,
       97,   84,   96,   97,   84,   96,   97,   84,   96,   97,

       84,   96,   97,   84,   96,   97,   84,   96,   97,   84,
       96,   97,   84,   96,   97,   84,   96,   97,   84,   96,
       97,   84,   96,   97,   84,   96,   97,   84,   96,   97,
       84,   96,   97,   84,   96,   97,   84,   96,   97,   80,
       96,   97,   71,   96,   97,   81,   96,   97,   61,   84,
       96,   97,   94,   97,   93,   97,   93,   94,   97,   94,
       97,   96,   97,    1,   96,   97,   95,   97,   96,   97,
       94,   97,    1,   57,   86,   91,   85,   60,   47,   48,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   39,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   40,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   92,   87,   88,   89,   58,   90,   90,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   37,   84,   84,   84,
       31,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   28,   84,   84,   84,   84,   84,   32,   84,   84,
       43,   84,   34,   84,   84,   84,   84,   84,   41,   84,
       29,   84,   12,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   30,   84,   84,   84,   84,   84,
       84,   84,   84,   44,   84,    2,   84,    6,   84,   84,
       84,   84,   33,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   11,   84,   84,   84,   84,   84,   19,
       84,   84,   16,   84,   84,   84,   38,   84,   21,   84,
       84,   84,   84,   84,   84,   84,   56,   84,   14,   84,
       54,   84,   84,   84,   84,   84,    3,   84,   46,   84,
       84,    8,   84,   15,   84,   42,   84,   84,   84,   84,
       84,   26,   84,   84,   84,   84,   55,   84,   45,   84,

       84,   84,   84,    5,   84,   84,   10,   84,   84,   84,
       13,   84,    9,   84,   84,   24,   49,   84,   51,   84,
       84,   84,   84,   84,   17,   84,   84,   84,   18,   84,
        7,   84,   23,   50,   84,   84,   84,   84,   20,   84,
        4,   84,   84,   22,   25,   84,   84,   84,   84,   84,
       53,   84,   84,   35,   84,   84,   36,   84,   52,   84,
       27
    } ;

static yyconst short int yy_accept[382] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   12,   14,   16,   19,   22,   24,   27,
       30,   33,   36,   39,   42,   45,   48,   51,   54,   57,
       60,   63,   66,   69,   71,   74,   77,   80,   83,   86,
       89,   92,   95,   98,  101,  104,  107,  110,  113,  116,
      119,  122,  125,  128,  131,  134,  137,  140,  143,  146,
      149,  153,  155,  157,  160,  162,  164,  167,  169,  171,
      173,  174,  174,  175,  175,  176,  176,  176,  177,  177,
      178,  179,  180,  181,  181,  181,  181,  181,  182,  183,
      183,  183,  184,  185,  186,  187,  188,  189,  190,  191,

      192,  193,  195,  196,  197,  198,  199,  200,  201,  202,
      203,  205,  206,  207,  208,  209,  210,  211,  212,  213,
      214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
      224,  225,  226,  226,  226,  227,  227,  227,  227,  228,
      229,  229,  229,  229,  229,  229,  229,  230,  231,  232,
      233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
      243,  244,  245,  246,  247,  249,  250,  251,  253,  254,
      255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
      265,  266,  267,  268,  269,  270,  271,  272,  272,  272,
      272,  272,  272,  273,  273,  273,  273,  273,  273,  274,

      275,  276,  277,  278,  280,  281,  283,  285,  286,  287,
      288,  289,  291,  293,  295,  296,  297,  298,  299,  300,
      301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
      311,  312,  313,  314,  315,  317,  318,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  320,  321,
      322,  323,  324,  326,  328,  330,  331,  332,  333,  335,
      336,  337,  338,  339,  340,  341,  342,  343,  344,  346,
      347,  348,  349,  350,  352,  353,  355,  356,  357,  359,
      360,  360,  360,  360,  360,  360,  360,  361,  362,  363,
      364,  365,  366,  367,  369,  371,  373,  374,  375,  376,

      377,  379,  381,  382,  384,  386,  388,  389,  390,  391,
      392,  392,  392,  392,  392,  392,  393,  394,  395,  396,
      397,  399,  401,  402,  403,  404,  406,  407,  409,  410,
      411,  413,  415,  416,  416,  416,  417,  417,  417,  419,
      421,  422,  423,  424,  425,  427,  428,  429,  431,  433,
      433,  433,  433,  434,  436,  437,  438,  439,  441,  443,
      444,  444,  445,  446,  447,  448,  449,  450,  450,  451,
      453,  454,  456,  456,  457,  459,  459,  461,  461,  462,
      462
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   39,   41,   42,   43,
       44,   45,   46,   47,   39,   39,   39,   48,   39,   39,
       49,   50,   51,   52,   53,    1,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   39,   63,   64,   65,   66,
       67,   68,   39,   69,   70,   71,   72,   73,   74,   75,
       76,   39,   77,   78,   79,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[81] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        6,    1,    1,    1,    1,    1,    3,    1,    6,    6,
        6,    6,    6,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    1,    3,
        1,    1,    7,    5,    5,    6,    6,    6,    5,    7,
        7,    7,    7,    7,    7,    8,    7,    7,    8,    7,
        8,    7,    8,    7,    8,    7,    1,    1,    1,    7
    } ;

static yyconst short int yy_base[392] =
    {   0,
        0,    0,   78,   80,   83,   93,   86,  100,  615, 1117,
      103, 1117, 1117,   84,   88, 1117, 1117,  563, 1117, 1117,
     1117, 1117, 1117, 1117, 1117,   87,   89,  589, 1117,  566,
     1117,  555, 1117,   55,   95,  111,   99, 1117, 1117, 1117,
      104,  106,  108,  115,  120,  127,  117,  146,  134,  143,
      150,  152,  169,  174,  178,  180,  187, 1117, 1117, 1117,
      183, 1117, 1117, 1117,  558,  572,  211,  563,  171,  539,
      216,  173, 1117,  131, 1117,  186,  163, 1117,  225,  204,
     1117, 1117, 1117,  488,  484,  161,  165,    0,  209,  202,
      497,  233,  235,  225,  240,  243,  249,  251,  256,  258,

      253,  260,  262,  264,  267,  269,  271,  273,  275,  277,
      282,  288,  293,  295,  300,  302,  297,  305,  310,  312,
      316,  325,  327,  329,  340,  334,  343,  349, 1117, 1117,
     1117, 1117,  336,    0, 1117,  360,    0,  380, 1117,  391,
      490,  472,  447,  437,  195,  446,  352,  354,  368,  371,
      378,  388,  399,  406,  408,  414,  416,  418,  420,  422,
      424,  426,  429,  434,  436,  438,  440,  442,  445,  447,
      449,  455,  461,  458,  469,  472,  477,  479,  484,  486,
      489,  491,  493,  497,  500,  507,  503,  512,  562,  520,
      611,  424, 1117,  421,  425,  400,  400,  387,  516,  525,

      518,  544,  513,  521,  551,  553,  559,  564,  566,  577,
      568,  579,  581,  583,  585,  587,  589,  605,  603,  608,
      618,  626,  615,  630,  632,  636,  639,  654,  658,  643,
      660,  662,  667,  669,  671,  673,  677,  380,    0,  288,
        0,  378,  374,  354,  367,   63,  356,  675,  682,  684,
      692,  688,  702,  704,  706,  708,  711,  716,  718,  722,
      726,  728,  730,  732,  734,  736,  739,  742,  744,  746,
      748,  750,  754,  756,  760,  765,  767,  773,  777, 1117,
      351,  336,  322,  329,  326,  323,  779,  789,  792,  794,
      796,  802,  807,  809,  811,  816,  818,  820,  822,  824,

      826,  828,  830,  832,  834,  837,  839,  844,  841,  847,
      318,  297,  277,  256,  244, 1117,  849,  854,  856,  858,
      861,  863,  868,  872,  877,  886,  892,  894,  896,  898,
      902,  904,  906,  240,  248, 1117,  228,  177,  909,  911,
      915,  913,  917,  919,  921,  928,  933,  937,  939,  168,
      159,  111, 1117,  941,  945,  948,  950,  954,  959,  961,
      107, 1117, 1117,  963,  969,  971,  975,   88,  977,  979,
      981,  985,   87,  987,  989,   72,  991,   33, 1117, 1117,
     1052, 1060, 1068, 1076, 1080, 1086, 1092, 1100, 1104, 1108,
     1110

    } ;

static yyconst short int yy_def[392] =
    {   0,
      380,    1,  381,  381,  382,  382,  381,  381,  380,  380,
      380,  380,  380,  383,  380,  380,  380,  384,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  385,  385,  385,  380,  380,  380,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  380,  380,  380,
      385,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  383,  380,  386,  380,  384,  387,  380,  388,  380,
      380,  380,  380,  380,  380,  380,  380,  389,  385,  383,
      384,  385,  385,  385,  385,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  380,  380,
      380,  380,  383,  390,  380,  384,  391,  388,  380,  388,
      380,  380,  380,  380,  380,  380,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  383,  383,  384,
      384,  380,  380,  380,  380,  380,  380,  380,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  383,  189,  384,
      191,  380,  380,  380,  380,  380,  380,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  380,
      380,  380,  380,  380,  380,  380,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      380,  380,  380,  380,  380,  380,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  380,  380,  380,  380,  380,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  380,
      380,  380,  380,  385,  385,  385,  385,  385,  385,  385,
      380,  380,  380,  385,  385,  385,  385,  380,  385,  385,
      385,  385,  380,  385,  385,  380,  385,  380,  380,    0,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380

    } ;

static yyconst short int yy_nxt[1198] =
    {   0,
       10,   11,   12,   11,   11,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   36,
       35,   35,   35,   37,   35,   35,   35,   35,   38,   10,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   35,
       35,   48,   35,   35,   35,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   35,   35,   58,   59,   60,   61,
       63,   64,   63,   64,   67,   68,   67,   67,   63,   64,
       73,   65,   75,   65,   67,   68,   67,   67,  379,   70,

       78,   69,   63,   64,   71,   79,   71,   71,   80,   80,
       84,   69,   85,   70,   88,   88,   86,   90,   88,   88,
      284,   91,   87,   88,   88,   88,   88,   88,   88,  285,
       88,   88,   10,   74,   88,   88,   88,   88,  378,   88,
       88,   75,   10,   75,   75,   75,   88,   88,  376,   75,
      133,   92,   75,   88,   88,   75,   93,   75,  373,   75,
      368,   75,   88,   88,   94,   88,   88,  363,   97,   88,
       88,   88,   88,  130,   95,   98,   96,  101,   99,   73,
      108,  100,  136,  109,  131,  110,  102,  113,   88,   88,
      104,  105,  106,   88,   88,  103,  135,   88,   88,   88,

       88,  107,   88,   88,  111,  134,   88,   88,   73,  117,
      114,  112,   71,  130,   71,   71,  362,   71,  115,   71,
       71,  116,   74,   80,   80,  143,  144,  139,   88,   88,
      118,  122,  119,  145,  123,   77,  146,  137,  361,  120,
      353,  126,  121,  125,   88,   88,  127,  128,  140,  124,
      140,   74,   88,   88,   88,   88,  196,  140,  140,   88,
       88,  197,   88,   88,  149,  147,  140,  150,   88,   88,
       88,   88,   88,   88,  148,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,  352,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,  135,  151,

      153,   88,   88,  351,  155,  350,  152,   88,   88,  156,
      338,  158,   88,   88,   88,   88,   88,   88,  154,   88,
       88,   88,   88,  157,   88,   88,  337,  159,  161,   88,
       88,   88,   88,  160,  336,   88,   88,   77,  166,  164,
      162,  163,   73,  165,   88,   88,   88,   88,   88,   88,
      335,  167,  170,   88,   88,  188,  173,  169,  168,   88,
       88,  171,   88,   88,  175,  177,  172,  174,   88,   88,
      135,   88,   88,   88,   88,  334,  176,  179,  316,  190,
      178,  315,  139,  200,  314,   74,   73,   88,   88,  180,
       88,   88,  313,  139,  312,  181,  182,   88,   88,  199,

      201,  183,  184,  140,  185,  140,  186,   88,   88,   77,
      187,  202,  140,  140,  140,  311,  140,  286,   88,   88,
      283,  140,  282,  140,  140,   88,   88,   88,   88,   74,
      203,  281,  140,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,  280,   88,   88,
      247,  204,  205,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,  206,   88,   88,   88,   88,   88,   88,
      246,  210,  245,  211,   88,   88,  207,   88,   88,  212,
       88,   88,  244,  208,  243,  209,  215,  216,   88,   88,
      214,   88,   88,  242,  213,  217,   88,   88,   88,   88,

      198,  218,  219,   88,   88,   88,   88,  195,   88,   88,
       88,   88,   88,   88,  194,  220,   88,   88,   73,   88,
       88,  221,   88,   88,  223,  222,   88,   88,  193,  224,
      135,  238,   88,   88,  225,   88,   88,   88,   88,  240,
       88,   88,  226,  192,   88,   88,   77,  227,  232,  142,
      228,  141,  250,  230,  229,  231,  235,  132,  248,  233,
      236,   74,  249,   88,   88,  130,  237,  234,   73,   77,
       88,   88,   88,   88,  130,  251,  129,  252,   88,   88,
       83,  239,  239,   88,   88,   88,   88,   88,   88,   82,
      239,  239,  239,  239,  239,  239,   88,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       81,   74,   77,  253,  380,  239,  239,  239,  239,  239,
      239,  135,   88,   88,   88,   88,  380,   88,   88,  380,
      241,  241,  257,  254,   88,   88,  255,   88,   88,  241,
      241,  241,  241,  241,  241,   88,   88,  380,  256,   88,
       88,   88,   88,  258,  260,   88,   88,  259,   88,   88,
       77,  263,   88,   88,  241,  241,  241,  241,  241,  241,
      261,  264,  262,   88,   88,  380,  266,   88,   88,   88,
       88,   88,   88,  265,  380,  268,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,  267,  380,

      270,   88,   88,   88,   88,  269,  273,   88,   88,  271,
      380,   88,   88,  272,  288,  380,  287,  380,  275,  380,
      289,   88,   88,   88,   88,   88,   88,   88,   88,  380,
       88,   88,  276,  274,  279,   88,   88,   88,   88,  380,
      277,   88,   88,  278,  290,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,  291,   88,   88,
      380,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,  292,  293,   88,   88,   88,   88,  380,  295,   88,
       88,  294,  380,  296,   88,   88,   88,   88,  380,  300,
      380,  301,   88,   88,  380,  297,   88,   88,   88,   88,

      298,  304,  299,  380,  302,  303,  380,  307,   88,   88,
      306,   88,   88,   88,   88,   88,   88,  308,  305,  318,
      309,   88,   88,  317,  380,  320,   88,   88,   88,   88,
       88,   88,  319,  380,  310,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,  321,   88,   88,   88,   88,
       88,   88,  323,   88,   88,  380,   88,   88,   88,   88,
      380,  324,  322,   88,   88,   88,   88,   88,   88,  326,
       88,   88,   88,   88,  329,  380,  325,   88,   88,  380,
      342,   88,   88,  380,  327,  339,   88,   88,  380,  328,

      340,  380,  331,  380,  332,   88,   88,  380,  341,  330,
      333,   88,   88,   88,   88,   88,   88,   88,   88,  380,
      343,   88,   88,   88,   88,   88,   88,  344,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,  380,  356,  354,  345,  355,   88,   88,  346,
      380,  347,   88,   88,  380,  348,   88,   88,   88,   88,
       88,   88,  380,  349,   88,   88,  380,   88,   88,   88,
       88,  380,  357,   88,   88,  380,  358,  364,   88,   88,
       88,   88,   88,   88,  359,  380,  360,  365,   88,   88,
       88,   88,  380,  369,   88,   88,   88,   88,   88,   88,

       88,   88,  380,  366,   88,   88,   88,   88,   88,   88,
       88,   88,  380,  380,  370,  380,  374,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      367,  380,  377,  380,  380,  380,  380,  380,  380,  380,
      371,  380,  380,  380,  380,  372,  380,  380,  380,  380,
      380,  375,   62,   62,   62,   62,   62,   62,   62,   62,
       66,   66,   66,   66,   66,   66,   66,   66,   72,  380,
       72,   72,   72,   72,   72,   72,   76,  380,   76,  380,
       76,   76,   76,   76,   89,   89,   89,   89,   72,   72,
       72,  380,  380,   72,   76,   76,   76,  380,  380,   76,

      138,  138,  138,  138,  138,  138,  138,  138,   88,   88,
       88,   88,  189,  189,  191,  191,    9,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380

    } ;

static yyconst short int yy_chk[1198] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    4,    4,    5,    5,    5,    5,    7,    7,
       14,    3,   15,    4,    6,    6,    6,    6,  378,    7,

       26,    5,    8,    8,   11,   26,   11,   11,   27,   27,
       34,    6,   34,    8,   35,   35,   34,   36,   37,   37,
      246,   36,   34,   41,   41,   42,   42,   43,   43,  246,
       36,   36,    5,   14,   44,   44,   47,   47,  376,   45,
       45,   15,    6,   15,   15,   15,   46,   46,  373,   15,
       74,   37,   15,   49,   49,   15,   41,   15,  368,   15,
      361,   15,   50,   50,   42,   48,   48,  352,   44,   51,
       51,   52,   52,   69,   43,   44,   43,   45,   44,   72,
       47,   44,   77,   47,   69,   47,   45,   49,   53,   53,
       46,   46,   46,   54,   54,   45,   76,   55,   55,   56,

       56,   46,   61,   61,   48,   74,   57,   57,   90,   52,
       50,   48,   67,   67,   67,   67,  351,   71,   51,   71,
       71,   51,   72,   80,   80,   86,   86,   79,   89,   89,
       53,   54,   53,   87,   54,   76,   87,   77,  350,   53,
      338,   56,   53,   55,   94,   94,   56,   57,   79,   54,
       79,   90,   92,   92,   93,   93,  145,   79,   79,   95,
       95,  145,   96,   96,   93,   92,   79,   93,   97,   97,
       98,   98,  101,  101,   92,   99,   99,  100,  100,  102,
      102,  103,  103,  104,  104,  337,  105,  105,  106,  106,
      107,  107,  108,  108,  109,  109,  110,  110,  240,   94,

       96,  111,  111,  335,   98,  334,   95,  112,  112,   99,
      315,  101,  113,  113,  114,  114,  117,  117,   97,  115,
      115,  116,  116,  100,  118,  118,  314,  103,  105,  119,
      119,  120,  120,  104,  313,  121,  121,  240,  110,  108,
      106,  107,  133,  109,  122,  122,  123,  123,  124,  124,
      312,  112,  114,  126,  126,  133,  116,  113,  112,  125,
      125,  115,  127,  127,  118,  120,  115,  117,  128,  128,
      136,  147,  147,  148,  148,  311,  119,  121,  286,  136,
      120,  285,  138,  148,  284,  133,  238,  149,  149,  122,
      150,  150,  283,  140,  282,  123,  124,  151,  151,  147,

      149,  125,  126,  138,  127,  138,  127,  152,  152,  136,
      128,  150,  138,  138,  140,  281,  140,  247,  153,  153,
      245,  138,  244,  140,  140,  154,  154,  155,  155,  238,
      151,  243,  140,  156,  156,  157,  157,  158,  158,  159,
      159,  160,  160,  161,  161,  162,  162,  242,  163,  163,
      198,  152,  153,  164,  164,  165,  165,  166,  166,  167,
      167,  168,  168,  154,  169,  169,  170,  170,  171,  171,
      197,  158,  196,  159,  172,  172,  155,  174,  174,  160,
      173,  173,  195,  156,  194,  157,  163,  164,  175,  175,
      162,  176,  176,  192,  161,  166,  177,  177,  178,  178,

      146,  167,  169,  179,  179,  180,  180,  144,  181,  181,
      182,  182,  183,  183,  143,  170,  184,  184,  188,  185,
      185,  171,  187,  187,  173,  172,  186,  186,  142,  174,
      190,  188,  203,  203,  175,  199,  199,  201,  201,  190,
      204,  204,  176,  141,  200,  200,   91,  177,  182,   85,
      178,   84,  201,  180,  179,  181,  185,   70,  199,  183,
      186,  188,  200,  202,  202,   68,  187,  184,  189,  190,
      205,  205,  206,  206,   66,  202,   65,  203,  207,  207,
       32,  189,  189,  208,  208,  209,  209,  211,  211,   30,
      189,  189,  189,  189,  189,  189,  210,  210,  212,  212,

      213,  213,  214,  214,  215,  215,  216,  216,  217,  217,
       28,  189,   18,  205,    9,  189,  189,  189,  189,  189,
      189,  191,  219,  219,  218,  218,    0,  220,  220,    0,
      191,  191,  211,  208,  223,  223,  209,  221,  221,  191,
      191,  191,  191,  191,  191,  222,  222,    0,  210,  224,
      224,  225,  225,  215,  217,  226,  226,  216,  227,  227,
      191,  220,  230,  230,  191,  191,  191,  191,  191,  191,
      218,  221,  219,  228,  228,    0,  223,  229,  229,  231,
      231,  232,  232,  222,    0,  225,  233,  233,  234,  234,
      235,  235,  236,  236,  248,  248,  237,  237,  224,    0,

      227,  249,  249,  250,  250,  226,  230,  252,  252,  228,
        0,  251,  251,  229,  249,    0,  248,    0,  232,    0,
      250,  253,  253,  254,  254,  255,  255,  256,  256,    0,
      257,  257,  233,  231,  237,  258,  258,  259,  259,    0,
      234,  260,  260,  236,  251,  261,  261,  262,  262,  263,
      263,  264,  264,  265,  265,  266,  266,  252,  267,  267,
        0,  268,  268,  269,  269,  270,  270,  271,  271,  272,
      272,  256,  257,  273,  273,  274,  274,    0,  260,  275,
      275,  258,    0,  261,  276,  276,  277,  277,    0,  265,
        0,  266,  278,  278,    0,  262,  279,  279,  287,  287,

      263,  270,  264,    0,  267,  268,    0,  273,  288,  288,
      272,  289,  289,  290,  290,  291,  291,  275,  271,  288,
      277,  292,  292,  287,    0,  290,  293,  293,  294,  294,
      295,  295,  289,    0,  278,  296,  296,  297,  297,  298,
      298,  299,  299,  300,  300,  301,  301,  302,  302,  303,
      303,  304,  304,  305,  305,  291,  306,  306,  307,  307,
      309,  309,  293,  308,  308,    0,  310,  310,  317,  317,
        0,  297,  292,  318,  318,  319,  319,  320,  320,  299,
      321,  321,  322,  322,  304,    0,  298,  323,  323,    0,
      320,  324,  324,    0,  300,  317,  325,  325,    0,  303,

      318,    0,  308,    0,  309,  326,  326,    0,  319,  307,
      310,  327,  327,  328,  328,  329,  329,  330,  330,    0,
      323,  331,  331,  332,  332,  333,  333,  324,  339,  339,
      340,  340,  342,  342,  341,  341,  343,  343,  344,  344,
      345,  345,    0,  342,  339,  325,  341,  346,  346,  327,
        0,  329,  347,  347,    0,  330,  348,  348,  349,  349,
      354,  354,    0,  333,  355,  355,    0,  356,  356,  357,
      357,    0,  343,  358,  358,    0,  344,  355,  359,  359,
      360,  360,  364,  364,  346,    0,  347,  356,  365,  365,
      366,  366,    0,  364,  367,  367,  369,  369,  370,  370,

      371,  371,    0,  357,  372,  372,  374,  374,  375,  375,
      377,  377,    0,    0,  365,    0,  369,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      360,    0,  374,    0,    0,    0,    0,    0,    0,    0,
      366,    0,    0,    0,    0,  367,    0,    0,    0,    0,
        0,  371,  381,  381,  381,  381,  381,  381,  381,  381,
      382,  382,  382,  382,  382,  382,  382,  382,  383,    0,
      383,  383,  383,  383,  383,  383,  384,    0,  384,    0,
      384,  384,  384,  384,  385,  385,  385,  385,  386,  386,
      386,    0,    0,  386,  387,  387,  387,    0,    0,  387,

      388,  388,  388,  388,  388,  388,  388,  388,  389,  389,
      389,  389,  390,  390,  391,  391,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380

    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "tokenizer-cc.l"
#define INITIAL 0
/***************************************************************************
                          tokenizer.l  -  description
                             -------------------
    begin                : Mon Mar 15 1999
    copyright            : (C) 1999 by Jonas Nordin
    email                : jonas.nordin@syncom.se
   
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   * 
 *                                                                         *
 ***************************************************************************/
#define COMMENT 1
#define PREPARSER 2
#define PPCOMMENT 3

#line 21 "tokenizer-cc.l"
  #include <stdlib.h>
  #include <qstring.h>
  #include "tokenizer-cc.h"
  #include "FlexLexer.h"

  /** This class is a stupid trick to make it possible 
   * to access the gettext method. */
  class MyLexer : public yyFlexLexer
  {
    public:
    char *gettext() {return yytext;};
  };

  /* Line where a comment starts. */
  int comment_start = -1;

  /* Line where a comment ends. */
  int comment_end = -1;

  /* Last parsed comment. */
  QString comment;

  /* Function prototypes */
  bool beginComment(MyLexer *lex);
  void inComment(MyLexer *lex);
  bool endComment(MyLexer *lex);
#line 827 "tokenizer-cc.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 66 "tokenizer-cc.l"

    /*==============> Strip whitespace <==============*/
#line 957 "tokenizer-cc.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yy_c_buf_p - yytext_ptr;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 381 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1117 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 68 "tokenizer-cc.l"
{}
	YY_BREAK
/*==============> Special keyword <==============*/
case 2:
YY_RULE_SETUP
#line 71 "tokenizer-cc.l"
{return CPCLASS;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 72 "tokenizer-cc.l"
{return CPPUBLIC;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 73 "tokenizer-cc.l"
{return CPPROTECTED;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "tokenizer-cc.l"
{return CPPRIVATE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 75 "tokenizer-cc.l"
{return CPCONST;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "tokenizer-cc.l"
{return CPVOLATILE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 77 "tokenizer-cc.l"
{return CPSTATIC;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 78 "tokenizer-cc.l"
{return CPVIRTUAL;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 79 "tokenizer-cc.l"
{return QTSIGNAL;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 80 "tokenizer-cc.l"
{return QTSLOT;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 81 "tokenizer-cc.l"
{return CPENUM;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 82 "tokenizer-cc.l"
{return CPTYPEDEF;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 83 "tokenizer-cc.l"
{return CPFRIEND;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 84 "tokenizer-cc.l"
{return CPSTRUCT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 85 "tokenizer-cc.l"
{return CPUNION;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 86 "tokenizer-cc.l"
{return CPOPERATOR;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 87 "tokenizer-cc.l"
{return CPTEMPLATE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 88 "tokenizer-cc.l"
{return CPTHROW;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 89 "tokenizer-cc.l"
{return CPNAMESPACE;}
	YY_BREAK
/*==============> Objective-C keyword <==============*/
case 21:
YY_RULE_SETUP
#line 92 "tokenizer-cc.l"
{return CPOBJCCLASS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 93 "tokenizer-cc.l"
{return CPOBJCINTERFACE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 94 "tokenizer-cc.l"
{return CPOBJCPROTOCOL;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 95 "tokenizer-cc.l"
{return CPOBJCPRIVATE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 96 "tokenizer-cc.l"
{return CPOBJCPROTECTED;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 97 "tokenizer-cc.l"
{return CPOBJCPUBLIC;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 98 "tokenizer-cc.l"
{return CPOBJCIMPLEMENTATION;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 99 "tokenizer-cc.l"
{return CPOBJCEND;}
	YY_BREAK
/*==> added by DANIEL <==*/
case 29:
YY_RULE_SETUP
#line 103 "tokenizer-cc.l"
{return CPEMIT;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "tokenizer-cc.l"
{return CPVOID;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "tokenizer-cc.l"
{return CPINT;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "tokenizer-cc.l"
{return CPBOOL;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "tokenizer-cc.l"
{return CPFLOAT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "tokenizer-cc.l"
{return CPCHAR;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "tokenizer-cc.l"
{return CPSCAST;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "tokenizer-cc.l"
{return CPDCAST;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "tokenizer-cc.l"
{return CPFOR;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "tokenizer-cc.l"
{return CPWHILE;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "tokenizer-cc.l"
{return CPDO;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "tokenizer-cc.l"
{return CPIF;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "tokenizer-cc.l"
{return CPELSE;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "tokenizer-cc.l"
{return CPSWITCH;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "tokenizer-cc.l"
{return CPCASE;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "tokenizer-cc.l"
{return CPBREAK;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "tokenizer-cc.l"
{return CPDEFAULT;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "tokenizer-cc.l"
{return CPRETURN;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 123 "tokenizer-cc.l"
{return CPPIPE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 124 "tokenizer-cc.l"
{return CPPIPE;}
	YY_BREAK
/*==============> Ignored stuff <==============*/
/*========== added to avoid extern "C" trouble--rnolden 03232000====*/
case 49:
YY_RULE_SETUP
#line 129 "tokenizer-cc.l"
{}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 130 "tokenizer-cc.l"
{}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 131 "tokenizer-cc.l"
{}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 132 "tokenizer-cc.l"
{}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 133 "tokenizer-cc.l"
{}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 134 "tokenizer-cc.l"
{}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 135 "tokenizer-cc.l"
{}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 136 "tokenizer-cc.l"
{}
	YY_BREAK
/*==============> String <==============*/
case 57:
YY_RULE_SETUP
#line 139 "tokenizer-cc.l"
{return STRING;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 140 "tokenizer-cc.l"
{return STRING;}
	YY_BREAK
/*==============> Normal operators <==============*/
case 59:
YY_RULE_SETUP
#line 143 "tokenizer-cc.l"
{return ':';}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 144 "tokenizer-cc.l"
{return CLCL;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 145 "tokenizer-cc.l"
{return '~';}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 146 "tokenizer-cc.l"
{return '=';}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 147 "tokenizer-cc.l"
{return '<';}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 148 "tokenizer-cc.l"
{return '>';}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 149 "tokenizer-cc.l"
{return '&';}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 150 "tokenizer-cc.l"
{return '+';}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 151 "tokenizer-cc.l"
{return '-';}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 152 "tokenizer-cc.l"
{return '*';}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 153 "tokenizer-cc.l"
{return '/';}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 154 "tokenizer-cc.l"
{return '%';}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 155 "tokenizer-cc.l"
{return '|';}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 156 "tokenizer-cc.l"
{return '^';}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 157 "tokenizer-cc.l"
{return '!';}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 159 "tokenizer-cc.l"
{return '?';}
	YY_BREAK
/*==============> End of Phrase <==============*/
case 75:
YY_RULE_SETUP
#line 162 "tokenizer-cc.l"
{return ';';}
	YY_BREAK
/*==============> Comma <==============*/
case 76:
YY_RULE_SETUP
#line 165 "tokenizer-cc.l"
{return ',';}
	YY_BREAK
/*==============> Dot <==============*/
case 77:
YY_RULE_SETUP
#line 168 "tokenizer-cc.l"
{return '.';}	
	YY_BREAK
/*==============> Paranthesis <==============*/
case 78:
YY_RULE_SETUP
#line 171 "tokenizer-cc.l"
{return '(';}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 172 "tokenizer-cc.l"
{return ')';}
	YY_BREAK
/*==============> Brackets <==============*/
case 80:
YY_RULE_SETUP
#line 175 "tokenizer-cc.l"
{return '{';}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 176 "tokenizer-cc.l"
{return '}';}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 177 "tokenizer-cc.l"
{return '[';}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 178 "tokenizer-cc.l"
{return ']';}
	YY_BREAK
/*==============> Identifiers <==============*/
case 84:
YY_RULE_SETUP
#line 181 "tokenizer-cc.l"
{return ID;}
	YY_BREAK
/*==============> Numbers <==============*/
case 85:
YY_RULE_SETUP
#line 184 "tokenizer-cc.l"
{return NUM;}
	YY_BREAK
/*==============> Skip preprocessor directives <==============*/
case 86:
YY_RULE_SETUP
#line 187 "tokenizer-cc.l"
{BEGIN (PREPARSER);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 188 "tokenizer-cc.l"
{ BEGIN (0);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 189 "tokenizer-cc.l"
{beginComment((MyLexer *) this);
                                  BEGIN (PPCOMMENT);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 191 "tokenizer-cc.l"
{ endComment((MyLexer *) this);
                       BEGIN (PREPARSER); }
	YY_BREAK
/*==============> Strip // comments <==============*/
case 90:
YY_RULE_SETUP
#line 195 "tokenizer-cc.l"
{}
	YY_BREAK
/*==============> Strip comments <==============*/
case 91:
YY_RULE_SETUP
#line 198 "tokenizer-cc.l"
{beginComment((MyLexer *) this);
                                  BEGIN (COMMENT);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 201 "tokenizer-cc.l"
{ endComment((MyLexer *) this);
                       BEGIN (0); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 204 "tokenizer-cc.l"
{inComment((MyLexer *) this);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 205 "tokenizer-cc.l"
{inComment((MyLexer *) this);}
	YY_BREAK
/*==============> All other characters are ignored <==============*/
case 95:
YY_RULE_SETUP
#line 208 "tokenizer-cc.l"
{}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 209 "tokenizer-cc.l"
{}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 211 "tokenizer-cc.l"
ECHO;
	YY_BREAK
#line 1561 "tokenizer-cc.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(PREPARSER):
			case YY_STATE_EOF(PPCOMMENT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 381 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 381 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 380);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 211 "tokenizer-cc.l"


bool beginComment(MyLexer *lex)
{
 comment_start = lex->lineno();
 comment="/*";
 return true;
}

void inComment(MyLexer *lex)
{
  char *text=lex->gettext();
  comment+=text;
};

bool endComment(MyLexer *lex)
{
 comment_end = lex->lineno();
 comment+="*/";
 return true;
}

