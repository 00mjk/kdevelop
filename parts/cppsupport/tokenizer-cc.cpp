#line 2 "tokenizer-cc.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
using namespace std;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 100
#define YY_END_OF_BUFFER 101
static yyconst short int yy_acclist[482] =
    {   0,
      101,   99,  100,    1,   99,  100,   98,  100,   76,   99,
      100,   99,  100,   99,  100,   73,   99,  100,   68,   99,
      100,   99,  100,   81,   99,  100,   82,   99,  100,   71,
       99,  100,   69,   99,  100,   79,   99,  100,   70,   99,
      100,   80,   99,  100,   72,   99,  100,   88,   99,  100,
       62,   99,  100,   78,   99,  100,   66,   99,  100,   65,
       99,  100,   67,   99,  100,   77,   99,  100,   99,  100,
       87,   99,  100,   87,   99,  100,   87,   99,  100,   85,
       99,  100,   86,   99,  100,   75,   99,  100,   87,   99,
      100,   87,   99,  100,   87,   99,  100,   87,   99,  100,

       87,   99,  100,   87,   99,  100,   87,   99,  100,   87,
       99,  100,   87,   99,  100,   87,   99,  100,   87,   99,
      100,   87,   99,  100,   87,   99,  100,   87,   99,  100,
       87,   99,  100,   87,   99,  100,   87,   99,  100,   83,
       99,  100,   74,   99,  100,   84,   99,  100,   64,   87,
       99,  100,   97,  100,   96,  100,   96,   97,  100,   97,
      100,   99,  100,    1,   99,  100,   98,  100,   99,  100,
       97,  100,    1,   60,   89,   94,   88,   63,   47,   48,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   39,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   40,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   95,   90,   91,   92,   61,   93,   93,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   37,   87,   87,
       87,   31,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   28,   87,   87,   87,   87,   87,   87,   87,
       32,   87,   87,   43,   87,   34,   87,   87,   87,   87,
       87,   41,   87,   29,   87,   12,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   30,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   44,   87,
        2,   87,    6,   87,   87,   87,   87,   33,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   11,   87,
       87,   87,   87,   87,   19,   87,   87,   16,   87,   87,
       87,   38,   87,   21,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   56,   87,   14,   87,   54,   87,
       87,   87,   87,   87,    3,   87,   46,   87,   87,    8,
       87,   15,   87,   42,   87,   87,   87,   87,   87,   26,

       87,   87,   87,   87,   87,   87,   87,   55,   87,   45,
       87,   87,   87,   87,    5,   87,   87,   10,   87,   87,
       87,   13,   87,    9,   87,   87,   24,   59,   87,   49,
       87,   51,   87,   87,   87,   87,   87,   87,   17,   87,
       87,   87,   18,   87,    7,   87,   23,   87,   50,   87,
       87,   87,   87,   87,   20,   87,    4,   87,   87,   22,
       25,   57,   87,   87,   87,   87,   87,   87,   58,   87,
       53,   87,   87,   35,   87,   87,   36,   87,   52,   87,
       27
    } ;

static yyconst short int yy_accept[401] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   12,   14,   16,   19,   22,   24,   27,
       30,   33,   36,   39,   42,   45,   48,   51,   54,   57,
       60,   63,   66,   69,   71,   74,   77,   80,   83,   86,
       89,   92,   95,   98,  101,  104,  107,  110,  113,  116,
      119,  122,  125,  128,  131,  134,  137,  140,  143,  146,
      149,  153,  155,  157,  160,  162,  164,  167,  169,  171,
      173,  174,  174,  175,  175,  176,  176,  176,  177,  177,
      178,  179,  180,  181,  181,  181,  181,  181,  182,  183,
      183,  183,  184,  185,  186,  187,  188,  189,  190,  191,

      192,  193,  195,  196,  197,  198,  199,  200,  201,  202,
      203,  205,  206,  207,  208,  209,  210,  211,  212,  213,
      214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
      224,  225,  226,  226,  226,  227,  227,  227,  227,  228,
      229,  229,  229,  229,  229,  229,  229,  230,  231,  232,
      233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
      243,  244,  245,  246,  247,  248,  250,  251,  252,  254,
      255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
      265,  266,  267,  268,  269,  270,  271,  272,  273,  273,
      273,  273,  273,  273,  274,  274,  274,  274,  274,  274,

      275,  276,  277,  278,  279,  280,  281,  283,  284,  286,
      288,  289,  290,  291,  292,  294,  296,  298,  299,  300,
      301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
      311,  312,  313,  314,  315,  316,  317,  318,  320,  321,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  323,  324,  325,  326,  327,  328,  329,  331,  333,
      335,  336,  337,  338,  340,  341,  342,  343,  344,  345,
      346,  347,  348,  349,  351,  352,  353,  354,  355,  357,
      358,  360,  361,  362,  364,  365,  365,  365,  365,  365,
      365,  365,  366,  367,  368,  369,  370,  371,  372,  373,

      374,  375,  377,  379,  381,  382,  383,  384,  385,  387,
      389,  390,  392,  394,  396,  397,  398,  399,  400,  400,
      400,  400,  400,  400,  401,  402,  403,  404,  405,  406,
      407,  408,  410,  412,  413,  414,  415,  417,  418,  420,
      421,  422,  424,  426,  427,  427,  427,  428,  428,  428,
      429,  430,  432,  434,  435,  436,  437,  438,  439,  441,
      442,  443,  445,  447,  447,  447,  447,  448,  449,  451,
      452,  453,  454,  455,  457,  459,  460,  460,  461,  462,
      464,  465,  466,  467,  468,  469,  469,  470,  471,  473,
      474,  476,  476,  477,  479,  479,  481,  481,  482,  482

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   39,   39,   50,   51,   39,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   39,   66,   67,   68,   69,
       70,   71,   39,   72,   73,   74,   75,   76,   77,   78,
       79,   39,   80,   81,   82,   83,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[84] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        6,    1,    1,    1,    1,    1,    3,    1,    6,    6,
        6,    6,    6,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    3,    1,    1,    7,    5,    5,    6,    6,
        6,    5,    7,    7,    7,    7,    7,    7,    8,    7,
        7,    8,    7,    8,    7,    8,    7,    8,    7,    1,
        1,    1,    7
    } ;

static yyconst short int yy_base[411] =
    {   0,
        0,    0,   81,   83,   86,   96,   89,  103,  583, 1220,
      106, 1220, 1220,   87,   91, 1220, 1220,  517, 1220, 1220,
     1220, 1220, 1220, 1220, 1220,   90,   92,  545, 1220,  541,
     1220,  537, 1220,   55,   98,  114,  102, 1220, 1220, 1220,
      107,  109,  111,  121,  116,  125,  134,  140,  123,  149,
      152,  154,  169,  176,  178,  187,  190, 1220, 1220, 1220,
      192, 1220, 1220, 1220,  538,  551,  214,  549,  162,  531,
      221,  126, 1220,  104, 1220,  176,  127, 1220,  225,  201,
     1220, 1220, 1220,  481,  464,  162,  160,    0,  218,  131,
      476,  240,  242,  221,  224,  244,  246,  249,  256,  258,

      260,  265,  267,  269,  272,  275,  277,  282,  287,  280,
      289,  291,  294,  296,  303,  305,  300,  308,  310,  312,
      314,  318,  320,  323,  326,  328,  334,  340, 1220, 1220,
     1220, 1220,  357,    0, 1220,  355,    0,  364, 1220,  369,
      465,  456,  441,  432,  183,  446,  393,  395,  398,  400,
      362,  402,  406,  408,  410,  416,  418,  420,  425,  427,
      429,  431,  433,  435,  440,  442,  446,  448,  454,  456,
      458,  460,  465,  474,  478,  482,  488,  490,  494,  498,
      500,  503,  505,  507,  511,  514,  522,  517,  389,  579,
      529,  631,  427, 1220,  425,  428,  411,  409,  405,  526,

      524,  538,  535,  560,  569,  567,  540,  577,  571,  573,
      582,  584,  594,  586,  596,  598,  600,  602,  604,  606,
      608,  610,  613,  624,  626,  629,  636,  646,  651,  665,
      659,  675,  677,  679,  681,  684,  686,  689,  691,  693,
      371,  759,  203,  811,  397,  403,  387,  400,  221,  369,
      695,  699,  702,  705,  708,  711,  726,  717,  730,  737,
      739,  742,  754,  748,  750,  752,  756,  761,  763,  765,
      774,  777,  780,  782,  794,  784,  788,  805,  808,  818,
      828,  830,  834,  836, 1220,  364,  355,  337,  347,  330,
      328,  839,  845,  854,  857,  860,  863,  869,  871,  874,

      876,  882,  886,  888,  890,  892,  894,  896,  898,  900,
      902,  904,  906,  908,  910,  912,  916,  918,  324,  324,
      315,  296,  286, 1220,  929,  922,  924,  931,  936,  938,
      943,  945,  947,  957,  960,  966,  968,  970,  972,  975,
      978,  980,  982,  984,  284,  259, 1220,  243,  207, 1220,
      986,  988,  990,  994,  996, 1001, 1005, 1009, 1015, 1020,
     1026, 1023, 1028,  197,  189,  173, 1220, 1030, 1032, 1034,
     1036, 1039, 1041, 1045, 1047, 1051,  143, 1220, 1220, 1053,
     1069, 1055, 1067, 1071, 1073,   93, 1220, 1075, 1079, 1081,
     1083,   92, 1085, 1087,   83, 1089,   33, 1220, 1220, 1155,

     1163, 1171, 1179, 1183, 1189, 1195, 1203, 1207, 1211, 1213
    } ;

static yyconst short int yy_def[411] =
    {   0,
      399,    1,  400,  400,  401,  401,  400,  400,  399,  399,
      399,  399,  399,  402,  399,  399,  399,  403,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  404,  404,  404,  399,  399,  399,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  399,  399,  399,
      404,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  402,  399,  405,  399,  403,  406,  399,  407,  399,
      399,  399,  399,  399,  399,  399,  399,  408,  404,  402,
      403,  404,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  399,  399,
      399,  399,  402,  409,  399,  403,  410,  407,  399,  407,
      399,  399,  399,  399,  399,  399,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  402,  402,
      403,  403,  399,  399,  399,  399,  399,  399,  399,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      402,  402,  403,  403,  399,  399,  399,  399,  399,  399,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  399,  399,  399,  399,  399,  399,
      399,  404,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  399,  399,
      399,  399,  399,  399,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  399,  399,  399,  399,  399,  399,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  399,  399,  399,  399,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  399,  399,  399,  404,
      404,  404,  404,  404,  404,  399,  399,  404,  404,  404,
      404,  399,  404,  404,  399,  404,  399,  399,    0,  399,

      399,  399,  399,  399,  399,  399,  399,  399,  399,  399
    } ;

static yyconst short int yy_nxt[1304] =
    {   0,
       10,   11,   12,   11,   11,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   36,
       35,   35,   35,   35,   37,   35,   35,   35,   35,   35,
       35,   38,   10,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   35,   35,   48,   35,   35,   35,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   35,   35,   58,
       59,   60,   61,   63,   64,   63,   64,   67,   68,   67,
       67,   63,   64,   73,   65,   75,   65,   67,   68,   67,

       67,  398,   70,   78,   69,   63,   64,   71,   79,   71,
       71,   80,   80,   84,   69,   85,   70,   88,   88,   86,
       90,   88,   88,  133,   91,   87,   88,   88,   88,   88,
       88,   88,   73,   88,   88,   88,   88,   73,   10,   74,
       88,   88,   88,   88,   88,   88,  136,   75,   10,   75,
       75,   75,  397,   88,   88,   75,  395,   92,   75,   88,
       88,   75,   93,   75,  130,   75,  392,   75,   88,   88,
       94,   88,   88,   88,   88,  131,  101,   97,   74,  113,
       95,  134,   96,   74,   98,  102,  135,   99,   88,   88,
      100,  104,  105,  106,  103,   88,   88,   88,   88,  386,

      108,  111,  107,  109,  137,  110,   88,   88,  112,   88,
       88,   88,   88,  135,  117,   71,  130,   71,   71,  114,
       80,   80,   71,  115,   71,   71,  116,  139,   77,  143,
      144,  145,  379,  118,  146,  119,  122,   88,   88,  123,
       88,   88,  120,   88,   88,  121,  125,  197,  140,  378,
      140,  126,  198,  128,  124,   77,  127,  140,  140,   88,
       88,   88,   88,   88,   88,   88,   88,  140,   88,   88,
      377,  150,  147,  367,  151,   88,   88,   88,   88,   88,
       88,  289,  148,  149,   88,   88,   88,   88,   88,   88,
      290,   88,   88,  153,   88,   88,   88,   88,  152,   88,

       88,   88,   88,  366,  154,  156,   88,   88,   88,   88,
       88,   88,  157,   88,   88,   88,   88,  365,  155,   88,
       88,  159,   88,   88,   88,   88,  158,   88,   88,   88,
       88,   88,   88,   88,   88,  160,  162,   88,   88,   88,
       88,  161,   88,   88,  167,   88,   88,   88,   88,  163,
      164,  165,  364,   88,   88,  349,  171,  168,  166,   88,
       88,  170,  174,   73,  169,  135,  139,  172,  178,  348,
      176,  139,  173,  175,  191,  347,  189,   73,  180,  177,
      346,   88,   88,  179,  345,  181,  324,  140,  323,  140,
      184,  182,  140,  183,  140,   73,  140,  140,  186,  185,

      187,  140,  140,  205,  188,  322,  140,   77,  241,   74,
      321,  140,   88,   88,   88,   88,  320,   88,   88,   88,
       88,   88,   88,   74,  202,   88,   88,   88,   88,   88,
       88,  319,  204,  291,  200,   88,   88,   88,   88,   88,
       88,   74,  201,  203,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,  288,  206,  287,   88,
       88,   88,   88,  286,  208,   88,   88,   88,   88,  285,
      209,  250,  207,   88,   88,   88,   88,   88,   88,   88,
       88,  213,  249,  214,   88,   88,  248,  210,  247,  215,
      211,  246,  212,   88,   88,  218,  219,   88,   88,  245,

      217,   88,   88,  199,  216,  196,  220,   88,   88,   88,
       88,  195,  221,   88,   88,  194,  222,   88,   88,   88,
       88,  193,   88,   88,   88,   88,   88,   88,   77,  223,
       88,   88,  142,   88,   88,  224,   88,   88,  225,  135,
      226,   88,   88,   88,   88,   88,   88,  141,  243,  132,
      228,  130,  227,  130,   88,   88,  129,   88,   88,   88,
       88,  229,   83,  230,   82,  235,   81,  252,  231,   77,
      233,  232,  234,  238,  251,  253,  236,  254,  239,   88,
       88,   77,  399,  240,  237,   73,   88,   88,   88,   88,
       88,   88,   88,   88,  255,  399,   88,   88,  242,  242,

      256,   88,   88,   88,   88,   88,   88,  242,  242,  242,
      242,  242,  242,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   74,   88,   88,  257,  242,  242,  242,  242,  242,
      242,  135,  258,   88,   88,   88,   88,  399,   88,   88,
      244,  244,  399,  262,  259,   88,   88,  260,  399,  244,
      244,  244,  244,  244,  244,   88,   88,  399,  261,  268,
       88,   88,  399,  263,  265,  399,  266,  264,   88,   88,
      269,  399,  267,   77,   88,   88,  270,  244,  244,  244,
      244,  244,  244,  271,   88,   88,   88,   88,   88,   88,

       88,   88,  273,   88,   88,   88,   88,  272,   88,   88,
       88,   88,   88,   88,   88,   88,  399,  276,   88,   88,
      399,   88,   88,  274,   88,   88,  399,   88,   88,  275,
       88,   88,  399,  277,  295,  292,   88,   88,  293,  399,
      280,  294,  399,  278,  297,   88,   88,  399,  296,   88,
       88,  399,  281,  284,  399,  279,   88,   88,   88,   88,
      282,   88,   88,  399,  283,   73,  298,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,  399,  242,  242,
       88,   88,   88,   88,   88,   88,  399,  242,  242,  242,
      242,  242,  242,   88,   88,  399,   88,   88,  299,   88,

       88,   88,   88,   88,   88,  300,  301,   88,   88,  303,
      399,   74,  304,   88,   88,  242,  242,  242,  242,  242,
      242,  135,  302,  308,   88,   88,  305,   88,   88,  399,
      244,  244,  309,  399,  306,  399,  307,   88,   88,  244,
      244,  244,  244,  244,  244,  310,  311,   88,   88,   88,
       88,  314,  312,   88,   88,   88,   88,  313,   88,   88,
      399,  315,  399,   77,   88,   88,  399,  244,  244,  244,
      244,  244,  244,   88,   88,  399,   88,   88,  316,   88,
       88,  326,   88,   88,  399,  325,  317,  328,   88,   88,
       88,   88,  329,   88,   88,   88,   88,  399,  318,  327,

      331,   88,   88,  399,  330,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,  332,  334,   88,   88,   88,   88,  399,
      350,   88,   88,   88,   88,  399,  335,  333,   88,   88,
       88,   88,  351,  399,  337,   88,   88,   88,   88,  340,
      399,  336,   88,   88,   88,   88,   88,   88,  399,  338,
      399,  352,  399,  342,  339,  356,   88,   88,  353,   88,
       88,  354,  343,  341,  344,   88,   88,   88,   88,   88,
       88,   88,   88,  355,   88,   88,  399,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,  399,  357,   88,   88,   88,   88,  399,  358,  399,
       88,   88,  368,  369,   88,   88,  399,  371,   88,   88,
      360,  372,  399,  361,   88,   88,  399,  359,  362,   88,
       88,  370,   88,   88,  363,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,  399,   88,   88,
       88,   88,  399,  373,   88,   88,   88,   88,  382,  374,
       88,   88,   88,   88,   88,   88,  399,  380,  383,  375,
      387,  399,  376,  399,  381,  388,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,  399,  384,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
      399,  399,  399,  389,  393,  399,  399,  399,  399,  399,
      399,  399,  399,  385,  399,  399,  399,  399,  399,  399,
      399,  396,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  390,  399,  399,  391,  399,  399,  399,
      399,  399,  399,  399,  394,   62,   62,   62,   62,   62,
       62,   62,   62,   66,   66,   66,   66,   66,   66,   66,
       66,   72,  399,   72,   72,   72,   72,   72,   72,   76,
      399,   76,  399,   76,   76,   76,   76,   89,   89,   89,
       89,   72,   72,   72,  399,  399,   72,   76,   76,   76,

      399,  399,   76,  138,  138,  138,  138,  138,  138,  138,
      138,   88,   88,   88,   88,  190,  190,  192,  192,    9,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,

      399,  399,  399
    } ;

static yyconst short int yy_chk[1304] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    4,    4,    5,    5,    5,
        5,    7,    7,   14,    3,   15,    4,    6,    6,    6,

        6,  397,    7,   26,    5,    8,    8,   11,   26,   11,
       11,   27,   27,   34,    6,   34,    8,   35,   35,   34,
       36,   37,   37,   74,   36,   34,   41,   41,   42,   42,
       43,   43,   72,   36,   36,   45,   45,   90,    5,   14,
       44,   44,   49,   49,   46,   46,   77,   15,    6,   15,
       15,   15,  395,   47,   47,   15,  392,   37,   15,   48,
       48,   15,   41,   15,   69,   15,  386,   15,   50,   50,
       42,   51,   51,   52,   52,   69,   45,   44,   72,   49,
       43,   74,   43,   90,   44,   45,   76,   44,   53,   53,
       44,   46,   46,   46,   45,   54,   54,   55,   55,  377,

       47,   48,   46,   47,   77,   47,   56,   56,   48,   57,
       57,   61,   61,  243,   52,   67,   67,   67,   67,   50,
       80,   80,   71,   51,   71,   71,   51,   79,   76,   86,
       86,   87,  366,   53,   87,   53,   54,   89,   89,   54,
       94,   94,   53,   95,   95,   53,   55,  145,   79,  365,
       79,   56,  145,   57,   54,  243,   56,   79,   79,   92,
       92,   93,   93,   96,   96,   97,   97,   79,   98,   98,
      364,   93,   92,  349,   93,   99,   99,  100,  100,  101,
      101,  249,   92,   92,  102,  102,  103,  103,  104,  104,
      249,  105,  105,   95,  106,  106,  107,  107,   94,  110,

      110,  108,  108,  348,   96,   98,  109,  109,  111,  111,
      112,  112,   99,  113,  113,  114,  114,  346,   97,  117,
      117,  101,  115,  115,  116,  116,  100,  118,  118,  119,
      119,  120,  120,  121,  121,  103,  105,  122,  122,  123,
      123,  104,  124,  124,  110,  125,  125,  126,  126,  106,
      107,  108,  345,  127,  127,  323,  114,  112,  109,  128,
      128,  113,  116,  133,  112,  136,  138,  115,  120,  322,
      118,  140,  115,  117,  136,  321,  133,  241,  121,  119,
      320,  151,  151,  120,  319,  122,  291,  138,  290,  138,
      125,  123,  140,  124,  140,  189,  138,  138,  127,  126,

      127,  140,  140,  151,  128,  289,  138,  136,  189,  133,
      288,  140,  147,  147,  148,  148,  287,  149,  149,  150,
      150,  152,  152,  241,  148,  153,  153,  154,  154,  155,
      155,  286,  150,  250,  147,  156,  156,  157,  157,  158,
      158,  189,  147,  149,  159,  159,  160,  160,  161,  161,
      162,  162,  163,  163,  164,  164,  248,  152,  247,  165,
      165,  166,  166,  246,  154,  167,  167,  168,  168,  245,
      155,  199,  153,  169,  169,  170,  170,  171,  171,  172,
      172,  159,  198,  160,  173,  173,  197,  156,  196,  161,
      157,  195,  158,  174,  174,  164,  165,  175,  175,  193,

      163,  176,  176,  146,  162,  144,  167,  177,  177,  178,
      178,  143,  168,  179,  179,  142,  170,  180,  180,  181,
      181,  141,  182,  182,  183,  183,  184,  184,   91,  171,
      185,  185,   85,  186,  186,  172,  188,  188,  173,  191,
      174,  187,  187,  201,  201,  200,  200,   84,  191,   70,
      176,   68,  175,   66,  203,  203,   65,  202,  202,  207,
      207,  177,   32,  178,   30,  183,   28,  201,  179,   18,
      181,  180,  182,  186,  200,  202,  184,  203,  187,  204,
      204,  191,    9,  188,  185,  190,  206,  206,  205,  205,
      209,  209,  210,  210,  204,    0,  208,  208,  190,  190,

      205,  211,  211,  212,  212,  214,  214,  190,  190,  190,
      190,  190,  190,  213,  213,  215,  215,  216,  216,  217,
      217,  218,  218,  219,  219,  220,  220,  221,  221,  222,
      222,  190,  223,  223,  206,  190,  190,  190,  190,  190,
      190,  192,  208,  224,  224,  225,  225,    0,  226,  226,
      192,  192,    0,  214,  211,  227,  227,  212,    0,  192,
      192,  192,  192,  192,  192,  228,  228,    0,  213,  223,
      229,  229,    0,  218,  220,    0,  221,  219,  231,  231,
      224,    0,  222,  192,  230,  230,  225,  192,  192,  192,
      192,  192,  192,  226,  232,  232,  233,  233,  234,  234,

      235,  235,  228,  236,  236,  237,  237,  227,  238,  238,
      239,  239,  240,  240,  251,  251,    0,  231,  252,  252,
        0,  253,  253,  229,  254,  254,    0,  255,  255,  230,
      256,  256,    0,  232,  253,  251,  258,  258,  252,    0,
      235,  252,    0,  233,  255,  257,  257,    0,  254,  259,
      259,    0,  236,  240,    0,  234,  260,  260,  261,  261,
      237,  262,  262,    0,  239,  242,  256,  264,  264,  265,
      265,  266,  266,  263,  263,  267,  267,    0,  242,  242,
      268,  268,  269,  269,  270,  270,    0,  242,  242,  242,
      242,  242,  242,  271,  271,    0,  272,  272,  257,  273,

      273,  274,  274,  276,  276,  261,  262,  277,  277,  265,
        0,  242,  266,  275,  275,  242,  242,  242,  242,  242,
      242,  244,  263,  270,  278,  278,  267,  279,  279,    0,
      244,  244,  271,    0,  268,    0,  269,  280,  280,  244,
      244,  244,  244,  244,  244,  272,  273,  281,  281,  282,
      282,  277,  275,  283,  283,  284,  284,  276,  292,  292,
        0,  278,    0,  244,  293,  293,    0,  244,  244,  244,
      244,  244,  244,  294,  294,    0,  295,  295,  280,  296,
      296,  293,  297,  297,    0,  292,  282,  295,  298,  298,
      299,  299,  296,  300,  300,  301,  301,    0,  283,  294,

      298,  302,  302,    0,  297,  303,  303,  304,  304,  305,
      305,  306,  306,  307,  307,  308,  308,  309,  309,  310,
      310,  311,  311,  312,  312,  313,  313,  314,  314,  315,
      315,  316,  316,  299,  301,  317,  317,  318,  318,    0,
      325,  326,  326,  327,  327,    0,  305,  300,  325,  325,
      328,  328,  326,    0,  307,  329,  329,  330,  330,  312,
        0,  306,  331,  331,  332,  332,  333,  333,    0,  308,
        0,  327,    0,  316,  311,  331,  334,  334,  328,  335,
      335,  329,  317,  315,  318,  336,  336,  337,  337,  338,
      338,  339,  339,  330,  340,  340,    0,  341,  341,  342,

      342,  343,  343,  344,  344,  351,  351,  352,  352,  353,
      353,    0,  334,  354,  354,  355,  355,    0,  335,    0,
      356,  356,  351,  352,  357,  357,    0,  355,  358,  358,
      338,  356,    0,  340,  359,  359,    0,  336,  341,  360,
      360,  354,  362,  362,  344,  361,  361,  363,  363,  368,
      368,  369,  369,  370,  370,  371,  371,    0,  372,  372,
      373,  373,    0,  357,  374,  374,  375,  375,  371,  358,
      376,  376,  380,  380,  382,  382,    0,  368,  372,  360,
      381,    0,  361,    0,  370,  382,  383,  383,  381,  381,
      384,  384,  385,  385,  388,  388,    0,  373,  389,  389,

      390,  390,  391,  391,  393,  393,  394,  394,  396,  396,
        0,    0,    0,  383,  388,    0,    0,    0,    0,    0,
        0,    0,    0,  376,    0,    0,    0,    0,    0,    0,
        0,  393,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  384,    0,    0,  385,    0,    0,    0,
        0,    0,    0,    0,  390,  400,  400,  400,  400,  400,
      400,  400,  400,  401,  401,  401,  401,  401,  401,  401,
      401,  402,    0,  402,  402,  402,  402,  402,  402,  403,
        0,  403,    0,  403,  403,  403,  403,  404,  404,  404,
      404,  405,  405,  405,    0,    0,  405,  406,  406,  406,

        0,    0,  406,  407,  407,  407,  407,  407,  407,  407,
      407,  408,  408,  408,  408,  409,  409,  410,  410,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,

      399,  399,  399
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./tokenizer-cc.l"
#define INITIAL 0
/***************************************************************************
                          tokenizer.l  -  description
                             -------------------
    begin                : Mon Mar 15 1999
    copyright            : (C) 1999 by Jonas Nordin
    email                : jonas.nordin@syncom.se
   
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   * 
 *                                                                         *
 ***************************************************************************/
#define COMMENT 1
#define PREPARSER 2
#define PPCOMMENT 3

#line 21 "./tokenizer-cc.l"
  #include <stdlib.h>
  #include <qstring.h>
  #include "tokenizer-cc.h"
  #include "FlexLexer.h"

  /** This class is a stupid trick to make it possible 
   * to access the getText method. */
  class MyLexer : public yyFlexLexer
  {
    public:
    char *getText() {return yytext;};
  };

  /* Line where a comment starts. */
  int comment_start = -1;

  /* Line where a comment ends. */
  int comment_end = -1;

  /* Last parsed comment. */
  QString comment;

  /* Function prototypes */
  bool beginComment(MyLexer *lex);
  void inComment(MyLexer *lex);
  bool endComment(MyLexer *lex);
#line 858 "tokenizer-cc.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 66 "./tokenizer-cc.l"

    /*==============> Strip whitespace <==============*/
#line 988 "tokenizer-cc.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yy_c_buf_p - yytext_ptr;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 400 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1220 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 68 "./tokenizer-cc.l"
{}
	YY_BREAK
/*==============> Special keyword <==============*/
case 2:
YY_RULE_SETUP
#line 71 "./tokenizer-cc.l"
{return CPCLASS;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 72 "./tokenizer-cc.l"
{return CPPUBLIC;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 73 "./tokenizer-cc.l"
{return CPPROTECTED;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "./tokenizer-cc.l"
{return CPPRIVATE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 75 "./tokenizer-cc.l"
{return CPCONST;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "./tokenizer-cc.l"
{return CPVOLATILE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 77 "./tokenizer-cc.l"
{return CPSTATIC;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 78 "./tokenizer-cc.l"
{return CPVIRTUAL;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 79 "./tokenizer-cc.l"
{return QTSIGNAL;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 80 "./tokenizer-cc.l"
{return QTSLOT;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 81 "./tokenizer-cc.l"
{return CPENUM;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 82 "./tokenizer-cc.l"
{return CPTYPEDEF;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 83 "./tokenizer-cc.l"
{return CPFRIEND;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 84 "./tokenizer-cc.l"
{return CPSTRUCT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 85 "./tokenizer-cc.l"
{return CPUNION;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 86 "./tokenizer-cc.l"
{return CPOPERATOR;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 87 "./tokenizer-cc.l"
{return CPTEMPLATE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 88 "./tokenizer-cc.l"
{return CPTHROW;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 89 "./tokenizer-cc.l"
{return CPNAMESPACE;}
	YY_BREAK
/*==============> Objective-C keyword <==============*/
case 21:
YY_RULE_SETUP
#line 92 "./tokenizer-cc.l"
{return CPOBJCCLASS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 93 "./tokenizer-cc.l"
{return CPOBJCINTERFACE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 94 "./tokenizer-cc.l"
{return CPOBJCPROTOCOL;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 95 "./tokenizer-cc.l"
{return CPOBJCPRIVATE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 96 "./tokenizer-cc.l"
{return CPOBJCPROTECTED;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 97 "./tokenizer-cc.l"
{return CPOBJCPUBLIC;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 98 "./tokenizer-cc.l"
{return CPOBJCIMPLEMENTATION;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 99 "./tokenizer-cc.l"
{return CPOBJCEND;}
	YY_BREAK
/*==> added by DANIEL <==*/
case 29:
YY_RULE_SETUP
#line 103 "./tokenizer-cc.l"
{return CPEMIT;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "./tokenizer-cc.l"
{return CPVOID;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "./tokenizer-cc.l"
{return CPINT;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "./tokenizer-cc.l"
{return CPBOOL;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "./tokenizer-cc.l"
{return CPFLOAT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "./tokenizer-cc.l"
{return CPCHAR;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "./tokenizer-cc.l"
{return CPSCAST;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "./tokenizer-cc.l"
{return CPDCAST;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "./tokenizer-cc.l"
{return CPFOR;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "./tokenizer-cc.l"
{return CPWHILE;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "./tokenizer-cc.l"
{return CPDO;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "./tokenizer-cc.l"
{return CPIF;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "./tokenizer-cc.l"
{return CPELSE;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "./tokenizer-cc.l"
{return CPSWITCH;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "./tokenizer-cc.l"
{return CPCASE;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "./tokenizer-cc.l"
{return CPBREAK;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "./tokenizer-cc.l"
{return CPDEFAULT;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "./tokenizer-cc.l"
{return CPRETURN;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 123 "./tokenizer-cc.l"
{return CPPIPE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 124 "./tokenizer-cc.l"
{return CPPIPE;}
	YY_BREAK
/*==============> Ignored stuff <==============*/
/*========== added to avoid extern "C" trouble--rnolden 03232000====*/
case 49:
YY_RULE_SETUP
#line 129 "./tokenizer-cc.l"
{}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 130 "./tokenizer-cc.l"
{}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 131 "./tokenizer-cc.l"
{}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 132 "./tokenizer-cc.l"
{}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 133 "./tokenizer-cc.l"
{}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 134 "./tokenizer-cc.l"
{}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 135 "./tokenizer-cc.l"
{}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 136 "./tokenizer-cc.l"
{}
	YY_BREAK
/*========== for ignoring qt-specific macros dymo 24012003 ===*/
case 57:
YY_RULE_SETUP
#line 138 "./tokenizer-cc.l"
{}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 139 "./tokenizer-cc.l"
{}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 140 "./tokenizer-cc.l"
{}
	YY_BREAK
/*==============> String <==============*/
case 60:
YY_RULE_SETUP
#line 143 "./tokenizer-cc.l"
{return STRING;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 144 "./tokenizer-cc.l"
{return STRING;}
	YY_BREAK
/*==============> Normal operators <==============*/
case 62:
YY_RULE_SETUP
#line 147 "./tokenizer-cc.l"
{return ':';}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 148 "./tokenizer-cc.l"
{return CLCL;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 149 "./tokenizer-cc.l"
{return '~';}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 150 "./tokenizer-cc.l"
{return '=';}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 151 "./tokenizer-cc.l"
{return '<';}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 152 "./tokenizer-cc.l"
{return '>';}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 153 "./tokenizer-cc.l"
{return '&';}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 154 "./tokenizer-cc.l"
{return '+';}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 155 "./tokenizer-cc.l"
{return '-';}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 156 "./tokenizer-cc.l"
{return '*';}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 157 "./tokenizer-cc.l"
{return '/';}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 158 "./tokenizer-cc.l"
{return '%';}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 159 "./tokenizer-cc.l"
{return '|';}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 160 "./tokenizer-cc.l"
{return '^';}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 161 "./tokenizer-cc.l"
{return '!';}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 163 "./tokenizer-cc.l"
{return '?';}
	YY_BREAK
/*==============> End of Phrase <==============*/
case 78:
YY_RULE_SETUP
#line 166 "./tokenizer-cc.l"
{return ';';}
	YY_BREAK
/*==============> Comma <==============*/
case 79:
YY_RULE_SETUP
#line 169 "./tokenizer-cc.l"
{return ',';}
	YY_BREAK
/*==============> Dot <==============*/
case 80:
YY_RULE_SETUP
#line 172 "./tokenizer-cc.l"
{return '.';}	
	YY_BREAK
/*==============> Paranthesis <==============*/
case 81:
YY_RULE_SETUP
#line 175 "./tokenizer-cc.l"
{return '(';}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 176 "./tokenizer-cc.l"
{return ')';}
	YY_BREAK
/*==============> Brackets <==============*/
case 83:
YY_RULE_SETUP
#line 179 "./tokenizer-cc.l"
{return '{';}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 180 "./tokenizer-cc.l"
{return '}';}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 181 "./tokenizer-cc.l"
{return '[';}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 182 "./tokenizer-cc.l"
{return ']';}
	YY_BREAK
/*==============> Identifiers <==============*/
case 87:
YY_RULE_SETUP
#line 185 "./tokenizer-cc.l"
{return ID;}
	YY_BREAK
/*==============> Numbers <==============*/
case 88:
YY_RULE_SETUP
#line 188 "./tokenizer-cc.l"
{return NUM;}
	YY_BREAK
/*==============> Skip preprocessor directives <==============*/
case 89:
YY_RULE_SETUP
#line 191 "./tokenizer-cc.l"
{BEGIN (PREPARSER);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 192 "./tokenizer-cc.l"
{ BEGIN (0);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 193 "./tokenizer-cc.l"
{beginComment((MyLexer *) this);
                                  BEGIN (PPCOMMENT);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 195 "./tokenizer-cc.l"
{ endComment((MyLexer *) this);
                       BEGIN (PREPARSER); }
	YY_BREAK
/*==============> Strip // comments <==============*/
case 93:
YY_RULE_SETUP
#line 199 "./tokenizer-cc.l"
{}
	YY_BREAK
/*==============> Strip comments <==============*/
case 94:
YY_RULE_SETUP
#line 202 "./tokenizer-cc.l"
{beginComment((MyLexer *) this);
                                  BEGIN (COMMENT);}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 205 "./tokenizer-cc.l"
{ endComment((MyLexer *) this);
                       BEGIN (0); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 208 "./tokenizer-cc.l"
{inComment((MyLexer *) this);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 209 "./tokenizer-cc.l"
{inComment((MyLexer *) this);}
	YY_BREAK
/*==============> All other characters are ignored <==============*/
case 98:
YY_RULE_SETUP
#line 212 "./tokenizer-cc.l"
{}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 213 "./tokenizer-cc.l"
{}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 215 "./tokenizer-cc.l"
ECHO;
	YY_BREAK
#line 1608 "tokenizer-cc.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(PREPARSER):
			case YY_STATE_EOF(PPCOMMENT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 400 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 400 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 399);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 215 "./tokenizer-cc.l"


bool beginComment(MyLexer *lex)
{
 comment_start = lex->lineno();
 comment="/*";
 return true;
}

void inComment(MyLexer *lex)
{
  char *text=lex->getText();
  comment+=text;
};

bool endComment(MyLexer *lex)
{
 comment_end = lex->lineno();
 comment+="*/";
 return true;
}

