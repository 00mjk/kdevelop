<!doctype linuxdoc system>
<article>
<title>The KDevelop Programming Handbook
<author>Ralf Nolden, The KDevelop Team <tt></tt>
<date>Version 0.4 , Sun Apr 11 14:01:56 CEST 1999

<abstract>
This Handbook describes programming with KDevelop Version 0.4.
</abstract>

<toc>
<sect>Introduction<p>
	As for the first version of this programming handbook, I don't make any promises about correctness and actuality towards special
programming aspects. It should be taken as a hint for programmers how to use KDevelop at it's best for development as well as for the
first time give a better introduction into certain things like API-documentation and the code frame structure of KAppWizard generated
projects. A lot of users requested a tutorial, especially for KDE application development. Mainly new developers have to get a good
structured guideline towards programming as the KDevelop handbook keeps only track of how to actually use the IDE. Advanced users shouldn't
have any problems as we tried to keep our design as usable as possible (at least how we thought it should look like).
	This handbook tries to cover as much as is needed to know for a first start. The structure is therefore based on the actual difficulty
of programming C++ applications, so first come terminal applications and libraries (although still not supported by kdevelop), then GUI-based
programming starting with Qt-only programs, followed by KDE application development. Nevertheless most users will tend to develop KDE-apps, I
advise reading the Qt-section as a must, because this section will cover most Qt-related things that either have the same importance and use
within KDE-applications or are base-knowledge for GUI-development.
The KDE-section will then cope with example programs showing development steps and KDE-specific information like development standards and
special classes provided with the KDE-libraries.
To those that wish to take part in the newest issues of programming, I will at least try to explain CORBA and especially the IDL scripting
language to give a first understanding of internals that are needed for KOM/KOffice development.
The handbook ends with an introduction into that most interesting part of current KDE development, giving an overview of how to create a new
KOM/KOffice compliant KDE application and how the generated code structure works.

<sect>C/C++ Applications<p>
<sect1>Generating a terminal application<p>
Since version 0.3, KDevelop's application generator offers the possiblility to generate a pure C++-terminal based frame application using GNU
standard development tools. To create a new terminal application, select "KAppWizard" from the Project-menu. On the first page, choose "C/C++-Application"
and press "Proceed". The next page requires to insert a name for the application as a minimum. Also the program version number, the author's name
and email-address can be set; this information will be used to generate the handbook anb by the templates for the class generator. "Generate" opens the
output page of the wizard, showing you commands and generation output progress. "READY" in the output window displays that the generation was successful.
Then choose "Exit" to finish KAppWizard and return to KDevelop. The new project will be loaded and is ready to compile.
<p>
To test the frame application,
either choose "Make" from the Build-menu or press the button with the orange wheel in the toolbar. This invokes the "make"-command for the project and
builds the application. After the binary is build, the outputwindow will change to the "Stdin/Stdout" tab and shows you the "Hello World!" string.
	That is actually all the generated project does- the rest is actually programming work for the user.

<sect1>Adding new classes<p>
The next step would be to create all needed classes with the class generator. To generate a new class, choose "New Class" from the Project-menu,
opening the class generator dialog. Here, the classname has to be inserted. The classgenerator make an auto-completion for the file names for the
new class, that is naming the files lowercase to the selected classname; the header using the *.h, the implementation file the *.cpp fileextension.
After pressing the "OK" button, the new class will be generated and included in the project. That means that the implementation file is included
into the compile-process by it's addition to the Makefile.am, but the user doesn't have to care for anything as by the next invocation of "Execute"
or "Make", the new source will be processed as well.
<sect>Static Libraries<p>
<sect>Shared Libraries<p>
<sect>Qt-Applications<p>
	The Qt library, on which KDE is based, offers a lot of possibilities towards programming GUI based applications. For commericial development, Qt seems
to be a good alternative due to the fact of it's easy use and it's cross-platform availability. Therefore, and basically by the fact that from version 2.x
Qt is published under a new license, we assume that development using this library will reach a far more wider community of developers than those already
taking advantage of it, we included direct support for a project type based on the Qt library alone. The framecode which is offered is almost similar to
the structure of that which is generated for a KDE application, just the derived classes have been changed and a Qt-based program won't take advantage of the
possibilities that a full-featured KDE program can offer like e.g. session management.
<sect1>Qt-Application generation and frame code structure<p>
<sect>KDE-Applications<p>
<sect1>Creating the example program<p>
<sect1>Generated frame code structure<p>
<sect1>Additional files and documentation<p>
<sect1>Generating and documenting new classes<p>
<sect1>The Editor example<p>
<sect1>The Draw example<p>
<sect1>Updating the application documentation<p>
<sect>CORBA<p>
<sect1>What is CORBA ?<p>
<sect1>The IDL Language description<p>
<sect>KOM<p>
<sect1>Introduction<p>
<sect1>Requirements<p>
<sect>KOffice-Applications using KOM<p>
<sect1>Generating KOM/KOffice applications<p>
<sect1>Generated frame code structure and IDL description<p>
</article>



