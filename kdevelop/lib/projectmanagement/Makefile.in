# KDE tags expanded automatically by am_edit - $Revision$ 
# Makefile.in generated automatically by automake 1.4 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

# set the include path for X, qt and KDE


SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
#>- 
bindir = @bindir@
#>+ 3
DEPDIR = .deps

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = ../../..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_alias = @build_alias@
build_triplet = @build@
host_alias = @host_alias@
host_triplet = @host@
target_alias = @target_alias@
target_triplet = @target@
AS = @AS@
AUTODIRS = @AUTODIRS@
CC = @CC@
CPP = @CPP@
CXX = @CXX@
CXXCPP = @CXXCPP@
DCOPIDL = @DCOPIDL@
DCOPIDL2CPP = @DCOPIDL2CPP@
DCOP_DEPENDENCIES = @DCOP_DEPENDENCIES@
DLLTOOL = @DLLTOOL@
DPMSINC = @DPMSINC@
DPMSLIB = @DPMSLIB@
EXEEXT = @EXEEXT@
GLINC = @GLINC@
GLLIB = @GLLIB@
GMSGFMT = @GMSGFMT@
IDL = @IDL@
IDL_DEPENDENCIES = @IDL_DEPENDENCIES@
KDB2HTML = @KDB2HTML@
KDE_CXXFLAGS = @KDE_CXXFLAGS@
KDE_EXTRA_RPATH = @KDE_EXTRA_RPATH@
KDE_INCLUDES = @KDE_INCLUDES@
KDE_LDFLAGS = @KDE_LDFLAGS@
KDE_PLUGIN = @KDE_PLUGIN@
KDE_RPATH = @KDE_RPATH@
KDE_USE_CLOSURE_FALSE = @KDE_USE_CLOSURE_FALSE@
KDE_USE_CLOSURE_TRUE = @KDE_USE_CLOSURE_TRUE@
KDE_USE_FINAL_FALSE = @KDE_USE_FINAL_FALSE@
KDE_USE_FINAL_TRUE = @KDE_USE_FINAL_TRUE@
LEX = @LEX@
LIBCOMPAT = @LIBCOMPAT@
LIBCRYPT = @LIBCRYPT@
LIBDL = @LIBDL@
LIBJPEG = @LIBJPEG@
LIBMICO = @LIBMICO@
LIBOBJS = @LIBOBJS@
LIBPNG = @LIBPNG@
LIBPTHREAD = @LIBPTHREAD@
LIBPYTHON = @LIBPYTHON@
LIBQIMGIO = @LIBQIMGIO@
LIBSM = @LIBSM@
LIBSOCKET = @LIBSOCKET@
LIBTIFF = @LIBTIFF@
LIBTOOL = @LIBTOOL@
LIBUCB = @LIBUCB@
LIBZ = @LIBZ@
LIB_KAB = @LIB_KAB@
LIB_KDECORE = @LIB_KDECORE@
LIB_KDEUI = @LIB_KDEUI@
LIB_KFILE = @LIB_KFILE@
LIB_KFM = @LIB_KFM@
LIB_KFORMULA = @LIB_KFORMULA@
LIB_KHTML = @LIB_KHTML@
LIB_KHTMLW = @LIB_KHTMLW@
LIB_KIMGIO = @LIB_KIMGIO@
LIB_KIO = @LIB_KIO@
LIB_KPARTS = @LIB_KPARTS@
LIB_KSPELL = @LIB_KSPELL@
LIB_KSYCOCA = @LIB_KSYCOCA@
LIB_KWRITE = @LIB_KWRITE@
LIB_QT = @LIB_QT@
LIB_SMB = @LIB_SMB@
LIB_X11 = @LIB_X11@
LN_S = @LN_S@
MAKEINFO = @MAKEINFO@
MICO_INCLUDES = @MICO_INCLUDES@
MICO_LDFLAGS = @MICO_LDFLAGS@
MOC = @MOC@
MSGFMT = @MSGFMT@
NOOPT_CXXFLAGS = @NOOPT_CXXFLAGS@
NOREPO = @NOREPO@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PAMINC = @PAMINC@
PAMLIBPATHS = @PAMLIBPATHS@
PAMLIBS = @PAMLIBS@
PYTHONINC = @PYTHONINC@
PYTHONLIB = @PYTHONLIB@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
RANLIB = @RANLIB@
REPO = @REPO@
STRIP = @STRIP@
TOPSUBDIRS = @TOPSUBDIRS@
USER_INCLUDES = @USER_INCLUDES@
USER_LDFLAGS = @USER_LDFLAGS@
USE_EXCEPTIONS = @USE_EXCEPTIONS@
USE_RTTI = @USE_RTTI@
VERSION = @VERSION@
XGETTEXT = @XGETTEXT@
XPMINC = @XPMINC@
XPMLIB = @XPMLIB@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_INCLUDES = @X_INCLUDES@
X_LDFLAGS = @X_LDFLAGS@
X_PRE_LIBS = @X_PRE_LIBS@
all_includes = @all_includes@
all_libraries = @all_libraries@
idldir = @idldir@
kde_appsdir = @kde_appsdir@
kde_bindir = @kde_bindir@
kde_confdir = @kde_confdir@
kde_datadir = @kde_datadir@
kde_htmldir = @kde_htmldir@
kde_icondir = @kde_icondir@
kde_includes = @kde_includes@
kde_libraries = @kde_libraries@
kde_locale = @kde_locale@
kde_mimedir = @kde_mimedir@
kde_servicesdir = @kde_servicesdir@
kde_servicetypesdir = @kde_servicetypesdir@
kde_sounddir = @kde_sounddir@
kde_templatesdir = @kde_templatesdir@
kde_wallpaperdir = @kde_wallpaperdir@
micodir = @micodir@
qt_includes = @qt_includes@
qt_libraries = @qt_libraries@
x_includes = @x_includes@
x_libraries = @x_libraries@

INCLUDES = $(all_includes) -I$(top_srcdir)/kdevelop/lib

lib_LTLIBRARIES = libkdevprojectmanagement.la
libkdevprojectmanagement_la_LDFLAGS = $(all_libraries) -no-undefined -version-info 1:0 
libkdevprojectmanagement_la_LIBADD = $(LIB_KPARTS)

#>- METASOURCES = AUTO

libkdevprojectmanagement_la_SOURCES = appwizard.cpp  automakeprojectspace.cpp  cppbinaryprojectplugin.cpp 		plugin.cpp pmc.cpp project.cpp projectspace.cpp qobjectplugin.cpp 				registeredfile.cpp newprojectdlg.cpp pluginloader.cpp


noinst_HEADERS = appwizard.h  automakeprojectspace.h  cppbinaryprojectplugin.h 				 plugin.h pmc.h project.h projectspace.h qobjectplugin.h 				registeredfile.h newprojectdlg.h pluginloader.h

mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = ../../../config.h
CONFIG_CLEAN_FILES = 
LTLIBRARIES =  $(lib_LTLIBRARIES)


DEFS = @DEFS@ -I. -I$(srcdir) -I../../..
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
libkdevprojectmanagement_la_DEPENDENCIES = 
#>- libkdevprojectmanagement_la_OBJECTS =  appwizard.lo \
#>- automakeprojectspace.lo cppbinaryprojectplugin.lo plugin.lo pmc.lo \
#>- project.lo projectspace.lo qobjectplugin.lo registeredfile.lo \
#>- newprojectdlg.lo pluginloader.lo
#>+ 8
@KDE_USE_FINAL_FALSE@libkdevprojectmanagement_la_OBJECTS = appwizard.lo \
automakeprojectspace.lo cppbinaryprojectplugin.lo plugin.lo pmc.lo \
project.lo projectspace.lo qobjectplugin.lo registeredfile.lo \
newprojectdlg.lo pluginloader.lo\
pmc.moc.lo newprojectdlg.moc.lo automakeprojectspace.moc.lo appwizard.moc.lo projectspace.moc.lo qobjectplugin.moc.lo project.moc.lo  \
libkdevprojectmanagement_la_meta_unload.lo 
@KDE_USE_FINAL_TRUE@libkdevprojectmanagement_la_OBJECTS = libkdevprojectmanagement_la.all_cpp.lo 
libkdevprojectmanagement_la_final_OBJECTS = libkdevprojectmanagement_la.all_cpp.lo 
CXXFLAGS = @CXXFLAGS@
#>- CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 1
CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 1
LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@
#>+ 1
CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) $(LDFLAGS) -o $@
HEADERS =  $(noinst_HEADERS)

DIST_COMMON =  Makefile.am Makefile.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = tar
GZIP_ENV = --best
#>- DEP_FILES =  .deps/appwizard.P .deps/automakeprojectspace.P \
#>- .deps/cppbinaryprojectplugin.P .deps/newprojectdlg.P .deps/plugin.P \
#>- .deps/pluginloader.P .deps/pmc.P .deps/project.P .deps/projectspace.P \
#>- .deps/qobjectplugin.P .deps/registeredfile.P
#>+ 10
@KDE_USE_FINAL_TRUE@DEP_FILES =  $(DEPDIR)/pmc.moc.P $(DEPDIR)/newprojectdlg.moc.P $(DEPDIR)/automakeprojectspace.moc.P $(DEPDIR)/appwizard.moc.P $(DEPDIR)/projectspace.moc.P $(DEPDIR)/qobjectplugin.moc.P $(DEPDIR)/project.moc.P  $(DEPDIR)/libkdevprojectmanagement_la.all_cpp.P \
	  .deps/appwizard.P .deps/automakeprojectspace.P \
.deps/cppbinaryprojectplugin.P .deps/newprojectdlg.P .deps/plugin.P \
.deps/pluginloader.P .deps/pmc.P .deps/project.P .deps/projectspace.P \
.deps/qobjectplugin.P .deps/registeredfile.P
@KDE_USE_FINAL_FALSE@DEP_FILES =  $(DEPDIR)/pmc.moc.P $(DEPDIR)/newprojectdlg.moc.P $(DEPDIR)/automakeprojectspace.moc.P $(DEPDIR)/appwizard.moc.P $(DEPDIR)/projectspace.moc.P $(DEPDIR)/qobjectplugin.moc.P $(DEPDIR)/project.moc.P   .deps/appwizard.P .deps/automakeprojectspace.P \
.deps/cppbinaryprojectplugin.P .deps/newprojectdlg.P .deps/plugin.P \
.deps/pluginloader.P .deps/pmc.P .deps/project.P .deps/projectspace.P \
.deps/qobjectplugin.P .deps/registeredfile.P

SOURCES = $(libkdevprojectmanagement_la_SOURCES)
OBJECTS = $(libkdevprojectmanagement_la_OBJECTS)

#>- all: all-redirect
#>+ 1
all: docs-am  all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .cpp .lo .o .obj .s
$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
#>- 	cd $(top_srcdir) && $(AUTOMAKE) --gnu kdevelop/lib/projectmanagement/Makefile
#>+ 2
	cd $(top_srcdir) && $(AUTOMAKE) --gnu kdevelop/lib/projectmanagement/Makefile
	cd $(top_srcdir) && perl admin/am_edit kdevelop/lib/projectmanagement/Makefile.in

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-libLTLIBRARIES:

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)

distclean-libLTLIBRARIES:

maintainer-clean-libLTLIBRARIES:

install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libdir)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "$(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(libdir)/$$p"; \
	    $(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  $(LIBTOOL)  --mode=uninstall rm -f $(DESTDIR)$(libdir)/$$p; \
	done

# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

#>- libkdevprojectmanagement.la: $(libkdevprojectmanagement_la_OBJECTS) $(libkdevprojectmanagement_la_DEPENDENCIES)
#>+ 2
@KDE_USE_CLOSURE_TRUE@libkdevprojectmanagement.la: libkdevprojectmanagement.la.closure $(libkdevprojectmanagement_la_OBJECTS) $(libkdevprojectmanagement_la_DEPENDENCIES)
@KDE_USE_CLOSURE_FALSE@libkdevprojectmanagement.la: $(libkdevprojectmanagement_la_OBJECTS) $(libkdevprojectmanagement_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libkdevprojectmanagement_la_LDFLAGS) $(libkdevprojectmanagement_la_OBJECTS) $(libkdevprojectmanagement_la_LIBADD) $(LIBS)
.cpp.o:
	$(CXXCOMPILE) -c $<
.cpp.obj:
	$(CXXCOMPILE) -c `cygpath -w $<`
.cpp.lo:
	$(LTCXXCOMPILE) -c $<

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = kdevelop/lib/projectmanagement

distdir: $(DISTFILES)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(top_distdir) && pwd`; \
	distdir=`cd $(distdir) && pwd`; \
	cd $(top_srcdir) \
	  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnu kdevelop/lib/projectmanagement/Makefile
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done

DEPS_MAGIC := $(shell mkdir .deps > /dev/null 2>&1 || :)

-include $(DEP_FILES)

mostlyclean-depend:

clean-depend:

distclean-depend:
	-rm -rf .deps

maintainer-clean-depend:

%.o: %.c
	@echo '$(COMPILE) -c $<'; \
	$(COMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-cp .deps/$(*F).pp .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm .deps/$(*F).pp

%.lo: %.c
	@echo '$(LTCOMPILE) -c $<'; \
	$(LTCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-sed -e 's/^\([^:]*\)\.o[ 	]*:/\1.lo \1.o :/' \
	  < .deps/$(*F).pp > .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm -f .deps/$(*F).pp

%.o: %.cpp
	@echo '$(CXXCOMPILE) -c $<'; \
	$(CXXCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-cp .deps/$(*F).pp .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm .deps/$(*F).pp

%.lo: %.cpp
	@echo '$(LTCXXCOMPILE) -c $<'; \
	$(LTCXXCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-sed -e 's/^\([^:]*\)\.o[ 	]*:/\1.lo \1.o :/' \
	  < .deps/$(*F).pp > .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm -f .deps/$(*F).pp
info-am:
info: info-am
dvi-am:
dvi: dvi-am
check-am: all-am
check: check-am
installcheck-am:
installcheck: installcheck-am
install-exec-am: install-libLTLIBRARIES
install-exec: install-exec-am

install-data-am:
install-data: install-data-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-am
uninstall-am: uninstall-libLTLIBRARIES
uninstall: uninstall-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
all-redirect: all-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs:
	$(mkinstalldirs)  $(DESTDIR)$(libdir)


mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*

maintainer-clean-generic:
mostlyclean-am:  mostlyclean-libLTLIBRARIES mostlyclean-compile \
		mostlyclean-libtool mostlyclean-tags mostlyclean-depend \
		mostlyclean-generic

mostlyclean: mostlyclean-am

#>- clean-am:  clean-libLTLIBRARIES clean-compile clean-libtool clean-tags \
#>- 		clean-depend clean-generic mostlyclean-am
#>+ 2
clean-am: clean-metasources clean-moc-classes clean-final   clean-libLTLIBRARIES clean-compile clean-libtool clean-tags \
		clean-depend clean-generic mostlyclean-am

#>- clean: clean-am
#>+ 1
clean: kde-rpo-clean  clean-am

distclean-am:  distclean-libLTLIBRARIES distclean-compile \
		distclean-libtool distclean-tags distclean-depend \
		distclean-generic clean-am
	-rm -f libtool

distclean: distclean-am

maintainer-clean-am:  maintainer-clean-libLTLIBRARIES \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-tags maintainer-clean-depend \
		maintainer-clean-generic distclean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-am

.PHONY: mostlyclean-libLTLIBRARIES distclean-libLTLIBRARIES \
clean-libLTLIBRARIES maintainer-clean-libLTLIBRARIES \
uninstall-libLTLIBRARIES install-libLTLIBRARIES mostlyclean-compile \
distclean-compile clean-compile maintainer-clean-compile \
mostlyclean-libtool distclean-libtool clean-libtool \
maintainer-clean-libtool tags mostlyclean-tags distclean-tags \
clean-tags maintainer-clean-tags distdir mostlyclean-depend \
distclean-depend clean-depend maintainer-clean-depend info-am info \
dvi-am dvi check check-am installcheck-am installcheck install-exec-am \
install-exec install-data-am install-data install-am install \
uninstall-am uninstall all-redirect all-am all installdirs \
mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 3
pmc.moc.cpp: $(srcdir)/pmc.h
	$(MOC) $(srcdir)/pmc.h -o pmc.moc.cpp

#>+ 3
newprojectdlg.moc.cpp: $(srcdir)/newprojectdlg.h
	$(MOC) $(srcdir)/newprojectdlg.h -o newprojectdlg.moc.cpp

#>+ 3
automakeprojectspace.moc.cpp: $(srcdir)/automakeprojectspace.h
	$(MOC) $(srcdir)/automakeprojectspace.h -o automakeprojectspace.moc.cpp

#>+ 3
appwizard.moc.cpp: $(srcdir)/appwizard.h
	$(MOC) $(srcdir)/appwizard.h -o appwizard.moc.cpp

#>+ 3
projectspace.moc.cpp: $(srcdir)/projectspace.h
	$(MOC) $(srcdir)/projectspace.h -o projectspace.moc.cpp

#>+ 3
qobjectplugin.moc.cpp: $(srcdir)/qobjectplugin.h
	$(MOC) $(srcdir)/qobjectplugin.h -o qobjectplugin.moc.cpp

#>+ 3
project.moc.cpp: $(srcdir)/project.h
	$(MOC) $(srcdir)/project.h -o project.moc.cpp

#>+ 3
clean-metasources:
	-rm -f  pmc.moc.cpp newprojectdlg.moc.cpp automakeprojectspace.moc.cpp appwizard.moc.cpp projectspace.moc.cpp qobjectplugin.moc.cpp project.moc.cpp

#>+ 8
libkdevprojectmanagement.la.closure: $(libkdevprojectmanagement_la_OBJECTS) $(libkdevprojectmanagement_la_DEPENDENCIES)
	@echo "int main() {}" > libkdevprojectmanagement_la_closure.cpp
	@$(LTCXXCOMPILE) -c libkdevprojectmanagement_la_closure.cpp
	@$(CXXLINK) libkdevprojectmanagement_la_closure.lo $(libkdevprojectmanagement_la_LDFLAGS) $(libkdevprojectmanagement_la_OBJECTS) $(libkdevprojectmanagement_la_LIBADD) $(LIBS)
	@rm -f libkdevprojectmanagement_la_closure.* libkdevprojectmanagement.la.closure
	@echo "timestamp" > libkdevprojectmanagement.la.closure


#>+ 2
docs-am:

#>+ 5
force-reedit:
		cd $(top_srcdir) && $(AUTOMAKE) --gnu kdevelop/lib/projectmanagement/Makefile
	cd $(top_srcdir) && perl admin/am_edit kdevelop/lib/projectmanagement/Makefile.in


#>+ 15
libkdevprojectmanagement_la_meta_unload.cpp:  newprojectdlg.moc.cpp pmc.moc.cpp appwizard.moc.cpp automakeprojectspace.moc.cpp projectspace.moc.cpp project.moc.cpp qobjectplugin.moc.cpp
	@echo 'creating libkdevprojectmanagement_la_meta_unload.cpp'
	-rm -f libkdevprojectmanagement_la_meta_unload.cpp.new
	@echo 'static const char * _metalist_libkdevprojectmanagement_la[] = {' > libkdevprojectmanagement_la_meta_unload.cpp.new
	cat  newprojectdlg.moc.cpp pmc.moc.cpp appwizard.moc.cpp automakeprojectspace.moc.cpp projectspace.moc.cpp project.moc.cpp qobjectplugin.moc.cpp | grep 'char.*className' | sed -e 's/.*[^A-Za-z0-9_:]\([A-Za-z0-9_:]*\)::className.*$$/\"\1\",/' | sort | uniq >> libkdevprojectmanagement_la_meta_unload.cpp.new
	@echo '0};' >> libkdevprojectmanagement_la_meta_unload.cpp.new
	@echo '#include <kunload.h>' >> libkdevprojectmanagement_la_meta_unload.cpp.new
	@echo '_UNLOAD(libkdevprojectmanagement_la)' >> libkdevprojectmanagement_la_meta_unload.cpp.new
	if cmp -s libkdevprojectmanagement_la_meta_unload.cpp libkdevprojectmanagement_la_meta_unload.cpp.new 2>/dev/null; then\
	  rm -f libkdevprojectmanagement_la_meta_unload.cpp.new; \
	else\
	  rm -f libkdevprojectmanagement_la_meta_unload.cpp; \
	  mv libkdevprojectmanagement_la_meta_unload.cpp.new libkdevprojectmanagement_la_meta_unload.cpp; \
	fi

#>+ 3
clean-moc-classes:
	-rm -f  libkdevprojectmanagement_la_meta_unload.cpp

#>+ 11
libkdevprojectmanagement_la.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/appwizard.cpp $(srcdir)/automakeprojectspace.cpp $(srcdir)/cppbinaryprojectplugin.cpp $(srcdir)/plugin.cpp $(srcdir)/pmc.cpp $(srcdir)/project.cpp $(srcdir)/projectspace.cpp $(srcdir)/qobjectplugin.cpp $(srcdir)/registeredfile.cpp $(srcdir)/newprojectdlg.cpp $(srcdir)/pluginloader.cpp libkdevprojectmanagement_la_meta_unload.cpp  pmc.moc.cpp newprojectdlg.moc.cpp automakeprojectspace.moc.cpp appwizard.moc.cpp projectspace.moc.cpp qobjectplugin.moc.cpp project.moc.cpp
	@echo 'creating libkdevprojectmanagement_la.all_cpp.cpp ...'; \
	rm -f libkdevprojectmanagement_la.all_cpp.files libkdevprojectmanagement_la.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> libkdevprojectmanagement_la.all_cpp.final; \
	for file in appwizard.cpp automakeprojectspace.cpp cppbinaryprojectplugin.cpp plugin.cpp pmc.cpp project.cpp projectspace.cpp qobjectplugin.cpp registeredfile.cpp newprojectdlg.cpp pluginloader.cpp libkdevprojectmanagement_la_meta_unload.cpp  pmc.moc.cpp newprojectdlg.moc.cpp automakeprojectspace.moc.cpp appwizard.moc.cpp projectspace.moc.cpp qobjectplugin.moc.cpp project.moc.cpp; do \
	  echo "#include \"$$file\"" >> libkdevprojectmanagement_la.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> libkdevprojectmanagement_la.all_cpp.final; \
	done; \
	cat libkdevprojectmanagement_la.all_cpp.final libkdevprojectmanagement_la.all_cpp.files  > libkdevprojectmanagement_la.all_cpp.cpp; \
	rm -f libkdevprojectmanagement_la.all_cpp.final libkdevprojectmanagement_la.all_cpp.files

#>+ 3
clean-final:
	-rm -f libkdevprojectmanagement_la.all_cpp.cpp

#>+ 2
final:
	$(MAKE) libkdevprojectmanagement_la_OBJECTS="$(libkdevprojectmanagement_la_final_OBJECTS)" all-am
#>+ 3
cvs-clean:
	$(MAKE) -f $(top_srcdir)/admin/Makefile.common cvs-clean

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo
