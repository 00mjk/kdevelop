#! /bin/sh

# kdevassistant - temporary wrapper script for .libs/kdevassistant
# Generated by ltmain.sh - GNU libtool 1.5a (1.1240 2003/06/26 06:55:19)
#
# The kdevassistant program cannot be directly executed until all the libtool
# libraries that it depends on are installed.
#
# This wrapper script should never be moved out of the build directory.
# If it is, it will not operate correctly.

# Sed substitution that helps us do robust quoting.  It backslashifies
# metacharacters that are still active within double-quoted strings.
Xsed='/bin/sed -e 1s/^X//'
sed_quote_subst='s/\([\\`\\"$\\\\]\)/\\\1/g'

# The HP-UX ksh and POSIX shell print the target directory to stdout
# if CDPATH is set.
if test "${CDPATH+set}" = set; then CDPATH=:; export CDPATH; fi

relink_command="(cd /develop/kde/kdevelop/src; { test -z \"\${LIBRARY_PATH+set}\" || unset LIBRARY_PATH || { LIBRARY_PATH=; export LIBRARY_PATH; }; }; { test -z \"\${COMPILER_PATH+set}\" || unset COMPILER_PATH || { COMPILER_PATH=; export COMPILER_PATH; }; }; { test -z \"\${GCC_EXEC_PREFIX+set}\" || unset GCC_EXEC_PREFIX || { GCC_EXEC_PREFIX=; export GCC_EXEC_PREFIX; }; }; { test -z \"\${LD_RUN_PATH+set}\" || unset LD_RUN_PATH || { LD_RUN_PATH=; export LD_RUN_PATH; }; }; { test -z \"\${LD_LIBRARY_PATH+set}\" || unset LD_LIBRARY_PATH || { LD_LIBRARY_PATH=; export LD_LIBRARY_PATH; }; }; PATH=\"/opt/kde3.2/bin:/bin:/usr/bin:/usr/X11R6/bin:/usr/local/bin:/home/gremlin/bin:/usr/games:/opt/gnome/bin:/opt/kde3/bin:/usr/lib/SmallEiffel/bin:/usr/lib/java/bin:/opt/intel_cc_80/bin:/develop/kde/qt-copy/bin\"; export PATH; g++ -Wnon-virtual-dtor -Wno-long-long -Wundef -ansi -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -Wcast-align -Wconversion -Wchar-subscripts -Wall -W -Wpointer-arith -Wwrite-strings -O2 -Wformat-security -Wmissing-format-attribute -fno-exceptions -fno-check-new -fno-common -DQT_CLEAN_NAMESPACE -DQT_NO_ASCII_CAST -DQT_NO_STL -DQT_NO_COMPAT -DQT_NO_TRANSLATION -o \$progdir/\$file api.o core.o debugger.o documentationpart.o editorproxy.o generalinfowidget.o languageselectwidget.o mainwindow.o mainwindowshare.o newmainwindow.o partcontroller.o partselectwidget.o plugincontroller.o projectmanager.o projectsession.o settingswidget.o splashscreen.o statusbar.o toplevel.o main_assistant.o generalinfowidgetbase.o  -L/usr/X11R6/lib -L/develop/kde/qt-copy/lib -L/opt/kde3.2/lib ../lib/widgets/.libs/libwidgets.a ../lib/.libs/libkdevelop.so -L/usr/lib/mysql -L/usr/lib/pgsql -L/usr/lib /develop/kde/kdevelop/lib/widgets/propeditor/.libs/libkdevpropertyeditor.so /usr/lib/libexpat.so -lm -lc -lgcc_s /opt/kde3.2/lib/libktexteditor.so /opt/kde3.2/lib/libkhtml.so /usr/lib/libjpeg.so /opt/kde3.2/lib/libkjs.so /usr/lib/libpcreposix.so /usr/lib/libpcre.so /opt/kde3.2/lib/libkdeprint.so /opt/kde3.2/lib/libkwalletclient.so /opt/kde3.2/lib/libkmdi.so /opt/kde3.2/lib/libkutils.so /opt/kde3.2/lib/libkparts.so /opt/kde3.2/lib/libkio.so /opt/kde3.2/lib/libkdesu.so /usr/lib/libfam.so /opt/kde3.2/lib/libkdeui.so /opt/kde3.2/lib/libkdecore.so /opt/kde3.2/lib/libDCOP.so -lresolv -lutil /usr/lib/libart_lgpl_2.so /opt/kde3.2/lib/libkdefx.so /develop/kde/qt-copy/lib/libqt-mt.so /usr/lib/libGL.so -lXmu -lXrandr -lXcursor -lXinerama -lXft /usr/lib/libfreetype.so /usr/lib/libfontconfig.so -ldl -lpng -lz -lXext -lX11 -lSM -lICE -lpthread -lXrender /usr/lib/libstdc++.so -Wl,--rpath -Wl,/develop/kde/kdevelop/lib/.libs -Wl,--rpath -Wl,/develop/kde/kdevelop/lib/widgets/propeditor/.libs -Wl,--rpath -Wl,/opt/kde3.2/lib -Wl,--rpath -Wl,/develop/kde/qt-copy/lib -Wl,--rpath -Wl,/opt/kde3.2/lib -Wl,--rpath -Wl,/develop/kde/qt-copy/lib -Wl,--rpath -Wl,/usr/X11R6/lib)"

# This environment variable determines our operation mode.
if test "$libtool_install_magic" = "%%%MAGIC variable%%%"; then
  # install mode needs the following variable:
  notinst_deplibs=' ../lib/libkdevelop.la /develop/kde/kdevelop/lib/widgets/propeditor/libkdevpropertyeditor.la'
else
  # When we are sourced in execute mode, $file and $echo are already set.
  if test "$libtool_execute_magic" != "%%%MAGIC variable%%%"; then
    echo="echo"
    file="$0"
    # Make sure echo works.
    if test "X$1" = X--no-reexec; then
      # Discard the --no-reexec flag, and continue.
      shift
    elif test "X`($echo '\t') 2>/dev/null`" = 'X\t'; then
      # Yippee, $echo works!
      :
    else
      # Restart under the correct shell, and then maybe $echo will work.
      exec /bin/sh "$0" --no-reexec ${1+"$@"}
    fi
  fi

  # Find the directory that this script lives in.
  thisdir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`
  test "x$thisdir" = "x$file" && thisdir=.

  # Follow symbolic links until we get to the real thisdir.
  file=`ls -ld "$file" | /bin/sed -n 's/.*-> //p'`
  while test -n "$file"; do
    destdir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`

    # If there was a directory component, then change thisdir.
    if test "x$destdir" != "x$file"; then
      case "$destdir" in
      [\\/]* | [A-Za-z]:[\\/]*) thisdir="$destdir" ;;
      *) thisdir="$thisdir/$destdir" ;;
      esac
    fi

    file=`$echo "X$file" | $Xsed -e 's%^.*/%%'`
    file=`ls -ld "$thisdir/$file" | /bin/sed -n 's/.*-> //p'`
  done

  # Try to get the absolute directory name.
  absdir=`cd "$thisdir" && pwd`
  test -n "$absdir" && thisdir="$absdir"

  program=lt-'kdevassistant'
  progdir="$thisdir/.libs"

  if test ! -f "$progdir/$program" || \
     { file=`ls -1dt "$progdir/$program" "$progdir/../$program" 2>/dev/null | /bin/sed 1q`; \
       test "X$file" != "X$progdir/$program"; }; then

    file="$$-$program"

    if test ! -d "$progdir"; then
      mkdir "$progdir"
    else
      rm -f "$progdir/$file"
    fi

    # relink executable if necessary
    if test -n "$relink_command"; then
      if relink_command_output=`eval $relink_command 2>&1`; then :
      else
	echo "$relink_command_output" >&2
	rm -f "$progdir/$file"
	exit 1
      fi
    fi

    mv -f "$progdir/$file" "$progdir/$program" 2>/dev/null ||
    { rm -f "$progdir/$program";
      mv -f "$progdir/$file" "$progdir/$program"; }
    rm -f "$progdir/$file"
  fi

  if test -f "$progdir/$program"; then
    if test "$libtool_execute_magic" != "%%%MAGIC variable%%%"; then
      # Run the actual program with our arguments.

      exec $progdir/$program ${1+"$@"}

      $echo "$0: cannot exec $program ${1+"$@"}"
      exit 1
    fi
  else
    # The program doesn't exist.
    $echo "$0: error: $progdir/$program does not exist" 1>&2
    $echo "This script is just a wrapper for $program." 1>&2
    echo "See the libtool documentation for more information." 1>&2
    exit 1
  fi
fi
