/***************************************************************************
 *   Copyright (C) 2007 by Robert Gruber                                   *
 *   rgruber@users.sourceforge.net                                         *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef LOGVIEW_H
#define LOGVIEW_H

#include <QDialog>
#include <KJob>

#include "ui_logview.h"

class CvsPart;
class CvsJob;


/**
 * This is a helper class for the LogView::parseOutput() method.
 * It holds information about a single revision of a file.
 * @see LogView::parseOutput()
 */
class CvsRevision {
public:
    QString revision;
    QString date;
    QString user;
    QString log;
};

/**
 * Shows the output from @code cvs log @endcode in a nice way.
 * Create a CvsJob by calling CvsProxy::log() and connect the job's
 * result(KJob*) signal to LogView::slotJobFinished(KJob* job)
 * @author Robert Gruber <rgruber@users.sourceforge.net>
 */
class LogView : public QWidget, private Ui::LogViewBase
{
Q_OBJECT
public:
    explicit LogView(CvsPart* part, CvsJob* job=0, QWidget *parent = 0);
    virtual ~LogView();

    /**
     * Parses the output generated by a @code cvs log @endcode command and
     * fills the given QList with all revision infos found in the given output.
     * @param jobOutput Pass in the plain output of a @code cvs log @endcode job
     * @param revisions Will be filled with all revision infos found in @p jobOutput
     */
    static void parseOutput(const QString& jobOutput,
                        QList<CvsRevision>& revisions);

private slots:
    /**
     * Connect a job's result() signal to this slot. When called, the output from the job
     * will be passed to the parseOutput() method and all found revisions will be displayed.
     * @note If you pass a CvsJob object to the ctor, it's result() signal
     *       will automatically be connected to this slot.
     */
    void slotJobFinished(KJob* job);

private:
    CvsPart* m_part;
    QString m_output;
};

#endif
//kate: space-indent on; indent-width 4; replace-tabs on; auto-insert-doxygen on; indent-mode cstyle;
