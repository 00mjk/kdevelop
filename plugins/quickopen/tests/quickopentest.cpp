/*
 * Copyright <year> Milian Wolff <mail@milianw.de>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License or (at your option) version 3 or any later version
 * accepted by the membership of KDE e.V. (or its successor approved
 * by the membership of KDE e.V.), which shall act as a proxy
 * defined in Section 14 of version 3 of the license.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quickopentest.h"

#include <qtest_kde.h>

#include <tests/testcore.h>
#include <tests/autotestshell.h>

#include <language/interfaces/quickopenfilter.h>

QTEST_KDEMAIN(QuickOpenTest, NoGUI);

using namespace KDevelop;

class TestFilter : public FilterWithSeparator<QString>
{
public:
    virtual ~TestFilter() {}
    virtual QString itemText(const QString& data) const
    {
        return data;
    }
};

void QuickOpenTest::initTestCase()
{
    AutoTestShell::init();
    TestCore::initialize(Core::NoUi);
}

void QuickOpenTest::cleanupTestCase()
{
    TestCore::shutdown();
}

void QuickOpenTest::testSorting()
{
    QFETCH(QStringList, items);
    QFETCH(QString, filter);
    QFETCH(QStringList, filtered);

    TestFilter filterItems;
    filterItems.setItems(items);
    filterItems.setFilter(filter.split('/', QString::SkipEmptyParts), QChar('/'));
    QEXPECT_FAIL("bar7", "empty parts are skipped", Continue);
    QEXPECT_FAIL("prefer_start1", "not implemented", Continue);
    QEXPECT_FAIL("prefer_start2", "not implemented", Continue);
    QCOMPARE(QStringList(filterItems.filteredItems()), filtered);
}

void QuickOpenTest::testSorting_data()
{
    QTest::addColumn<QStringList>("items");
    QTest::addColumn<QString>("filter");
    QTest::addColumn<QStringList>("filtered");

    const QStringList items = QStringList()
        << "/foo/a.h"
        << "/foo/ab.h"
        << "/foo/bc.h"
        << "/bar/a.h";

    {
        QTest::newRow("no-filter") << items << QString() << items;
    }
    {
        const QStringList filtered = QStringList() << "/bar/a.h";
        QTest::newRow("bar1") << items << QString("bar") << filtered;
        QTest::newRow("bar2") << items << QString("/bar") << filtered;
        QTest::newRow("bar3") << items << QString("/bar/") << filtered;
        QTest::newRow("bar4") << items << QString("bar/") << filtered;
        QTest::newRow("bar5") << items << QString("ar/") << filtered;
        QTest::newRow("bar6") << items << QString("r/") << filtered;
        QTest::newRow("bar7") << items << QString("b/") << filtered;
        QTest::newRow("bar8") << items << QString("b/a") << filtered;
        QTest::newRow("bar9") << items << QString("b/a.h") << filtered;
        QTest::newRow("bar10") << items << QString("b/a.") << filtered;
    }
    {
        const QStringList filtered = QStringList() << "/foo/a.h" << "/foo/ab.h";
        QTest::newRow("foo_a1") << items << QString("foo/a") << filtered;
        QTest::newRow("foo_a2") << items << QString("/f/a") << filtered;
    }
    {
        const QStringList filtered = QStringList() << "/foo/a.h" << "/bar/a.h";
        QTest::newRow("a_h") << items << QString("a.h") << filtered;
    }
    {
        const QStringList base = QStringList() << "/foo/a_test" << "/foo/test_b_1" << "/foo/test_b";
        const QStringList sorted = QStringList() << "/foo/test_b" << "/foo/test_b_1";
        QTest::newRow("prefer_exact") << base << QString("test_b") << sorted;
    }
    {
        // from commit: 769491f06a4560a4798592ff060675ffb0d990a6
        const QString file = "/myProject/someStrangePath/anItem.cpp";
        const QStringList base = QStringList() << "/foo/a" << file;
        const QStringList filtered = QStringList() << file;
        QTest::newRow("strange") << base << QString("strange/item") << filtered;
    }
    {
        const QStringList base = QStringList() << "/foo/a_test" << "/foo/test_b_1" << "/foo/test_b";
        const QStringList sorted = QStringList() << "/foo/test_b" << "/foo/test_b_1" << "/foo/a_test";
        QTest::newRow("prefer_start1") << base << QString("test") << sorted;
        QTest::newRow("prefer_start2") << base << QString("foo/test") << sorted;
    }
}

#include "quickopentest.moc"
