/*
 * Copyright <year> Milian Wolff <mail@milianw.de>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License or (at your option) version 3 or any later version
 * accepted by the membership of KDE e.V. (or its successor approved
 * by the membership of KDE e.V.), which shall act as a proxy
 * defined in Section 14 of version 3 of the license.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quickopentest.h"
#include "../projectfilequickopen.h"

#include <qtest_kde.h>

#include <tests/testcore.h>
#include <tests/autotestshell.h>
#include <tests/testproject.h>

#include <language/interfaces/quickopenfilter.h>
#include <interfaces/iprojectcontroller.h>
#include <interfaces/idocumentcontroller.h>

QTEST_KDEMAIN(QuickOpenTest, GUI);

using namespace KDevelop;

class TestFilter : public FilterWithSeparator<QString>
{
public:
    virtual ~TestFilter() {}
    virtual QString itemText(const QString& data) const
    {
        return data;
    }
};

QuickOpenTest::QuickOpenTest(QObject* parent)
: QObject(parent)
, core(0)
, projectController(0)
{

}

void QuickOpenTest::initTestCase()
{
    AutoTestShell::init();
    TestCore::initialize(Core::Default);

    core = dynamic_cast<TestCore*>(TestCore::self());
    projectController = new TestProjectController(core);
    core->setProjectController(projectController);
}

void QuickOpenTest::cleanupTestCase()
{
    TestCore::shutdown();
}

void QuickOpenTest::cleanup()
{
    projectController->clearProjects();
}

void QuickOpenTest::testSorting()
{
    QFETCH(QStringList, items);
    QFETCH(QString, filter);
    QFETCH(QStringList, filtered);

    TestFilter filterItems;
    filterItems.setItems(items);
    filterItems.setFilter(filter.split('/', QString::SkipEmptyParts), QChar('/'));
    QEXPECT_FAIL("bar7", "empty parts are skipped", Continue);
    QCOMPARE(QStringList(filterItems.filteredItems()), filtered);
}

void QuickOpenTest::testSorting_data()
{
    QTest::addColumn<QStringList>("items");
    QTest::addColumn<QString>("filter");
    QTest::addColumn<QStringList>("filtered");

    const QStringList items = QStringList()
        << "/foo/a.h"
        << "/foo/ab.h"
        << "/foo/bc.h"
        << "/bar/a.h";

    {
        QTest::newRow("no-filter") << items << QString() << items;
    }
    {
        const QStringList filtered = QStringList() << "/bar/a.h";
        QTest::newRow("bar1") << items << QString("bar") << filtered;
        QTest::newRow("bar2") << items << QString("/bar") << filtered;
        QTest::newRow("bar3") << items << QString("/bar/") << filtered;
        QTest::newRow("bar4") << items << QString("bar/") << filtered;
        QTest::newRow("bar5") << items << QString("ar/") << filtered;
        QTest::newRow("bar6") << items << QString("r/") << filtered;
        QTest::newRow("bar7") << items << QString("b/") << filtered;
        QTest::newRow("bar8") << items << QString("b/a") << filtered;
        QTest::newRow("bar9") << items << QString("b/a.h") << filtered;
        QTest::newRow("bar10") << items << QString("b/a.") << filtered;
    }
    {
        const QStringList filtered = QStringList() << "/foo/a.h" << "/foo/ab.h";
        QTest::newRow("foo_a1") << items << QString("foo/a") << filtered;
        QTest::newRow("foo_a2") << items << QString("/f/a") << filtered;
    }
    {
        const QStringList filtered = QStringList() << "/foo/a.h" << "/bar/a.h";
        QTest::newRow("a_h") << items << QString("a.h") << filtered;
    }
    {
        const QStringList base = QStringList() << "/foo/a_test" << "/foo/test_b_1" << "/foo/test_b";
        const QStringList sorted = QStringList() << "/foo/test_b" << "/foo/test_b_1";
        QTest::newRow("prefer_exact") << base << QString("test_b") << sorted;
    }
    {
        // from commit: 769491f06a4560a4798592ff060675ffb0d990a6
        const QString file = "/myProject/someStrangePath/anItem.cpp";
        const QStringList base = QStringList() << "/foo/a" << file;
        const QStringList filtered = QStringList() << file;
        QTest::newRow("strange") << base << QString("strange/item") << filtered;
    }
    {
        const QStringList base = QStringList() << "/foo/a_test" << "/foo/test_b_1"
                                               << "/foo/test_b" << "/foo/test/a";
        const QStringList sorted = QStringList() << "/foo/test_b_1" << "/foo/test_b"
                                                 << "/foo/a_test" << "/foo/test/a";
        QTest::newRow("prefer_start1") << base << QString("test") << sorted;
        QTest::newRow("prefer_start2") << base << QString("foo/test") << sorted;
    }
}

TestProject* getProjectWithFiles(int files)
{
    TestProject* project = new TestProject;
    for(int i = 0; i < files; ++i) {
        project->addToFileSet(IndexedString(QString("/foo/bar/%1").arg(i)));
    }
    return project;
}

QStringList items(const ProjectFileDataProvider& provider)
{
    QStringList list;
    foreach(const QuickOpenDataPointer& data, provider.data(0, provider.itemCount())) {
        list << data->text();
    }
    return list;
}

void QuickOpenTest::testProjectFileFilter()
{
    TestProject* project = new TestProject;

    project->addToFileSet(IndexedString(QString("/foo/bar")));
    project->addToFileSet(IndexedString(QString("/foo/asdf")));
    project->addToFileSet(IndexedString(QString("/asdf/bar")));
    QTemporaryFile tmpFile;
    tmpFile.setFileTemplate("asdf");
    QVERIFY(tmpFile.open());
    project->addToFileSet(IndexedString(tmpFile.fileName()));
    QVERIFY(core->documentController()->openDocument(KUrl(tmpFile.fileName())));

    ProjectFileDataProvider provider;
    projectController->addProject(project);
    provider.reset();
    provider.setFilterText("/a");
    ///TODO: should the leading / be ignored or not?
    QCOMPARE(items(provider), QStringList() << "foo/asdf" << "asdf/bar" << "foo/bar");

    core->documentController()->closeAllDocuments();
    provider.reset();
    QCOMPARE(provider.itemCount(), uint(project->fileSet().size()));

    project->addToFileSet(IndexedString(QString("blub")));
    provider.reset();
    QCOMPARE(provider.itemCount(), uint(project->fileSet().size()));

    project->removeFromFileSet(IndexedString(QString("blub")));
    provider.reset();
    QCOMPARE(provider.itemCount(), uint(project->fileSet().size()));

    projectController->closeProject(project);
    provider.reset();
    QVERIFY(!provider.itemCount());
}

void QuickOpenTest::benchProjectFileFilter()
{
    QFETCH(int, files);
    QFETCH(QString, filter);

    ProjectFileDataProvider provider;
    QScopedPointer<TestProject> project(getProjectWithFiles(files));

    QBENCHMARK {
        projectController->addProject(project.data());
        provider.reset();
        provider.setFilterText(filter);
        projectController->takeProject(project.data());
    }
}

void QuickOpenTest::benchProjectFileFilter_data()
{
    QTest::addColumn<int>("files");
    QTest::addColumn<QString>("filter");

    QTest::newRow("001000_bar") << 1000 << "bar";
    QTest::newRow("010000_bar") << 10000 << "bar";
    QTest::newRow("100000_bar") << 100000 << "bar";
    QTest::newRow("001000_f/b") << 1000 << "f/b";
    QTest::newRow("010000_f/b") << 10000 << "f/b";
    QTest::newRow("100000_f/b") << 100000 << "f/b";
}

void QuickOpenTest::benchProjectFileFilterReset()
{
    ProjectFileDataProvider provider;
    TestProject* project = getProjectWithFiles(10000);

    projectController->addProject(project);
    QBENCHMARK {
        provider.reset();
    }
}

void QuickOpenTest::benchProjectFileFilterSetFilter()
{
    ProjectFileDataProvider provider;
    TestProject* project = getProjectWithFiles(10000);

    projectController->addProject(project);
    provider.reset();
    QBENCHMARK {
        provider.setFilterText(QString("f/b"));
        provider.setFilterText(QString(""));
    }
}

void QuickOpenTest::benchProjectFileProviderData()
{
    ProjectFileDataProvider provider;
    TestProject* project = getProjectWithFiles(1000);
    projectController->addProject(project);
    provider.reset();
    QCOMPARE(provider.itemCount(), 1000u);
    QBENCHMARK {
        QList< QuickOpenDataPointer > data = provider.data(10, 10+1);
        QVERIFY(!data.isEmpty());
        data.first()->text();
    }
}

#include "quickopentest.moc"
